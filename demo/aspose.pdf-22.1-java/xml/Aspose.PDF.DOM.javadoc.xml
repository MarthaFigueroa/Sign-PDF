<?xml version="1.0" encoding="UTF-8"?>

<doc>
  <assembly>
    <name>Aspose.PDF</name>
  </assembly>
  <members>
    <member name="T:com.aspose.pdf.AbsorbedCell">
       
        <p>Represents cell of table that exist on the page</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AbsorbedCell.getTextFragments">
       
        <p>Gets collection of {@code TextFragment} objects that describes text containing in the cell</p> @return TextFragmentCollection object
      
    </member>
    <member name="M:com.aspose.pdf.AbsorbedCell.getRectangle">
       
        <p>Gets rectangle that describes position of the cell on page</p> @return Rectangle object
      
    </member>
    <member name="T:com.aspose.pdf.AbsorbedColumn">
       
        <p>Represents column of table that exist on the page</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AbsorbedColumn.getCells">
       
        <p>Gets readonly IList containing cells of the column</p> @return List of AbsorbedCell objects
      
    </member>
    <member name="M:com.aspose.pdf.AbsorbedColumn.getRectangle">
       
        <p>Gets rectangle that describes position of the column on page</p> @return Rectangle object
      
    </member>
    <member name="T:com.aspose.pdf.AbsorbedRow">
       
        <p>Represents row of table that exist on the page</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AbsorbedRow.getCellList">
       
        <p>Gets readonly IList containing cells of the row</p> @return List of AbsorbedCell object
      
    </member>
    <member name="M:com.aspose.pdf.AbsorbedRow.getRectangle">
       
        <p>Gets rectangle that describes position of the row on page</p> @return Rectangle instance
      
    </member>
    <member name="T:com.aspose.pdf.AbsorbedTable">
       
        <p>Represents table that exist on the page</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AbsorbedTable.getRowList">&lt;p&gt; Gets readonly IList containing rows of the table &lt;/p&gt; @return {@code IGenericList&lt;AbsorbedRow&gt;} object</member>
    <member name="M:com.aspose.pdf.AbsorbedTable.getRectangle">
       
        <p>Gets rectangle that describes position of the table on page</p> @return Rectangle object
      
    </member>
    <member name="M:com.aspose.pdf.AbsorbedTable.getPageNum">
       
        <p>Gets number of the page containing this table</p> @return int value
      
    </member>
    <member name="T:com.aspose.pdf.ActionCollection">
       
        <p>Collection of actions</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ActionCollection.size">
       
        <p>Count of actions on the collection.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.ActionCollection.isSynchronized">
       
        <p>Returns true if object is synchronized.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.ActionCollection.getSyncRoot">
       
        <p>Gets synchronization object.</p> @return Object value
      
    </member>
    <member name="M:com.aspose.pdf.ActionCollection.isReadOnly">
       
        <p>Returns true if collection is readonly.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.ActionCollection.add(PdfAction)">
       
        <p>Adds new action into colleciton.</p> @param action Action which should be added.
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.ActionCollection.delete(int)">
       
        <p>Removes action from collection by index.</p> @param index Index of action to remove.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.ActionCollection.delete">
       
        <p>Delete all actions.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ActionCollection.copyTo(PdfAction[],int)">
       
        <p>Copies actions array into collection.</p> @param array Array of actions which must be copied into collection. @param index Index starting from which array will be copied.
      
      <param name="PdfAction[]"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.ActionCollection.iterator">
      / * 
        <p>/ * Returns enumerator for collection. / *</p> / * / * @return Collection enumerator. /
      
    </member>
    <member name="M:com.aspose.pdf.ActionCollection.clear">
       
        <p>Clear collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ActionCollection.contains(PdfAction)">
      Not supported yet. 
        <p>Returns true if give item presents in the collection.</p> @param item PdfAction instance Not implemented. @return boolean value Item to find.
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.ActionCollection.remove(PdfAction)">
      * Not supported yet. 
        <p>Removes item from collection.</p> @param item Item to delete. @return boolean value Not implemented.
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.ActionCollection.get_Item(int)">
       
        <p>Gets action by its index.</p> @param index Index of action. @return Retreived action.
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.AFRelationship">
       
        <p>Enumeration describes associated files relationship.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AFRelationship.Source">
       
        <p>Source</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AFRelationship.Data">
       
        <p>Data</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AFRelationship.Alternative">
       
        <p>Alternative</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AFRelationship.Supplement">
       
        <p>Supplement</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AFRelationship.Unspecified">
       
        <p>Unspecified</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AFRelationship.EncryptedPayload">
       
        <p>EncryptedPayload</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AFRelationship.None">
       
        <p>None</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Annotation">
       
        <p>Class representing annotation object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.initialize(IDocument)">
      Instance initialization @param doc IDocument object
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.getEngineObj">
      For Internal usage only @return Internal onject
    </member>
    <member name="M:com.aspose.pdf.Annotation.getEngineDict">
       
        <p>Internal only</p> @return IPdfDictionary object
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.isUpdateAppearanceOnConvert">
       
        <p>If true, annotation appearance will be updated before converting PF document into image. This allows convert fields correctly but probably demand more time.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.setUpdateAppearanceOnConvert(boolean)">
       
        <p>If true, annotation appearance will be updated before converting PF document into image. This allows convert fields correctly but probably demand more time.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.isUseFontSubset">
       
        <p>If this property set to true, fonts will be added to document as subsets. Default value is true.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.setUseFontSubset(boolean)">
       
        <p>If this property set to true, fonts will be added to document as subsets. Default value is true.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.getNormalAppearance">
       
        <p>Gets normal appearance.</p> @return XForm object
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.getFlags">
       
        <p>Get flags of the annotation.</p> @return Flags of the annotation @see AnnotationFlags
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.setFlags(int)">
       
        <p>Set flags of the annotation.</p> @param value flags of the annotation @see AnnotationFlags
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.getPage">
       
        <p>Gets the page object with which this annotation is associated.</p> @return Page object
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.getAnnotationType">
       
        <p>Gets type of annotation.</p> @return int value @see AnnotationType
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.getWidth">
       
        <p>Gets width of the annotation.</p> @return double value, width of the annotation.
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.setWidth(double)">
       
        <p>Sets width of the annotation.</p> @param value width of the annotation.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.getPdfActions">
       
        <p>Gets list of annotation actions.</p> @return PdfActionCollection instance
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.getHeight">
       
        <p>Gets height of the annotation.</p> @return height of the annotation
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.setHeight(double)">
       
        <p>Sets height of the annotation.</p> @param value height of the annotation
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.getRect">
       
        <p>Gets annotation rectangle.</p> @return Rectangle object
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.setRect(Rectangle)">
       
        <p>Sets annotation rectangle.</p> @param value Rectangle value
      
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.getRectangle(boolean)">
       
        <p>Returns rectangle of annotation taking into consideration page rotation.</p> @param considerRotation If true, page rotation is taken into consideration. @return Rectangle object
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.getContents">
       
        <p>Gets annotation text.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.setContents(String)">
       
        <p>Sets annotation text.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.getName">
       
        <p>Gets annotation name on the page.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.setName(String)">
       
        <p>Sets annotation name on the page.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.getModifiedInternal">
       
        <p>Gets date and time when annotation was recently modified.</p> @return DateTime object
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.getModified">
       
        <p>Gets date and time when annotation was recently modified.</p> @return date and time when annotation was recently modified.
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.setModifiedInternal(DateTime)">
       
        <p>Sets date and time when annotation was recently modified.</p> @param value DateTime object
      
      <param name="DateTime"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.setModified(java.util.Date)">
       
        <p>Sets date and time when annotation was recently modified.</p> @param value Date object
      
      <param name="java.util.Date"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.getColor">
       
        <p>Gets annotation color.</p> @return Color object
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.setColor(Color)">
       
        <p>Sets annotation color.</p> @param value Color value
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.getBorder">
       
        <p>Gets annotation border characteristics. {@code Border}</p> @return Border object
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.setBorder(Border)">
       
        <p>Sets annotation border characteristics. {@code Border}</p> @param value Border value
      
      <param name="Border"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.getActiveState">
       
        <p>Gets current annotation appearance state.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.setActiveState(String)">
       
        <p>Sets current annotation appearance state.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.getCharacteristics">
       
        <p>Gets annotation characteristics.</p> @return Characteristics object
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.getStates">
       
        <p>Gets appearance dictionary of annotation.</p> @return AppearanceDictionary object
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.getAlignment">
       
        <p>Annotation alignment. This property is obsolete. Use getHorizontalAlignment_Annotation_New instead.</p> @deprecated Use TextHorizontalAlignment property @return TextAlignment element @see TextAlignment
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.setAlignment(int)">
       
        <p>Annotation alignment. This property is obsolete. Use getHorizontalAlignment_Annotation_New instead.</p> @deprecated Use TextHorizontalAlignment property @param value TextAlignment element @see TextAlignment
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.getHorizontalAlignment_Annotation_New">
       
        <p>Gets or sets text alignment for annotation.</p> @deprecated Use TextHorizontalAlignment property @return text alignment for annotation. @see HorizontalAlignment
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.setHorizontalAlignment_Annotation_New(int)">
       
        <p>Gets or sets text alignment for annotation.</p> @deprecated Use TextHorizontalAlignment property @param value text alignmennt for annotation. @see HorizontalAlignment
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.getTextHorizontalAlignment">
       
        <p>Gets text alignment for annotation.</p> @return text alignment for annotation. @see HorizontalAlignment
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.setTextHorizontalAlignment(int)">
       
        <p>Sets text alignmennt for annotation.</p> @param value text alignmennt for annotation. @see HorizontalAlignment
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.createAnnotation(IPdfObject,Page)">
      For internal usage only 
        <p>Initializes annotation from PDF object which describes the annotation.</p> @param annotEngineObj PDF object describing annotation @param page Page object @return Created annotation object of appropriate type
      
      <param name="IPdfObject"/>
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor for annotation processing.</p> @param visitor AnnotationSelector object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.flatten">
       
        <p>Places annotation contents directly on the page, annotation object will be removed.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.getFullName">
       
        <p>Gets full qualified name of the annotation.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.getAppearance">
       
        <p>Gets appearance dictionary of the annotation.</p> @return AppearanceDictionary object
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.getPageIndex">
       
        <p>Gets index of page which contains annotation.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.getPageIndex(Annotation)">
       
        <p>Gets index of page which contains annotation.</p> @param annotation Annotation object @return int value
      
      <param name="Annotation"/>
    </member>
    <member name="T:com.aspose.pdf.AnnotationActionCollection">
       
        <p>Represents the collection of annotation actions.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.getOnEnter">
       
        <p>Gets an action to be performed when the cursor enters the annotation's active area.</p> @return PdfAction object
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.setOnEnter(PdfAction)">
       
        <p>Sets an action to be performed when the cursor enters the annotation's active area.</p> @param value PdfAction object
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.getOnExit">
       
        <p>Gets an action to be performed when the cursor exits the annotation's active area.</p> @return PdfAction object
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.setOnExit(PdfAction)">
       
        <p>Sets an action to be performed when the cursor exits the annotation's active area.</p> @param value PdfAction object
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.getOnPressMouseBtn">
       
        <p>Gets an action to be performed when the mouse button is pressed inside the annotation's active area.</p> @return PdfAction object
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.setOnPressMouseBtn(PdfAction)">
       
        <p>Sets an action to be performed when the mouse button is pressed inside the annotation's active area.</p> @param value PdfAction object
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.getOnReleaseMouseBtn">
       
        <p>Gets an action to be performed when the mouse button is released inside the annotation's active area.</p> @return PdfAction object
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.setOnReleaseMouseBtn(PdfAction)">
       
        <p>Sets an action to be performed when the mouse button is released inside the annotation's active area.</p> @param value PdfAction object
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.getOnReceiveFocus">
       
        <p>Gets an action to be performed when the annotation receives the input focus.</p> @return PdfAction object
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.setOnReceiveFocus(PdfAction)">
       
        <p>Sets an action to be performed when the annotation receives the input focus.</p> @param value PdfAction object
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.getOnOpenPage">
       
        <p>Gets an action to be performed when the page containing the annotation is opened.</p> @return PdfAction object
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.setOnOpenPage(PdfAction)">
       
        <p>Sets an action to be performed when the page containing the annotation is opened.</p> @param value PdfAction object
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.getOnClosePage">
       
        <p>Gets an action to be performed when the page containing the annotation is closed.</p> @return PdfAction object
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.setOnClosePage(PdfAction)">
       
        <p>Sets an action to be performed when the page containing the annotation is closed.</p> @param value PdfAction object
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.getOnShowPage">
       
        <p>Get an action to be performed when the page containing the annotation becomes visible in the viewer application's user interface.</p> @return PdfAction object
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.setOnShowPage(PdfAction)">
       
        <p>Sets an action to be performed when the page containing the annotation becomes visible in the viewer application's user interface.</p> @param value PdfAction object
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.getOnHidePage">
       
        <p>Gets an action to be performed when the page containing the annotation is no longer visible in the viewer application's user interface.</p> @return PdfAction object
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.setOnHidePage(PdfAction)">
       
        <p>Sets an action to be performed when the page containing the annotation is no longer visible in the viewer application's user interface.</p> @param value PdfAction object
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.getOnLostFocus">
       
        <p>Gets an action to be performed when the annotation loses the input focus.</p> @return PdfAction object
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.setOnLostFocus(PdfAction)">
       
        <p>Sets an action to be performed when the annotation loses the input focus.</p> @param value PdfAction object
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.getOnModifyCharacter">
       
        <p>Gets an action to be performed when user modifies character of the field.</p> @return action to be performed when user modifies character of the field.
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.setOnModifyCharacter(PdfAction)">
       
        <p>Sets an action to be performed when user modifies character of the field.</p> @param value action to be performed when user modifies character of the field.
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.getOnValidate">
       
        <p>Gets an action to be performed when user changes contents of the field.</p> @return action to be performed when user changes contents of the field.
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.setOnValidate(PdfAction)">
       
        <p>Sets an action to be performed when user changes contents of the field.</p> @param value action to be performed when user changes contents of the field.
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.getOnFormat">
       
        <p>Gets action to be performed to format field value.</p> @return action to be performed to format field value.
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.setOnFormat(PdfAction)">
       
        <p>Sets action to be performed to format field value.</p> @param value action to be performed to format field value.
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.getOnCalculate">
       
        <p>Gets an action to calculate field value.</p> @return action to calculate field value.
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.setOnCalculate(PdfAction)">
       
        <p>Sets an action to calculate field value.</p> @param value action to calculate field value.
      
      <param name="PdfAction"/>
    </member>
    <member name="T:com.aspose.pdf.AnnotationCollection">
       
        <p>Class representing annotation collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationCollection.isSynchronized">
       
        <p>Gets a value indicating whether access to the com.aspose.pdf.AnnotationCollection is synchronized (thread safe).</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationCollection.getSyncRoot">
       
        <p>Gets an object that can be used to synchronize access to com.aspose.pdf.AnnotationCollection.</p> @return Object for sinchronization
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationCollection.size">
       
        <p>Gets count of annotations in collection.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationCollection.isReadOnly">
       
        <p>Gets a value indicating if collection is readonly.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationCollection.add(Annotation,boolean)">
       
        <p>Adds annotation to the collection. If page is rotated then annotation rectangle will be recalculated accordingly.</p> @param annotation Annotation which shall be added. @param considerRotation If true and if page is rotated then annotation position will be recaculated accroding to page rotation.
      
      <param name="Annotation"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationCollection.add(Annotation)">
       
        <p>Adds annotation to the collection.</p> @param annotation Annotation which shall be added.
      
      <param name="Annotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationCollection.delete(int)">
       
        <p>Deletes annotation from the collection by index.</p> @param index Index of annotation which shall be deleted.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationCollection.delete">
       
        <p>Deletes all annotations from the collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationCollection.copyTo(Annotation[],int)">
       
        <p>Copies array of annotations into collection.</p> @param array Array to copy into collection. @param index Starting index where colleciton wil lbe copied.
      
      <param name="Annotation[]"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationCollection.iterator">
       
        <p>Returns collection enumerator.</p> @return Enumerator object
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationCollection.accept(AnnotationSelector)">
       
        <p>Accepts visitor to process annotation.</p> @param visitor Annotation selector object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationCollection.delete(Annotation)">
       
        <p>Deletes specified annotation from the collection.</p> @param annotation Annotation which shall be deleted.
      
      <param name="Annotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationCollection.clear">
       
        <p>Deletes all annotations from the collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationCollection.contains(Annotation)">
       
        <p>Checks if specified annotation belong to collection.</p> @param annotation Annotation to be searched. @return boolean value True - if annotation found; otherwise, false.
      
      <param name="Annotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationCollection.remove(Annotation)">
       
        <p>Deletes specified annotation from the collection.</p> @param annotation Annotation which shall be deleted. @return boolean value True - if annotation found; otherwise, false.
      
      <param name="Annotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationCollection.get_Item(int)">
       
        <p>The index of the element to get.</p> @param index The index value started from one. @return Annotation object
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationCollection.findByName(String)">
       
        <p>Returns annotation by its name.</p> @return Annotation object if found; otherwise, null. @param name Name of the annotation
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationCollection.#ctor(Page)">
       
        <p>Constructor of AnnotationCollection. Creates annotation collection for annotations on the given page.</p> @param page Parent page of annotations.
      
      <param name="Page"/>
    </member>
    <member name="T:com.aspose.pdf.AnnotationFlags">
       
        <p>A set of flags specifying various characteristics of the annotation.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationFlags.Default">
       
        <p>Default value.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationFlags.Invisible">
       
        <p>If set, do not display the annotation if it does not belong to one of the standard annotation types and no annotation handler is available. If clear, display such an unknown annotation using an appearance stream specified by its appearance dictionary, if any.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationFlags.Hidden">
       
        <p>If set, do not display or print the annotation or allow it to interact with the user, regardless of its annotation type or whether an annotation handler is available. In cases where screen space is limited, the ability to hide and show annotations selectively can be used in combination with appearance streams to display auxiliary pop-up information similar in function to online help systems.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationFlags.Print">
       
        <p>If set, print the annotation when the page is printed. If clear, never print the annotation, regardless of whether it is displayed on the screen. This can be useful, for example, for annotations representing interactive pushbuttons, which would serve no meaningful purpose on the printed page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationFlags.NoZoom">
       
        <p>If set, do not scale the annotation's appearance to match the magnification of the page. The location of the annotation on the page (defined by the upper-left corner of its annotation rectangle) remains fixed, regardless of the page magnification.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationFlags.NoRotate">
       
        <p>If set, do not rotate the annotation's appearance to match the rotation of the page. The upper-left corner of the annotation rectangle remains in a fixed location on the page, regardless of the page rotation.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationFlags.NoView">
       
        <p>If set, do not display the annotation on the screen or allow it to interact with the user. The annotation may be printed (depending on the setting of the Print flag) but should be considered hidden for purposes of on-screen display and user interaction.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationFlags.ReadOnly">
       
        <p>If set, do not allow the annotation to interact with the user. The annotation may be displayed or printed (depending on the settings of the NoView and Print flags) but should not respond to mouse clicks or change its appearance in response to mouse motions. This flag is ignored for widget annotations; its function is subsumed by the ReadOnly flag of the associated form field.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationFlags.Locked">
       
        <p>If set, do not allow the annotation to be deleted or its properties (including position and size) to be modified by the user. However, this flag does not restrict changes to the annotation's contents, such as the value of a form field.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationFlags.ToggleNoView">
       
        <p>If set, invert the interpretation of the NoView flag for certain events. A typical use is to have an annotation that appears only when a mouse cursor is held over it.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationFlags.LockedContents">
       
        <p>If set, do not allow the contents of the annotation to be modified by the user. This flag does not restrict deletion of the annotation or changes to other annotation properties, such as position and size.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.AnnotationSelector">
       
        <p>This class is used for selecting annotations using Visitor template idea.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.getSelected">
       
        <p>The list of selected objects.</p> @return List of Annotation instances
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(LinkAnnotation)">
       
        <p>Select link annotation if AnnotationSelector was initialized with LinkAnnotation object.</p> @param link LinkAnnotation object for selecting.
      
      <param name="LinkAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(FileAttachmentAnnotation)">
       
        <p>Select attachment annotation if AnnotationSelector was initialized with FileAttachmentAnnotation object.</p> @param attachment FileAttachmentAnnotation object for selecting.
      
      <param name="FileAttachmentAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(TextAnnotation)">
       
        <p>Select text annotation if AnnotationSelector was initialized with TextAnnotation object.</p> @param text TextAnnotation object for selecting.
      
      <param name="TextAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(RedactionAnnotation)">
       
        <p>Select redact annotation if AnnotationSelector was initialized with RedactAnnotation object.</p> @param redact RedactAnnotation object for selecting.
      
      <param name="RedactionAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(FreeTextAnnotation)">
       
        <p>Select freetext annotation if AnnotationSelector was initialized with FreeTextAnnotation object.</p> @param freetext FreeTextAnnotation object for selecting.
      
      <param name="FreeTextAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(HighlightAnnotation)">
       
        <p>Select attachment annotation if AnnotationSelector was initialized with FreeTextAnnotation object.</p> @param highlight HighlightAnnotation object for selecting.
      
      <param name="HighlightAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(UnderlineAnnotation)">
       
        <p>Select underline annotation if AnnotationSelector was initialized with UnderlineAnnotation object.</p> @param underline UnderlineAnnotation object for selecting.
      
      <param name="UnderlineAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(StrikeOutAnnotation)">
       
        <p>Select strikeOut annotation if AnnotationSelector was initialized with StrikeOutAnnotation object.</p> @param strikeOut StrikeOutAnnotation object for selecting.
      
      <param name="StrikeOutAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(SquigglyAnnotation)">
       
        <p>Select squiggly annotation if AnnotationSelector was initialized with SquigglyAnnotation object.</p> @param squiggly SquigglyAnnotation object for selecting.
      
      <param name="SquigglyAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(PopupAnnotation)">
       
        <p>Select popup annotation if AnnotationSelector was initialized with PopupAnnotation object.</p> @param popup PopupAnnotation object for selecting.
      
      <param name="PopupAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(LineAnnotation)">
       
        <p>Select line annotation if AnnotationSelector was initialized with LineAnnotation object.</p> @param line LineAnnotation object for selecting.
      
      <param name="LineAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(CircleAnnotation)">
       
        <p>Select circle annotation if AnnotationSelector was initialized with CircleAnnotation object.</p> @param circle CircleAnnotation object for selecting.
      
      <param name="CircleAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(SquareAnnotation)">
       
        <p>Select square annotation if AnnotationSelector was initialized with SquareAnnotation object.</p> @param square SquareAnnotation object for selecting.
      
      <param name="SquareAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(InkAnnotation)">
       
        <p>Select ink annotation if AnnotationSelector was initialized with InkAnnotation object.</p> @param ink InkAnnotation object for selecting.
      
      <param name="InkAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(PolylineAnnotation)">
       
        <p>Select polyline annotation if AnnotationSelector was initialized with PolylineAnnotation object.</p> @param polyline PolylineAnnotation object for selecting.
      
      <param name="PolylineAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(PolygonAnnotation)">
       
        <p>Select polygon annotation if AnnotationSelector was initialized with PolygonAnnotation object.</p> @param polygon PolygonAnnotation object for selecting.
      
      <param name="PolygonAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(CaretAnnotation)">
       
        <p>Select caret annotation if AnnotationSelector was initialized with CaretAnnotation object.</p> @param caret CaretAnnotation object for selecting.
      
      <param name="CaretAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(StampAnnotation)">
       
        <p>Select stamp annotation if AnnotationSelector was initialized with StampAnnotation object.</p> @param stamp StampAnnotation object for selecting.
      
      <param name="StampAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(WidgetAnnotation)">
       
        <p>Select widget annotation if AnnotationSelector was initialized with WidgetAnnotation object.</p> @param widget WidgetAnnotation object for selecting.
      
      <param name="WidgetAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(WatermarkAnnotation)">
       
        <p>Select watermark annotation if AnnotationSelector was initialized with WatermarkAnnotation object.</p> @param watermark WatermarkAnnotation for selecting.
      
      <param name="WatermarkAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(MovieAnnotation)">
       
        <p>Select movie annotation if AnnotationSelector was initialized with MovieAnnotation object.</p> @param movie MovieAnnotation object for selecting.
      
      <param name="MovieAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(RichMediaAnnotation)">
       
        <p>Select movie annotation if AnnotationSelector was initialized with RichMedia annotation object.</p> @param richMedia RichMedia annotation.
      
      <param name="RichMediaAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(ScreenAnnotation)">
       
        <p>Select screen annotation if AnnotationSelector was initialized with ScreenAnnotation object.</p> @param screen ScreenAnnotation object for selecting.
      
      <param name="ScreenAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(PDF3DAnnotation)">
       
        <p>Select PDF3D annotation if AnnotationSelector was initialized with PDF3DAnnotation object.</p> @param pdf3D PDF3DAnnotation object for selecting.
      
      <param name="PDF3DAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.#ctor">
       
        <p>Initializes new instance of the AnnotationSelector class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.#ctor(Annotation)">
       
        <p>Initializes new {@code AnnotationSelector} object.</p> @param annotation Annotation to be selected. This object only describes some characteristics we want found annotations to have, e.g. the type of annotation.
      
      <param name="Annotation"/>
    </member>
    <member name="T:com.aspose.pdf.AnnotationState">
       
        <p>The enumeration of states to which the original annotation can be set.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationState.Undefined">
       
        <p>Not defined state.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationState.Marked">
       
        <p>The annotation has been marked by the user.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationState.Unmarked">
       
        <p>The annotation has not been marked by the user.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationState.Accepted">
       
        <p>The user agrees with the change.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationState.Rejected">
       
        <p>The user disagrees with the change.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationState.Cancelled">
       
        <p>The change has been cancelled.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationState.Completed">
       
        <p>The change has been completed.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationState.None">
       
        <p>The user has indicated nothing about the change.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.AnnotationStateModel">
       
        <p>The state model corresponding to state of annotation.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationStateModel.Undefined">
       
        <p>Not defined state model.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationStateModel.Marked">
       
        <p>The annotation has been marked (or unmarked) by the user.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationStateModel.Review">
       
        <p>The annotation has been reviewed (accepted, rejected, cancelled, completed, none) by the user.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.AnnotationType">
       
        <p>Enumeration of annotation types.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Text">
       
        <p>Text annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Circle">
       
        <p>Circle annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Polygon">
       
        <p>Polygon annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.PolyLine">
       
        <p>Polyline annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Line">
       
        <p>Line annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Square">
       
        <p>Square annotatotion type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.FreeText">
       
        <p>Free text annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Highlight">
       
        <p>Highlight annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Underline">
       
        <p>Underline annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Squiggly">
       
        <p>Squiggle annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.StrikeOut">
       
        <p>Strikeout annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Caret">
       
        <p>Caret annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Ink">
       
        <p>Ink annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Link">
       
        <p>Link annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Popup">
       
        <p>Popup annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.FileAttachment">
       
        <p>File attachment annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Sound">
       
        <p>Sound annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Movie">
       
        <p>Movie annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Screen">
       
        <p>Screen annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Widget">
       
        <p>Widget annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Watermark">
       
        <p>Watermark annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.TrapNet">
       
        <p>Trap network annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.PrinterMark">
       
        <p>Printer mark annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Redaction">
       
        <p>Redaction annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Stamp">
       
        <p>Rubber stamp annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.RichMedia">
       
        <p>Rich media annotation type</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Unknown">
       
        <p>Unknown annotation.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.PDF3D">
       
        <p>PDF3D annotation</p> 
      
    </member>
    <member name="T:com.aspose.pdf.AnnotationTypeConverter">
      Represents AnnotationTypeConverter class
    </member>
    <member name="M:com.aspose.pdf.AnnotationTypeConverter.toString(int)">
      Converts the AnnotationType constant into its string value @param value AnnotationType element @return string value @see AnnotationType
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationTypeConverter.toEnum(String)">
      Converts the AnnotationType string value into its constant value @param value AnnotationType string name @return AnnotationType constant value
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.AppearanceDictionary">
       
        <p>Annotation appearance dictionary specifying how the annotation shall be presented visually on the page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.getDict">
       
        <p>Gets pdf dictionary</p> @return IPdfDictionary object
      
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.isReadOnly">
       
        <p>Gets a value indicating whether dictionary is read-only.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.isFixedSize">
       
        <p>Gets a value indicating whether dictionary has a fixed size.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.getKeys">
       
        <p>Gets keys of the dictionary. If appearance dictionary has subditionaries, then {@code Keys} contains (N|R|D).state values, where N - normal appearance, R - rollover appearance, D - down appearance and state - the name of the state (e.g. On, Off for checkboxes).</p> @return List of String values
      
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.getKeys_">
       
        <p>Gets keys of the dictionary. If appearance dictionary has subditionaries, then {@code Keys} contains (N|R|D).state values, where N - normal appearance, R - rollover appearance, D - down appearance and state - the name of the state (e.g. On, Off for checkboxes).</p> @return List of String values
      
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.getValues">
       
        <p>Gets the list of the dictionary values. Result collection contains the list of XForm objects.</p> @return List of XForm values
      
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.getValues_">
       
        <p>Gets the list of the dictionary values. Result collection contains the list of XForm objects.</p> @return List of XForm values
      
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.isSynchronized">
       
        <p>Gets a value indicating whether access to the dictionary is synchronized (thread safe).</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.getSyncRoot">
       
        <p>Gets an object that can be used to synchronize access to the dictionary.</p> @return Object for synchronization
      
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.size">
       
        <p>Gets the number of elements contained in the dictionary.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.clear">
       
        <p>Removes all elements from the dictionary.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.add(Object,Object)">
       
        <p>Adds an element with the provided key and value.</p> @param key Element key. @param value Element value.
      
      <param name="Object"/>
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.iterator">
       
        <p>Returns an IDictionaryEnumerator object for the dictionary.</p> @return Enumerator of the dictionary.
      
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.copyTo(XForm[],int)">
      / * 
        <p>/ * Returns an IDictionaryEnumerator object for the dictionary. / *</p> / * / * @return Enumerator of the dictionary. /
      
      <param name="XForm[]"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.get_Item(String)">
       
        <p>Represents convenient form for getting appearance streams.</p> @param key Represents path to appearance stream. If appearance dictionary has subdictionaries, then path must contain 2 parts ({@code Keys}), else path has only one part. @return XForm object (appearance stream) which corresponds to the given key.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.set_Item(String,XForm)">
      <param name="String"/>
      <param name="XForm"/>
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.addItem(String,XForm)">
       
        <p>Add X form for specifed key.</p> @param key Element key. @param value XForm object value.
      
      <param name="String"/>
      <param name="XForm"/>
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.containsKey(String)">
       
        <p>Determines does this dictionary contasins specified key.</p> @param key Key to search in the dictionary. @return true if key is found.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.removeItemByKey(String)">
       
        <p>Removes key from the dictionary.</p> @param key Key to be removed from the dictionary. @return true if key was successfully removed.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.tryGetValue(String,Object[])">
       
        <p>Tries to find key in the dictionary and retreives value if found.</p> @param key Key to search in the dictionary. @param value Retreived value. @return true if key was found.
      
      <param name="String"/>
      <param name="Object[]"/>
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.addItem(KeyValuePair&lt;String, XForm&gt;)">/ * &lt;p&gt; / * Gets collection of values in the dictionary. / * &lt;/p&gt; / * / * @return {@code IDictionary&lt;String, XForm&gt;} object / 
      <param name="KeyValuePair&lt;String, XForm&gt;"/>
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.containsItem(KeyValuePair&lt;String, XForm&gt;)">
       
        <p>Checks does specified key-value pair is contained in the dictionary.</p> @param item Key-value pair. @return true if this pauir was found.
      
      <param name="KeyValuePair&lt;String, XForm&gt;"/>
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.copyToTArray(KeyValuePair&lt;String, XForm&gt;[],int)">
       
        <p>Copies the elements of the ICollection to an Array, starting at a particular Array index.</p> @param array The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing. @param arrayIndex The zero-based index in array at which copying begins.
      
      <param name="KeyValuePair&lt;String, XForm&gt;[]"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.removeItem(KeyValuePair&lt;String, XForm&gt;)">
       
        <p>Removes key/value pair from the collection.</p> @param item Key/value pair to be removed. @return true if pair was found and removed.
      
      <param name="KeyValuePair&lt;String, XForm&gt;"/>
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.iterator__Rename_Namesake">
       
        <p>Enumerator for the collection.</p> @return enumerator of the collection items.
      
    </member>
    <member name="T:com.aspose.pdf.ApsLoadOptions">
       
        <p>Class describes aps load options. Option for import from APS XML format.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ApsLoadOptions.#ctor">
       
        <p>Default constructor.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.ApsSaveOptions">
       
        <p>Save options for export to APS XML format.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ApsSaveOptions.#ctor">
       
        <p>Constructor of APsSaveOptions class.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.ApsToFlowConverter">
      APS to Flow Conversion * !!! Don't port from C# as could be ahead of .Net version !!!!
    </member>
    <member name="M:com.aspose.pdf.ApsToFlowConverter.getImages"/>
    <member name="M:com.aspose.pdf.ApsToFlowConverter.getTextFragments"/>
    <member name="M:com.aspose.pdf.ApsToFlowConverter.visitPageStart(ApsPage)">
      <param name="ApsPage"/>
    </member>
    <member name="M:com.aspose.pdf.ApsToFlowConverter.visitPageEnd(ApsPage)">
      <param name="ApsPage"/>
    </member>
    <member name="M:com.aspose.pdf.ApsToFlowConverter.render(ApsNode)">
       
        <p>Renders a layout node and all its contents into a Excel document.</p> @param node The aps node.
      
      <param name="ApsNode"/>
    </member>
    <member name="M:com.aspose.pdf.ApsToFlowConverter.visitGlyphs(ApsGlyphs)">
       
        <p>Visits the glyphs.</p> @param glyphs Internal instance
      
      <param name="ApsGlyphs"/>
    </member>
    <member name="M:com.aspose.pdf.ApsToFlowConverter.visitPathStart(ApsPath)">
      <param name="ApsPath"/>
    </member>
    <member name="M:com.aspose.pdf.ApsToFlowConverter.visitPathEnd(ApsPath)">
      <param name="ApsPath"/>
    </member>
    <member name="M:com.aspose.pdf.ApsToFlowConverter.visitPathFigureEnd(ApsPathFigure)">
      <param name="ApsPathFigure"/>
    </member>
    <member name="M:com.aspose.pdf.ApsToFlowConverter.visitPathFigureStart(ApsPathFigure)">
      <param name="ApsPathFigure"/>
    </member>
    <member name="M:com.aspose.pdf.ApsToFlowConverter.visitPolyLineSegment(ApsPolyLineSegment)">
      <param name="ApsPolyLineSegment"/>
    </member>
    <member name="M:com.aspose.pdf.ApsToFlowConverter.visitBezierSegment(ApsBezierSegment)">
      <param name="ApsBezierSegment"/>
    </member>
    <member name="M:com.aspose.pdf.ApsToFlowConverter.visitImage(ApsImage)">
       
        <p>Visits the image.</p> @param image The image.
      
      <param name="ApsImage"/>
    </member>
    <member name="M:com.aspose.pdf.ApsToFlowConverter.saveDocument(OfficeConverterOptions,Stream)">
      <param name="OfficeConverterOptions"/>
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.ApsToFlowConverter.#ctor(com.aspose.foundation.DocumentInfo,ExcelSaveOptions)">
      <param name="com.aspose.foundation.DocumentInfo"/>
      <param name="ExcelSaveOptions"/>
    </member>
    <member name="T:com.aspose.pdf.ApsUsingConverter">
       
        <p>Class for Internal usage only.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ApsUsingConverter.applyXslTransformationAndGetResultAsUtf8Stream(Stream,Stream,String)">
       
        <p>This method applies XSLT-transformation to source XML(XSLFO) - text</p> @return MemoryStream object @param inputXmlStream Stream object @param xslStream Stream object @param fileIfAnyToSaveResultOfAppliyng String object
      
      <param name="Stream"/>
      <param name="Stream"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.ApsUsingConverter.ImportResourceLoader"/>
    <member name="M:com.aspose.pdf.ApsUsingConverter.ImportResourceLoader.#ctor"/>
    <member name="T:com.aspose.pdf.Artifact">
       
        <p>Class represents PDF Artifact object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Artifact.getCustomType">
       
        <p>Gets name of artifact type. May be used if artifact type is non standard.</p> @return String artifact name
      
    </member>
    <member name="M:com.aspose.pdf.Artifact.setCustomType(String)">
       
        <p>Sets name of artifact type. May be used if artifact type is non standard.</p> @param value String artifact name
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.getCustomSubtype">
       
        <p>Gets name of artifact subtype. May be used if artifact subtype is not standard subtype.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.Artifact.setCustomSubtype(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.getType">
       
        <p>Gets artifact type.</p> @return artifact type value. @see ArtifactType
      
    </member>
    <member name="M:com.aspose.pdf.Artifact.setType(int)">
       
        <p>Sets artifact type.</p> @param value artifact type. @see ArtifactType
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.getSubtype">
       
        <p>Gets artifact subtype. If artifact has non-standard subtype, name of the subtype may be read via CustomSubtype.</p> @return artifact subtype. @see ArtifactSubtype
      
    </member>
    <member name="M:com.aspose.pdf.Artifact.setSubtype(int)">
       
        <p>Sets artifact subtype. If artifact has non-standard subtype, name of the subtype may be read via CustomSubtype.</p> @param value artifact subtype. @see ArtifactSubtype
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.getContents">
       
        <p>Gets collection of artifact internal operators.</p> @return list artifact internal operators.
      
    </member>
    <member name="M:com.aspose.pdf.Artifact.getForm">
       
        <p>Gets XForm of the artifact (if XForm is used).</p> @return XForm object
      
    </member>
    <member name="M:com.aspose.pdf.Artifact.getRectangle">
       
        <p>Gets rectangle of the artifact.</p> @return Rectangle object
      
    </member>
    <member name="M:com.aspose.pdf.Artifact.getPosition">
       
        <p>Gets artifact position. If this property is specified, then margins and alignments are ignored.</p> @return artifact position.
      
    </member>
    <member name="M:com.aspose.pdf.Artifact.setPosition(Point)">
       
        <p>Sets artifact position.</p> @param value artifact position.
      
      <param name="Point"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.getRightMargin">
       
        <p>Gets right margin of artifact. If position is specified explicitly (in Position property) this value is ignored.</p> @return right margin of artifact.
      
    </member>
    <member name="M:com.aspose.pdf.Artifact.setRightMargin(double)">
       
        <p>Sets right margin of artifact.</p> @param value right margin of artifact.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.getLeftMargin">
       
        <p>Gets left margin of artifact. If position is specified explicitly (in Position property) this value is ignored.</p> @return left margin of artifact.
      
    </member>
    <member name="M:com.aspose.pdf.Artifact.setLeftMargin(double)">
       
        <p>Sets left margin of artifact. If position is specified explicitly (in Position property) this value is ignored.</p> @param value left margin of artifact.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.getTopMargin">
       
        <p>Gets top margin of artifact. If position is specified explicitly (in Position property) this value is ignored.</p> @return top margin of artifact.
      
    </member>
    <member name="M:com.aspose.pdf.Artifact.setTopMargin(double)">
       
        <p>Sets top margin of artifact.</p> @param value top margin of artifact.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.getBottomMargin">
       
        <p>Gets bottom margin of artifact. If position is specified explicitly (in Position property) this value is ignored.</p> @return bottom margin.
      
    </member>
    <member name="M:com.aspose.pdf.Artifact.setBottomMargin(double)">
       
        <p>Sets bottom margin of artifact.</p> @param value bottom margin.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.getArtifactHorizontalAlignment">
       
        <p>Gets horizontal alignment of artifact. If position is specified explicitly (in Position property) this value is ignored.</p> @return HorizontalAlignment value @see HorizontalAlignment
      
    </member>
    <member name="M:com.aspose.pdf.Artifact.setArtifactHorizontalAlignment(int)">
       
        <p>Gets horizontal alignment of artifact.</p> @param value horizontal alignment of artifact. @see HorizontalAlignment
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.getArtifactVerticalAlignment">
       
        <p>Gets vertical alignment of artifact. If position is specified explicitly (in Position property) this value is ignored.</p> @return VerticalAlignment value. @see VerticalAlignment
      
    </member>
    <member name="M:com.aspose.pdf.Artifact.setArtifactVerticalAlignment(int)">
       
        <p>Sets vertical alignment of artifact.</p> @param value vertical alignment of artifact. @see VerticalAlignment
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.getRotation">
       
        <p>Gets artifact rotation angle.</p> @return artifact rotation angle.
      
    </member>
    <member name="M:com.aspose.pdf.Artifact.setRotation(double)">
       
        <p>Sets artifact rotation angle.</p> @param value artifact rotation angle.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.getText">
       
        <p>Gets text of the artifact.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.Artifact.setText(String)">
       
        <p>Sets text of the artifact.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.getImage">
      Gets image of the artifact (if presents). @return XImage object
    </member>
    <member name="M:com.aspose.pdf.Artifact.getOpacity">
       
        <p>Gets opacity of the artifact. Possible values are in range 0..1.</p> @return opacity of the artifact.
      
    </member>
    <member name="M:com.aspose.pdf.Artifact.setOpacity(double)">
       
        <p>Sets opacity of the artifact. Possible values are in range 0..1.</p> @param value opacity of the artifact.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.setText(FormattedText)">
       
        <p>Sets text of the artifact.</p> @param formattedText FormattedText object which contains artifact text.
      
      <param name="FormattedText"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.getLines">
       
        <p>Lines of multiline text artifact.</p> @return List of Strings
      
    </member>
    <member name="M:com.aspose.pdf.Artifact.getTextState">
       
        <p>Text state for artifact text.</p> @return TextState instance
      
    </member>
    <member name="M:com.aspose.pdf.Artifact.setTextState(TextState)">
       
        <p>Text state for artifact text.</p> @param value TextState instance
      
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.setTextAndState(String,TextState)">
       
        <p>Set text and text properties of the artifact.</p> @param text Text string. @param textState Text state.
      
      <param name="String"/>
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.setLinesAndState(String[],TextState)">
       
        <p>Set text and text properties of the artifact. Allows to specify multiple lines.</p> @param text Array of text string. @param textState Text properties.
      
      <param name="String[]"/>
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.setImage(InputStream)">
       
        <p>Sets image of the artifact.</p> @param imageStream Stream which contains image data.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.setImage(String)">
       
        <p>Sets image of the artifact.</p> @param imageName Name of image file.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.setPdfPage(Page)">
       
        <p>Sets PDF page which is placed on the document page as artifact.</p> @param page Page which is placed as Artifcact.
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.close">
       
        <p>Closes all resources used by this document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Artifact.dispose">
       
        <p>Dispose the artifact.</p> This method is obsolete, use close() instead.
      
    </member>
    <member name="M:com.aspose.pdf.Artifact.getValue(String)">
       
        <p>Gets custom value of artifact.</p> @param name Name of value. @return Value, or null if value does not exists.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.setValue(String,String)">
       
        <p>Sets custom value of artifact.</p> @param name Name of custom value. @param value Custom value in the artifact.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.removeValue(String)">
       
        <p>Remove custom value from the artifact.</p> @param name Name of custom value to be removed.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.beginUpdates">
       
        <p>Start deleted updates. Use this feature if you need make several changes to the same artifact to improve performance. Usually artifact operators are changed any time when artifact property was changed. This causes changing of page contents every time when artifact was changed. To avoid this effect put all artifact updates between StartUpdates/SaveUpdates calls. This allows to change page contents only once.</p>  
        <pre> 
          <code>Artifact art = doc.getPages().get_Item(1).getArtifacts().get_Item(1); art.beginUpdates(); art.setOpacity ( 0.3f); art.setPosition ( new Point(10,10)); art.setRotation (30); art.saveUpdates();</code> 
        </pre> 
      
    </member>
    <member name="M:com.aspose.pdf.Artifact.saveUpdates">
       
        <p>Saves all updates in artifact which were made after BeginUpdates() call.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Artifact.isBackground">
       
        <p>If true Artifact is placed behind page contents.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Artifact.setBackground(boolean)">
       
        <p>If true Artifact is placed behind page contents.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.#ctor(ArtifactCollection,ArtifactContext,List&lt;Operator&gt;,IPdfDictionary)">
       
        <p>This constructor is used when artifact is read from the page. ARtifactCollection passes page resources, initial matrix, operators of the artifact ("contents") and properties dictionary.</p> @param owner ArtifactCollection object @param context ArtifactContext object @param _contents Collection of Operators @param _properties IPdfDictionary object
      
      <param name="ArtifactCollection"/>
      <param name="ArtifactContext"/>
      <param name="List&lt;Operator&gt;"/>
      <param name="IPdfDictionary"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.#ctor(String,String)">
      Constructor of artifact with specified type and subtype @param type Name of artifact type. @param subType NAme of artifact subtype.
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.#ctor(int,int)">
       
        <p>Constructor of artifact with specified type and subtype</p> @param type Artifact type. @param subType Artifact subtype. @see ArtifactType @see ArtifactSubtype
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.Artifact.ArtifactType">
       
        <p>Enumeration of possuble artifact types.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Artifact.ArtifactType.Pagination">
       
        <p>Pagination artifacts. Ancillary page features such as running heads and folios (page numbers).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Artifact.ArtifactType.Layout">
       
        <p>Layout artifacts. Purely cosmetic typographical or design elements such as footnote rules or background screens.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Artifact.ArtifactType.Page">
       
        <p>Page artifacts. Production aids extraneous to the document itself, such as cut marks and colour bars.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Artifact.ArtifactType.Background">
       
        <p>Background artifacts. Images, patterns or coloured blocks.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Artifact.ArtifactType.Undefined">
       
        <p>Artifact type is not defined or unknown.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Artifact.ArtifactSubtype">
       
        <p>Enumeration of possible artifacts subtype.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Artifact.ArtifactSubtype.Header">
       
        <p>Header artifact.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Artifact.ArtifactSubtype.Footer">
       
        <p>Footer artifact.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Artifact.ArtifactSubtype.Watermark">
       
        <p>Watermark artifact.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Artifact.ArtifactSubtype.Background">
       
        <p>Background artifact.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Artifact.ArtifactSubtype.Undefined">
       
        <p>Artifact subtype is not defined or unknown.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.ArtifactCollection">
      Class represents artifact collection.
    </member>
    <member name="M:com.aspose.pdf.ArtifactCollection.isSynchronized">
       
        <p>Is this object synchronized.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.ArtifactCollection.size">
       
        <p>Gets count of artifacts in collection.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.ArtifactCollection.getSyncRoot">
       
        <p>Gets synchronization object of the collection.</p> @return Object for synchronization
      
    </member>
    <member name="M:com.aspose.pdf.ArtifactCollection.iterator_Rename_Namesake">
      For Internal usage only. 
        <p>Gets enumerator for the collection.</p> @return Enumerator object.
      
    </member>
    <member name="M:com.aspose.pdf.ArtifactCollection.iterator">
       
        <p>Gets enumerator for the collection.</p> @return Enumerator object.
      
    </member>
    <member name="M:com.aspose.pdf.ArtifactCollection.get_Item(int)">
       
        <p>Gets artifact by index. Index is started from 1.</p> @param index Index of the artifact. @return Artifact on the page.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.ArtifactCollection.add(Artifact)">
       
        <p>Adds artifacts to the collection.</p> * @param artifact Artifact which should be added to collection.
      
      <param name="Artifact"/>
    </member>
    <member name="M:com.aspose.pdf.ArtifactCollection.findByValue(String,String)">
       
        <p>Finds artifacts by custom value.</p> @param name Name of custom value. @param expectedValue Value to find. @return List of found artifacts.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.ArtifactCollection.isReadOnly">
       
        <p>Gets if collection is readonly. Always returns false.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ArtifactCollection.addItem(Artifact)">
      <param name="Artifact"/>
    </member>
    <member name="M:com.aspose.pdf.ArtifactCollection.delete(Artifact)">
       
        <p>Deletes specified artifact.</p> @param artifact value
      
      <param name="Artifact"/>
    </member>
    <member name="M:com.aspose.pdf.ArtifactCollection.update(Artifact)">
       
        <p>Update artifact inside the collection.</p> @param artifact Artifact to be updated.
      
      <param name="Artifact"/>
    </member>
    <member name="M:com.aspose.pdf.ArtifactCollection.delete(int)">
       
        <p>Deletes artifact by its index.</p> @param index Index of artifact to delete.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.ArtifactCollection.clear">
      Not Supported yet. 
        <p>Clears collection. Method is not supported.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ArtifactCollection.containsItem(Artifact)">
      Not Supported yet. @param artifact Not Supported yet. @return Not Supported yet.
      <param name="Artifact"/>
    </member>
    <member name="M:com.aspose.pdf.ArtifactCollection.copyToTArray(Artifact[],int)">
      C copy artifacts into array. @param artifacts Artifact[] instance @param i int value
      <param name="Artifact[]"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.ArtifactCollection.removeItem(Artifact)">
      Not Supported yet. @param artifact Not Supported yet. @return Not Supported yet.
      <param name="Artifact"/>
    </member>
    <member name="M:com.aspose.pdf.ArtifactCollection.remove(Artifact)">
      / * 
        <p>/ * Checks if collection contains specified artifact. / *</p> / * / * @param item Artifact to search. / * @return boolean value /
      
      <param name="Artifact"/>
    </member>
    <member name="T:com.aspose.pdf.BackgroundArtifact">
      Class descibes background artifact. This artifact allows to set background of the page.
    </member>
    <member name="M:com.aspose.pdf.BackgroundArtifact.getBackgroundColor">
       
        <p>Gets bacground color of background artifact</p> @return Color object
      
    </member>
    <member name="M:com.aspose.pdf.BackgroundArtifact.setBackgroundColor(java.awt.Color)">
       
        <p>Sets bacground color of background artifact</p> @param value Color value
      
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.BackgroundArtifact.getBackgroundImage">
       
        <p>Gets bacground image of background artifact</p> @return InputStream object
      
    </member>
    <member name="M:com.aspose.pdf.BackgroundArtifact.getBackgroundImageInternal">
       
        <p>For internal usage only</p> @return internal object
      
    </member>
    <member name="M:com.aspose.pdf.BackgroundArtifact.setBackgroundImage(InputStream)">
       
        <p>Sets bacground image of background artifact</p> @param value InputStream object
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.BackgroundArtifact.#ctor">
       
        <p>Initializes BackgroundArtifact object.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.BarcodeField">
       
        <p>Class represents barcode field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.BarcodeField.getResolution">
       
        <p>Gets the resolution, in dots-per-inch (dpi), at which the barcode object is rendered.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.BarcodeField.getCaption">
       
        <p>Gets the caption of the barcode object.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.BarcodeField.getSymbology">
       
        <p>Specifies which barcode or glyph technology is to be used on this annotation, see {@code Symbology} for details.</p> @return Symbology element @see Symbology
      
    </member>
    <member name="M:com.aspose.pdf.BarcodeField.getXSymWidth">
       
        <p>Gets The horizontal distance, in pixels, between two barcode modules.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.BarcodeField.getXSymHeight">
       
        <p>Gets the the vertical distance between two barcode modules, measured in pixels. The ratio XSymHeight/XSymWidth shall be an integer value. For PDF417, the acceptable ratio range is from 1 to 4. For QRCode and DataMatrix, this ratio shall always be 1</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.BarcodeField.getECC">
       
        <p>Gets an integer value representing the error correction coefficient. For PDF417, shall be from 0 to 8. For QRCode, shall be from 0 to 3 (0 for ‘L’, 1 for ‘M’, 2 for ‘Q’, and 3 for ‘H’).</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.BarcodeField.#ctor(Page,Rectangle)">
       
        <p>Initializes new instance of the {@code BarcodeField} class.</p> @param page The page where to place new barcode. @param rect Barcode sizes given in rectangle.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.BarcodeField.#ctor(IDocument,Rectangle)">
       
        <p>Initializes new instance of the {@code BarcodeField} class.</p> @param doc Document where field will be created. @param rect Rectangle where field will be placed on the page.
      
      <param name="IDocument"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.BaseActionCollection">
      Class encapsulates basic actions with page/annotation/field interactive actions
    </member>
    <member name="M:com.aspose.pdf.BaseActionCollection.removeActions">
      Removes all actions of the annotation.
    </member>
    <member name="T:com.aspose.pdf.BaseOperatorCollection">
       
        <p>Represents base class for operator collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.BaseOperatorCollection.get_Item(int)">
       
        <p>Gets operator by its index.</p> @param index Index of operator. Numbering is starts from 1. @return Operator from requested index
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.BaseOperatorCollection.set_Item(int,Operator)">
       
        <p>Sets operator by its index.</p> @param index Index of operator. Numbering is starts from 1. @param value Operator.
      
      <param name="int"/>
      <param name="Operator"/>
    </member>
    <member name="M:com.aspose.pdf.BaseOperatorCollection.iterator">
       
        <p>Returns enumerator for collection</p> @return Collection enumerator
      
    </member>
    <member name="M:com.aspose.pdf.BaseOperatorCollection.toList">
       
        <p>Returns opetator list.</p> @return opetator list.
      
    </member>
    <member name="M:com.aspose.pdf.BaseOperatorCollection.size">
       
        <p>Gets count of operators in the collection.</p> @return integer value
      
    </member>
    <member name="M:com.aspose.pdf.BaseOperatorCollection.isEmpty">
       
        <p>Returns TRUE if the collection is empty.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.BaseOperatorCollection.isReadOnly">
       
        <p>Returns true if collection is read only.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.BaseOperatorCollection.isFastTextExtractionMode">
       
        <p>Indicates whether collection is limited to fast text extraction</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.BaseOperatorCollection.suppressUpdate">
       
        <p>Suppresses update contents data. The contents stream is not updated until ResumeUpdate is called.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.BaseOperatorCollection.resumeUpdate">
       
        <p>Resumes document update. Updates contents stream in case there are any pending changes.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.BaseOperatorCollection.insert(int,Operator)">
       
        <p>Inserts operator into collection.</p> @param index Index where new operator must be added @param op Operator which will be insterted
      
      <param name="int"/>
      <param name="Operator"/>
    </member>
    <member name="M:com.aspose.pdf.BaseOperatorCollection.add(Operator)">
       
        <p>Adds new operator into collection.</p> @param op Operator which must be added
      
      <param name="Operator"/>
    </member>
    <member name="M:com.aspose.pdf.BaseOperatorCollection.remove(Operator)">
       
        <p>Removes operator from collection.</p> @param item Operator instance item to remove. @return boolean value True - if item removed; otherwise, false.
      
      <param name="Operator"/>
    </member>
    <member name="M:com.aspose.pdf.BaseOperatorCollection.contains(Operator)">
       
        <p>Check if the item is in collection.</p> @param item Operator instance item to find. @return boolean value True - if item find; otherwise, false.
      
      <param name="Operator"/>
    </member>
    <member name="M:com.aspose.pdf.BaseOperatorCollection.clear">
       
        <p>Clears collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.BaseOperatorCollection.getUnrestricted(int)">
       
        <p>For internal usage only</p> @param index int value @return Operator object
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.BaseOperatorCollection.updateData">
       
        <p>internal</p> 
      
    </member>
    <member name="M:com.aspose.pdf.BaseOperatorCollection.deleteUnrestricted(int)">
       
        <p>internal</p> @param index int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.BaseOperatorCollection.cancelUpdate">
       
        <p>Cancels last update. This method may be called when the change should not raise contents update.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.BaseParagraph">
      Represents a abstract base object can be added to the page(doc.Paragraphs.Add()).
    </member>
    <member name="M:com.aspose.pdf.BaseParagraph.getVerticalAlignment">
       
        <p>Gets a vertical alignment of paragraph</p> @return VerticalAlignment element @see VerticalAlignment
      
    </member>
    <member name="M:com.aspose.pdf.BaseParagraph.setVerticalAlignment(int)">
       
        <p>Sets a vertical alignment of paragraph</p> @param value VerticalAlignment element
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.BaseParagraph.getHorizontalAlignment">
       
        <p>Gets a horizontal alignment of paragraph</p> @return HorizontalAlignment value @see HorizontalAlignment
      
    </member>
    <member name="M:com.aspose.pdf.BaseParagraph.setHorizontalAlignment(int)">
       
        <p>Sets a horizontal alignment of paragraph</p> @param value HorizontalAlignment value @see HorizontalAlignment
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.BaseParagraph.getMargin">
       
        <p>Gets a outer margin for paragraph (for pdf generation)</p> @return MarginInfo value
      
    </member>
    <member name="M:com.aspose.pdf.BaseParagraph.setMargin(MarginInfo)">
       
        <p>Sets a outer margin for paragraph (for pdf generation)</p> @param value MarginInfo object
      
      <param name="MarginInfo"/>
    </member>
    <member name="M:com.aspose.pdf.BaseParagraph.isFirstParagraphInColumn">
       
        <p>Gets or sets a bool value that indicates whether this paragraph will be at next column. Default is false.(for pdf generation)</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.BaseParagraph.setFirstParagraphInColumn(boolean)">
       
        <p>Gets or sets a bool value that indicates whether this paragraph will be at next column. Default is false.(for pdf generation)</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.BaseParagraph.isKeptWithNext">
       
        <p>Gets a boolean value that indicates whether current paragraph remains in the same page along with next paragraph. Default is false.(for pdf generation)</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.BaseParagraph.setKeptWithNext(boolean)">
       
        <p>Sets a boolean value that indicates whether current paragraph remains in the same page along with next paragraph. Default is false.(for pdf generation)</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.BaseParagraph.isInNewPage">
       
        <p>Gets a bool value that force this paragraph generates at new page. Default is false.(for pdf generation)</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.BaseParagraph.setInNewPage(boolean)">
       
        <p>Sets a boolean value that force this paragraph generates at new page. Default is false.(for pdf generation)</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.BaseParagraph.isInLineParagraph">
       
        <p>Gets a paragraph is inline. Default is false.(for pdf generation)</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.BaseParagraph.setInLineParagraph(boolean)">
       
        <p>Sets a paragraph is inline. Default is false.(for pdf generation)</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.BaseParagraph.getHyperlink">
      / * 
        <p>/ * Gets or sets a paragraph is footnote. Default is false.(for pdf generation) / *</p> / * @return boolean value /
      
    </member>
    <member name="M:com.aspose.pdf.BaseParagraph.setHyperlink(Hyperlink)">
       
        <p>Sets hyperlink(for pdf generator).</p> @param value hyperlink(for pdf generator).
      
      <param name="Hyperlink"/>
    </member>
    <member name="M:com.aspose.pdf.BaseParagraph.getZIndex">
       
        <p>Gets an int value that indicates the Z-order of the graph. A graph with larger ZIndex will be placed over the graph with smaller ZIndex. ZIndex can be negative. Graph with negative ZIndex will be placed behind the text in the page.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.BaseParagraph.setZIndex(int)">
       
        <p>Sets a int value that indicates the Z-order of the graph. A graph with larger ZIndex will be placed over the graph with smaller ZIndex. ZIndex can be negative. Graph with negative ZIndex will be placed behind the text in the page.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.BaseParagraph.deepClone">
       
        <p>Clones this instance. Virtual method. Always return null.</p> @return Null
      
    </member>
    <member name="T:com.aspose.pdf.BlendMode">
       
        <p>The blend modes enumeration.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BlendMode.Normal">
       
        <p>Normal blend mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BlendMode.Multiply">
       
        <p>Multiply blend mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BlendMode.Screen">
       
        <p>Screen blend mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BlendMode.Overlay">
       
        <p>Overlay blend mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BlendMode.Darken">
       
        <p>Darken blend mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BlendMode.Lighten">
       
        <p>Lighten blend mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BlendMode.ColorDodge">
       
        <p>ColorDodge blend mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BlendMode.ColorBurn">
       
        <p>ColorBurn blend mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BlendMode.HardLight">
       
        <p>HardLight blend mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BlendMode.SoftLight">
       
        <p>SoftLight blend mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BlendMode.Difference">
       
        <p>Difference blend mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BlendMode.Exclusion">
       
        <p>Exclusion blend mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BlendMode.Hue">
       
        <p>Hue blend mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BlendMode.Saturation">
       
        <p>Saturation blend mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BlendMode.Color">
       
        <p>Color blend mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BlendMode.Luminosity">
       
        <p>Luminosity blend mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BlendMode.Compatible">
       
        <p>Compatible blend mode.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Border">
       
        <p>Class representing characteristics of annotation border.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Border.getHCornerRadius">
      Not supported yet. 
        <p>Gets horizontal corner radius.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Border.setHCornerRadius(double)">
       
        <p>Sets horizontal corner radius.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Border.getVCornerRadius">
       
        <p>Gets vertical corner radius.</p> @return vertical corner radius.
      
    </member>
    <member name="M:com.aspose.pdf.Border.getWidth">
       
        <p>Gets border width.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.Border.setWidth(int)">
       
        <p>Sets border width.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Border.getEffectIntensity">
       
        <p>Gets effect intencity. Valid range of value is [0..2].</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.Border.setEffectIntensity(int)">
       
        <p>Sets effect intencity. Valid range of value is [0..2].</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Border.getStyle">
       
        <p>Gets border style.</p> {@code BorderStyle} @return BorderStyle element @see BorderStyle
      
    </member>
    <member name="M:com.aspose.pdf.Border.setStyle(int)">
       
        <p>Sets border style.</p> {@code BorderStyle} @param value BorderStyle element
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Border.getEffect">
       
        <p>Gets border effect.</p> {@code BorderEffect} @return BorderEffect element
      
    </member>
    <member name="M:com.aspose.pdf.Border.setEffect(int)">
       
        <p>Sets border effect.</p> {@code BorderEffect} @param value BorderEffect element
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Border.getDash">
       
        <p>Gets dash pattern.</p> @return Dash object
      
    </member>
    <member name="M:com.aspose.pdf.Border.setDash(Dash)">
       
        <p>Sets dash pattern.</p> @param value Dash object
      
      <param name="Dash"/>
    </member>
    <member name="M:com.aspose.pdf.Border.#ctor(Annotation)">
       
        <p>Constructor for border object.</p> @param parent Parent annotation.
      
      <param name="Annotation"/>
    </member>
    <member name="T:com.aspose.pdf.BorderCornerStyle">
       
        <p>Enumerates the border corner styles for border.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BorderCornerStyle.None">
       
        <p>None border style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BorderCornerStyle.Round">
       
        <p>Round border style.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.BorderEffect">
       
        <p>Describes effect which should be applied to the border of the annotations.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BorderEffect.None">
       
        <p>No effect.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BorderEffect.Cloudy">
       
        <p>The border will appear "cloudly".</p> 
      
    </member>
    <member name="T:com.aspose.pdf.BorderInfo">
       
        <p>This class represents border for graphics elements.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.BorderInfo.getLeft">
       
        <p>Gets {@code GraphInfo} object that indicates left of the border.</p> @return object that indicates left of the border.
      
    </member>
    <member name="M:com.aspose.pdf.BorderInfo.setLeft(GraphInfo)">
       
        <p>Sets {@code GraphInfo} object that indicates left of the border.</p> @param value indicator.
      
      <param name="GraphInfo"/>
    </member>
    <member name="M:com.aspose.pdf.BorderInfo.getRight">
       
        <p>Gets {@code GraphInfo} object that indicates right of the border.</p> @return object that indicates right of the border.
      
    </member>
    <member name="M:com.aspose.pdf.BorderInfo.setRight(GraphInfo)">
       
        <p>Sets {@code GraphInfo} object that indicates right of the border.</p> @param value indicator.
      
      <param name="GraphInfo"/>
    </member>
    <member name="M:com.aspose.pdf.BorderInfo.getTop">
       
        <p>Gets {@code GraphInfo} object that indicates the top border.</p> @return object that indicates the top border
      
    </member>
    <member name="M:com.aspose.pdf.BorderInfo.setTop(GraphInfo)">
       
        <p>Sets {@code GraphInfo} object that indicates top of the border.</p> @param value indicator.
      
      <param name="GraphInfo"/>
    </member>
    <member name="M:com.aspose.pdf.BorderInfo.getBottom">
       
        <p>Gets object that indicates bottom of the border.</p> @return bottom
      
    </member>
    <member name="M:com.aspose.pdf.BorderInfo.setBottom(GraphInfo)">
       
        <p>Sets object that indicates bottom of the border.</p> @param value GraphInfo value
      
      <param name="GraphInfo"/>
    </member>
    <member name="M:com.aspose.pdf.BorderInfo.getRoundedBorderRadius">
       
        <p>Gets rounded border radius.</p> @return value
      
    </member>
    <member name="M:com.aspose.pdf.BorderInfo.setRoundedBorderRadius(double)">
       
        <p>Sets rounded border radius.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.BorderInfo.deepClone">
       
        <p>Clones a new BorderInfo object.</p> @return The new BorderInfo object.
      
    </member>
    <member name="M:com.aspose.pdf.BorderInfo.#ctor(int,Color)">
       
        <p>Initializes a new instance of the {@code BorderInfo} class.</p> @param borderSide Indicates the border sides info. For example: (int)(BorderSide.Left | BorderSide.Top). @param borderColor The border color.
      
      <param name="int"/>
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.BorderInfo.#ctor">
       
        <p>Initializes a new instance of the {@code BorderInfo} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.BorderInfo.#ctor(int)">
       
        <p>Initializes a new instance of the {@code BorderInfo} class.</p> @param borderSide Indicates the border sides info. For example: (BorderSide.Left | BorderSide.Top).
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.BorderInfo.#ctor(int,float)">
       
        <p>Initializes a new instance of the {@code BorderInfo} class.</p> @param borderSide Indicates the border sides info. For example: (BorderSide.Left | BorderSide.Top). @param borderWidth The width of the border.
      
      <param name="int"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.BorderInfo.#ctor(int,float,Color)">
       
        <p>Initializes a new instance of the {@code BorderInfo} class.</p> @param borderSide Indicates the border sides info. For example: (BorderSide.Left | BorderSide.Top). @param borderWidth The width of the border. @param borderColor The border color.
      
      <param name="int"/>
      <param name="float"/>
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.BorderInfo.#ctor(int,GraphInfo)">
       
        <p>Initializes a new instance of the {@code BorderInfo} class.</p> @param borderSide Indicates the border sides info. For example: (BorderSide.Left | BorderSide.Top). @param borderStyle The border format info.
      
      <param name="int"/>
      <param name="GraphInfo"/>
    </member>
    <member name="T:com.aspose.pdf.BorderSide">
       
        <p>Enumerates the border sides.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BorderSide.None">
       
        <p>No border.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BorderSide.Left">
       
        <p>Left border.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BorderSide.Top">
       
        <p>Top border.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BorderSide.Right">
       
        <p>Right border.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BorderSide.Bottom">
       
        <p>Bottom border.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BorderSide.All">
       
        <p>All sides borders.It has the same meaning when useing "Box" and will be replaced by "Box" one year later. So, please use "Box" if possible.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BorderSide.Box">
       
        <p>Four sides borders.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.BorderStyle">
       
        <p>Describes style of the annotation border.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BorderStyle.Solid">
       
        <p>Solid border.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BorderStyle.Dashed">
       
        <p>Dashed border.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BorderStyle.Beveled">
       
        <p>Bevelled border.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BorderStyle.Inset">
       
        <p>Inset border.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BorderStyle.Underline">
       
        <p>Underlined border.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.BorderStyleConverter">
      Represents BorderStyleConverter class
    </member>
    <member name="M:com.aspose.pdf.BorderStyleConverter.toString(int)">
      String name for BorderStyle element @param value BorderStyle element @return String name @see BorderStyle
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.BorderStyleConverter.toXfdfString(int)">
      Xfdf string name for BorderStyle element @param value BorderStyle element @return String name @see BorderStyle
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.BorderStyleConverter.toEnum(String)">
      String BorderStyle element for its string name @param value String name @return BorderStyle element @see BorderStyle
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.BoxStyle">
       
        <p>Represents styles of check box</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BoxStyle.Circle">
       
        <p>Circle style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BoxStyle.Check">
       
        <p>Check style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BoxStyle.Cross">
       
        <p>Cross style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BoxStyle.Diamond">
       
        <p>Diamond style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BoxStyle.Square">
       
        <p>Square style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BoxStyle.Star">
       
        <p>Star style.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Brush">
       
        <p>This class represents abstract brush</p> 
      
    </member>
    <member name="T:com.aspose.pdf.BuildVersionInfo">
       
        <p>This class provides information about current product build.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BuildVersionInfo.AssemblyVersion">
       
        <p>Assembly Version</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BuildVersionInfo.ASSEMBLY_VERSION">
       
        <p>Assembly Version</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BuildVersionInfo.Product">
       
        <p>Product Name</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BuildVersionInfo.PRODUCT">
       
        <p>Product Name</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BuildVersionInfo.FileVersion">
       
        <p>File Version</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BuildVersionInfo.FILE_VERSION">
       
        <p>Product Name</p> 
      
    </member>
    <member name="T:com.aspose.pdf.ButtonField">
       
        <p>Class represents push button field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ButtonField.getNormalCaption">
       
        <p>Gets normal caption.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.ButtonField.setNormalCaption(String)">
       
        <p>Sets normal caption.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.ButtonField.getRolloverCaption">
       
        <p>Gets rollover caption of button which shall be displayed when the user rolls the cursor into its active area without pressing the mouse button.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.ButtonField.setRolloverCaption(String)">
       
        <p>Sets rollover caption of button which shall be displayed when the user rolls the cursor into its active area without pressing the mouse button.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.ButtonField.getAlternateCaption">
       
        <p>Gets alternate caption of the button which shall be displayed when the mouse button is pressed within its active area.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.ButtonField.setAlternateCaption(String)">
       
        <p>Sets alternate caption of the button which shall be displayed when the mouse button is pressed within its active area.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.ButtonField.getNormalIcon">
       
        <p>Gets normal icon of the button which shall be displayed when it is not interacting with the user.</p> @return XForm object
      
    </member>
    <member name="M:com.aspose.pdf.ButtonField.setNormalIcon(XForm)">
       
        <p>Sets normal icon of the button which shall be displayed when it is not interacting with the user.</p> @param value XForm object
      
      <param name="XForm"/>
    </member>
    <member name="M:com.aspose.pdf.ButtonField.getRolloverIcon">
       
        <p>Gets rollover icon of the button which shall be displayed when the user rolls the cursor into its active area without pressing the mouse button.</p> @return XForm object
      
    </member>
    <member name="M:com.aspose.pdf.ButtonField.setRolloverIcon(XForm)">
       
        <p>Sets rollover icon of the button which shall be displayed when the user rolls the cursor into its active area without pressing the mouse button.</p> @param value XForm object
      
      <param name="XForm"/>
    </member>
    <member name="M:com.aspose.pdf.ButtonField.getAlternateIcon">
       
        <p>Gets alternate icon which shall be displayed when the mouse button is pressed within its active area.</p> @return XForm object
      
    </member>
    <member name="M:com.aspose.pdf.ButtonField.setAlternateIcon(XForm)">
       
        <p>Sets alternate icon which shall be displayed when the mouse button is pressed within its active area.</p> @param value XForm object
      
      <param name="XForm"/>
    </member>
    <member name="M:com.aspose.pdf.ButtonField.getIconFit">
       
        <p>Gets icon fit object specifying how the widget annotation's icon shall be displayed within its annotation rectangle.</p> @return IconFit object
      
    </member>
    <member name="M:com.aspose.pdf.ButtonField.getICPosition">
       
        <p>Gets icon caption position.</p> @return icon caption position. @see IconCaptionPosition
      
    </member>
    <member name="M:com.aspose.pdf.ButtonField.setICPosition(int)">
       
        <p>Sets icon caption position.</p> @param value icon caption position. @see IconCaptionPosition
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.ButtonField.addImage(BufferedImage)">
       
        <p>Adds image into the field resources an draws it.</p> @param image Image ot add into text field.
      
      <param name="BufferedImage"/>
    </member>
    <member name="M:com.aspose.pdf.ButtonField.addImage(BufferedImage,boolean)">
       
        <p>Adds image into the field resources an draws it.</p> @param image Image ot add into text field. @param fillArea boolean values
      
      <param name="BufferedImage"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.ButtonField.#ctor">
       
        <p>Button field constructor for Generator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ButtonField.#ctor(Page,Rectangle)">
       
        <p>ButtonField constructor.</p> @param page Page where button will be placed. @param rect Rectangle where button is placed on the page.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.ButtonField.#ctor(IDocument,Rectangle)">
       
        <p>ButtonField constructore.</p> @param doc Docuemtn where new field will be created. @param rect Rectangle hwere button is placed on the page.
      
      <param name="IDocument"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.CapStyle">
       
        <p>Style of line ending of Ink annotation line.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.CapStyle.Rectangular">
       
        <p>End is rectangular.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.CapStyle.Rounded">
       
        <p>End is rounded.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.CaptionPosition">
       
        <p>Enumeration of the annotation's caption positioning.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.CaptionPosition.Inline">
       
        <p>The caption will be centered inside the line (default value).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.CaptionPosition.Top">
       
        <p>The caption will be on top of the line.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.CaretAnnotation">
       
        <p>Class representing Caret annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.CaretAnnotation.getAnnotationType">
       
        <p>Gets type of annotation.</p> @return AnnotationType element
      
    </member>
    <member name="M:com.aspose.pdf.CaretAnnotation.getFrame">
       
        <p>Gets caret rectangle.</p> @return caret rectangle.
      
    </member>
    <member name="M:com.aspose.pdf.CaretAnnotation.setFrame(Rectangle)">
       
        <p>Sets caret rectangle.</p> @param value caret rectangle.
      
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.CaretAnnotation.getSymbol">
       
        <p>Gets symbol associated with caret.</p> {@code CaretSymbol} @return CaretSymbol element @see CaretSymbol
      
    </member>
    <member name="M:com.aspose.pdf.CaretAnnotation.setSymbol(int)">
       
        <p>Sets output page size for import.</p> @param value CaretSymbol element @see CaretSymbol
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.CaretAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor object to process the annotation.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.CaretAnnotation.#ctor(IDocument)">
       
        <p>Constructor for usign in Generator.</p> @param document Document where annotation will be created.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.CaretAnnotation.#ctor(Page,Rectangle)">
       
        <p>Creates new Caret annotation on the specified page.</p> @param page Document's page where annotation should be created. @param rect Required rectangle that sets annotation's border.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.CaretSymbol">
       
        <p>A symbol to be associated with the caret.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.CaretSymbol.None">
       
        <p>No symbol should be associated with the caret.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.CaretSymbol.Paragraph">
       
        <p>A new paragraph symbol (¶) should be associated with the caret.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.CaretSymbolConverter">
      Represents CaretSymbolConverter class
    </member>
    <member name="M:com.aspose.pdf.CaretSymbolConverter.toString(int)">
      String name for CaretSymbol element @param value CaretSymbol element @return String name @see CaretSymbol
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.CaretSymbolConverter.toXfdfString(int)">
      Xfdf string name for CaretSymbol element @param value CaretSymbol element @return String name @see CaretSymbol
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.CaretSymbolConverter.toEnum(String)">
      String CaretSymbol element for its string name @param value String name @return CaretSymbol element @see CaretSymbol
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.Cell">
       
        <p>Represents a cell of the table's row.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Cell.isNoBorder">
       
        <p>Gets the cell have border.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Cell.setNoBorder(boolean)">
       
        <p>Sets the cell have border.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Cell.getMargin">
       
        <p>Gets the padding.</p> @return MarginInfo object
      
    </member>
    <member name="M:com.aspose.pdf.Cell.setMargin(MarginInfo)">
       
        <p>Sets the padding.</p> @param value MarginInfo object
      
      <param name="MarginInfo"/>
    </member>
    <member name="M:com.aspose.pdf.Cell.getBorder">
       
        <p>Gets the border.</p> @return BorderInfo object
      
    </member>
    <member name="M:com.aspose.pdf.Cell.setBorder(BorderInfo)">
       
        <p>Sets the border.</p> @param value BorderInfo object
      
      <param name="BorderInfo"/>
    </member>
    <member name="M:com.aspose.pdf.Cell.getBackgroundColor">
       
        <p>Gets the background color.</p> @return Color object
      
    </member>
    <member name="M:com.aspose.pdf.Cell.setBackgroundColor(Color)">
       
        <p>Gets or sets the background color.</p> @param value Color object
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.Cell.getBackgroundImageFile">
       
        <p>Gets the background image file.</p> @return String value @deprecated Property was expanded please use BackgroundImage
      
    </member>
    <member name="M:com.aspose.pdf.Cell.setBackgroundImageFile(String)">
       
        <p>Sets the background image file.</p> @param value Color object @deprecated Property was expanded please use BackgroundImage
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Cell.getAlignment">
       
        <p>Gets the alignment.</p> @return HorizontalAlignment element @see HorizontalAlignment
      
    </member>
    <member name="M:com.aspose.pdf.Cell.getBackgroundImage">
       
        <p>Gets or sets the background image</p> @return Image instance
      
    </member>
    <member name="M:com.aspose.pdf.Cell.setBackgroundImage(Image)">
       
        <p>Gets or sets the background image</p> @param value Image instance
      
      <param name="Image"/>
    </member>
    <member name="M:com.aspose.pdf.Cell.setAlignment(int)">
       
        <p>Sets the alignment.</p> @param value HorizontalAlignment element @see HorizontalAlignment
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Cell.getDefaultCellTextState">
       
        <p>Gets the default cell text state.</p> @return TextState object
      
    </member>
    <member name="M:com.aspose.pdf.Cell.setDefaultCellTextState(TextState)">
       
        <p>Sets the default cell text state.</p> @param value TextState object
      
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.Cell.isOverrideByFragment">
       
        <p>Sets the cell's TextState property is overriden by TextFragment TextState property.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Cell.setOverrideByFragment(boolean)">
       
        <p>Sets the cell's TextState property is overriden by TextFragment TextState property.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Cell.getParagraphs">
       
        <p>Gets the cell's formatted text.</p> @return Paragraphs object
      
    </member>
    <member name="M:com.aspose.pdf.Cell.setParagraphs(Paragraphs)">
       
        <p>Sets the cell's formatted text.</p> @param value Paragraphs object
      
      <param name="Paragraphs"/>
    </member>
    <member name="M:com.aspose.pdf.Cell.isWordWrapped">
       
        <p>Gets the cell's text word wrapped.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Cell.setWordWrapped(boolean)">
       
        <p>Sets the cell's text word wrapped.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Cell.getVerticalAlignment">
       
        <p>Gets the vertical alignment.</p> @return VerticalAlignment element @see VerticalAlignment
      
    </member>
    <member name="M:com.aspose.pdf.Cell.setVerticalAlignment(int)">
       
        <p>Sets the vertical alignment.</p> @param value VerticalAlignment element @see VerticalAlignment
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Cell.getColSpan">
       
        <p>Gets or sets the column span.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.Cell.setColSpan(int)">
       
        <p>Sets the column span.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Cell.getRowSpan">
       
        <p>Gets the row span.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.Cell.setRowSpan(int)">
       
        <p>Sets the row span.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Cell.getWidth">
       
        <p>Gets the column width.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Cell.setWidth(double)">
       
        <p>Sets the column width.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Cell.deepClone">
       
        <p>Clone the cell.</p> @return The cloned object
      
    </member>
    <member name="M:com.aspose.pdf.Cell.#ctor(Rectangle)">
       
        <p>Initializes a new instance of the Cell class.</p> @param rect The rectangle of the cell in page's coordinates.
      
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Cell.#ctor">
       
        <p>Initializes a new instance of the Cell class.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Cells">
       
        <p>Represents a cells collection of row.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Cells.add">
       
        <p>Add cell to collection.</p> @return The new cell
      
    </member>
    <member name="M:com.aspose.pdf.Cells.add(String,TextState)">
       
        <p>Add cell to collection.</p> @param text The text for cell. @param ts The text state. @return The new cell
      
      <param name="String"/>
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.Cells.add(String)">
       
        <p>Add cell to collection.</p> @param text The text for cell. @return The new cell
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Cells.add(Cell)">
       
        <p>Add cell to collection.</p> @param cell The cell to collection.
      
      <param name="Cell"/>
    </member>
    <member name="M:com.aspose.pdf.Cells.removeRange(int,int)">
       
        <p>Remove cell set from collection.</p> @param index The collection index. @param count The rows count.
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Cells.remove(Object)">
       
        <p>Remove cell set from collection.</p> @param obj The object.
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.Cells.remove(Cell)">
       
        <p>Remove cell set from collection.</p> @param cell The cell object.
      
      <param name="Cell"/>
    </member>
    <member name="M:com.aspose.pdf.Cells.insert(int,Cell)">
       
        <p>Insert cell to collection.</p> @param index The selected index. @param cell The selected cell.
      
      <param name="int"/>
      <param name="Cell"/>
    </member>
    <member name="M:com.aspose.pdf.Cells.iterator">/ * For internal usage only. / * &lt;p&gt; / * Returns enumerator of collection. / * &lt;/p&gt; / * / * @return / * Iterator&lt;Cell&gt; instance /</member>
    <member name="M:com.aspose.pdf.Cells.getCount">
      / * 
        <p>/ * Dispose method / *</p> /
      
    </member>
    <member name="M:com.aspose.pdf.Cells.get_Item(int)">
       
        <p>Gets cell.</p> @param index The cell index. @return Cell object
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Cells.set_Item(int,Cell)">
       
        <p>Sets cells.</p> @param index The cell index. @param value The cells value
      
      <param name="int"/>
      <param name="Cell"/>
    </member>
    <member name="T:com.aspose.pdf.CgmImportOptions">
       
        <p>Import option for import from Computer Graphics Metafile(CGM) format.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.CgmImportOptions.getPageSizeInternal">
       
        <p>Gets output page size for import. Default page size - A4 300dpi 2480 X 3508.</p> @return SizeF value
      
    </member>
    <member name="M:com.aspose.pdf.CgmImportOptions.getPageSize">
       
        <p>Gets output page size for import. Default page size - A4 300dpi 2480 X 3508.</p> @return java.awt.geom.Dimension2D object
      
    </member>
    <member name="M:com.aspose.pdf.CgmImportOptions.setPageSize(java.awt.geom.Dimension2D)">
       
        <p>Sets output page size for import.</p> @param value Dimension2D value
      
      <param name="java.awt.geom.Dimension2D"/>
    </member>
    <member name="M:com.aspose.pdf.CgmImportOptions.#ctor">
       
        <p>Constructor</p> 
      
    </member>
    <member name="T:com.aspose.pdf.CgmLoadOptions">
       
        <p>Contains options for loading/importing CGM file into pdf document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.CgmLoadOptions.getPageSize">
       
        <p>Gets output page size for import.</p> @return Dimension2D object
      
    </member>
    <member name="M:com.aspose.pdf.CgmLoadOptions.#ctor">
       
        <p>Creates default load options for converting CGM file into pdf document. Default pdf page size - A4 300dpi 2480 X 3508.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.CgmLoadOptions.#ctor(java.awt.geom.Dimension2D)">
       
        <p>Creates load options with defined {@code pageSize}.</p> @param pageSize Defines pdf page width and height.
      
      <param name="java.awt.geom.Dimension2D"/>
    </member>
    <member name="T:com.aspose.pdf.Characteristics">
       
        <p>Represents annotation characteristics</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Characteristics.getBackground">
       
        <p>Gets color of the background</p> @return Color Object
      
    </member>
    <member name="M:com.aspose.pdf.Characteristics.setBackground(Object)">
       
        <p>Sets color of the background</p> @param value Color Object
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.Characteristics.getBorder">
       
        <p>Gets color of the border.</p> @return Color Object
      
    </member>
    <member name="M:com.aspose.pdf.Characteristics.setBorder(Color)">
       
        <p>Sets color of the border.</p> @param value Color Object
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.Characteristics.setBorder(java.awt.Color)">
       
        <p>Sets color of the border.</p> @param value Color Object
      
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.Characteristics.getRotate">
       
        <p>Gets rotation of the annotation.</p> @return Rotation element @see Rotation
      
    </member>
    <member name="M:com.aspose.pdf.Characteristics.setRotate(int)">
       
        <p>Sets rotation of the annotation.</p> @param value Rotation element @see Rotation
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.CharInfo">
      Represents a character info object. Provides character positioning information.
    </member>
    <member name="M:com.aspose.pdf.CharInfo.getPosition">
      Gets position of the character. @return Position value
    </member>
    <member name="M:com.aspose.pdf.CharInfo.getRectangle">
      Gets rectangle of the character. @return Rectangle value
    </member>
    <member name="T:com.aspose.pdf.CharInfoCollection">&lt;p&gt; Represents CharInfo objects collection. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to iterate thought all the characters and retrieve the character //open document Document pdfDocument = new Document(inFile); //create TextFragmentAbsorber object to collect all the text objects of the page TextFragmentAbsorber textFragmentAbsorber = new TextFragmentAbsorber(); //accept the absorber for all the pages pdfDocument.getPages().get_Item(1).accept(textFragmentAbsorber); //get the extracted text fragments TextFragmentCollection textFragmentCollection = textFragmentAbsorber.getTextFragments(); //loop through the fragments for (TextFragment textFragment : ({@code Iterable&lt;TextFragment&gt;})textFragmentCollection) { //loop through the segments for (TextSegment textSegment : ({@code Iterable&lt;TextSegment&gt;}) textFragment.getSegments()) { //loop through the characters {@code for (int i = 1; i &lt;= textSegment.getText().length(); i++)} { CharInfo charInfo = textSegment.getCharacters().get_Item(i); // print character position and rectangle info System.out.println("XIndent : " + charInfo.getPosition().getXIndent()); System.out.println("YIndent : " + charInfo.getPosition().getYIndent()); System.out.println("Width : " + charInfo.getRectangle().getWidth()); System.out.println("Height : " + charInfo.getRectangle().getHeight()); } } } &lt;/pre&gt; &lt;hr&gt; &lt;p&gt; Provides access to positioning information of text segment characters. &lt;/p&gt;</member>
    <member name="M:com.aspose.pdf.CharInfoCollection.size">
       
        <p>Gets the number of {@code CharInfo} object elements actually contained in the collection.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.CharInfoCollection.getSyncRoot">
       
        <p>Gets an object that can be used to synchronize access to the collection.</p> @return Object for synchronization
      
    </member>
    <member name="M:com.aspose.pdf.CharInfoCollection.isSynchronized">
       
        <p>Gets a value indicating whether access to the collection is synchronized (thread safe).</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.CharInfoCollection.isReadOnly">
       
        <p>Gets a value indicating whether collection is read-only</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.CharInfoCollection.iterator_Rename_Namesake">
       
        <p>Returns an enumerator for the entire collection.</p> @return Enumerator object.
      
    </member>
    <member name="M:com.aspose.pdf.CharInfoCollection.iterator">
       
        <p>Returns an enumerator for the entire collection.</p> @return Enumerator object.
      
    </member>
    <member name="M:com.aspose.pdf.CharInfoCollection.copyTo(CharInfo[],int)">
       
        <p>Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array</p> @param array Array of objects which will be copied. @param index Starting index from which copying will be started.
      
      <param name="CharInfo[]"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.CharInfoCollection.add(CharInfo)">
      Not supported yet. 
        <p>Collection is read-only, throws exception.</p> @exception NotImplementedException NotImplementedException @param item CharInfo instance to add.
      
      <param name="CharInfo"/>
    </member>
    <member name="M:com.aspose.pdf.CharInfoCollection.clear">
      Not supported yet. 
        <p>Collection is read-only. Always throws NotImplementedException.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.CharInfoCollection.contains(CharInfo)">
       
        <p>Determines whether the collection contains a specific value.</p> @param item The object to locate in the collection @return true if item is found in the collection; otherwise, false.
      
      <param name="CharInfo"/>
    </member>
    <member name="M:com.aspose.pdf.CharInfoCollection.remove(CharInfo)">
      Not supported yet. 
        <p>Collection is read-only, throws exception.</p> @exception NotImplementedException NotImplementedException @param item CharInfo instance to remove. @return boolean value.
      
      <param name="CharInfo"/>
    </member>
    <member name="M:com.aspose.pdf.CharInfoCollection.get_Item(int)">
       
        <p>Gets the CharInfo element at the specified index 1..n.</p> @param index Index within the collection. @return CharInfo object.
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.CheckboxField">
       
        <p>Class representing checkbox field</p> 
      
    </member>
    <member name="M:com.aspose.pdf.CheckboxField.getAllowedStates">
       
        <p>Returns list of allowed states.</p> @return list of String value
      
    </member>
    <member name="M:com.aspose.pdf.CheckboxField.getOnState">
       
        <p>Returns name of state which is "Checked" state of checkbox. This is "Yes" if presents or any other value other then "Off" and "No";</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.CheckboxField.getStyle">
       
        <p>Gets style of check box.</p> @return style of check box. @see BoxStyle
      
    </member>
    <member name="M:com.aspose.pdf.CheckboxField.setStyle(int)">
       
        <p>Sets style of check box.</p> @param value BoxStyle of check box. @see BoxStyle
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.CheckboxField.getActiveState">
       
        <p>Gets current annotation appearance state.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.CheckboxField.setActiveState(String)">
       
        <p>Sets current annotation appearance state.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.CheckboxField.getChecked">
       
        <p>Gets state of check box.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.CheckboxField.setChecked(boolean)">
       
        <p>Sets state of check box.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.CheckboxField.getNormalCaption">
       
        <p>Gets normal caption of the field.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.CheckboxField.getValue">
       
        <p>Gets value of check box field.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.CheckboxField.setValue(String)">
       
        <p>Sets value of check box field.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.CheckboxField.deepClone">
       
        <p>Clone the checkbox.</p> @return The cloned object
      
    </member>
    <member name="M:com.aspose.pdf.CheckboxField.getExportValue">
       
        <p>Gets or sets export value of CheckBox field.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.CheckboxField.setExportValue(String)">
       
        <p>Gets or sets export value of CheckBox field.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.CheckboxField.#ctor(Page,Rectangle)">
       
        <p>Constructor for CheckboxField class.</p> @param page Page where check box will be placed. @param rect Position and size of the check box.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.CheckboxField.#ctor(IDocument,Rectangle)">
       
        <p>Constructor for CheckboxField class.</p> @param doc Document where will be new field created. @param rect Rectangle where new field will be created.
      
      <param name="IDocument"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.CheckboxField.#ctor">
       
        <p>Create instance of CheckboxField.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.CheckboxField.#ctor(IDocument)">
       
        <p>Constructor to use with Generator.</p> @param doc Document where field will be created.
      
      <param name="IDocument"/>
    </member>
    <member name="T:com.aspose.pdf.ChoiceField">
       
        <p>Represents base class for choice fields.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ChoiceField.getCommitImmediately">
       
        <p>Gets commit on selection change flag.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.ChoiceField.setCommitImmediately(boolean)">
       
        <p>Sets commit on selection change flag.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.ChoiceField.getMultiSelect">
       
        <p>Gets multiselection flag.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.ChoiceField.setMultiSelect(boolean)">
       
        <p>Sets multiselection flag.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.ChoiceField.getSelected">
       
        <p>Gets index of selected option. This property allows to change selection.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.ChoiceField.setSelected(int)">
       
        <p>Sets index of selected option. This property allows to change selection.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.ChoiceField.getSelectedItems">
       
        <p>Sets array of selected items. For multiselect list array contains more then one item. For single selection list it contains single item.</p> @return array of int values
      
    </member>
    <member name="M:com.aspose.pdf.ChoiceField.setSelectedItems(int[])">
       
        <p>Sets array of selected items. For multiselect list array contains more then one item. For single selection list it contains single item.</p> @param value array of int values
      
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.ChoiceField.getOptions">
       
        <p>Gets collection of choice options.</p> @return OptionCollection object
      
    </member>
    <member name="M:com.aspose.pdf.ChoiceField.addOption(String)">
       
        <p>Adds new option with specified name.</p> @param optionName Name of the new option.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.ChoiceField.addOption(String,String)">
       
        <p>Adds new option with specified export value and name.</p> @param export Export value. @param name Name of the new option.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.ChoiceField.deleteOption(String)">
       
        <p>Deletes option by its name.</p> @param optionName Name of the option which must be deleted.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.ChoiceField.getValue">
       
        <p>Gets value of the field.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.ChoiceField.setValue(String)">
       
        <p>Sets value of the field.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.ChoiceField.#ctor(Page,Rectangle)">
       
        <p>Constructor for ChoiceField.</p> @param page Page where field is situated. @param rect Rectangle of the field.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.ChoiceField.#ctor(IDocument)">
       
        <p>Creates choice field (for Generator)</p> @param doc Document where choice field will be created.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.ChoiceField.#ctor(IDocument,Rectangle)">
       
        <p>Constructor for ChoiceField.</p> @param doc Document where field will be created. @param rect Rectangle of the field.
      
      <param name="IDocument"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.CircleAnnotation">
       
        <p>Class representing Circle annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.CircleAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor object to process the annotation.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.CircleAnnotation.getAnnotationType">
       
        <p>Gets type of annotation.</p> @return AnnotationType element @see AnnotationType
      
    </member>
    <member name="M:com.aspose.pdf.CircleAnnotation.#ctor(IDocument)">
       
        <p>Constructor for Circle annotation.</p> @param document Document where annotation will be created.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.CircleAnnotation.#ctor(Page,Rectangle)">
       
        <p>Creates new Circle annotation on the specified page.</p> @param page Document's page where annotation should be created. @param rect Required rectangle that sets annotation's border.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.Collection">
       
        <p>Represents class for Collection(12.3.5 Collections).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Collection.getDefaultEntry">
       
        <p>Default embedded file name.</p> @return String object
      
    </member>
    <member name="M:com.aspose.pdf.Collection.#ctor">
       
        <p>Initializes new Collection object.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Color">
       
        <p>Represents class for color value which can be expressed in different color space.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Color.getA">
       
        <p>Gets the alpha component value</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Color.getData">
       
        <p>Color value.</p> @return array of double values
      
    </member>
    <member name="M:com.aspose.pdf.Color.getColorSpace">
       
        <p>Gets color space that the color represents.</p> @return ColorSpace object
      
    </member>
    <member name="M:com.aspose.pdf.Color.deepClone">
      Clones this instance @return Color object
    </member>
    <member name="M:com.aspose.pdf.Color.parse(String)">
       
        <p>Extracts color components from the string.</p> @return Color object. @param value String value with color component values.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Color.toString">
       
        <p>Converts to string.</p> @return String representation of the Color object.
      
    </member>
    <member name="M:com.aspose.pdf.Color.toRgb">
       
        <p>Converts color into rgb.</p> @return Rgb color value.
      
    </member>
    <member name="M:com.aspose.pdf.Color.fromRgb(java.awt.Color)">
       
        <p>Gets valid pdf Color object from java.awt.Color value.</p> @return Color object with each component value in [0..1] range. @param color System.Drawing.Color value.
      
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.Color.fromArgb(int,int,int)">
       
        <p>Gets valid pdf Color object from RGB color components.</p> @return Color object with each component value in [0..255] range. @param r The Red color component (value 0 - 255). @param g The Green color component (value 0 - 255). @param b The Blue color component (value 0 - 255).
      
      <param name="int"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Color.fromArgb(int,int,int,int)">
       
        <p>Gets valid pdf Color object from RGB color components.</p> @return Color object with each component value in [0..255] range. @param a The alpha component value (value 0 - 255). @param r The Red color component (value 0 - 255). @param g The Green color component (value 0 - 255). @param b The Blue color component (value 0 - 255).
      
      <param name="int"/>
      <param name="int"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Color.fromRgb(double,double,double)">
       
        <p>Gets valid pdf Color object from RGB color components.</p> @return Color object with each component value in [0..1] range. @param r The Red color component (value 0 - 1). @param g The Green color component (value 0 - 1). @param b The Blue color component (value 0 - 1).
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Color.fromGray(double)">
       
        <p>Gets valid pdf Color object from Gray color component.</p> @return Color object with each component value in [0..1] range. @param g The Gray color component (value 0 - 1).
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Color.fromCmyk(double,double,double,double)">
       
        <p>Gets valid pdf Color object from RGB color components.</p> @return Color object with each component value in [0..1] range. @param c The Cyan color component (value 0 - 1). @param m The Magenta color component (value 0 - 1). @param y The Yellow color component (value 0 - 1). @param k The Key color component (value 0 - 1).
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Color.hashCode">Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by {@link java.util.HashMap}. &lt;p&gt; The general contract of {@code hashCode} is: &lt;ul&gt; &lt;li&gt;Whenever it is invoked on the same object more than once during an execution of a Java application, the {@code hashCode} method must consistently return the same integer, provided no information used in {@code equals} comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. &lt;li&gt;If two objects are equal according to the {@code equals(Object)} method, then calling the {@code hashCode} method on each of the two objects must produce the same integer result. &lt;li&gt;It is &lt;em&gt;not&lt;/em&gt; required that if two objects are unequal according to the {@link java.lang.Object#equals(java.lang.Object)} method, then calling the {@code hashCode} method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. &lt;/ul&gt; &lt;p&gt; As much as is reasonably practical, the hashCode method defined by class {@code Object} does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java&lt;span style="font-size:70%"&gt;&lt;sup&gt;TM&lt;/sup&gt;&lt;/span&gt;programming language.) @return a hash code value for this object. @see java.lang.Object#equals(java.lang.Object) @see java.lang.System#identityHashCode</member>
    <member name="M:com.aspose.pdf.Color.equals(Object)">
       
        <p>Returns true if two Colors are equal.</p> @return True in case Color objects are equal. @param obj Object to compare.
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.Color.op_Equality(Color,Color)">
       
        <p>Returns true if two Colors are equal.</p> @return True in case Color objects are equal. @param x First Color object. @param y Second Color object.
      
      <param name="Color"/>
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.Color.op_Inequality(Color,Color)">
       
        <p>Returns true if two Colors are not equal.</p> @return True in case Color objects are not equal. @param x First Color object. @param y Second Color object.
      
      <param name="Color"/>
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.Color.getPatternColorSpace">
       
        <p>Gets a object that indicates the pattern colorspace.</p> Internal usage only @return PatternColorSpace object
      
    </member>
    <member name="M:com.aspose.pdf.Color.setPatternColorSpace(PatternColorSpace)">
       
        <p>Sets a object that indicates the pattern colorspace.</p> Internal usage only @param value PatternColorSpace object
      
      <param name="PatternColorSpace"/>
    </member>
    <member name="M:com.aspose.pdf.Color.getTransparent">
       
        <p>Gets a system-defined color.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getAliceBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FFF0F8FF.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getAntiqueWhite">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFAEBD7.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getAqua">
       
        <p>Gets a system-defined color that has an ARGB value of #FF00FFFF.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getAquamarine">
       
        <p>Gets a system-defined color that has an ARGB value of #FF7FFFD4.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getAzure">
       
        <p>Gets a system-defined color that has an ARGB value of #FFF0FFFF.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getBeige">
       
        <p>Gets a system-defined color that has an ARGB value of #FFF5F5DC.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getBisque">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFE4C4.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getBlack">
       
        <p>Gets a system-defined color that has an ARGB value of #FF000000.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getBlanchedAlmond">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFEBCD.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FF0000FF.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getBlueViolet">
       
        <p>Gets a system-defined color that has an ARGB value of #FF8A2BE2.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getBrown">
       
        <p>Gets a system-defined color that has an ARGB value of #FFA52A2A.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getBurlyWood">
       
        <p>Gets a system-defined color that has an ARGB value of #FFDEB887.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getCadetBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FF5F9EA0.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getChartreuse">
       
        <p>Gets a system-defined color that has an ARGB value of #FF7FFF00.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getChocolate">
       
        <p>Gets a system-defined color that has an ARGB value of #FFD2691E.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getCoral">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFF7F50.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getCornflowerBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FF6495ED.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getCornsilk">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFF8DC.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getCrimson">
       
        <p>Gets a system-defined color that has an ARGB value of #FFDC143C.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getCyan">
       
        <p>Gets a system-defined color that has an ARGB value of #FF00FFFF.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDarkBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FF00008B.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDarkCyan">
       
        <p>Gets a system-defined color that has an ARGB value of #FF008B8B.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDarkGoldenrod">
       
        <p>Gets a system-defined color that has an ARGB value of #FFB8860B.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDarkGray">
       
        <p>Gets a system-defined color that has an ARGB value of #FFA9A9A9.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDarkGreen">
       
        <p>Gets a system-defined color that has an ARGB value of #FF006400.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDarkKhaki">
       
        <p>Gets a system-defined color that has an ARGB value of #FFBDB76B.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDarkMagenta">
       
        <p>Gets a system-defined color that has an ARGB value of #FF8B008B.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDarkOliveGreen">
       
        <p>Gets a system-defined color that has an ARGB value of #FF556B2F.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDarkOrange">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFF8C00.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDarkOrchid">
       
        <p>Gets a system-defined color that has an ARGB value of #FF9932CC.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDarkRed">
       
        <p>Gets a system-defined color that has an ARGB value of #FF8B0000.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDarkSalmon">
       
        <p>Gets a system-defined color that has an ARGB value of #FFE9967A.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDarkSeaGreen">
       
        <p>Gets a system-defined color that has an ARGB value of #FF8FBC8F.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDarkSlateBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FF483D8B.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDarkSlateGray">
       
        <p>Gets a system-defined color that has an ARGB value of #FF2F4F4F.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDarkTurquoise">
       
        <p>Gets a system-defined color that has an ARGB value of #FF00CED1.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDarkViolet">
       
        <p>Gets a system-defined color that has an ARGB value of #FF9400D3.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDeepPink">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFF1493.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDeepSkyBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FF00BFFF.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDimGray">
       
        <p>Gets a system-defined color that has an ARGB value of #FF696969.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDodgerBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FF1E90FF.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getFirebrick">
       
        <p>Gets a system-defined color that has an ARGB value of #FFB22222.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getFloralWhite">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFFAF0.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getForestGreen">
       
        <p>Gets a system-defined color that has an ARGB value of #FF228B22.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getFuchsia">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFF00FF.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getGainsboro">
       
        <p>Gets a system-defined color that has an ARGB value of #FFDCDCDC.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getGhostWhite">
       
        <p>Gets a system-defined color that has an ARGB value of #FFF8F8FF.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getGold">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFD700.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getGoldenrod">
       
        <p>Gets a system-defined color that has an ARGB value of #FFDAA520.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getGray">
       
        <p>Gets a system-defined color that has an ARGB value of #FF808080.</p> @return A strcture representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getGreen">
       
        <p>Gets a system-defined color that has an ARGB value of #FF008000.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getGreenYellow">
       
        <p>Gets a system-defined color that has an ARGB value of #FFADFF2F.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getHoneydew">
       
        <p>Gets a system-defined color that has an ARGB value of #FFF0FFF0.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getHotPink">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFF69B4.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getIndianRed">
       
        <p>Gets a system-defined color that has an ARGB value of #FFCD5C5C.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getIndigo">
       
        <p>Gets a system-defined color that has an ARGB value of #FF4B0082.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getIvory">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFFFF0.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getKhaki">
       
        <p>Gets a system-defined color that has an ARGB value of #FFF0E68C.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLavender">
       
        <p>Gets a system-defined color that has an ARGB value of #FFE6E6FA.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLavenderBlush">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFF0F5.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLawnGreen">
       
        <p>Gets a system-defined color that has an ARGB value of #FF7CFC00.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLemonChiffon">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFFACD.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLightBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FFADD8E6.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLightCoral">
       
        <p>Gets a system-defined color that has an ARGB value of #FFF08080.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLightCyan">
       
        <p>Gets a system-defined color that has an ARGB value of #FFE0FFFF.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLightGoldenrodYellow">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFAFAD2.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLightGreen">
       
        <p>Gets a system-defined color that has an ARGB value of #FF90EE90.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLightGray">
       
        <p>Gets a system-defined color that has an ARGB value of #FFD3D3D3.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLightPink">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFB6C1.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLightSalmon">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFA07A.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLightSeaGreen">
       
        <p>Gets a system-defined color that has an ARGB value of #FF20B2AA.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLightSkyBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FF87CEFA.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLightSlateGray">
       
        <p>Gets a system-defined color that has an ARGB value of #FF778899.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLightSteelBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FFB0C4DE.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLightYellow">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFFFE0.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLime">
       
        <p>Gets a system-defined color that has an ARGB value of #FF00FF00.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLimeGreen">
       
        <p>Gets a system-defined color that has an ARGB value of #FF32CD32.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLinen">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFAF0E6.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getMagenta">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFF00FF.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getMaroon">
       
        <p>Gets a system-defined color that has an ARGB value of #FF800000.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getMediumAquamarine">
       
        <p>Gets a system-defined color that has an ARGB value of #FF66CDAA.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getMediumBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FF0000CD.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getMediumOrchid">
       
        <p>Gets a system-defined color that has an ARGB value of #FFBA55D3.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getMediumPurple">
       
        <p>Gets a system-defined color that has an ARGB value of #FF9370DB.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getMediumSeaGreen">
       
        <p>Gets a system-defined color that has an ARGB value of #FF3CB371.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getMediumSlateBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FF7B68EE.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getMediumSpringGreen">
       
        <p>Gets a system-defined color that has an ARGB value of #FF00FA9A.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getMediumTurquoise">
       
        <p>Gets a system-defined color that has an ARGB value of #FF48D1CC.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getMediumVioletRed">
       
        <p>Gets a system-defined color that has an ARGB value of #FFC71585.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getMidnightBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FF191970.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getMintCream">
       
        <p>Gets a system-defined color that has an ARGB value of #FFF5FFFA.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getMistyRose">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFE4E1.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getMoccasin">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFE4B5.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getNavajoWhite">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFDEAD.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getNavy">
       
        <p>Gets a system-defined color that has an ARGB value of #FF000080.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getOldLace">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFDF5E6.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getOlive">
       
        <p>Gets a system-defined color that has an ARGB value of #FF808000.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getOliveDrab">
       
        <p>Gets a system-defined color that has an ARGB value of #FF6B8E23.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getOrange">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFA500.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getOrangeRed">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFF4500.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getOrchid">
       
        <p>Gets a system-defined color that has an ARGB value of #FFDA70D6.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getPaleGoldenrod">
       
        <p>Gets a system-defined color that has an ARGB value of #FFEEE8AA.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getPaleGreen">
       
        <p>Gets a system-defined color that has an ARGB value of #FF98FB98.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getPaleTurquoise">
       
        <p>Gets a system-defined color that has an ARGB value of #FFAFEEEE.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getPaleVioletRed">
       
        <p>Gets a system-defined color that has an ARGB value of #FFDB7093.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getPapayaWhip">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFEFD5.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getPeachPuff">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFDAB9.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getPeru">
       
        <p>Gets a system-defined color that has an ARGB value of #FFCD853F.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getPink">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFC0CB.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getPlum">
       
        <p>Gets a system-defined color that has an ARGB value of #FFDDA0DD.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getPowderBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FFB0E0E6.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getPurple">
       
        <p>Gets a system-defined color that has an ARGB value of #FF800080.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getRed">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFF0000.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getRosyBrown">
       
        <p>Gets a system-defined color that has an ARGB value of #FFBC8F8F.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getRoyalBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FF4169E1.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getSaddleBrown">
       
        <p>Gets a system-defined color that has an ARGB value of #FF8B4513.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getSalmon">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFA8072.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getSandyBrown">
       
        <p>Gets a system-defined color that has an ARGB value of #FFF4A460.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getSeaGreen">
       
        <p>Gets a system-defined color that has an ARGB value of #FF2E8B57.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getSeaShell">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFF5EE.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getSienna">
       
        <p>Gets a system-defined color that has an ARGB value of #FFA0522D.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getSilver">
       
        <p>Gets a system-defined color that has an ARGB value of #FFC0C0C0.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getSkyBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FF87CEEB.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getSlateBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FF6A5ACD.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getSlateGray">
       
        <p>Gets a system-defined color that has an ARGB value of #FF708090.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getSnow">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFFAFA.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getSpringGreen">
       
        <p>Gets a system-defined color that has an ARGB value of #FF00FF7F.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getSteelBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FF4682B4.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getTan">
       
        <p>Gets a system-defined color that has an ARGB value of #FFD2B48C.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getTeal">
       
        <p>Gets a system-defined color that has an ARGB value of #FF008080.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getThistle">
       
        <p>Gets a system-defined color that has an ARGB value of #FFD8BFD8.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getTomato">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFF6347.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getTurquoise">
       
        <p>Gets a system-defined color that has an ARGB value of #FF40E0D0.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getViolet">
       
        <p>Gets a system-defined color that has an ARGB value of #FFEE82EE.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getWheat">
       
        <p>Gets a system-defined color that has an ARGB value of #FFF5DEB3.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getWhite">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFFFFF.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getWhiteSmoke">
       
        <p>Gets a system-defined color that has an ARGB value of #FFF5F5F5.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getYellow">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFFF00.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getYellowGreen">
       
        <p>Gets a system-defined color that has an ARGB value of #FF9ACD32.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.#ctor">
       
        <p>Default constructor.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Color.#ctor(double[])">
      Constructor @param vector double[] array
      <param name="double[]"/>
    </member>
    <member name="F:com.aspose.pdf.Color.Empty">
      Represents empty color.
    </member>
    <member name="T:com.aspose.pdf.ColorSpace">
       
        <p>The color spaces enumeration.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ColorSpace.DeviceRGB">
       
        <p>The device-dependent RGB color space.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ColorSpace.DeviceCMYK">
       
        <p>The device-dependent CMYK color space.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ColorSpace.DeviceGray">
       
        <p>The device-dependent gray color space.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.ColorType">
       
        <p>Specifies color type of elements on page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ColorType.getName(int)">&lt;p&gt; Returns String name for the enum value. &lt;/p&gt; &lt;hr&gt; Example: &lt;br&gt; {@code String s = ColorType.getName(ColorType.Grayscale); } @param value Enum value @return Value's name 
      <param name="int"/>
    </member>
    <member name="F:com.aspose.pdf.ColorType.Rgb">
       
        <p>RGB color type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ColorType.Grayscale">
       
        <p>Grayscale color type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ColorType.BlackAndWhite">
       
        <p>Black and white color type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ColorType.Undefined">
       
        <p>Undefined color type value.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.ColumnAdjustment">
       
        <p>Enumerates column adjustment types.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ColumnAdjustment.Customized">
       
        <p>Customized.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ColumnAdjustment.AutoFitToContent">
       
        <p>Auto fit to content.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ColumnAdjustment.AutoFitToWindow">
       
        <p>Auto fit to window.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.ColumnInfo">
       
        <p>This class represents a columns info.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ColumnInfo.getColumnWidths">
       
        <p>Gets or sets a string that contains the width of columns. The value of each column should be separated by blank.The default unit is point, but cm, inch and percentage of available width are also supported. For example,"120 2.5cm 1.5inch"</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.ColumnInfo.setColumnWidths(String)">
       
        <p>Gets or sets a string that contains the width of columns. The value of each column should be separated by blank.The default unit is point, but cm, inch and percentage of available width are also supported. For example,"120 2.5cm 1.5inch"</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.ColumnInfo.getColumnSpacing">&lt;p&gt; Gets or sets a string that contains the spacing between columns. The value of each spacing should be separated by blank. The default unit is point, but cm and inch are also supported.For example,"120 2.5cm 1.5inch". &lt;/p&gt;&lt;hr&gt; &lt;p&gt; If this property is not set, default value 0 will be used for each spacing. &lt;/p&gt; @return String value</member>
    <member name="M:com.aspose.pdf.ColumnInfo.setColumnSpacing(String)">&lt;p&gt; Gets or sets a string that contains the spacing between columns. The value of each spacing should be separated by blank. The default unit is point, but cm and inch are also supported.For example,"120 2.5cm 1.5inch". &lt;/p&gt;&lt;hr&gt; &lt;p&gt; If this property is not set, default value 0 will be used for each spacing. &lt;/p&gt; @param value String value 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.ColumnInfo.getColumnCount">
       
        <p>Gets int value that indicates the number of columns.</p> @return column count
      
    </member>
    <member name="M:com.aspose.pdf.ColumnInfo.setColumnCount(int)">
       
        <p>Sets int value that indicates the number of columns.</p> @param value column count
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.ColumnInfo.#ctor">
       
        <p>Initializes a new instance of the ColumnInfo class.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.ComboBoxField">
       
        <p>Class representing Combobox field of the form.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ComboBoxField.getEditable">
       
        <p>Gets editable status of the field.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.ComboBoxField.setEditable(boolean)">
       
        <p>Sets editable status of the field.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.ComboBoxField.getSpellCheck">
       
        <p>Gets spellchaeck activiity status.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.ComboBoxField.setSpellCheck(boolean)">
       
        <p>Sets spellchaeck activity status.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.ComboBoxField.#ctor">
      / * 
        <p>/ * Sets index of currently selected item in combo box list. / *</p> / * / * @param value / * int value /
      
    </member>
    <member name="M:com.aspose.pdf.ComboBoxField.#ctor(IDocument)">
       
        <p>Creates CombBox field to work with Generator.</p> @param doc Document where field will be created.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.ComboBoxField.#ctor(Page,Rectangle)">
      Constructor for ComboBox Field. @param page Page where field will be placed. @param rect Rectangle which defines size and position of the field on the page.
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.ComboBoxField.#ctor(IDocument,Rectangle)">
       
        <p>Constructor for Combobox field.</p> @param doc Document where field should be created. @param rect Rectangle which defines size and position of the field.
      
      <param name="IDocument"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.ComHelper">&lt;p&gt; Provides methods for COM clients to load a document into Aspose.PDF. &lt;/p&gt; &lt;hr&gt; &lt;p&gt; Use the ComHelper class to load a document from a file or stream into a Document object in a COM application. The Document class provides a default constructor to create a new document and also provides overloaded constructors to load a document from a file or stream. If you are using Aspose.Words from a .NET application, you can use all of the Document constructors directly, but if you are using Aspose.PDF from a COM application, only the default Document constructor is available. &lt;/p&gt;</member>
    <member name="M:com.aspose.pdf.ComHelper.openStream(InputStream)">
       
        <p>Initialize and return new Document instance from the {@code input} stream.</p> @return Document object @param input Stream with pdf document.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.ComHelper.openStream(InputStream,String)">
       
        <p>Initialize and return new Document instance from the {@code input} stream.</p> @return Document object @param input Input stream object, corresponding pdf is password protected. @param password User or owner password.
      
      <param name="InputStream"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.ComHelper.openStream(InputStream,boolean)">
       
        <p>Initialize and return new Document instance from the {@code input} stream.</p> @return Document object @param input Stream with pdf document. @param isManagedStream if set to {@code true} inner stream is closed before exit; otherwise, is not.
      
      <param name="InputStream"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.ComHelper.openStream(InputStream,String,boolean)">
       
        <p>Initialize and return new Document instance from the {@code input} stream.</p> @return Document object @param input Stream with pdf document. @param password User or owner password. @param isManagedStream if set to {@code true} inner stream is closed before exit; otherwise, is not.
      
      <param name="InputStream"/>
      <param name="String"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.ComHelper.openStream(InputStream,LoadOptions)">
       
        <p>Open and return an existing document from a stream providing necessary converting to get pdf document.</p> @return Document object @param input Input stream to convert into pdf document. @param options Represents properties for converting {@code input} into pdf document.
      
      <param name="InputStream"/>
      <param name="LoadOptions"/>
    </member>
    <member name="M:com.aspose.pdf.ComHelper.openFile(String)">
       
        <p>Just create and return Document using {@code filename}. The same as {@code Document(Stream)}.</p> @return Document object @param filename The name of the pdf document file.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.ComHelper.openFile(String,String)">
       
        <p>Initialize and return new instance of the {@code Document} class for working with encrypted document.</p> @return Document object @param filename Document file name. @param password User or owner password.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.ComHelper.openFile(String,String,boolean)">
       
        <p>Initialize new instance of the {@code Document} class for working with encrypted document.</p> @return Document object @param filename Document file name. @param password User or owner password. @param isManagedStream if set to {@code true} inner stream is closed before exit; otherwise, is not.
      
      <param name="String"/>
      <param name="String"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.ComHelper.openFile(String,LoadOptions)">
       
        <p>Open an existing document from a file providing necessary converting oprions to get pdf document.</p> @return Document object @param filename Input file to convert into pdf document. @param options Represents properties for converting {@code filename} into pdf document.
      
      <param name="String"/>
      <param name="LoadOptions"/>
    </member>
    <member name="T:com.aspose.pdf.CommonFigureAnnotation">
       
        <p>Abstract class representing common figure annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.CommonFigureAnnotation.getInteriorColor">
       
        <p>Interior color with which to fill the annotation's rectangle or ellipse.</p> @return interior color with which to fill the annotation's rectangle or ellipse.
      
    </member>
    <member name="M:com.aspose.pdf.CommonFigureAnnotation.setInteriorColor(Color)">
       
        <p>Interior color with which to fill the annotation's rectangle or ellipse.</p> @param value interior color
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.CommonFigureAnnotation.getFrame">
       
        <p>The rectangle describing the numerical differences between two rectangles: the Rect entry of the annotation and the actual boundaries of the underlying square or circle.</p> @return rectangle frame
      
    </member>
    <member name="M:com.aspose.pdf.CommonFigureAnnotation.setFrame(Rectangle)">
       
        <p>The rectangle describing the numerical differences between two rectangles: the Rect entry of the annotation and the actual boundaries of the underlying square or circle.</p> @param value rectangle frame
      
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.CommonFigureAnnotation.#ctor(IDocument)">
       
        <p>Constructor for using in Generator.</p> @param document Document where annotation will be placed.
      
      <param name="IDocument"/>
    </member>
    <member name="T:com.aspose.pdf.CompositingParameters">
       
        <p>Represents an object containing graphics compositing parameters of current graphics state.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.CompositingParameters.getBlendMode">
       
        <p>Gets blend mode of current graphics state.</p> @return BlendMode element @see BlendMode
      
    </member>
    <member name="M:com.aspose.pdf.CompositingParameters.getFilterType">
       
        <p>Gets the image filter type.</p> @return ImageFilterType element @see ImageFilterType
      
    </member>
    <member name="M:com.aspose.pdf.CompositingParameters.isMasked">
       
        <p>Gets the mask flag.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.CompositingParameters.#ctor(int)">
       
        <p>Initializes new instance of the {@code CompositingParameters} object.</p> @param blendMode Blend mode of current graphics state. @see BlendMode
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.CompositingParameters.#ctor(int,int)">
       
        <p>Initializes new instance of the {@code CompositingParameters} object.</p> @param blendMode Blend mode of current graphics state. @param filterType The image filter type. @see BlendMode @see ImageFilterType
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.CompositingParameters.#ctor(int,int,boolean)">
       
        <p>Initializes new instance of the {@code CompositingParameters} object.</p> @param blendMode Blend mode of current graphics state. @param filterType The image filter type. @param isMasked The adding mask flag. @see BlendMode @see ImageFilterType
      
      <param name="int"/>
      <param name="int"/>
      <param name="boolean"/>
    </member>
    <member name="T:com.aspose.pdf.ContentDisposition">
       
        <p>MIME protocol Content-Disposition header.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ContentDisposition.Inline">
       
        <p>Result is shown inline.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ContentDisposition.Attachment">
       
        <p>Result is saved as attachment.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.ContentsAppender">
       
        <p>Performs contents modifications in APPEND mode only. this mode allows to avoid unneeded and heavy contents parsing before some change is made to the contents. It only appends new operators to the end or to the begin of the contents</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ContentsAppender.getBeginOperators">&lt;p&gt; returns begin operators &lt;/p&gt; @return {@code List&lt;Operator&gt;} object</member>
    <member name="M:com.aspose.pdf.ContentsAppender.getBeginCode">
      String containing operators to insert into start of page. @return String object
    </member>
    <member name="M:com.aspose.pdf.ContentsAppender.setBeginCode(String)">
      String containing operators to insert into start of page. @param value String object
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.ContentsAppender.getEndCode">
      Stirng containing operators to append to the end of page. @return String object
    </member>
    <member name="M:com.aspose.pdf.ContentsAppender.setEndCode(String)">
      String containing operators to insert into start of page. @param value String object
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.ContentsAppender.getEndOperators">&lt;p&gt; returns end operators &lt;/p&gt; @return {@code List&lt;Operator&gt;} object</member>
    <member name="M:com.aspose.pdf.ContentsAppender.appendToEnd(Operator)">
       
        <p>Appends operator to the begin of the contents</p> @param op Operator object
      
      <param name="Operator"/>
    </member>
    <member name="M:com.aspose.pdf.ContentsAppender.appendToEnd(Operator[])">
       
        <p>Appends operators to the begin of the contents</p> @param operators Operators array
      
      <param name="Operator[]"/>
    </member>
    <member name="M:com.aspose.pdf.ContentsAppender.appendToEnd(List&lt;Operator&gt;)">&lt;p&gt; Appends operators to the begin of the contents &lt;/p&gt; @param operators {@code List&lt;Operator&gt;} object 
      <param name="List&lt;Operator&gt;"/>
    </member>
    <member name="M:com.aspose.pdf.ContentsAppender.appendToBegin(Operator)">
       
        <p>Appends operator to the end of the contents</p> @param op Operator object
      
      <param name="Operator"/>
    </member>
    <member name="M:com.aspose.pdf.ContentsAppender.appendToBegin(Operator[])">
       
        <p>Appends operators to the end of the contents</p> @param operators Operators array
      
      <param name="Operator[]"/>
    </member>
    <member name="M:com.aspose.pdf.ContentsAppender.appendToBegin(List&lt;Operator&gt;)">&lt;p&gt; Appends operators to the end of the contents &lt;/p&gt; @param operators {@code List&lt;Operator&gt;} object 
      <param name="List&lt;Operator&gt;"/>
    </member>
    <member name="M:com.aspose.pdf.ContentsAppender.suppressUpdate">
      Suppresses update contents data The contents is not updated until ResumeUpdate is called
    </member>
    <member name="M:com.aspose.pdf.ContentsAppender.resumeUpdate">
      resumes document update
    </member>
    <member name="M:com.aspose.pdf.ContentsAppender.updateData">
      this is new version of UpdateData, which avoid decoding of the existing contents.
    </member>
    <member name="M:com.aspose.pdf.ContentsAppender.updateDataOld">
       
        <p>Must be called to apply the changes</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ContentsAppender.#ctor(Page)">
       
        <p>Initializez new instance of the contents appender with page attached</p> @param page Page object
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.ContentsAppender.#ctor(XForm)">
       
        <p>Initializes new instanse of the contets appender with Form XObject.</p> @param form XForm object
      
      <param name="XForm"/>
    </member>
    <member name="T:com.aspose.pdf.ConvertErrorAction">
       
        <p>This class represents action for conversion errors.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ConvertErrorAction.Delete">
      Delete convert errors
    </member>
    <member name="F:com.aspose.pdf.ConvertErrorAction.None">
      Do nothing with convert errors
    </member>
    <member name="T:com.aspose.pdf.ConvertSoftMaskAction">
       
        <p>This action represents actions for conversion of images with soft mask.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ConvertSoftMaskAction.Default">
       
        <p>Use default strategy.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ConvertSoftMaskAction.ConvertToStencilMask">
       
        <p>Soft mask will be converted into stencil mask.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.ConvertTransparencyAction">
       
        <p>This class represents action for conversion of transparency.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ConvertTransparencyAction.Default">
       
        <p>Use default strategy, no adding masks.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ConvertTransparencyAction.Mask">
       
        <p>Add transparent mask image.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Copier">
       
        <p>Class for coping object</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Copier.getIgnoreCorruptedObjects">
      get Ignore Corrupted Objects @return boolean value
    </member>
    <member name="M:com.aspose.pdf.Copier.setIgnoreCorruptedObjects(boolean)">
      Set Ignore Corrupted Objects @param value boolean value
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Copier.getReuseStreams">
      get Reuse Streams @return boolean value
    </member>
    <member name="M:com.aspose.pdf.Copier.setReuseStreams(boolean)">
      set Reuse Streams @param value boolean value
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Copier.getAllowReusePageContent">
      get Allow Reuse Page Content @return boolean value
    </member>
    <member name="M:com.aspose.pdf.Copier.setAllowReusePageContent(boolean)">
      set Allow Reuse Page Content @param value boolean value
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Copier.getUseStubs">
      get Use Stubs @return boolean value
    </member>
    <member name="M:com.aspose.pdf.Copier.setUseStubs(boolean)">
      set Use Stubs @param value boolean value
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Copier.getRestrictedKeys">
      get Restricted Keys @return String[] array
    </member>
    <member name="M:com.aspose.pdf.Copier.setRestrictedKeys(String[])">
      set Restricted Keys @param value String[] array
      <param name="String[]"/>
    </member>
    <member name="M:com.aspose.pdf.Copier.duplicate(IPdfPrimitive)">
      Duplicates IPdfPrimitive @param src IPdfPrimitive object @return IPdfPrimitive object
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.Copier.duplicate(IPdfPrimitive,boolean)">
       
        <p>Creates copy of object with all dependent object. The object may be from part of other document (e.g. coping pages between documents, etc.)</p> @param src IPdfPrimitive object @param IsResourceObject boolean value @return IPdfPrimitive object
      
      <param name="IPdfPrimitive"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Copier.#ctor(ITrailerable)">
      Constructor @param trailerable ITrailerable object
      <param name="ITrailerable"/>
    </member>
    <member name="T:com.aspose.pdf.CryptoAlgorithm">
      Represent type of cryptographic algorithm that used in encryption/decryption routines.
    </member>
    <member name="F:com.aspose.pdf.CryptoAlgorithm.RC4x40">
       
        <p>RC4 with key length 40.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.CryptoAlgorithm.RC4x128">
       
        <p>RC4 with key length 128.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.CryptoAlgorithm.AESx128">
       
        <p>AES with key length 128.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.CryptoAlgorithm.AESx256">
       
        <p>AES with key length 256.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.CustomExplicitDestination">
       
        <p>Represents custom explicit destination.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.CustomExplicitDestination.toString">
       
        <p>Converts to page number.</p> Returns PageNumber destination @return String interpretation.
      
    </member>
    <member name="T:com.aspose.pdf.Dash">
       
        <p>Class representing line dash pattern.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Dash.getOn">
       
        <p>Gets or sets length of dash.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.Dash.setOn(int)">
       
        <p>Sets length of dash.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Dash.getOff">
       
        <p>Gets length of gap between dashes.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.Dash.setOff(int)">
       
        <p>Sets length of gap between dashes.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Dash.#ctor(int,int)">
       
        <p>Constructor for Dash.</p> @param on Length of the dash. @param off Length of the gap.
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.DefaultAppearance">
       
        <p>Describes default appearance of field (font, text size and color).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DefaultAppearance.getFontSize">
       
        <p>Gets font size in default appearance.</p> @return font size
      
    </member>
    <member name="M:com.aspose.pdf.DefaultAppearance.setFontSize(double)">
       
        <p>Sets font size in default appearance.</p> @param value font size
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.DefaultAppearance.getTextColor">
       
        <p>Gets color of text in the default appearance.</p> @return Color object
      
    </member>
    <member name="M:com.aspose.pdf.DefaultAppearance.setTextColor(java.awt.Color)">
       
        <p>Sets color of text in the default appearance.</p> @param color Color object
      
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.DefaultAppearance.getFontName">
       
        <p>Gets font name in the default appearance.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.DefaultAppearance.setFontName(String)">
       
        <p>Gets font name in the default appearance.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.DefaultAppearance.getFontResourceName">
       
        <p>Gets font name in the default appearance.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.DefaultAppearance.setFontResourceName(String)">
       
        <p>Gets font name in the default appearance.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.DefaultAppearance.getFont">
       
        <p>Gets font specified as default for text.</p> @return Font value
      
    </member>
    <member name="M:com.aspose.pdf.DefaultAppearance.getText">
       
        <p>Gets the list of pdf operators which represent appearence.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.DefaultAppearance.#ctor">
       
        <p>Constructor of DefaultAppearance.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DefaultAppearance.#ctor(IPdfDictionary)">
      <param name="IPdfDictionary"/>
    </member>
    <member name="M:com.aspose.pdf.DefaultAppearance.#ctor(IPdfPrimitive)">
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.DefaultAppearance.#ctor(String,double,java.awt.Color)">
       
        <p>Constructor of DefaultAppearance.</p> @param fontName Font name. @param fontSize Font size. @param textColor Color of text.
      
      <param name="String"/>
      <param name="double"/>
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.DefaultAppearance.#ctor(com.aspose.pdf.Font,double,java.awt.Color)">
       
        <p>Constructor of DefaultAppearance.</p> @param font Font which will be used as default. @param fontSize Font size. @param textColor Color of text.
      
      <param name="com.aspose.pdf.Font"/>
      <param name="double"/>
      <param name="java.awt.Color"/>
    </member>
    <member name="T:com.aspose.pdf.DefaultDirectory">
       
        <p>Specifies default path for some purpose</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DefaultDirectory.getDefaultDirectory">
      Gets the current working directory for the internal processes. @return String value
    </member>
    <member name="M:com.aspose.pdf.DefaultDirectory.setDefaultDirectory(String)">
      Gets the current working directory for the internal processes. The directory should be exist. @param value String value
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.DestinationCollection">
       
        <p>Class represents the collection of all destinations (a name tree mapping name strings to destinations (see 12.3.2.3, "Named Destinations") and (see 7.7.4, "Name Dictionary")) in the pdf document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DestinationCollection.size">
       
        <p>Gets the number of elements contained in the collection.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.DestinationCollection.isReadOnly">
       
        <p>Gets a value indicating whether the collection is read-only.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.DestinationCollection.get_Item(int)">
       
        <p>Gets the destination object by index.</p> @param index The index of destination to get. @return Destination.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.DestinationCollection.getPageNumber(String,boolean)">
       
        <p>Returns the page number of destination by the name.</p> @param destinameName The name of destination. @param useCache Determines whether cached version of collection is used or not. @return The page number if destination was found; otherwise, -1.
      
      <param name="String"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.DestinationCollection.getExplicitDestination(String,boolean)">
       
        <p>Returns the explicit destination by the name.</p> @param destinameName The name of destination. @param useCache Determines whether cached version of collection is used or not. @return The ExplicitDestination object for destination found; otherwise, null.
      
      <param name="String"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.DestinationCollection.iterator">
       
        <p>Returns the enumerator.</p> @return The enumerator.
      
    </member>
    <member name="M:com.aspose.pdf.DestinationCollection.indexOf(KeyValuePair&lt;String, Object&gt;)">
       
        <p>Returns the index of destination in collection.</p> @param value The value to find. @return The index of destination in collection.
      
      <param name="KeyValuePair&lt;String, Object&gt;"/>
    </member>
    <member name="M:com.aspose.pdf.DestinationCollection.contains(KeyValuePair&lt;String, Object&gt;)">
       
        <p>Determines whether this instance contains the object.</p> @param value The value to find. @return {@code true} if [contains] [the specified value]; otherwise, {@code false}.
      
      <param name="KeyValuePair&lt;String, Object&gt;"/>
    </member>
    <member name="M:com.aspose.pdf.DestinationCollection.copyTo(KeyValuePair&lt;String, Object&gt;[],int)">
       
        <p>Copies the elements of the collection to an Array, starting at a particular Array index.</p> @param array The one-dimensional Array that is the destination of the elements copied from collection @param arrayIndex The zero-based index in array at which copying begins.
      
      <param name="KeyValuePair&lt;String, Object&gt;[]"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.DestinationCollection.clear">
       
        <p>Collection is read-only. Always throws NotSupportedException exception.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.DestinationFactory">
      Represents DestinationFactory class
    </member>
    <member name="M:com.aspose.pdf.DestinationFactory.create(IPdfPrimitive)">
      Creates IAppointment object @param destination IPdfPrimitive object @return IAppointment object
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.DestinationFactory.create(ITrailerable,IAppointment)">
      Creates IPdfPrimitive object @param trailer ITrailerable object @param destination IAppointment object @return IPdfPrimitive object
      <param name="ITrailerable"/>
      <param name="IAppointment"/>
    </member>
    <member name="T:com.aspose.pdf.devices.BmpDevice">
       
        <p>Represents image device that helps to save pdf document pages into bmp.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.BmpDevice.processInternal(Page,Stream)">
      For Internal usage only! 
        <p>Converts the page into bmp and saves it in the output stream.</p> @param page The page to convert. @param output Output stream with bmp image.
      
      <param name="Page"/>
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.BmpDevice.process(Page,OutputStream)">
       
        <p>Converts the page into bmp and saves it in the output stream.</p> @param page The page to convert. @param output Output stream with bmp image.
      
      <param name="Page"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.BmpDevice.#ctor">
       
        <p>Initializes a new instance of the {@code BmpDevice} class with default resolution.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.BmpDevice.#ctor(Resolution)">
       
        <p>Initializes a new instance of the {@code BmpDevice} class.</p> @param resolution Resolution for the result image file, see {@code Resolution} class.
      
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.BmpDevice.#ctor(int,int,Resolution)">
       
        <p>Initializes a new instance of the {@code BmpDevice} class with provided image dimensions and resolution.</p> @param width Image output width. @param height Image output height. @param resolution Resolution for the result image file, see {@code Resolution} class.
      
      <param name="int"/>
      <param name="int"/>
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.BmpDevice.#ctor(PageSize,Resolution)">
       
        <p>Initializes a new instance of the {@code BmpDevice} class with provided page size and resolution.</p> @param pageSize Page size of the output image. @param resolution Resolution for the result image file, see {@code Resolution} class.
      
      <param name="PageSize"/>
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.BmpDevice.#ctor(int,int)">
       
        <p>Initializes a new instance of the {@code BmpDevice} class with provided image dimensions, default resolution (=150).</p> @param width Image output width. @param height Image output height.
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.BmpDevice.#ctor(PageSize)">
       
        <p>Initializes a new instance of the {@code BmpDevice} class with provided page size, default resolution (=150).</p> @param pageSize Page size of the output image.
      
      <param name="PageSize"/>
    </member>
    <member name="T:com.aspose.pdf.devices.ColorDepth">
       
        <p>Used to specify the parameter value passed to a Tiff image device.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.devices.ColorDepth.Default">
       
        <p>Default color depth</p> 
      
    </member>
    <member name="F:com.aspose.pdf.devices.ColorDepth.Format8bpp">
       
        <p>8 bits per pixel. Equal {@code PixelFormat.Format8bppIndexed}</p> 
      
    </member>
    <member name="F:com.aspose.pdf.devices.ColorDepth.Format4bpp">
       
        <p>4 bits per pixel. Equal {@code PixelFormat.Format4bppIndexed}</p> 
      
    </member>
    <member name="F:com.aspose.pdf.devices.ColorDepth.Format1bpp">
       
        <p>1 bit per pixel. Equal {@code PixelFormat.Format32bppRgb}</p> 
      
    </member>
    <member name="T:com.aspose.pdf.devices.CompressionType">
       
        <p>Used to specify the parameter value passed to a Tiff image device.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.devices.CompressionType.LZW">
       
        <p>Specifies the LZW compression scheme. Can be passed to the Tiff encoder as a parameter that belongs to the Compression category.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.devices.CompressionType.CCITT4">
       
        <p>Specifies the CCITT4 compression scheme. Can be passed to the CCITT4 encoder as a parameter that belongs to the Compression category.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.devices.CompressionType.CCITT3">
       
        <p>Specifies the CCITT3 compression scheme. Can be passed to the CCITT3 encoder as a parameter that belongs to the Compression category.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.devices.CompressionType.RLE">
       
        <p>Specifies the RLE compression scheme. Can be passed to the RLE encoder as a parameter that belongs to the Compression category.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.devices.CompressionType.None">
       
        <p>Specifies no compression. Can be passed to the Tiff encoder as a parameter that belongs to the compression category.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.devices.Device">
       
        <p>Abstract class for all types of devices. Device is used to represent pdf document in some format. For example, document page can be represented as image or text.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.devices.DocumentDevice">
       
        <p>Abstract class for all devices which is used to process the whole pdf document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.DocumentDevice.processInternal(IDocument,int,int,Stream)">
       
        <p>Each device represents some operation on the document, e.g. we can convert pdf document into another format.</p> @param document The document to process. @param fromPage Defines the page from which to start processing. @param toPage Defines the last page to process. @param output Defines stream where the results of processing are stored.
      
      <param name="IDocument"/>
      <param name="int"/>
      <param name="int"/>
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.DocumentDevice.process(IDocument,int,int,OutputStream)">
       
        <p>Each device represents some operation on the document, e.g. we can convert pdf document into another format.</p> @param document The document to process. @param fromPage Defines the page from which to start processing. @param toPage Defines the last page to process. @param output Defines stream where the results of processing are stored.
      
      <param name="IDocument"/>
      <param name="int"/>
      <param name="int"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.DocumentDevice.processInternal(IDocument,Stream)">
       
        <p>Processes the whole document and saves results into stream.</p> @param document The document to process. @param output Defines stream where the results of processing are stored.
      
      <param name="IDocument"/>
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.DocumentDevice.process(IDocument,OutputStream)">
       
        <p>Processes the whole document and saves results into stream.</p> @param document The document to process. @param output Defines stream where the results of processing are stored.
      
      <param name="IDocument"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.DocumentDevice.process(IDocument,String)">
       
        <p>Processes the whole document and saves results into file.</p> @param document The document to process. @param outputFileName Defines file where the results of processing are stored.
      
      <param name="IDocument"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.devices.DocumentDevice.process(IDocument,int,int,String)">
       
        <p>Processes certain pages of the document and saves results into file.</p> @param document The document to process. @param fromPage The first page to start processing. @param toPage The last page of processing. @param outputFileName Defines file where the results of processing are stored.
      
      <param name="IDocument"/>
      <param name="int"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.devices.DocumentDevice.binarizeBradley(InputStream,OutputStream,double)">
       
        <p>Do Bradley binarization for input stream.</p> @param inputImageStream The input image stream. @param outputImageStream The output image stream. @param threshold The threshold value between 0.0 and 1.0.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.devices.EmfDevice">
       
        <p>Represents image device that helps to save pdf document pages into emf.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.EmfDevice.processInternal(Page,Stream)">
       
        <p>Converts the page into emf and saves it in the output stream.</p> @param page The page to convert. @param output Output stream with emf image.
      
      <param name="Page"/>
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.EmfDevice.process(Page,OutputStream)">
       
        <p>Converts the page into emf and saves it in the output stream.</p> @param page The page to convert. @param output Output stream with emf image.
      
      <param name="Page"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.EmfDevice.#ctor">
       
        <p>Initializes a new instance of the {@code EmfDevice} class with default resolution of raster image written to emf.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.EmfDevice.#ctor(Resolution)">
       
        <p>Initializes a new instance of the {@code EmfDevice} class.</p> @param resolution Resolution for the raster image written to emf, see {@code Resolution} class.
      
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.EmfDevice.#ctor(int,int)">
       
        <p>Initializes a new instance of the {@code EmfDevice} class with provided image dimensions, and default resolution for the raster image written to emf (=150)</p> @param width Image output width. @param height Image output height.
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.EmfDevice.#ctor(PageSize)">
       
        <p>Initializes a new instance of the {@code EmfDevice} class with provided page size, and default resolution for the raster image written to emf (=150)</p> @param pageSize Page size of the output image.
      
      <param name="PageSize"/>
    </member>
    <member name="M:com.aspose.pdf.devices.EmfDevice.#ctor(int,int,Resolution)">
       
        <p>Initializes a new instance of the {@code JpegDevice} class with provided image dimensions, and resolution for the raster image written to emf.</p> @param width Image output width. @param height Image output height. @param resolution Resolution for the for the raster image written to emf, see {@code Resolution} class.
      
      <param name="int"/>
      <param name="int"/>
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.EmfDevice.#ctor(PageSize,Resolution)">
       
        <p>Initializes a new instance of the {@code JpegDevice} class with provided page size, and resolution for the raster image written to emf.</p> @param pageSize Page size of the output image. @param resolution Resolution for the for the raster image written to emf, see {@code Resolution} class.
      
      <param name="PageSize"/>
      <param name="Resolution"/>
    </member>
    <member name="T:com.aspose.pdf.devices.FormPresentationMode">
       
        <p>Used to specify the form presentation mode when printing or converting to image pdf documents.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.devices.FormPresentationMode.Production">
       
        <p>Specifies Production form presentation mode (used by default).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.devices.FormPresentationMode.Editor">&lt;p&gt; Specifies Editor form presentation mode. &lt;/p&gt; &lt;hr&gt; &lt;p&gt; The Editor mode is used by some products to display forms. In Editor mode some form elements are displayed as they are shown in form designer. &lt;/p&gt;</member>
    <member name="T:com.aspose.pdf.devices.GifDevice">
       
        <p>Represents image device that helps to save pdf document pages into gif.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.GifDevice.processInternal(Page,Stream)">
       
        <p>Converts the page into gif and saves it in the output stream.</p> @param page The page to convert. @param output Output stream with gif image.
      
      <param name="Page"/>
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.GifDevice.process(Page,OutputStream)">
       
        <p>Converts the page into gif and saves it in the output stream.</p> @param page The page to convert. @param output Output stream with gif image.
      
      <param name="Page"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.GifDevice.#ctor">
       
        <p>Initializes a new instance of the {@code GifDevice} class with default resolution.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.GifDevice.#ctor(Resolution)">
       
        <p>Initializes a new instance of the {@code GifDevice} class.</p> @param resolution Resolution for the result image file, see {@code Resolution} class.
      
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.GifDevice.#ctor(int,int,Resolution)">
       
        <p>Initializes a new instance of the {@code GifDevice} class with provided image dimensions and resolution.</p> @param width Image output width. @param height Image output height. @param resolution Resolution for the result image file, see {@code Resolution} class.
      
      <param name="int"/>
      <param name="int"/>
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.GifDevice.#ctor(PageSize,Resolution)">
       
        <p>Initializes a new instance of the {@code GifDevice} class with provided page size and resolution.</p> @param pageSize Page size of the output image. @param resolution Resolution for the result image file, see {@code Resolution} class.
      
      <param name="PageSize"/>
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.GifDevice.#ctor(int,int)">
       
        <p>Initializes a new instance of the {@code GifDevice} class with provided image dimensions, default resolution (=150).</p> @param width Image output width. @param height Image output height.
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.GifDevice.#ctor(PageSize)">
       
        <p>Initializes a new instance of the {@code GifDevice} class with provided page size, default resolution (=150).</p> @param pageSize Page size of the output image.
      
      <param name="PageSize"/>
    </member>
    <member name="T:com.aspose.pdf.devices.GraphicsDevice">
       
        <p>Represents image device that helps to render pdf document pages into graphics.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.GraphicsDevice.process(Page,Stream)">
       
        <p>Perfoms some operation on the given page, e.g. converts page into graphic image.</p> @param page The page to process. @param output This stream contains the results of processing.
      
      <param name="Page"/>
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.GraphicsDevice.processInternal(Page,Stream)">
      internal method @param page Page object @param output internal object
      <param name="Page"/>
      <param name="Stream"/>
    </member>
    <member name="T:com.aspose.pdf.devices.ImageDevice">
       
        <p>An abstract class for image devices.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.isShadingPerformanceHigh">
       
        <p>Is the performance of shading processes High. 
          <br/> By default it true.
        </p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.setShadingPerformanceHigh(boolean)">
       
        <p>Sets the the performance of shading processes High or not.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.getCoordinateType">
       
        <p>Gets the page coordinate type (Media/Crop boxes). CropBox value is used by default.</p> @return PageCoordinateType element @see PageCoordinateType
      
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.setCoordinateType(int)">
       
        <p>Sets the page coordinate type (Media/Crop boxes). CropBox value is used by default.</p> @param value PageCoordinateType element @see PageCoordinateType
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.getRenderingOptions">
       
        <p>Gets rendering options.</p> @return RenderingOptions element
      
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.setRenderingOptions(RenderingOptions)">
       
        <p>Sets rendering options.</p> @param value RenderingOptions element
      
      <param name="RenderingOptions"/>
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.getFormPresentationMode">
       
        <p>Gets form presentation mode.</p> @return FormPresentationMode element @see FormPresentationMode
      
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.setFormPresentationMode(int)">
       
        <p>Sets form presentation mode.</p> @param value FormPresentationMode element @see FormPresentationMode
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.getResolution">
       
        <p>Gets image resolution.</p> @return Resolution element
      
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.getWidth">
       
        <p>Gets image output width.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.getHeight">
       
        <p>Gets image output height.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.getCropRectangle">
      Get rectangle that defines the area that will be converted into a picture. The default is null, in which case the whole page is converted to an image. @return Rectangle object
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.setCropRectangle(com.aspose.pdf.Rectangle)">
      Set rectangle that defines the area that will be converted into a picture. The default is null, in which case the whole page is converted to an image. @param cropRectangle Rectangle object
      <param name="com.aspose.pdf.Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.#ctor">
       
        <p>Abstract initializer for {@code ImageDevice} descendants, set resolution to 150x150.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.#ctor(Resolution)">
       
        <p>Abstract initializer for {@code ImageDevice} descendants.</p> @param resolution Resolution for the result image file, see {@code Resolution} class.
      
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.#ctor(int,int)">
       
        <p>Initializes a new instance of the {@code JpegDevice} class with provided image dimensions and default resolution (=150).</p> @param width Image output width. @param height Image output height.
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.#ctor(PageSize)">
       
        <p>Initializes a new instance of the {@code JpegDevice} class with provided image dimensions and default resolution (=150).</p> @param pageSize Page size of the output image.
      
      <param name="PageSize"/>
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.#ctor(int,int,Resolution)">
       
        <p>Initializes a new instance of the {@code JpegDevice} class with provided image dimensions and resolution.</p> @param width Image output width. @param height Image output height. @param resolution Resolution for the result image file, see {@code Resolution} class.
      
      <param name="int"/>
      <param name="int"/>
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.#ctor(PageSize,Resolution)">
       
        <p>Initializes a new instance of the {@code JpegDevice} class with provided image dimensions and resolution.</p> @param pageSize Page size of the output image. @param resolution Resolution for the result image file, see {@code Resolution} class.
      
      <param name="PageSize"/>
      <param name="Resolution"/>
    </member>
    <member name="T:com.aspose.pdf.devices.JpegDevice">
       
        <p>Represents image device that helps to save pdf document pages into jpeg.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.JpegDevice.processInternal(Page,Stream)">
       
        <p>Converts the page into jpeg and saves it in the output stream.</p> @param page The page to convert. @param output Output stream with jpeg image.
      
      <param name="Page"/>
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.JpegDevice.process(Page,OutputStream)">
       
        <p>Converts the page into jpeg and saves it in the output stream.</p> @param page The page to convert. @param output Output stream with jpeg image.
      
      <param name="Page"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.JpegDevice.#ctor">
       
        <p>Initializes a new instance of the {@code JpegDevice} class with default resolution and maximum quality.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.JpegDevice.#ctor(Resolution)">
       
        <p>Initializes a new instance of the {@code JpegDevice} class.</p> @param resolution Resolution for the result image file, see {@code Resolution} class.
      
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.JpegDevice.#ctor(int)">
       
        <p>Initializes a new instance of the {@code JpegDevice} class.</p> @param quality Specifies the level of compression for an image. The range of useful values for the quality is from 0 to 100. The lower the number specified, the higher the compression and therefore the lower the quality of the image. Zero would give you the lowest quality image and 100 the highest.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.JpegDevice.#ctor(Resolution,int)">
       
        <p>Initializes a new instance of the {@code JpegDevice} class.</p> @param resolution Resolution for the result image file, see {@code Resolution} class. @param quality Specifies the level of compression for an image. The range of useful values for the quality is from 0 to 100. The lower the number specified, the higher the compression and therefore the lower the quality of the image. Zero would give you the lowest quality image and 100 the highest.
      
      <param name="Resolution"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.JpegDevice.#ctor(int,int)">
       
        <p>Initializes a new instance of the {@code JpegDevice} class with provided image dimensions, default resolution (=150) and maximum quality.</p> @param width Image output width. @param height Image output height.
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.JpegDevice.#ctor(PageSize)">
       
        <p>Initializes a new instance of the {@code JpegDevice} class with provided page size, default resolution (=150) and maximum quality.</p> @param pageSize Page size of the output image.
      
      <param name="PageSize"/>
    </member>
    <member name="M:com.aspose.pdf.devices.JpegDevice.#ctor(int,int,Resolution)">
       
        <p>Initializes a new instance of the {@code JpegDevice} class with provided image dimensions, resolution and maximum quality.</p> @param width Image output width. @param height Image output height. @param resolution Resolution for the result image file, see {@code Resolution} class.
      
      <param name="int"/>
      <param name="int"/>
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.JpegDevice.#ctor(PageSize,Resolution)">
       
        <p>Initializes a new instance of the {@code JpegDevice} class with provided page size, resolution and maximum quality.</p> @param pageSize Page size of the output image. @param resolution Resolution for the result image file, see {@code Resolution} class.
      
      <param name="PageSize"/>
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.JpegDevice.#ctor(int,int,Resolution,int)">
       
        <p>Initializes a new instance of the {@code JpegDevice} class with provided image dimensions, resolution and quality.</p> @param width Image output width. @param height Image output height. @param resolution Resolution for the result image file, see {@code Resolution} class. @param quality Specifies the level of compression for an image. The range of useful values for the quality is from 0 to 100. The lower the number specified, the higher the compression and therefore the lower the quality of the image. Zero would give you the lowest quality image and 100 the highest.
      
      <param name="int"/>
      <param name="int"/>
      <param name="Resolution"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.JpegDevice.#ctor(PageSize,Resolution,int)">
       
        <p>Initializes a new instance of the {@code JpegDevice} class with provided page size, resolution and quality.</p> @param pageSize Page size of the output image. @param resolution Resolution for the result image file, see {@code Resolution} class. @param quality Specifies the level of compression for an image. The range of useful values for the quality is from 0 to 100. The lower the number specified, the higher the compression and therefore the lower the quality of the image. Zero would give you the lowest quality image and 100 the highest.
      
      <param name="PageSize"/>
      <param name="Resolution"/>
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.devices.Margins">
       
        <p>This class represents margins of an image.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.Margins.getLeft">
       
        <p>Gets the left.</p> @return int value: The left.
      
    </member>
    <member name="M:com.aspose.pdf.devices.Margins.setLeft(int)">
       
        <p>Sets the left.</p> @param value int value: The left.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.Margins.getRight">
       
        <p>Gets the right.</p> @return int value: The right.
      
    </member>
    <member name="M:com.aspose.pdf.devices.Margins.setRight(int)">
       
        <p>Sets the right.</p> @param value int value: The right.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.Margins.getTop">
       
        <p>Gets the top.</p> @return int value: The top.
      
    </member>
    <member name="M:com.aspose.pdf.devices.Margins.setTop(int)">
       
        <p>Sets the top.</p> @param value int value: The top.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.Margins.getBottom">
       
        <p>Gets the bottom.</p> @return int value: The bottom.
      
    </member>
    <member name="M:com.aspose.pdf.devices.Margins.setBottom(int)">
       
        <p>Sets the bottom.</p> @param value int value: The bottom.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.Margins.#ctor(int,int,int,int)">
       
        <p>Initializes a new instance of the {@code Margins} class.</p> @param left The left coordinate. @param right The right coordinate. @param top The top coordinate. @param bottom The bottom coordinate.
      
      <param name="int"/>
      <param name="int"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.Margins.#ctor">
       
        <p>Initializes a new instance of the {@code Margins} class.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.devices.PageDevice">
       
        <p>Abstract class for all devices which is used to process certain page the pdf document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.PageDevice.processInternal(Page,Stream)">
       
        <p>Performs some operation on the given page, e.g. converts page into graphic image.</p> @param page The page to process. @param output This stream contains the results of processing.
      
      <param name="Page"/>
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.PageDevice.process(Page,OutputStream)">
       
        <p>Performs some operation on the given page, e.g. converts page into graphic image.</p> @param page The page to process. @param output This stream contains the results of processing.
      
      <param name="Page"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.PageDevice.process(Page,String)">
       
        <p>Performs some operation on the given page and saves results into the file.</p> @param page The page to process. @param outputFileName This file contains the results of processing.
      
      <param name="Page"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.devices.PageDevice.process(Page,Graphics)">
       
        <p>Renders page on the graphics</p> @param page Page object @param gr internal object
      
      <param name="Page"/>
      <param name="Graphics"/>
    </member>
    <member name="T:com.aspose.pdf.devices.PngDevice">
       
        <p>Represents image device that helps to save pdf document pages into png.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.PngDevice.processInternal(Page,Stream)">
       
        <p>Converts the page into png and saves it in the output stream.</p> @param page The page to convert. @param output Output stream with png image.
      
      <param name="Page"/>
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.PngDevice.process(Page,OutputStream)">
       
        <p>Converts the page into png and saves it in the output stream.</p> @param page The page to convert. @param output Output stream with png image.
      
      <param name="Page"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.PngDevice.processToBufferedImage(Page)">
       
        <p>Converts the page into BufferedImage.</p> @param page The page to convert. @return BufferedImage Output BufferedImage image.
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.devices.PngDevice.processToBufferedImageBinarized(Page,double)">
       
        <p>Converts the page into BufferedImage with Bradley binarization.</p> @param page The page to convert. @param threshold The threshold value between 0.0 and 1.0. @return BufferedImage Output BufferedImage image.
      
      <param name="Page"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.devices.PngDevice.#ctor">
       
        <p>Initializes a new instance of the {@code PngDevice} class with default resolution.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.PngDevice.#ctor(Resolution)">
       
        <p>Initializes a new instance of the {@code PngDevice} class.</p> @param resolution Resolution for the result image file, see {@code Resolution} class.
      
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.PngDevice.#ctor(int,int,Resolution)">
       
        <p>Initializes a new instance of the {@code PngDevice} class with provided image dimensions and resolution.</p> @param width Image output width. @param height Image output height. @param resolution Resolution for the result image file, see {@code Resolution} class.
      
      <param name="int"/>
      <param name="int"/>
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.PngDevice.#ctor(PageSize,Resolution)">
       
        <p>Initializes a new instance of the {@code PngDevice} class with provided page size and resolution.</p> @param pageSize Page size of the output image. @param resolution Resolution for the result image file, see {@code Resolution} class.
      
      <param name="PageSize"/>
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.PngDevice.#ctor(int,int)">
       
        <p>Initializes a new instance of the {@code PngDevice} class with provided image dimensions, default resolution (=150).</p> @param width Image output width. @param height Image output height.
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.PngDevice.#ctor(PageSize)">
       
        <p>Initializes a new instance of the {@code PngDevice} class with provided page size, default resolution (=150).</p> @param pageSize Page size of the output image.
      
      <param name="PageSize"/>
    </member>
    <member name="T:com.aspose.pdf.devices.Resolution">
       
        <p>Represents class for holding image resolution.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.Resolution.getX">
       
        <p>Gets horizontal image resolution.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.devices.Resolution.setX(int)">
       
        <p>Sets horizontal image resolution.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.Resolution.getY">
       
        <p>Gets vertical image resolution.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.devices.Resolution.setY(int)">
       
        <p>Sets vertical image resolution.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.Resolution.#ctor(int)">
       
        <p>Initializes a new instance of the {@code Resolution} class.</p> @param value Value which represents the horizontal and vertical resolution.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.Resolution.#ctor(int,int)">
       
        <p>Initializes a new instance of the {@code Resolution} class.</p> @param valueX Horizontal resolution. @param valueY Vertical resolution.
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.devices.ShapeType">
       
        <p>This enum represents shape type for the extracted images.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.devices.ShapeType.None">
       
        <p>Original image shape.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.devices.ShapeType.Landscape">
       
        <p>Landscape Shape.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.devices.ShapeType.Portrait">
       
        <p>Portrait Shape.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.devices.TextDevice">&lt;p&gt; Represents class for converting pdf document pages into text. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to extract text on the first PDF document page. Document doc = new Document(inFile); String extractedText; ByteArrayOutputStream ms = new ByteArrayOutputStream(); try { // create text device TextDevice device = new TextDevice(); // convert the page and save text to the stream device.process(doc.getPages().get_Item(1), ms); // use the extracted text extractedText = Encoding.getUnicode().getString(ms.toByteArray()); ms.close(); } catch (IOException e) { e.printStackTrace(); } &lt;/pre&gt; &lt;hr&gt; &lt;p&gt; The {@code TextDevice} object is basically used to extract text from pdf page. &lt;/p&gt;</member>
    <member name="M:com.aspose.pdf.devices.TextDevice.getExtractionOptions">&lt;p&gt; Gets text extraction options. &lt;/p&gt; @return TextExtractionOptions element &lt;hr&gt; &lt;pre&gt; The example demonstrates how to extracted text in raw order. Document doc = new Document(inFile); String extractedText; // create text device TextDevice device = new TextDevice(new TextExtractionOptions(TextExtractionOptions.TextFormattingMode.Raw)); // convert the page and save text to the stream device.process(doc.getPages().get_Item(1), outFile); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.devices.TextDevice.setExtractionOptions(TextExtractionOptions)">&lt;p&gt; Sets text extraction options. &lt;/p&gt; @param value TextExtractionOptions element &lt;hr&gt; &lt;pre&gt; The example demonstrates how to extracted text in raw order. Document doc = new Document(inFile); String extractedText; // create text device TextDevice device = new TextDevice(new TextExtractionOptions(TextExtractionOptions.TextFormattingMode.Raw)); // convert the page and save text to the stream device.process(doc.getPages().get_Item(1), outFile); &lt;/pre&gt; 
      <param name="TextExtractionOptions"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TextDevice.getEncodingInternal">&lt;p&gt; Gets encoding of extracted text. &lt;/p&gt; @return TextEncodingInternal element &lt;hr&gt; &lt;pre&gt; The example demonstrates how to represent extracted text in UTF-8 encoding. Document doc = new Document(inFile); String extractedText; // create text device TextDevice device = new TextDevice(java.nio.charset.Charset.forName("UTF-8")); // convert the page and save text to the stream device.process(doc.getPages().get_Item(1), outFile); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.devices.TextDevice.getEncoding">&lt;p&gt; Gets encoding of extracted text. &lt;/p&gt; @return Charset element &lt;hr&gt; &lt;pre&gt; The example demonstrates how to represent extracted text in UTF-8 encoding. Document doc = new Document(inFile); String extractedText; // create text device TextDevice device = new TextDevice(java.nio.charset.Charset.forName("UTF-8")); // convert the page and save text to the stream device.process(doc.getPages().get_Item(1), outFile); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.devices.TextDevice.setEncodingInternal(TextEncodingInternal)">&lt;p&gt; Sets encoding of extracted text. &lt;/p&gt; @param value TextEncodingInternal element &lt;hr&gt; &lt;pre&gt; The example demonstrates how to represent extracted text in UTF-8 encoding. Document doc = new Document(inFile); String extractedText; // create text device TextDevice device = new TextDevice(TextEncodingInternal.getUTF8()); // convert the page and save text to the stream device.process(doc.getPages().get_Item(1), outFile); &lt;/pre&gt; 
      <param name="TextEncodingInternal"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TextDevice.setEncoding(java.nio.charset.Charset)">&lt;p&gt; Sets encoding of extracted text. &lt;/p&gt; @param value Charset element &lt;hr&gt; &lt;pre&gt; The example demonstrates how to represent extracted text in UTF-8 encoding. Document doc = new Document(inFile); String extractedText; // create text device TextDevice device = new TextDevice(java.nio.charset.Charset.forName("UTF-8")); // convert the page and save text to the stream device.process(doc.getPages().get_Item(1), outFile); &lt;/pre&gt; 
      <param name="java.nio.charset.Charset"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TextDevice.processInternal(Page,Stream)">&lt;p&gt; Convert page and save it as text stream. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to extract text on the first PDF document page. Document doc = new Document(inFile); String extractedText; ByteArrayOutputStream ms = new ByteArrayOutputStream(); // create text device TextDevice device = new TextDevice(); // convert the page and save text to the stream device.process(doc.getPages().get_Item(1), ms); // use the extracted text extractedText = Encoding.getUnicode().getString(ms.toByteArray()); ms.close(); &lt;/pre&gt; @param page The page to convert. @param output Result stream. 
      <param name="Page"/>
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TextDevice.process(Page,OutputStream)">&lt;p&gt; Convert page and save it as text stream. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to extract text on the first PDF document page. Document doc = new Document(inFile); String extractedText; ByteArrayOutputStream ms = new ByteArrayOutputStream(); // create text device TextDevice device = new TextDevice(); // convert the page and save text to the stream device.process(doc.getPages().get_Item(1), ms); // use the extracted text extractedText = Encoding.getUnicode().getString(ms.toByteArray()); ms.close(); &lt;/pre&gt; @param page The page to convert. @param output Result stream. 
      <param name="Page"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TextDevice.#ctor(TextExtractionOptions)">
       
        <p>Initializes a new instance of the {@code TextDevice} with text extraction options.</p> @param extractionOptions Text extraction options.
      
      <param name="TextExtractionOptions"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TextDevice.#ctor">
       
        <p>Initializes a new instance of the {@code TextDevice} with the Raw text formatting mode and Unicode text encoding.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.TextDevice.#ctor(TextEncodingInternal)">
       
        <p>Initializes a new instance of the {@code TextDevice} for the specified encoding.</p> @param encoding Encoding of extracted text
      
      <param name="TextEncodingInternal"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TextDevice.#ctor(java.nio.charset.Charset)">
       
        <p>Initializes a new instance of the {@code TextDevice} for the specified encoding.</p> @param encoding Encoding of extracted text
      
      <param name="java.nio.charset.Charset"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TextDevice.#ctor(TextExtractionOptions,TextEncodingInternal)">
       
        <p>Initializes a new instance of the {@code TextDevice} for the specified encoding with text extraction options.</p> @param extractionOptions Text extraction options. @param encoding Encoding of extracted text.
      
      <param name="TextExtractionOptions"/>
      <param name="TextEncodingInternal"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TextDevice.#ctor(TextExtractionOptions,java.nio.charset.Charset)">
       
        <p>Initializes a new instance of the {@code TextDevice} for the specified encoding with text extraction options.</p> @param extractionOptions Text extraction options. @param encoding Encoding of extracted text.
      
      <param name="TextExtractionOptions"/>
      <param name="java.nio.charset.Charset"/>
    </member>
    <member name="T:com.aspose.pdf.devices.TiffDevice">
       
        <p>This class helps to save pdf document page by page into the one tiff image.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.getRenderingOptions">
       
        <p>Gets rendering options.</p> @return rendering options.
      
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.setRenderingOptions(RenderingOptions)">
       
        <p>Sets rendering options.</p> @param value rendering options.
      
      <param name="RenderingOptions"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.getFormPresentationMode">
       
        <p>Gets form presentation mode.</p> @return FormPresentationMode value @see FormPresentationMode
      
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.setFormPresentationMode(int)">
       
        <p>Gets form presentation mode.</p> @param value int value @see FormPresentationMode
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.getSettings">
       
        <p>Gets settings for mapping pdf into tiff image.</p> @return TiffSettings element
      
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.getResolution">
       
        <p>Gets image resolution.</p> @return Resolution element
      
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.processInternal(IDocument,int,int,Stream)">
       
        <p>Converts certain document pages into tiff and save it in the output stream.</p> @param document The document to convert. @param fromPage Defines page number from which converting will start. @param toPage Defines page number which will end the converting. @param output Output stream with tiff image.
      
      <param name="IDocument"/>
      <param name="int"/>
      <param name="int"/>
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.process(IDocument,int,int,OutputStream)">
       
        <p>Converts certain document pages into tiff and save it in the output stream.</p> @param document The document to convert. @param fromPage Defines page number from which converting will start. @param toPage Defines page number which will end the converting. @param output Output stream with tiff image.
      
      <param name="IDocument"/>
      <param name="int"/>
      <param name="int"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.getWidth">
       
        <p>Gets image output width.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.getHeight">
       
        <p>Gets image output height.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.getCropRectangle">
      Get rectangle that defines the area that will be converted into a picture. The default is null, in which case the all image is converted to a page @return Rectangle object
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.setCropRectangle(com.aspose.pdf.Rectangle)">
      Set rectangle that defines the area that will be converted into a picture. The default is null, in which case the all image is converted to a page @param cropRectangle Rectangle object
      <param name="com.aspose.pdf.Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor(Resolution)">
       
        <p>Initializes a new instance of the {@code TiffDevice} class.</p> @param resolution Resolution for the result image file.
      
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor(Resolution,TiffSettings)">
       
        <p>Initializes a new instance of the {@code TiffDevice} class.</p> @param resolution Resolution for the output image. @param settings Tiff settings, see {@code TiffSettings} class.
      
      <param name="Resolution"/>
      <param name="TiffSettings"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor(Resolution,TiffSettings,IIndexBitmapConverter)">
       
        <p>Initializes a new instance of the {@code TiffDevice} class.</p> @param resolution Resolution for the output image. @param settings Tiff settings, see {@code TiffSettings} class. @param converter External converter
      
      <param name="Resolution"/>
      <param name="TiffSettings"/>
      <param name="IIndexBitmapConverter"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor(TiffSettings)">
       
        <p>Initializes a new instance of the {@code TiffDevice} class.</p> @param settings Tiff settings, see {@code TiffSettings} class.
      
      <param name="TiffSettings"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor(TiffSettings,IIndexBitmapConverter)">
       
        <p>Initializes a new instance of the {@code TiffDevice} class.</p> @param settings Tiff settings, see {@code TiffSettings} class. @param converter External converter
      
      <param name="TiffSettings"/>
      <param name="IIndexBitmapConverter"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor">
       
        <p>Initializes a new instance of the {@code TiffDevice} class with default settings.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor(int,int,Resolution,TiffSettings)">
       
        <p>Initializes a new instance of the {@code TiffDevice} class.</p> @param width Image output width. @param height Image output height. @param resolution Resolution for the output image. @param settings Tiff settings, see {@code TiffSettings} class.
      
      <param name="int"/>
      <param name="int"/>
      <param name="Resolution"/>
      <param name="TiffSettings"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor(int,int,Resolution,TiffSettings,IIndexBitmapConverter)">
       
        <p>Initializes a new instance of the {@code TiffDevice} class.</p> @param width Image output width. @param height Image output height. @param resolution Resolution for the output image. @param settings Tiff settings, see {@code TiffSettings} class. @param converter External converter
      
      <param name="int"/>
      <param name="int"/>
      <param name="Resolution"/>
      <param name="TiffSettings"/>
      <param name="IIndexBitmapConverter"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor(PageSize,Resolution,TiffSettings)">
       
        <p>Initializes a new instance of the {@code TiffDevice} class.</p> @param pageSize Page size of the output image. @param resolution Resolution for the output image. @param settings Tiff settings, see {@code TiffSettings} class.
      
      <param name="PageSize"/>
      <param name="Resolution"/>
      <param name="TiffSettings"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor(PageSize,Resolution,TiffSettings,IIndexBitmapConverter)">
       
        <p>Initializes a new instance of the {@code TiffDevice} class.</p> @param pageSize Page size of the output image. @param resolution Resolution for the output image. @param settings Tiff settings, see {@code TiffSettings} class. @param converter External converter
      
      <param name="PageSize"/>
      <param name="Resolution"/>
      <param name="TiffSettings"/>
      <param name="IIndexBitmapConverter"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor(int,int,Resolution)">
       
        <p>Initializes a new instance of the {@code TiffDevice} class.</p> @param width Image output width. @param height Image output height. @param resolution Resolution for the output image.
      
      <param name="int"/>
      <param name="int"/>
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor(PageSize,Resolution)">
       
        <p>Initializes a new instance of the {@code TiffDevice} class.</p> @param pageSize Page size of the output image. @param resolution Resolution for the output image.
      
      <param name="PageSize"/>
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor(int,int,TiffSettings)">
       
        <p>Initializes a new instance of the {@code TiffDevice} class.</p> @param width Image output width. @param height Image output height. @param settings Tiff settings, see {@code TiffSettings} class.
      
      <param name="int"/>
      <param name="int"/>
      <param name="TiffSettings"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor(int,int,TiffSettings,IIndexBitmapConverter)">
       
        <p>Initializes a new instance of the {@code TiffDevice} class.</p> @param width Image output width. @param height Image output height. @param settings Tiff settings, see {@code TiffSettings} class. @param converter External converter
      
      <param name="int"/>
      <param name="int"/>
      <param name="TiffSettings"/>
      <param name="IIndexBitmapConverter"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor(PageSize,TiffSettings,IIndexBitmapConverter)">
       
        <p>Initializes a new instance of the {@code TiffDevice} class.</p> @param pageSize Page size of the output image. @param settings Tiff settings, see {@code TiffSettings} class. @param converter External converter
      
      <param name="PageSize"/>
      <param name="TiffSettings"/>
      <param name="IIndexBitmapConverter"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor(PageSize,TiffSettings)">
       
        <p>Initializes a new instance of the {@code TiffDevice} class.</p> @param pageSize Page size of the output image. @param settings Tiff settings, see {@code TiffSettings} class.
      
      <param name="PageSize"/>
      <param name="TiffSettings"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor(int,int)">
       
        <p>Initializes a new instance of the {@code TiffDevice} class.</p> @param width Image output width. @param height Image output height.
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor(PageSize)">
       
        <p>Initializes a new instance of the {@code TiffDevice} class.</p> @param pageSize Page size of the output image.
      
      <param name="PageSize"/>
    </member>
    <member name="T:com.aspose.pdf.devices.TiffSettings">
       
        <p>This class represents settings for importing pdf to Tiff.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.getIndexedConversionType">
       
        <p>Gets the IndexedConversionType. Default value is Simple.</p> @return IndexedConversionType element @see IndexedConversionType
      
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.setIndexedConversionType(int)">
       
        <p>Sets the IndexedConversionType.</p> @param value IndexedConversionType element @see IndexedConversionType
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.getMargins">
       
        <p>Gets the margins.</p> @return Margins object
      
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.getSkipBlankPages">&lt;p&gt; Gets a value indicating whether to skip blank pages. &lt;/p&gt; Value: {@code true} if need to skip blank pages; otherwise, {@code false}. &lt;hr&gt; &lt;p&gt; Default value is false &lt;/p&gt; @return boolean value</member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.setSkipBlankPages(boolean)">&lt;p&gt; Sets a value indicating whether to skip blank pages. &lt;/p&gt; Value: {@code true} if need to skip blank pages; otherwise, {@code false}. &lt;hr&gt; &lt;p&gt; Default value is false &lt;/p&gt; @param value boolean value 
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.getCompression">&lt;p&gt; Gets the type of the compression. &lt;/p&gt; Value: The type of the compression. &lt;hr&gt; &lt;p&gt; Default value is CompressionType.LZW &lt;/p&gt; @return CompressionType element @see CompressionType</member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.setCompression(int)">&lt;p&gt; Sets the type of the compression. &lt;/p&gt; Value: The type of the compression. &lt;hr&gt; &lt;p&gt; Default value is CompressionType.LZW &lt;/p&gt; @param value CompressionType element @see CompressionType 
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.getDepth">&lt;p&gt; Gets the color depth. &lt;/p&gt; Value: The color depth. &lt;hr&gt; &lt;p&gt; Default value is ColorDepth.Default &lt;/p&gt; @return ColorDepth element @see ColorDepth</member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.setDepth(int)">&lt;p&gt; Gets the color depth. &lt;/p&gt; Value: The color depth. &lt;hr&gt; &lt;p&gt; Default value is ColorDepth.Default &lt;/p&gt; @param value ColorDepth element @see ColorDepth 
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.getShape">&lt;p&gt; Gets the type of the shape. &lt;/p&gt; Value: The type of the shape. &lt;hr&gt; &lt;p&gt; Default value is ShapeType.None &lt;/p&gt; @return ShapeType element @see ShapeType</member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.setShape(int)">&lt;p&gt; Sets the type of the shape. &lt;/p&gt; Value: The type of the shape. &lt;hr&gt; &lt;p&gt; Default value is ShapeType.None &lt;/p&gt; @param value ShapeType element @see ShapeType 
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.getBrightness">
       
        <p>Get value boundary of the transformation of colors in white and black. This parameter can be applied with EncoderValue.CompressionCCITT4, EncoderValue.CompressionCCITT3, EncoderValue.CompressionRle or ColorDepth.Format1bpp == 1</p> @return float value of brightness should be in the range from 0 to 1. By default value is equal to 0.33f
      
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.setBrightness(float)">
       
        <p>Set value boundary of the transformation of colors in white and black. This parameter can be applied with EncoderValue.CompressionCCITT4, EncoderValue.CompressionCCITT3, EncoderValue.CompressionRle or ColorDepth.Format1bpp == 1</p> @param value : Value of brightness should be in the range from 0 to 1. By default value is equal to 0.33f
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.getCoordinateType">
       
        <p>Gets the page coordinate type (Media/Crop boxes). CropBox value is used by default.</p> @return PageCoordinateType value @see PageCoordinateType
      
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.setCoordinateType(int)">
       
        <p>Sets the page coordinate type (Media/Crop boxes). CropBox value is used by default.</p> @param value PageCoordinateType @see PageCoordinateType
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.#ctor">
       
        <p>Initializes a new instance of the {@code TiffSettings} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.#ctor(int)">
       
        <p>Initializes a new instance of the {@code TiffSettings} class.</p> @param compressionType Type of the compression. @see CompressionType
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.#ctor(Margins)">
       
        <p>Initializes a new instance of the {@code TiffSettings} class.</p> @param margins The margins.
      
      <param name="Margins"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.#ctor(int,int,Margins)">
       
        <p>Initializes a new instance of the {@code TiffSettings} class.</p> @param compressionType Type of the compression. @param colorDepth The color depth. @param margins The margins. @see CompressionType
      
      <param name="int"/>
      <param name="int"/>
      <param name="Margins"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.#ctor(int,int,Margins,boolean)">
       
        <p>Initializes a new instance of the {@code TiffSettings} class.</p> @param compressionType Type of the compression. @param colorDepth The color depth. @param margins The margins. @param skipBlankPages if set to {@code true} need to skip blank pages @see com.aspose.pdf.devices.CompressionType @see com.aspose.pdf.devices.ColorDepth
      
      <param name="int"/>
      <param name="int"/>
      <param name="Margins"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.#ctor(int,int,Margins,boolean,int)">
       
        <p>Initializes a new instance of the {@code TiffSettings} class.</p> @param compressionType Type of the compression. @param colorDepth The color depth. @param margins The margins. @param skipBlankPages if set to {@code true} need to skip blank pages. @param shapeType Type of the shape. @see CompressionType
      
      <param name="int"/>
      <param name="int"/>
      <param name="Margins"/>
      <param name="boolean"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.#ctor(boolean)">
       
        <p>Initializes a new instance of the {@code TiffSettings} class.</p> @param skipBlankPages if set to {@code true} [skip blank pages].
      
      <param name="boolean"/>
    </member>
    <member name="T:com.aspose.pdf.devices.TiffSettings.IndexedConversionType">
      Class represented indexed conversion types
    </member>
    <member name="F:com.aspose.pdf.devices.TiffSettings.IndexedConversionType.Simple">
       
        <p>Simple conversion into Black and White. Default value.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.devices.TiffSettings.IndexedConversionType.Pixelated">
       
        <p>Conversion to Black and White using image pixelation.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Direction">
       
        <p>Text direction.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Direction.L2R">
       
        <p>Left to right direction.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Direction.R2L">
       
        <p>Right to left direction.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.DocMDPAccessPermissions">
       
        <p>The access permissions granted for this document. Valid values are: 1 - No changes to the document are permitted; any change to the document invalidates the signature. 2 - Permitted changes are filling in forms, instantiating page templates, and signing; other changes invalidate the signature. 3 - Permitted changes are the same as for 2, as well as annotation creation, deletion, and modification; other changes invalidate the signature.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.DocMDPAccessPermissions.NoChanges">
       
        <p>1 - No changes to the document are permitted; any change to the document invalidates the signature.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.DocMDPAccessPermissions.FillingInForms">
       
        <p>2 - Permitted changes are filling in forms, instantiating page templates, and signing; other changes invalidate the signature.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.DocMDPAccessPermissions.AnnotationModification">
       
        <p>3 - Permitted changes are the same as for 2, as well as annotation creation, deletion, and modification; other changes invalidate the signature.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.DocMDPSignature">
       
        <p>Represents the class of document MDP (modification detection and prevention) signature type.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DocMDPSignature.getSignature">
       
        <p>Returns the signature object that used during signing.</p> @return Signature object
      
    </member>
    <member name="M:com.aspose.pdf.DocMDPSignature.getAccessPermissions">
       
        <p>Returns the access permissions granted for this document.</p> @return DocMDPAccessPermissions element @see DocMDPAccessPermissions
      
    </member>
    <member name="M:com.aspose.pdf.DocMDPSignature.#ctor(Signature,int)">
       
        <p>Initializes a new instance of the {@code DocMDPSignature} class.</p> @param signature The signature object that used during signing. @param accessPermissions The access permissions granted for this document. @see DocMDPAccessPermissions
      
      <param name="Signature"/>
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.DocSaveOptions">
       
        <p>Save options for export to Doc format</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DocSaveOptions.getCustomProgressHandler">&lt;p&gt; This handler can be used to handle conversion progress events f.e. it can be used to show progress bar or messages about current amount of processed pages, example of handler's code that shows progress on console is : &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; public static void convertWithShowingProgress() { (new License()).setLicense("License\\Aspose.Total.lic"); Document doc = new Document("Booklet.pdf"); HtmlSaveOptions saveOptions = new HtmlSaveOptions(); saveOptions.setCustomProgressHandler ( new HtmlSaveOptions.conversionProgressEventHandler(ShowProgressOnConsole)); doc.save("Booklet.doc", saveOptions); System.in.read(); } public static void showProgressOnConsole(HtmlSaveOptions.ProgressEventHandlerInfo eventInfo) { switch (eventInfo.getEventType()) { case HtmlSaveOptions.ProgressEventType.TotalProgress: Console.WriteLine("%s - Conversion progress : %s ."format(new Date().getTime(), eventInfo.getValue().toString())); break; case HtmlSaveOptions.ProgressEventType.SourcePageAnalized: Console.WriteLine("%s - Source page %s of %s analyzed.", (new Date().getTime().toString(), eventInfo.getValue().toString(), eventInfo.getMaxValue().toString())); break; case HtmlSaveOptions.ProgressEventType.ResultPageCreated: Console.WriteLine("%s - Result page's %s of %s layout created.", (new Date().getTime(), eventInfo.getValue().toString(), eventInfo.getMaxValue().toString())); break; case HtmlSaveOptions.ProgressEventType.ResultPageSaved: Console.WriteLine("{0} - Result page {1} of {2} exported.", (new Date().getTime(), eventInfo.getValue().toString(), eventInfo.getMaxValue().toString())); break; default: break; } } &lt;/pre&gt; @return ConversionProgressEventHandler instance</member>
    <member name="M:com.aspose.pdf.DocSaveOptions.setCustomProgressHandler(ConversionProgressEventHandler)">&lt;p&gt; This handler can be used to handle conversion progress events f.e. it can be used to show progress bar or messages about current amount of processed pages, example of handler's code that shows progress on console is : &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; public static void convertWithShowingProgress() { (new License()).setLicense("License\\Aspose.Total.lic"); Document doc = new Document("Booklet.pdf"); HtmlSaveOptions saveOptions = new HtmlSaveOptions(); saveOptions.setCustomProgressHandler ( new HtmlSaveOptions.conversionProgressEventHandler(ShowProgressOnConsole)); doc.save("Booklet.doc", saveOptions); System.in.read(); } public static void showProgressOnConsole(HtmlSaveOptions.ProgressEventHandlerInfo eventInfo) { switch (eventInfo.getEventType()) { case HtmlSaveOptions.ProgressEventType.TotalProgress: Console.WriteLine("%s - Conversion progress : %s ."format(new Date().getTime(), eventInfo.getValue().toString())); break; case HtmlSaveOptions.ProgressEventType.SourcePageAnalized: Console.WriteLine("%s - Source page %s of %s analyzed.", (new Date().getTime().toString(), eventInfo.getValue().toString(), eventInfo.getMaxValue().toString())); break; case HtmlSaveOptions.ProgressEventType.ResultPageCreated: Console.WriteLine("%s - Result page's %s of %s layout created.", (new Date().getTime(), eventInfo.getValue().toString(), eventInfo.getMaxValue().toString())); break; case HtmlSaveOptions.ProgressEventType.ResultPageSaved: Console.WriteLine("{0} - Result page {1} of {2} exported.", (new Date().getTime(), eventInfo.getValue().toString(), eventInfo.getMaxValue().toString())); break; default: break; } } &lt;/pre&gt; @param customProgressHandler ConversionProgressEventHandler instance 
      <param name="ConversionProgressEventHandler"/>
    </member>
    <member name="M:com.aspose.pdf.DocSaveOptions.getMode">
       
        <p>Recognition mode.</p> @return RecognitionMode value @see RecognitionMode
      
    </member>
    <member name="M:com.aspose.pdf.DocSaveOptions.setMode(int)">
       
        <p>Recognition mode.</p> @param value RecognitionMode value @see RecognitionMode
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.DocSaveOptions.getRelativeHorizontalProximity">
       
        <p>In Pdf words may be innerly represented with operators that prints words by independently printing their letters or syllables. So, to detect words sometimes we need detect groups of independent chars that are in fact words. This setting defines width of space between text elements(letters, syllables) that must be treated as distance between words during recognition of words in source PDF. (presence of empty space at least with this width between letters means that textual elements pertain to different words). It's normed to font size - 1.0 means 100% of supposed word's font size. ATTENTION!It's used only in cases when source PDF contains specific rarely used fonts for which optimal value cannot be calculated from font. So, in vast majority of cases this parameter changes nothing in result document.</p> @return Relative proximity
      
    </member>
    <member name="M:com.aspose.pdf.DocSaveOptions.getMaxDistanceBetweenTextLines">
       
        <p>This parameter is used for grouping text lines into paragraphs. Determines how far apart can be two relative text lines. Specified in hundreds of percent of the text lines height.</p> @return float value
      
    </member>
    <member name="M:com.aspose.pdf.DocSaveOptions.setMaxDistanceBetweenTextLines(float)">
       
        <p>This parameter is used for grouping text lines into paragraphs. Determines how far apart can be two relative text lines. Specified in hundreds of percent of the text lines height.</p> @param value float value
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.DocSaveOptions.setRelativeHorizontalProximity(float)">
       
        <p>In Pdf words may be innerly represented with operators that prints words by independently printing their letters or syllables. So, to detect words sometimes we need detect groups of independent chars that are in fact words. This setting defines width of space between text elements(letters, syllables) that must be treated as distance between words during recognition of words in source PDF. (presence of empty space at least with this width between letters means that textual elements pertain to different words). It's normed to font size - 1.0 means 100% of supposed word's font size. ATTENTION!It's used only in cases when source PDF contains specific rarely used fonts for which optimal value cannot be calculated from font. So, in vast majority of cases this parameter changes nothing in result document.</p> @param value Relative proximity
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.DocSaveOptions.isRecognizeBullets">
       
        <p>Switch on the recognition of bullets.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.DocSaveOptions.setRecognizeBullets(boolean)">
       
        <p>Switch on the recognition of bullets.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.DocSaveOptions.isAddReturnToLineEnd">
       
        <p>Is used paragraph or line breaks.</p> @return boolean value.
      
    </member>
    <member name="M:com.aspose.pdf.DocSaveOptions.setAddReturnToLineEnd(boolean)">
       
        <p>Use paragraph or line breaks</p> @param value boolean value.
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.DocSaveOptions.getImageResolutionX">
       
        <p>Converted images X resolution.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.DocSaveOptions.setImageResolutionX(int)">
       
        <p>Converted images X resolution.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.DocSaveOptions.getImageResolutionY">
       
        <p>Converted images Y resolution.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.DocSaveOptions.setImageResolutionY(int)">
       
        <p>Converted images Y resolution.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.DocSaveOptions.getFormat">
       
        <p>Get output format</p> @return DocFormat element @see com.aspose.pdf.DocSaveOptions.DocFormat
      
    </member>
    <member name="M:com.aspose.pdf.DocSaveOptions.setFormat(int)">
       
        <p>Set output format</p> @param value DocFormat element @see com.aspose.pdf.DocSaveOptions.DocFormat
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.DocSaveOptions.getBatchSize">
       
        <p>Defines batch size if batched conversion is applicable to source and destination formats pair.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DocSaveOptions.setBatchSize(int)">
       
        <p>Defines batch size if batched conversion is applicable to source and destination formats pair.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.DocSaveOptions.getMemorySaveModePath">
       
        <p>Defines the path (file name or directory name) to hold temporary data when converting in memory save mode.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.DocSaveOptions.setMemorySaveModePath(String)">
       
        <p>Defines the path (file name or directory name) to hold temporary data when converting in memory save mode.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.DocSaveOptions.#ctor">
       
        <p>Constructor</p> 
      
    </member>
    <member name="T:com.aspose.pdf.DocSaveOptions.RecognitionMode">&lt;p&gt; Allows to control how a PDF document is converted into a word processing document. &lt;/p&gt; &lt;hr&gt; &lt;p&gt; Use the {@code RecognitionMode.Textbox} mode when the resulting document is not goining to be heavily edited futher. Textboxes are easy to modify when there is not a lot to do. &lt;/p&gt; &lt;p&gt; Use the {@code RecognitionMode.Flow} mode when the output document needs further editing. Paragraphs and texlines in the flow mode allow easy modification of text, but unupported formatting objects will look worse than in the {@code RecognitionMode.Textbox} mode. &lt;/p&gt;</member>
    <member name="F:com.aspose.pdf.DocSaveOptions.RecognitionMode.Textbox">
       
        <p>This mode is fast and good for maximally preserving original look of the PDF file, but editability of the resulting document could be limited.</p>  
        <p>Every visually grouped block of text int the original PDF file is converted into a textbox in the resulting document. This achieves maximal resemblance of the output document to the original PDF file. The output document will look good, but it will consist entirely of textboxes and it could makes further editing of the document in Microsoft Word quite hard.</p>  
        <p>This is the default mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.DocSaveOptions.RecognitionMode.Flow">
       
        <p>Full recognition mode, the engine performs grouping and multi-level analysis to restore the original document author's intent and produce a maximally editable document. The downside is that the output document might look different from the original PDF file.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.DocSaveOptions.RecognitionMode.EnhancedFlow">
       
        <p>An early alfa version of a new Flow mode supporting recognition of tables.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.DocSaveOptions.DocFormat">
       
        <p>Allows to specify .doc or .docx file format.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.DocSaveOptions.DocFormat.Doc">
       
        <p>[MS-DOC]: Word (.doc) Binary File Format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.DocSaveOptions.DocFormat.DocX">
       
        <p>Office Open XML (.docx) File Format</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Document">
       
        <p>Class representing PDF document</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.getPageInfo">
       
        <p>Gets the page info.(for generator only)</p> @return The page info.
      
    </member>
    <member name="M:com.aspose.pdf.Document.setPageInfo(PageInfo)">
       
        <p>Sets the page info.(for generator only)</p> @param value PageInfo object
      
      <param name="PageInfo"/>
    </member>
    <member name="M:com.aspose.pdf.Document.getDestinations">
       
        <p>Gets the collection of destinations.</p> @return DestinationCollection element
      
    </member>
    <member name="M:com.aspose.pdf.Document.getPdfFormat">
       
        <p>Gets pdfa format</p> @return PdfFormat element @see PdfFormat
      
    </member>
    <member name="M:com.aspose.pdf.Document.getFontUtilities">
       
        <p>IDocumentFontUtilities instance</p> @return IDocumentFontUtilities instance
      
    </member>
    <member name="M:com.aspose.pdf.Document.removePdfaCompliance">
       
        <p>Remove pdfa compliance from the document</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.getCollection">
       
        <p>Gets collection of document.</p> @return Collection object
      
    </member>
    <member name="M:com.aspose.pdf.Document.setCollection(Collection)">
       
        <p>Sets collection of document.</p> @param value Collection object
      
      <param name="Collection"/>
    </member>
    <member name="M:com.aspose.pdf.Document.getEngineDoc">
       
        <p>Instance of IPdfDocument used to access to internal document structure. Internal only</p> @return IPdfDocument object
      
    </member>
    <member name="M:com.aspose.pdf.Document.getVersion">
       
        <p>Gets a version of Pdf from Pdf file header.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.Document.getOpenAction">&lt;p&gt; Gets action performed at document opening. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Example demonstrates how to get CenterWindow flag: Document document = new Document("sample.pdf"); IAppointment value = document.getOpenAction(); &lt;/pre&gt; @return IAppointment object</member>
    <member name="M:com.aspose.pdf.Document.setOpenAction(IAppointment)">&lt;p&gt; Sets action performed at document opening. &lt;p&gt; @param value IAppointment value 
      <param name="IAppointment"/>
    </member>
    <member name="M:com.aspose.pdf.Document.isHideToolBar">&lt;p&gt; Gets flag specifying whether toolbar should be hidden when document is active. &lt;/p&gt; @return boolean value &lt;hr&gt; &lt;pre&gt; Example demonstrates how to get HideToolBar flag: Document document = new Document("sample.pdf"); boolean value = document.isHideToolBar(); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.Document.setHideToolBar(boolean)">
       
        <p>Set flag specifying whether toolbar should be hidden when document is active.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Document.isHideMenubar">&lt;p&gt; Gets flag specifying whether menu bar should be hidden when document is active. &lt;/p&gt; @return boolean value &lt;hr&gt; &lt;pre&gt; Example demonstrates how to get HideMenubar flag: Document document = new Document("sample.pdf"); boolean value = document.isHideMenubar(); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.Document.setHideMenubar(boolean)">
       
        <p>Sets flag specifying whether menu bar should be hidden when document is active.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Document.isHideWindowUI">&lt;p&gt; Gets flag specifying whether user interface elements should be hidden when document is active. &lt;/p&gt; @return boolean value &lt;hr&gt; &lt;pre&gt; Example demonstrates how to get HideWindowUI flag: Document document = new Document("sample.pdf"); boolean value = document.isHideWindowUI(); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.Document.setHideWindowUI(boolean)">
       
        <p>Sets flag specifying whether user interface elements should be hidden when document is active.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Document.isFitWindow">&lt;p&gt; Gets flag specifying whether document window must be resized to fit the first displayed page. &lt;/p&gt; @return boolean value &lt;hr&gt; &lt;pre&gt; Example demonstrates how to get FitWindow flag: Document document = new Document("sample.pdf"); boolean value = document.isFitWindow(); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.Document.setFitWindow(boolean)">
       
        <p>Sets flag specifying whether document window must be resized to fit the first displayed page.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Document.isCenterWindow">&lt;p&gt; Gets flag specifying whether position of the document's window will be centered on the screen. &lt;/p&gt; @return boolean value &lt;hr&gt; &lt;pre&gt; Example demonstrates how to get CenterWindow flag: Document document = new Document("sample.pdf"); boolean value = document.isCenterWindow(); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.Document.setCenterWindow(boolean)">
       
        <p>Sets flag specifying whether position of the document's window will be centered on the screen.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Document.isDisplayDocTitle">&lt;p&gt; Gets flag specifying whether document's window title bar should display document title. &lt;/p&gt; @return boolean value &lt;hr&gt; &lt;pre&gt; Example demonstrates how to get DisplayDocTitle flag: Document document = new Document("sample.pdf"); boolean value = document.isDisplayDocTitle(); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.Document.setDisplayDocTitle(boolean)">
       
        <p>Sets flag specifying whether document's window title bar should display document title.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Document.getPages">&lt;p&gt; Gets collection of document pages. Note that pages are numbered from 1 in collection. &lt;/p&gt; @return PageCollection object &lt;hr&gt; &lt;pre&gt; Example below demonstrates how to operate with the document pages: How to obtain number of pages and how to obtain rectangle of starting page of the document. Document document = new Document("sample.pdf"); PageCollection pages = document.getPages(); System.out.println("Document contains " + pages.size()); Page page = pages.get_Item(1); Rectangle rect = page.getRect(); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.Document.getOutlines">
       
        <p>Gets document outlines.</p> @return OutlineCollection object
      
    </member>
    <member name="M:com.aspose.pdf.Document.getActions">&lt;p&gt; Gets document actions. This property is instance of DocumentActions class which allows to get/set BeforClosing, BeforSaving, etc. actions. &lt;/p&gt; @return DocumentActionCollection object &lt;hr&gt; &lt;pre&gt; This example demonstrates how to obtain after open action of the document: Document document = new Document("PdfWithOpenAction.pdf"); DocumentActionCollection actions = document.getActions(); PdfAction afterSavingAction = actions.getAfterSaving(); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.Document.getForm">
       
        <p>Gets Acro Form of the document.</p> @return Form object
      
    </member>
    <member name="M:com.aspose.pdf.Document.getEmbeddedFiles">
       
        <p>Gets collection of files embedded to document.</p> @return EmbeddedFileCollection object
      
    </member>
    <member name="M:com.aspose.pdf.Document.getDirection">
       
        <p>Gets reading order of text: L2R (left to right) or R2L (right to left).</p> @return Direction element @see Direction
      
    </member>
    <member name="M:com.aspose.pdf.Document.setDirection(int)">
       
        <p>Sets reading order of text: L2R (left to right) or R2L (right to left).</p> @param value int value @see Direction
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Document.getPageMode">
       
        <p>Gets page mode, specifying how document should be displayed when opened.</p> @return PageMode element @see PageMode
      
    </member>
    <member name="M:com.aspose.pdf.Document.setPageMode(int)">
       
        <p>Sets page mode, specifying how document should be displayed when opened.</p> @param pageMode int value @see PageMode
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Document.getNonFullScreenPageMode">
       
        <p>Gets page mode, specifying how to display the document on exiting full-screen mode.</p> @return PageMode element @see PageMode
      
    </member>
    <member name="M:com.aspose.pdf.Document.setNonFullScreenPageMode(int)">
       
        <p>Sets page mode, specifying how to display the document on exiting full-screen mode.</p> @param value int value @see PageMode
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Document.getPageLayout">
       
        <p>Gets page layout which shall be used when the document is opened.</p> @return PageLayout element @see PageLayout
      
    </member>
    <member name="M:com.aspose.pdf.Document.setPageLayout(int)">
       
        <p>Sets page layout which shall be used when the document is opened.</p> @param value int value @see PageLayout
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Document.getFileName">
       
        <p>Name of the PDF file that caused this document</p> @return String object
      
    </member>
    <member name="M:com.aspose.pdf.Document.getInfo">
       
        <p>Gets document info.</p> @return DocumentInfo object
      
    </member>
    <member name="M:com.aspose.pdf.Document.getMetadata">
       
        <p>Document metadata. (A PDF document may include general information, such as the document's title, author, and creation and modification dates. Such global information about the document (as opposed to its content or structure) is called metadata and is intended to assist in cataloguing and searching for documents in external databases.)</p> @return Metadata object
      
    </member>
    <member name="M:com.aspose.pdf.Document.getLogicalStructure">
       
        <p>Gets logical structure of the document.</p> @return RootElement object
      
    </member>
    <member name="M:com.aspose.pdf.Document.processParagraphs">
       
        <p>Stores document into stream.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.save(Stream)">
       
        <p>Stores document into stream.</p> @param output Stream where document shell be stored.
      
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.Document.save(OutputStream)">
       
        <p>Stores document into stream.</p> @param output Stream where document shell be stored.
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.Document.save(String)">
       
        <p>Saves document into the specified file.</p> @param outputFileName Path to file where the document will be stored.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Document.exportAnnotationsToXfdf(String)">
       
        <p>Exports all document annotations to XFDF file</p> @param fileName XFDF file name
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Document.sendTo(DocumentDevice,OutputStream)">
       
        <p>Sends the whole document to the document device for processing.</p> @param device Document device which is used to process the document. @param output Output stream contains the results of the document processing with given device.
      
      <param name="DocumentDevice"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.Document.sendTo(DocumentDevice,int,int,OutputStream)">
       
        <p>Sends the certain pages of the document to the document device for processing.</p> @param device Document device which is used to process the document. @param fromPage The first page for processing. @param toPage The last page for processing. @param output Output stream contains the results of the document pages processing with given device.
      
      <param name="DocumentDevice"/>
      <param name="int"/>
      <param name="int"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.Document.sendTo(DocumentDevice,String)">
       
        <p>Sends the whole document to the document device for processing.</p> @param device Document device which is used to process the document. @param outputFileName Output file name with the results of processing.
      
      <param name="DocumentDevice"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Document.sendTo(DocumentDevice,int,int,String)">
       
        <p>Sends the whole document to the document device for processing.</p> @param device Document device which is used to process the document. @param fromPage The first page for processing. @param toPage The last page for processing. @param outputFileName Output file name with the results of processing.
      
      <param name="DocumentDevice"/>
      <param name="int"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Document.removeMetadata">
       
        <p>Removes metadata from the document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.importAnnotationsFromXfdf(String)">
       
        <p>Imports annotations from XFDF file to document.</p> @param fileName XFDF file name
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Document.validate(String,int)">
       
        <p>Validate document into the specified file.</p> @param outputLogFileName Path to file where the comments will be stored. @param format PdfFormat element.
      
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Document.convert(String,int,int)">
       
        <p>Convert document and save errors into the specified file.</p> @param outputLogFileName Path to file where the comments will be stored. @param format Pdf format. @param action Action for objects that can not be converted @return boolean value @see PdfFormat @see ConvertErrorAction
      
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Document.validate(OutputStream,int)">
      Validate document into the specified file. @param outputLogStream Stream where the comments will be stored. @param format Pdf format. @return boolean value
      <param name="OutputStream"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Document.convert(String,int,int,int)">
       
        <p>Convert document and save errors into the specified file.</p> @param outputLogFileName Path to file where the comments will be stored. @param format The pdf format. @param action Action for objects that can not be converted @param transparencyAction Action for image masked objects @return The operation result @see PdfFormat @see ConvertErrorAction @see ConvertTransparencyAction
      
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Document.convert(CallBackGetHocr)">
      Convert document to searchable document. @param callback The call back procedure for hocr recognize. @return boolean value
      <param name="CallBackGetHocr"/>
    </member>
    <member name="M:com.aspose.pdf.Document.convertWithSkippingErrors(CallBackGetHocr)">
      Convert document to searchable document and skip errors of hochr that can not be converted. @param callback The call back procedure for hocr recognize. @return boolean value
      <param name="CallBackGetHocr"/>
    </member>
    <member name="M:com.aspose.pdf.Document.convertInternal(Stream,int,int)">
       
        <p>Convert document and save errors into the specified stream.</p> @param outputLogStream Stream where the comments will be stored. @param format Pdf format. @param action The call back procedure for hocr recognize. @return boolean value
      
      <param name="Stream"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Document.convert(OutputStream,int,int)">
       
        <p>Convert document and save errors into the specified stream.</p> @param outputLogStream Stream where the comments will be stored. @param format Pdf format. @param action Action for objects that can not be converted @return boolean value @see PdfFormat @see ConvertErrorAction
      
      <param name="OutputStream"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Document.convert(PdfFormatConversionOptions)">
       
        <p>Convert document using specified conversion options</p> @param options set of options for convert PDF document @return The operation result
      
      <param name="PdfFormatConversionOptions"/>
    </member>
    <member name="M:com.aspose.pdf.Document.convert(int,java.io.OutputStream)">
       
        <p>Convert document by applying the Fixup.</p> @return The operation result. @param fixup The Fixup type. @param outputLog The log of process. @see Fixup
      
      <param name="int"/>
      <param name="java.io.OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.Document.convert(int,java.io.OutputStream,boolean,Object[])">
       
        <p>Convert document by applying the Fixup.</p> @return The operation result. @param fixup The Fixup type. @param outputLog The log of process. @param onlyValidation Only document validation. @param parameters Properties for Fixup that can not be set. @see Fixup
      
      <param name="int"/>
      <param name="java.io.OutputStream"/>
      <param name="boolean"/>
      <param name="Object[]"/>
    </member>
    <member name="M:com.aspose.pdf.Document.convert(int,String)">
       
        <p>Convert document by applying the Fixup.</p> @return The operation result. @param fixup The Fixup type. @param outputLog The log of process. @see Fixup
      
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Document.convert(int,String,boolean,Object[])">
       
        <p>Convert document by applying the Fixup.</p> @return The operation result. @param fixup The Fixup type. @param outputLog The log of process. @param onlyValidation Only document validation. @param parameters Properties for Fixup that can not be set. @see Fixup
      
      <param name="int"/>
      <param name="String"/>
      <param name="boolean"/>
      <param name="Object[]"/>
    </member>
    <member name="M:com.aspose.pdf.Document.flatten">
       
        <p>Removes all fields from the document and place their values instead.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.getCryptoAlgorithm">
       
        <p>Gets security settings if document is encrypted. If document is not encrypted then corresponding exception will be raised in .net 1.1 or CryptoAlgorithm will be null for other .net versions.</p> @return CryptoAlgorithm element @see CryptoAlgorithm
      
    </member>
    <member name="M:com.aspose.pdf.Document.encrypt(String,String,DocumentPrivilege,int,boolean)">
       
        <p>Encrypts the document. Call then Save to get encrypted version of the document.</p> @param userPassword User password. @param ownerPassword Owner password. @param privileges Document permissions, see {@code Permissions} for details. @param cryptoAlgorithm Cryptographic algorithm, see {@code CryptoAlgorithm} for details. @param usePdf20 Support for revision 6 (Extension 8). @see CryptoAlgorithm
      
      <param name="String"/>
      <param name="String"/>
      <param name="DocumentPrivilege"/>
      <param name="int"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Document.encrypt(String,String,int,int)">
       
        <p>Encrypts the document. Call then Save to get encrypted version of the document.</p> @param userPassword User password. @param ownerPassword Owner password. @param permissions Document permissions, see {@code Permissions} for details. @param cryptoAlgorithm Cryptographic algorithm, see {@code CryptoAlgorithm} for details. @see Permissions @see CryptoAlgorithm
      
      <param name="String"/>
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Document.encrypt(String,String,int,int,boolean)">
       
        <p>Encrypts the document. Call then Save to get encrypted version of the document.</p> @param userPassword User password. @param ownerPassword Owner password. @param permissions Document permissions, see {@code Permissions} for details. @param cryptoAlgorithm Cryptographic algorithm, see {@code CryptoAlgorithm} for details. @param usePdf20 Support for revision 6 (Extension 8). @see Permissions @see CryptoAlgorithm
      
      <param name="String"/>
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Document.changePasswords(String,String,String)">
       
        <p>Changes document passwords. This action can be done only using owner password.</p> @param ownerPassword Owner password. @param newUserPassword New user password. @param newOwnerPassword New owner password.
      
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Document.isLinearized">
       
        <p>Gets a value indicating whether document is linearized.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Document.setLinearized(boolean)">
       
        <p>Sets a value indicating whether document is linearized.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Document.decrypt">
       
        <p>Decrypts the document. Call then Save to obtain decrypted version of the document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.getPermissions">
       
        <p>Gets permissions of the document.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.Document.isEncrypted">
       
        <p>Gets encrypted status of the document. True if document is encrypted.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Document.optimize">
       
        <p>Linearize document in order to - open the first page as quickly as possible; - display next page or follow by link to the next page as quickly as possible; - display the page incrementally as it arrives when data for a page is delivered over a slow channel (display the most useful data first); - permit user interaction, such as following a link, to be performed even before the entire page has been received and displayed. Invoking this method doesn't actually saves the document. On the contrary the document only is prepared to have optimized structure, call then Save to get optimized document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.save">&lt;p&gt; Save document incrementally (i.e. using incremental update technique). &lt;/p&gt; &lt;hr&gt; &lt;p&gt; In order to save document incrementally we should open the document file for writing. Therefore Document must not be initialized with InputStream but with path to the file, like in the next code snippet: Document doc = new Document("document.pdf"); // make some changes and save the document incrementally doc.save(); &lt;/p&gt; In case when document was initialized with InputStream, writing to InputStream is impossible, so we recommend to use separate methods "save" to save document or "saveIncrementally" to save document incrementally.</member>
    <member name="M:com.aspose.pdf.Document.save(String,int)">
       
        <p>Saves the document with a new name along with a file format.</p> @param outputFileName Path to file where the document will be stored. @param format Format options. @see SaveFormat
      
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Document.saveIncrementally(OutputStream)">
      Saves incrementally the PDF Document to the specified stream. @param output OutputStream object
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.Document.saveIncrementally(Stream)">
      Saves incrementally the PDF Document to the specified stream. @param output OutputStream object
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.Document.saveIncrementally(String)">
      Saves incrementally the PDF Document to the specified stream. @param outputFileName OutputStream object
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Document.save(OutputStream,int)">
       
        <p>Saves the document with a new name along with a file format.</p> @param outputStream Stream where the document will be stored. @param format Format options. @throws ArgumentException {@code ArgumentException} when {@code HtmlSaveOptions} is passed to a method. Save a document to the html stream is not supported. Please use method save to the file. @see SaveFormat
      
      <param name="OutputStream"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Document.save(String,SaveOptions)">
       
        <p>Saves the document with a new name setting its save options.</p> @param outputFileName Path to file where the document will be stored. @param options Save options.
      
      <param name="String"/>
      <param name="SaveOptions"/>
    </member>
    <member name="M:com.aspose.pdf.Document.save(OutputStream,SaveOptions)">
       
        <p>Saves the document to a stream with a save options.</p> @param outputStream Stream where the document will be stored. @param options Save options. @throws ArgumentException {@code ArgumentException} when {@code HtmlSaveOptions} is passed to a method. Save a document to the html stream is not supported. Please use method save to the file.
      
      <param name="OutputStream"/>
      <param name="SaveOptions"/>
    </member>
    <member name="M:com.aspose.pdf.Document.getId">
       
        <p>Gets the ID.</p> @return Id object
      
    </member>
    <member name="M:com.aspose.pdf.Document.getMetadataStream">
       
        <p>Returns raw metadata stream</p> @return IPdfStreamAccessor object
      
    </member>
    <member name="M:com.aspose.pdf.Document.suppressUpdate">
       
        <p>Suppresses update contents data for all pages The contents is not updated until ResumeUpdate is called</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.resumeUpdate">
       
        <p>resumes document update</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.dispose">
       
        <p>Closes all resources used by this document.</p> This method is obsolete, use close() instead.
      
    </member>
    <member name="M:com.aspose.pdf.Document.getBackground">
       
        <p>Gets the background color of the document.</p> @return Color object
      
    </member>
    <member name="M:com.aspose.pdf.Document.setBackground(java.awt.Color)">
       
        <p>Sets the background color of the document.</p> @param value Color object
      
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.Document.getDefaultCopier">
       
        <p>Returns copier used for coping pages to this document.</p> @return Copier object
      
    </member>
    <member name="M:com.aspose.pdf.Document.optimizeResources">
       
        <p>Optimize resources in the document: 1. Resources which are not used on the document pages are removed; 2. Equal resources are joined into one object; 3. Unused objects are deleted.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.optimizeResources(com.aspose.pdf.optimization.OptimizationOptions)">
       
        <p>Optimize resources in the document according to defined optimization strategy.</p> @param strategy Optimization strategy.
      
      <param name="com.aspose.pdf.optimization.OptimizationOptions"/>
    </member>
    <member name="M:com.aspose.pdf.Document.getOptimizeSize">
       
        <p>Gets optimization flag. When pages are added to document, equal resource streams in resultant file are merged into one PDF object if this flag set. This allows to decrease resultant file size but may cause slower execution and larger memory requirements. Default value: false.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Document.setOptimizeSize(boolean)">
       
        <p>Sets optimization flag. When pages are added to document, equal resource streams in resultant file are merged into one PDF object if this flag set. This allows to decrease resultant file size but may cause slower execution and larger memory requirements. Default value: false.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Document.getIgnoreCorruptedObjects">
       
        <p>Gets or sets flag of ignoring errors in source files. When pages from source document copied into destination document, copying process is stopped with exception if some objects in source files are corrupted when this flag is false. example: dest.Pages.Add(src.Pages); If this flag is set to true then corrupted objects will be replaced with empty values. By default: true.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Document.setIgnoreCorruptedObjects(boolean)">
       
        <p>Gets or sets flag of ignoring errors in source files. When pages from source document copied into destination document, copying process is stopped with exception if some objects in source files are corrupted when this flag is false. example: dest.Pages.Add(src.Pages); If this flag is set to true then corrupted objects will be replaced with empty values. By default: true.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Document.getCatalogValue(String)">
       
        <p>Returns item value from catalog dictionary.</p> @param key The key of item. @return Item value - if key was successfully found; otherwise, null.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Document.getPageLabels">
       
        <p>Gets page labels in the document.</p> @return PageLabelCollection object
      
    </member>
    <member name="M:com.aspose.pdf.Document.freeMemory">
       
        <p>Clears memory</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.isAbsentFontTryToSubstitute">
      Flag which informs about replacement of missing font.
    </member>
    <member name="M:com.aspose.pdf.Document.setAbsentFontTryToSubstitute(boolean)">
      Setting flag for set program determined font in case of absense font.
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Document.check(boolean)">
      Validates document. @param doRepair If true found issues will be repaired. @return boolean value
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Document.isManualDisposeEnabled">
      By default method save close internal streams and release memory resources. We can do some operations and continue work with the document after method save if this ManualDispose parameter is enabled. @return boolean value. (Default value == false)
    </member>
    <member name="M:com.aspose.pdf.Document.setManualDisposeEnabled(boolean)">
      By default method save closes internal streams and release memory resources. We can do some operations and continue work with the document after method save is called if this ManualDispose parameter is enabled. But it is strongly recommended to call the dispose method when the Document instance is no longer needed. @param manualDisposeEnabled boolean value. (Default value == false)
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Document.#ctor">
       
        <p>Initializes empty document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.#ctor(byte[])">
       
        <p>Initialize new Document instance from the {@code input} byte array.</p> @param input byte array with pdf document.
      
      <param name="byte[]"/>
    </member>
    <member name="M:com.aspose.pdf.Document.#ctor(InputStream)">
       
        <p>Initialize new Document instance from the {@code input} stream.</p> @param input Stream with pdf document.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.Document.#ctor(InputStream,String)">
       
        <p>Initialize new Document instance from the {@code input} stream.</p> @param input Input stream object, corresponding pdf is password protected. @param password User or owner password.
      
      <param name="InputStream"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Document.#ctor(Stream)">
       
        <p>Initialize new Document instance from the {@code input} stream.</p> @param input Stream with pdf document.
      
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.Document.#ctor(InputStream,String,boolean)">
       
        <p>Initialize new Document instance from the {@code input} stream.</p> @param input Stream with pdf document. @param password User or owner password. @param isManagedStream if set to {@code true} inner stream is closed before exit; otherwise, is not.
      
      <param name="InputStream"/>
      <param name="String"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Document.#ctor(InputStream,boolean)">
       
        <p>Initialize new Document instance from the {@code input} stream.</p> @param input Stream with pdf document. @param isManagedStream if set to {@code true} inner stream is closed before exit; otherwise, is not.
      
      <param name="InputStream"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Document.#ctor(InputStream,com.aspose.pdf.LoadOptions)">
       
        <p>Opens an existing document from a stream providing necessary converting to get pdf document.</p> @param input Input stream to convert into pdf document. @param options Represents properties for converting {@code input} into pdf document.
      
      <param name="InputStream"/>
      <param name="com.aspose.pdf.LoadOptions"/>
    </member>
    <member name="M:com.aspose.pdf.Document.#ctor(String,LoadOptions)">
       
        <p>Opens an existing document from a file providing necessary converting to get pdf document.</p> @param filename Input file to convert into pdf document. @param options Represents properties for converting {@code filename} into pdf document.
      
      <param name="String"/>
      <param name="LoadOptions"/>
    </member>
    <member name="M:com.aspose.pdf.Document.#ctor(Stream,String)">
       
        <p>Opens an existing document from a stream.</p> @param input Input file to convert into pdf document. @param password User or owner password.
      
      <param name="Stream"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Document.#ctor(String)">
       
        <p>Just init Document using {@code filename}. The same as {@code Document(Stream)}.</p> @param filename The name of the pdf document file.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Document.#ctor(String,String)">
       
        <p>Initializes new instance of the {@code Document} class for working with encrypted document.</p> @param filename Document file name. @param password User or owner password.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Document.#ctor(String,String,boolean)">
       
        <p>Initializes new instance of the {@code Document} class for working with encrypted document.</p> @param filename Document file name. @param password User or owner password. @param isManagedStream if set to {@code true} inner stream is closed before exit; otherwise, is not.
      
      <param name="String"/>
      <param name="String"/>
      <param name="boolean"/>
    </member>
    <member name="T:com.aspose.pdf.Document.CallBackGetHocr">
       
        <p>The call back procedure for hocr recognize.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Document.OptimizationOptions">
       
        <p>Class which describes document optimization algorithm. Instance of this class may be used as parameter of OptimizeResources() method.</p> @deprecated This class is obsolete. Please use com.aspose.pdf.optimization.OptimizationOptions instead.
      
    </member>
    <member name="M:com.aspose.pdf.Document.OptimizationOptions.all">
       
        <p>Creates optimization strategy will all options activated.</p> @return OptimizationOptions object.
      
    </member>
    <member name="M:com.aspose.pdf.Document.OptimizationOptions.getResolution">
       
        <p>Specifies new image dpi when CompressIamges flag is used.</p> @return image resolution
      
    </member>
    <member name="M:com.aspose.pdf.Document.OptimizationOptions.setResolution(int)">
       
        <p>Specifies new image dpi when CompressIamges flag is used.</p> @param dpi image resolution
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Document.OptimizationOptions.getMaximumImageDimension">
       
        <p>Specifies maximum image dimension. If the image width or height of the existing image is greater than this value - the image size will be proportionally reduced.</p> @return image maximum dimension
      
    </member>
    <member name="M:com.aspose.pdf.Document.OptimizationOptions.setMaximumImageDimension(int)">
       
        <p>Specifies maximum image dimension. If the image width or height of the existing image is greater than this value - the image size will be proportionally reduced.</p> @param dimension image maximum dimension
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.Document.IDocumentFontUtilities">
       
        <p>Holds functionality to tune fonts</p> 
      
    </member>
    <member name="T:com.aspose.pdf.DocumentActionCollection">
       
        <p>Class describes actions performed on some actions with document</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DocumentActionCollection.getBeforeSaving">
       
        <p>Gets action performed before document saving.</p> @return PdfAction object
      
    </member>
    <member name="M:com.aspose.pdf.DocumentActionCollection.setBeforeSaving(PdfAction)">
       
        <p>Sets action performed before document saving.</p> @param value PdfAction object
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentActionCollection.getBeforeClosing">
       
        <p>Gets action that will be performed before documetn closing.</p> @return PdfAction object
      
    </member>
    <member name="M:com.aspose.pdf.DocumentActionCollection.setBeforeClosing(PdfAction)">
       
        <p>Sets action that will be performed before documetn closing.</p> @param value PdfAction object
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentActionCollection.getAfterSaving">
       
        <p>Gets action that will be performed after document saving.</p> @return PdfAction object
      
    </member>
    <member name="M:com.aspose.pdf.DocumentActionCollection.setAfterSaving(PdfAction)">
       
        <p>Sets action that will be performed after document saving.</p> @param value PdfAction object
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentActionCollection.getBeforePrinting">
       
        <p>Action that will be performed before document printing.</p> @return PdfAction before printing
      
    </member>
    <member name="M:com.aspose.pdf.DocumentActionCollection.setBeforePrinting(PdfAction)">
       
        <p>Action that will be performed before document printing.</p> @param value PdfAction before printing
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentActionCollection.getAfterPrinting">
       
        <p>Action that will be performed after document printing.</p> @return PdfAction after printing
      
    </member>
    <member name="M:com.aspose.pdf.DocumentActionCollection.setAfterPrinting(PdfAction)">
       
        <p>Action that will be performed after document printing.</p> @param value PdfAction after printing
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentActionCollection.#ctor(IDocument)">
       
        <p>Constructor for DocumentActionCollection. Constructs DocumentActionCollection objects from Pdf.Kit.Engine Document object.</p> @param document Document for which action colleciton is created.
      
      <param name="IDocument"/>
    </member>
    <member name="T:com.aspose.pdf.DocumentFactory">
       
        <p>Class which allows to create/load documents of different types.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DocumentFactory.createDocument(InputStream,LoadOptions)">
       
        <p>Create document.</p> @return Document object @param input Input stream. @param options Document load options.
      
      <param name="InputStream"/>
      <param name="LoadOptions"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentFactory.createDocument">
       
        <p>Create empty document.</p> @return Created document.
      
    </member>
    <member name="M:com.aspose.pdf.DocumentFactory.createDocument(InputStream)">
       
        <p>Load document from a stream.</p> @return Created document. @param input Input stream.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentFactory.createDocument(InputStream,String)">
       
        <p>Load password protected document from a stream.</p> @return Created document. @param input Source stream. @param password Passowrd for access to document.
      
      <param name="InputStream"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentFactory.createDocument(String)">
       
        <p>Load document from a file.</p> @return Created document. @param fileName Name of PDF file.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.DocumentInfo">
       
        <p>Represents meta information of PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.getTitle">
       
        <p>Gets document title.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.setTitle(String)">
       
        <p>Sets document title.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.getCreator">
       
        <p>Gets document creator.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.setCreator(String)">
       
        <p>Sets document creator.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.getAuthor">
       
        <p>Gets document author.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.setAuthor(String)">
       
        <p>Sets document author.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.getSubject">
       
        <p>Gets the subject of the document.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.setSubject(String)">
       
        <p>Sets the subject of the document.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.getKeywords">
       
        <p>Gets the keywords of the document.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.setKeywords(String)">
       
        <p>Set the keywords of the document.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.getProducer">
       
        <p>Gets the document producer.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.setProducer(String)">
       
        <p>Sets the document producer.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.getCreationDate">
       
        <p>Gets the date of document creation.</p> @return Date object
      
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.setCreationDate(java.util.Date)">
       
        <p>Sets the date of document creation.</p> @param value Date object
      
      <param name="java.util.Date"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.getCreationTimeZone">
       
        <p>Time zone of creation date in milliseconds.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.setCreationTimeZone(double)">
       
        <p>Time zone of creation date in milliseconds.</p> @param value in milliseconds
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.getModTimeZone">
       
        <p>Time zone of modification date.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.setModTimeZone(double)">
       
        <p>Time zone of modification date.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.getModDate">
       
        <p>Gets the date of document modification.</p> @return Date object
      
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.setModDate(java.util.Date)">
       
        <p>Sets the date of document modification.</p> @param value Date object
      
      <param name="java.util.Date"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.getTrapped">
       
        <p>Gets the trapped flag.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.setTrapped(String)">
       
        <p>Sets the trapped flag.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.clear">
       
        <p>Clears the document info.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.addItem(String,String)">
       
        <p>Adds an element with the specified key and value into the collection.</p> @param key The key of the element to add. @param value The value of the element to add. The value can be null.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.remove(String)">
       
        <p>Removes the element with the specified key from the collection.</p> @param key The key of the element to remove.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.get_Item(String)">
       
        <p>Gets the value associated with the specified key.</p> @param key The key whose value to get or set. @return Value Object
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.set_Item(String,String)">
       
        <p>Sets the value associated with the specified key.</p> @param key String Object @param value Object
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.clearCustomData">
       
        <p>Clears custom data only, leaves all other predefined values (Title, Author, etc.).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.isPredefinedKey(String)">
       
        <p>Determines if the key is predefined (Title, Author, etc.), not custom.</p> @param key Selected key @return True in case the key is predefined.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.#ctor(IDocument)">
       
        <p>Initialize DocumentInfo instance.</p> @param document The info of this document will be used for initialization.
      
      <param name="IDocument"/>
    </member>
    <member name="T:com.aspose.pdf.DocumentWeb">
      Represents DocumentWeb class
    </member>
    <member name="M:com.aspose.pdf.DocumentWeb.save(HttpServletResponse,String,int,SaveOptions)">
       
        <p>Saves the document to a response stream with a save options.</p> @param response Encapsulates HTTP-response information. @param outputFileName Simple file name, i.e. without path. @param disposition Represents a MIME protocol Content-Disposition header. @param options Save options.
      
      <param name="HttpServletResponse"/>
      <param name="String"/>
      <param name="int"/>
      <param name="SaveOptions"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentWeb.#ctor">
       
        <p>Initializes empty DocumentWeb.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DocumentWeb.#ctor(InputStream)">
       
        <p>Initialize new DocumentWeb instance from the {@code input} stream.</p> @param input Stream with pdf DocumentWeb.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentWeb.#ctor(InputStream,String)">
      <param name="InputStream"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentWeb.#ctor(InputStream,com.aspose.pdf.LoadOptions)">
       
        <p>Opens an existing DocumentWeb from a stream providing necessary converting to get pdf DocumentWeb.</p> @param input Input stream to convert into pdf DocumentWeb. @param options Represents properties for converting {@code input} into pdf DocumentWeb.
      
      <param name="InputStream"/>
      <param name="com.aspose.pdf.LoadOptions"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentWeb.#ctor(String,LoadOptions)">
      <param name="String"/>
      <param name="LoadOptions"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentWeb.#ctor(String)">
       
        <p>Just init DocumentWeb using {@code filename}. The same as {@code DocumentWeb(Stream)}.</p> @param filename The name of the pdf DocumentWeb file.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentWeb.#ctor(String,String)">
       
        <p>Initializes new instance of the {@code DocumentWeb} class for working with encrypted DocumentWeb.</p> @param filename DocumentWeb file name. @param password User or owner password.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.drawing.Arc">
       
        <p>Represents arc.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Arc.getPosX">
       
        <p>Gets float value that indicates the x-coordinate of the center of the arc.</p> @return x-coordinate of the center of the arc.
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Arc.setPosX(double)">
       
        <p>Sets float value that indicates the x-coordinate of the center of the arc.</p> @param value x-coordinate of the center of the arc.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Arc.getPosY">
       
        <p>Gets float value that indicates the y-coordinate of the center of the arc.</p> @return y-coordinate of the center of the arc.
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Arc.setPosY(double)">
       
        <p>Sets float value that indicates the y-coordinate of the center of the arc.</p> @param value y-coordinate of the center of the arc.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Arc.getRadius">
       
        <p>Gets float value that indicates the radius of the arc.</p> @return value that indicates the radius of the arc.
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Arc.setRadius(double)">
       
        <p>Sets float value that indicates the radius of the arc.</p> @param value that indicates the radius of the arc.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Arc.getAlpha">
       
        <p>Gets float value that indicates the beginning angle degree of the arc.</p> @return alpha value.
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Arc.setAlpha(double)">
       
        <p>Sets float value that indicates the beginning angle degree of the arc.</p> @param value alpha value.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Arc.getBeta">
       
        <p>Gets float value that indicates the ending angle degree of the arc.</p> @return beta value
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Arc.setBeta(double)">
       
        <p>Sets float value that indicates the ending angle degree of the arc.</p> @param value beta value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Arc.#ctor">
       
        <p>For Internal usage only</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Arc.#ctor(double,double,double,double,double)">
       
        <p>Initializes a new instance of the {@code Arc} class.</p> @param posX The x-coordinate of the center point of the arc. @param posY The y-coordinate of the center point of the arc. @param radius The radius value of the arc. @param alpha The beginning angle value of the arc. @param beta The end angle value of the arc.
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.drawing.Circle">
       
        <p>Represents circle.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Circle.getPosX">
       
        <p>Gets float value that indicates the x-coordinate of the center of the arc.</p> @return x-coordinate of the center of the arc.
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Circle.setPosX(double)">
       
        <p>Sets float value that indicates the x-coordinate of the center of the arc.</p> @param value x-coordinate of the center of the arc.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Circle.getPosY">
       
        <p>Gets float value that indicates the y-coordinate of the center of the arc.</p> @return y-coordinate of the center of the arc.
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Circle.setPosY(double)">
       
        <p>Sets float value that indicates the y-coordinate of the center of the arc.</p> @param value y-coordinate of the center of the arc.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Circle.getRadius">
       
        <p>Gets float value that indicates the radius of the circle.</p> @return value that indicates the radius of the circle.
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Circle.setRadius(double)">
       
        <p>Sets float value that indicates the radius of the circle.</p> @param value that indicates the radius of the circle.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Circle.#ctor">
       
        <p>For Internal usage only</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Circle.#ctor(float,float,float)">
       
        <p>Initializes a new instance of the {@code Circle} class.</p> @param posX The x-coordinate of the center of the circle. @param posY The y-coordinate of the center of the circle. @param radius The radius of the circle.
      
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="T:com.aspose.pdf.drawing.Curve">
       
        <p>Represents bezier curve.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Curve.getPositionArray">
       
        <p>Gets a float position array.</p> @return float[] array
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Curve.setPositionArray(float[])">
       
        <p>Sets a float position array.</p> @param value float[] array
      
      <param name="float[]"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Curve.#ctor">
       
        <p>For Internal usage only</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Curve.#ctor(float[])">
       
        <p>Initializes a new instance of the {@code Curve} class.</p> @param positionArray The position array of the control points of the curve.There should be four control points,so the length of the array should be eight.
      
      <param name="float[]"/>
    </member>
    <member name="T:com.aspose.pdf.drawing.Ellipse">
       
        <p>Represents ellipse.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Ellipse.getLeft">
       
        <p>Gets float value that indicates the left position of the ellipse.</p> @return value that indicates the left position of the ellipse.
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Ellipse.setLeft(double)">
       
        <p>Sets float value that indicates the left position of the ellipse.</p> @param value that indicates the left position of the ellipse.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Ellipse.getBottom">
       
        <p>Gets float value that indicates the bottom position of the ellipse.</p> @return value that indicates the bottom position of the ellipse.
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Ellipse.setBottom(double)">
       
        <p>Sets float value that indicates the bottom position of the ellipse.</p> @param value that indicates the bottom position of the ellipse.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Ellipse.getWidth">
       
        <p>Gets float value that indicates the width of the ellipse.</p> @return value that indicates the width of the ellipse.
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Ellipse.setWidth(double)">
       
        <p>Gets float value that indicates the width of the ellipse.</p> @param value that indicates the width of the ellipse.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Ellipse.getHeight">
       
        <p>Gets float value that indicates the height of the ellipse.</p> @return value that indicates the height of the ellipse
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Ellipse.setHeight(double)">
       
        <p>Sets float value that indicates the height of the ellipse.</p> @param value that indicates the height of the ellipse
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Ellipse.#ctor">
       
        <p>For Internal usage only</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Ellipse.#ctor(double,double,double,double)">
       
        <p>Initializes a new instance of the {@code Ellipse} class.</p> @param left The left position of the ellipse. @param bottom The bottom position of the ellipse. @param width The width of the ellipse. @param height The height of the ellipse.
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.drawing.GradientAxialShading">
       
        <p>Represents gradient axial shading class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.GradientAxialShading.getStart">
       
        <p>Gets start point.</p> @return Point object
      
    </member>
    <member name="M:com.aspose.pdf.drawing.GradientAxialShading.setStart(Point)">
       
        <p>Sets start point.</p> @param value Point object
      
      <param name="Point"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.GradientAxialShading.getEnd">
       
        <p>Gets end point.</p> @return Point object
      
    </member>
    <member name="M:com.aspose.pdf.drawing.GradientAxialShading.setEnd(Point)">
       
        <p>Sets end point.</p> @param value Point object
      
      <param name="Point"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.GradientAxialShading.getStartColor">
       
        <p>Gets start color.</p> @return com.aspose.pdf.Color object
      
    </member>
    <member name="M:com.aspose.pdf.drawing.GradientAxialShading.setStartColor(Color)">
       
        <p>Sets start color.</p> @param value com.aspose.pdf.Color object
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.GradientAxialShading.getEndColor">
       
        <p>Gets end color.</p> @return com.aspose.pdf.Color object
      
    </member>
    <member name="M:com.aspose.pdf.drawing.GradientAxialShading.setEndColor(Color)">
       
        <p>Sets end color.</p> @param value com.aspose.pdf.Color object
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.GradientAxialShading.#ctor">
       
        <p>Initializes a new instance of the {@code GradientAxialShading} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.GradientAxialShading.#ctor(Color,Color)">
       
        <p>Initializes a new instance of the {@code GradientAxialShading} class.</p> @param startColor The start point. @param endColor The end point.
      
      <param name="Color"/>
      <param name="Color"/>
    </member>
    <member name="T:com.aspose.pdf.drawing.GradientRadialShading">
       
        <p>Represents gradient radial shading type.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.GradientRadialShading.getStart">
       
        <p>Gets or sets starting circle center point.</p> @return Point instance
      
    </member>
    <member name="M:com.aspose.pdf.drawing.GradientRadialShading.setStart(Point)">
       
        <p>Gets or sets starting circle center point.</p> @param value Point instance
      
      <param name="Point"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.GradientRadialShading.getEnd">
       
        <p>Gets or sets ending circle center point.</p> @return Point instance
      
    </member>
    <member name="M:com.aspose.pdf.drawing.GradientRadialShading.setEnd(Point)">
       
        <p>Gets or sets ending circle center point.</p> @param value Point instance
      
      <param name="Point"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.GradientRadialShading.getStartingRadius">
       
        <p>Gets or sets starting circle radius.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.drawing.GradientRadialShading.setStartingRadius(double)">
       
        <p>Gets or sets starting circle radius.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.GradientRadialShading.getEndingRadius">
       
        <p>Gets or sets ending circle radius.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.drawing.GradientRadialShading.setEndingRadius(double)">
       
        <p>Gets or sets ending circle radius.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.GradientRadialShading.getStartColor">
       
        <p>Gets or sets start color.</p> @return Color instance
      
    </member>
    <member name="M:com.aspose.pdf.drawing.GradientRadialShading.setStartColor(Color)">
       
        <p>Gets or sets start color.</p> @param value Color instance
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.GradientRadialShading.getEndColor">
       
        <p>Gets or sets end color.</p> @return Color instance
      
    </member>
    <member name="M:com.aspose.pdf.drawing.GradientRadialShading.setEndColor(Color)">
       
        <p>Gets or sets end color.</p> @param value Color instance
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.GradientRadialShading.#ctor">
       
        <p>Initializes a new instance of the {@code GradientRadialShading} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.GradientRadialShading.#ctor(Color,Color)">
       
        <p>Initializes a new instance of the {@code GradientRadialShading} class.</p> @param startColor The starting circle color. @param endColor The ending circle color.
      
      <param name="Color"/>
      <param name="Color"/>
    </member>
    <member name="T:com.aspose.pdf.drawing.Graph">
       
        <p>Represents graph - graphics generator paragraph.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Graph.getGraphInfo">
       
        <p>Gets a {@code GraphInfo} object that indicates the graph info,such as color, line width,etc.</p> @return GraphInfo object
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Graph.setGraphInfo(GraphInfo)">
       
        <p>Gets or sets a {@code GraphInfo} object that indicates the graph info,such as color, line width,etc.</p> @param value GraphInfo object
      
      <param name="GraphInfo"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Graph.getBorder">
       
        <p>Gets the border.</p> @return BorderInfo element
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Graph.setBorder(BorderInfo)">
       
        <p>Sets the border.</p> @param value BorderInfo element
      
      <param name="BorderInfo"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Graph.isChangePosition">
       
        <p>Gets change current position after process paragraph.(default true)</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Graph.setChangePosition(boolean)">
       
        <p>Sets change current position after process paragraph.(default true)</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Graph.getLeft">
       
        <p>Gets table left coordinate.</p> @return table left coordinate.
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Graph.setLeft(double)">
       
        <p>Sets table left coordinate.</p> @param value table left coordinate.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Graph.getTop">
       
        <p>Gets the table top coordinate.</p> @return the table top coordinate.
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Graph.setTop(double)">
       
        <p>Sets the table top coordinate.</p> @param value the table top coordinate.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Graph.getShapes">
       
        <p>Gets a {@code Shapes} collection that indicates all shapes in the graph.</p> @return List of Shape elements
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Graph.setShapes(java.util.List&lt;Shape&gt;)">
       
        <p>Sets a {@code Shapes} collection that indicates all shapes in the graph.</p> @param value List of Shape elements
      
      <param name="java.util.List&lt;Shape&gt;"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Graph.getTitle">
       
        <p>Gets string value that indicates the title of the graph.</p> @return title of the graph.
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Graph.setTitle(TextFragment)">
       
        <p>Sets string value that indicates the title of the graph.</p> @param value title of the graph.
      
      <param name="TextFragment"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Graph.getWidth">
       
        <p>Gets float value that indicates the graph width. The unit is point. In XML,the default unit is point,but cm and inch are also supported. For example,GraphWidth="10cm" or GraphWidth="5inch".</p> @return float value that indicates the graph width.
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Graph.setWidth(double)">
       
        <p>Sets float value that indicates the graph width. The unit is point. In XML,the default unit is point,but cm and inch are also supported. For example,GraphWidth="10cm" or GraphWidth="5inch".</p> @param value float value that indicates the graph width.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Graph.getHeight">
       
        <p>Gets float value that indicates the graph height. The unit is point. In XML,the default unit is point,but cm and inch are also supported. For example,GraphHeight="10cm" or GraphHeight="5inch".</p> @return value that indicates the graph height.
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Graph.setHeight(double)">
       
        <p>Sets float value that indicates the graph height. The unit is point. In XML,the default unit is point,but cm and inch are also supported. For example,GraphHeight="10cm" or GraphHeight="5inch".</p> @param value that indicates the graph height.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Graph.deepClone">
       
        <p>Clone the graph.</p> @return The cloned object
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Graph.#ctor">
       
        <p>For Internal usage only</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Graph.#ctor(float,float)">
       
        <p>Initializes a new instance of the {@code Graph} class.</p> @param width The width of the graph. @param height The height of the graph.
      
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="T:com.aspose.pdf.drawing.Line">
       
        <p>Represents line.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Line.getPositionArray">
       
        <p>Gets object that indicates the position array.The array is composed by coordinates of each control point of the line. directly.</p> @return that indicates the position array.
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Line.setPositionArray(float[])">
       
        <p>Sets object that indicates the position array.The array is composed by coordinates of each control point of the line. directly.</p> @param value that indicates the position array.
      
      <param name="float[]"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Line.#ctor">
       
        <p>For Internal usage only</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Line.#ctor(float[])">
       
        <p>Initializes a new instance of the {@code Line} class.</p> @param positionArray The line position array.
      
      <param name="float[]"/>
    </member>
    <member name="T:com.aspose.pdf.drawing.Path">
       
        <p>Represents arc.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Path.getShapesInternal">
       
        <p>Gets or sets shapes collection.</p> @return internal object
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Path.getShapes">&lt;p&gt; Gets or sets shapes collection. &lt;/p&gt; @return {@code java.util.List&lt;Shape&gt; }object</member>
    <member name="M:com.aspose.pdf.drawing.Path.#ctor(Shape[])">
       
        <p>Initializes a new instance of the {@code Path} class.</p> @param shapes The shape array contains path segments set.
      
      <param name="Shape[]"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Path.#ctor">
       
        <p>Initializes a new instance of the {@code Path} class.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.drawing.PatternColorSpace">
       
        <p>Represents base pattern class.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.drawing.Rectangle">
       
        <p>Represents rectangle.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Rectangle.getRoundedCornerRadius">
       
        <p>Gets float value that indicates the radius of rectangle corners.</p> @return value that indicates the radius of rectangle corners.
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Rectangle.setRoundedCornerRadius(double)">
       
        <p>Sets float value that indicates the radius of rectangle corners.</p> @param value that indicates the radius of rectangle corners.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Rectangle.getLeft">
       
        <p>Gets float value that indicates the left position of the rectangle.</p> @return float value that indicates the left position of the rectangle.
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Rectangle.setLeft(double)">
       
        <p>Sets float value that indicates the left position of the rectangle.</p> @param value float value that indicates the left position of the rectangle.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Rectangle.getBottom">
       
        <p>Gets float value that indicates the bottom position of the rectangle.</p> @return value that indicates the bottom position of the rectangle.
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Rectangle.setBottom(double)">
       
        <p>Sets float value that indicates the bottom position of the rectangle.</p> @param value value that indicates the bottom position of the rectangle.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Rectangle.getWidth">
       
        <p>Gets float value that indicates the width of the rectangle.</p> @return value that indicates the width of the rectangle.
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Rectangle.setWidth(double)">
       
        <p>Sets float value that indicates the width of the rectangle.</p> @param value that indicates the width of the rectangle.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Rectangle.getHeight">
       
        <p>Gets float value that indicates the height of the rectangle.</p> @return value that indicates the height of the rectangle.
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Rectangle.setHeight(double)">
       
        <p>Sets float value that indicates the height of the rectangle.</p> @param value value that indicates the height of the rectangle.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Rectangle.#ctor">
      Constructor
    </member>
    <member name="M:com.aspose.pdf.drawing.Rectangle.#ctor(float,float,float,float)">
       
        <p>Initializes a new instance of the {@code Rectangle} class.</p> @param left The left position of the rectangle. @param bottom The bottom position of the rectangle. @param width The width of the rectangle. @param height The height of the rectangle.
      
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="T:com.aspose.pdf.drawing.Shape">
       
        <p>Represents shape - the base graphics object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Shape.getGraphInfo">
       
        <p>Gets object that indicates the graph info,such as color, line width,etc.</p> @return object that indicates the graph info.
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Shape.setGraphInfo(GraphInfo)">
       
        <p>Sets object that indicates the graph info,such as color, line width,etc.</p> @param value that indicates the graph info.
      
      <param name="GraphInfo"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Shape.getText">
       
        <p>Gets or sets a text for shape</p> @return TextFragment object
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Shape.setText(TextFragment)">
       
        <p>Gets or sets a text for shape</p> @param value TextFragment object
      
      <param name="TextFragment"/>
    </member>
    <member name="T:com.aspose.pdf.Element">
       
        <p>Class representing base element of logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Element.getChildren">&lt;p&gt; Gets child elements collection. &lt;/p&gt; @return {@code java.util.List&lt;Element&gt;} object</member>
    <member name="M:com.aspose.pdf.Element.getLang">
       
        <p>(Optional; PDF 1.4) A language specifying the natural language for all text in the structure element except where overridden by language specifications for nested structure elements or marked content.</p> @return String object
      
    </member>
    <member name="M:com.aspose.pdf.Element.setLang(String)">
       
        <p>(Optional; PDF 1.4) A language specifying the natural language for all text in the structure element except where overridden by language specifications for nested structure elements or marked content.</p> @param value String object
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Element.getActualText">
       
        <p>(Optional; PDF 1.4) Text that is an exact replacement for the structure element and its children. This replacement text (which should apply to as small a piece of content as possible) is useful when extracting the document’s contents in support of accessibility to users with disabilities or for other purposes.</p> @return String object
      
    </member>
    <member name="M:com.aspose.pdf.Element.setActualText(String)">
       
        <p>(Optional; PDF 1.4) Text that is an exact replacement for the structure element and its children. This replacement text (which should apply to as small a piece of content as possible) is useful when extracting the document’s contents in support of accessibility to users with disabilities or for other purposes.</p> @param value String object
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Element.getAlt">
       
        <p>(Optional) An alternate description of the structure element and its children in human-readableform, which is useful when extracting the document’s contents in support of accessibility to users with disabilities or for other purposes.</p> @return String object
      
    </member>
    <member name="M:com.aspose.pdf.Element.setAlt(String)">
       
        <p>(Optional) An alternate description of the structure element and its children in human-readableform, which is useful when extracting the document’s contents in support of accessibility to users with disabilities or for other purposes.</p> @param value String object
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Element.getE">
       
        <p>(Optional; PDF 1.5) The expanded form of an abbreviation.</p> @return String object
      
    </member>
    <member name="M:com.aspose.pdf.Element.setE(String)">
       
        <p>(Optional; PDF 1.5) The expanded form of an abbreviation.</p> @param value String object
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.EmbeddedFileCollection">
       
        <p>Class representing embedded files collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.EmbeddedFileCollection.isSynchronized">
       
        <p>Gets a value indicating whether access to this collection is synchronized (thread safe).</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.EmbeddedFileCollection.getSyncRoot">
       
        <p>Gets an object that can be used to synchronize access to this collection.</p> @return Object for synchronization
      
    </member>
    <member name="M:com.aspose.pdf.EmbeddedFileCollection.size">
       
        <p>Gets number of embedded files in collection.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.EmbeddedFileCollection.isReadOnly">
       
        <p>Determines if collection is read only. Always returns false.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.EmbeddedFileCollection.copyTo(FileSpecification[],int)">
       
        <p>Copies array of FileSpecification object into colleciton.</p> @param array Array of objects which will be copied. @param index Starting index from which copying will be started.
      
      <param name="FileSpecification[]"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.EmbeddedFileCollection.iterator">
       
        <p>Returns colleciton enumerator.</p> @return Enumerator of colleciton.
      
    </member>
    <member name="M:com.aspose.pdf.EmbeddedFileCollection.iterator_Rename_Namesake">
       
        <p>Returns colleciton enumerator.</p> @return Enumerator of colleciton.
      
    </member>
    <member name="M:com.aspose.pdf.EmbeddedFileCollection.isEmbeddedFilesExist">
       
        <p>Check is Embedded Files structure exists. Return TRUE if structure exists, and FALSE if not. If document have never contained embedded files - this structure was not created and absent.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.EmbeddedFileCollection.add(FileSpecification)">
       
        <p>Adds embedded file specification into collection.</p> @param file FileSpecification which should be added into colleciton.
      
      <param name="FileSpecification"/>
    </member>
    <member name="M:com.aspose.pdf.EmbeddedFileCollection.add(String,FileSpecification)">
       
        <p>Adds file to embedded files with the specified key.</p> @param key Key in the embedded files. @param file File specification.
      
      <param name="String"/>
      <param name="FileSpecification"/>
    </member>
    <member name="M:com.aspose.pdf.EmbeddedFileCollection.deleteByKey(String)">
       
        <p>Deletes file from the collection by its key in the collection.</p> @param key String object Key name.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.EmbeddedFileCollection.getKeys">
       
        <p>Returns list of file attachment keys.</p> @return List of String values
      
    </member>
    <member name="M:com.aspose.pdf.EmbeddedFileCollection.findByName(String)">
       
        <p>Returns embedded file by its name.</p> @return FileSpecification instance File specification object if found; otherwise, null. @param name Name of the file.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.EmbeddedFileCollection.delete(String)">
       
        <p>Delete embedded file by name.</p> @param name Name of the embedded file which should be deleted.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.EmbeddedFileCollection.delete">
       
        <p>Remove all embedded files from document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.EmbeddedFileCollection.remove(FileSpecification)">
       
        <p>Removes specified FileSpecification from collection. Not supported.</p> @param item FileSpecification instance @return boolean value
      
      <param name="FileSpecification"/>
    </member>
    <member name="M:com.aspose.pdf.EmbeddedFileCollection.contains(FileSpecification)">
       
        <p>Determines if collection contains specified FileSpecification. Not supported.</p> @param item FileSpecification instance @return boolean value
      
      <param name="FileSpecification"/>
    </member>
    <member name="M:com.aspose.pdf.EmbeddedFileCollection.clear">
       
        <p>Remove all embedded files from document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.EmbeddedFileCollection.get_Item(int)">
       
        <p>Gets embedded file by its index.</p> @param index Index of embedded file. Numbering is started from 1. @return Retreived embedded file specification
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.EmbeddedFileCollection.get_Item(String)">
       
        <p>Gets embedded file by its name.</p> @param name Embedded file name. @return Retreived embedded file specification.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.EncryptedPayload">
       
        <p>Represents encrypted payload in file specification.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.EncryptedPayload.getType">
       
        <p>Gets type.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.EncryptedPayload.getSubtype">
       
        <p>Gets subtype.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.EncryptedPayload.getVersion">
       
        <p>Gets version number.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.EncryptedPayload.#ctor(FileSpecification)">
       
        <p>Initialize Encrypted payload instance.</p> @param fileSpecification The file specification used for initialization.
      
      <param name="FileSpecification"/>
    </member>
    <member name="T:com.aspose.pdf.EpubLoadOptions">
       
        <p>Contains options for loading/importing EPUB file into pdf document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.EpubLoadOptions.getPageSize">
       
        <p>Gets output page size for import.</p> @return Dimension2D object
      
    </member>
    <member name="M:com.aspose.pdf.EpubLoadOptions.getMargin">
       
        <p>Gets reference on object that represent marging info.</p> @return MarginInfo object
      
    </member>
    <member name="M:com.aspose.pdf.EpubLoadOptions.setMargin(MarginInfo)">
       
        <p>Gets reference on object that represent marging info.</p> @param value MarginInfo object
      
      <param name="MarginInfo"/>
    </member>
    <member name="M:com.aspose.pdf.EpubLoadOptions.getMarginsAreaUsageMode">
       
        <p>Represents mode of usage of margins area - defines treatement of instructions (if any) of CSS of imported document related to usage of margins.</p> @return MarginsAreaUsageModes value @see MarginsAreaUsageModes
      
    </member>
    <member name="M:com.aspose.pdf.EpubLoadOptions.setMarginsAreaUsageMode(int)">
       
        <p>Represents mode of usage of margins area - defines treatement of instructions (if any) of CSS of imported document related to usage of margins.</p> @param marginsAreaUsageMode MarginsAreaUsageModes value @see MarginsAreaUsageModes
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.EpubLoadOptions.getPageSizeAdjustmentMode">
       
        <p>ATTENTION! The feature implemented but did not put yet to public API since blocker issue in OSHARED layer revealed for sample document. Represents mode of usage of page size during conversion. Formats (like HTML, EPUB etc), usually have float design, so, it allows to fit required pagesize. But sometimes content has specified horizontal positions or size that does not allow put content into required page size. In such case we can define what should be done in this case (i.e when size of content does not fit required initial page size of result PDF document).</p> @return PageSizeAdjustmentModes value @see PageSizeAdjustmentModes
      
    </member>
    <member name="M:com.aspose.pdf.EpubLoadOptions.setPageSizeAdjustmentMode(int)">
       
        <p>ATTENTION! The feature implemented but did not put yet to public API since blocker issue in OSHARED layer revealed for sample document. Represents mode of usage of page size during conversion. Formats (like HTML, EPUB etc), usually have float design, so, it allows to fit required pagesize. But sometimes content has specified horizontal positions or size that does not allow put content into required page size. In such case we can define what should be done in this case (i.e when size of content does not fit required initial page size of result PDF document).</p> @param pageSizeAdjustmentMode PageSizeAdjustmentModes value @see PageSizeAdjustmentModes
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.EpubLoadOptions.#ctor">
       
        <p>Creates default load options for converting EPUB file into pdf document. Default pdf page size - A4 300dpi 2480 X 3508.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.EpubLoadOptions.#ctor(java.awt.geom.Dimension2D)">
       
        <p>Creates load options with specified page size.</p> @param pageSize Defines pdf page width and height.
      
      <param name="java.awt.geom.Dimension2D"/>
    </member>
    <member name="T:com.aspose.pdf.EpubSaveOptions">
       
        <p>Save options for export to EPUB format</p> 
      
    </member>
    <member name="M:com.aspose.pdf.EpubSaveOptions.getContentRecognitionMode">
       
        <p>When PDF file (that usually has fixed layout) is being converted, the conversion engine tries to perform grouping and multi-level analysis to restore the original document author's intent and produce result in flow layout. This property tunes that conversion for this or that desirable method of recognition of content.</p> @return RecognitionMode element @see RecognitionMode
      
    </member>
    <member name="M:com.aspose.pdf.EpubSaveOptions.setContentRecognitionMode(int)">
       
        <p>When PDF file (that usually has fixed layout) is being converted, the conversion engine tries to perform grouping and multi-level analysis to restore the original document author's intent and produce result in flow layout. This property tunes that conversion for this or that desirable method of recognition of content.</p> @param contentRecognitionMode RecognitionMode element @see RecognitionMode
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.EpubSaveOptions.#ctor">
       
        <p>Constructor</p> 
      
    </member>
    <member name="T:com.aspose.pdf.EpubSaveOptions.RecognitionMode">
       
        <p>When PDF file (that usually has fixed layout) is being converted, the conversion engine tries to perform grouping and multi-level analysis to restore the original document author's intent and produce result in flow layout. This property tunes that conversion for this or that desirable method of recognition of content.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.EpubSaveOptions.RecognitionMode.Flow">
       
        <p>Full recognition mode, the engine tries to perform grouping and multi-level analysis to restore the original document author's intent and produce xhtml in flow layout.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.EpubSaveOptions.RecognitionMode.PdfFlow">
       
        <p>The main idea of this conversion is based on saving "natural" order of content rendering that is formed during processing of pdf documents. In the general cases pdf documents keep top-down\left-right rendering order (see attachment directions.png). This assumption allows to create a single-path algorithm that will transform Aps elements that have positions (fixed-layout) into flow formats like HTML,EPUB,DOC. This mode will be especially useful for converting from PDF(APS) into EPUB, because the EPUB format was developed for e-readers like the Kindle or smart-phones. The size of screen those devices usually is less than the size of screen of ordinary PC. Therefore the content of EPUB documents is better to save in the flow format, for correct rendering on screens with different sizes. In this mode every column will be added to the end of previous column this allows to keep the logical structure of transformed document during "pagination" in EPUB readers. This achievement allows correctly render scientific or magazine articles.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.EpubSaveOptions.RecognitionMode.Fixed">
       
        <p>This mode is fast and good for maximally preserving the original look pages, but unfortunately many EPUB readeres don't support xhtml with fixed layout</p> 
      
    </member>
    <member name="T:com.aspose.pdf.ExcelSaveOptions">
       
        <p>Save options for export to Excel format</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ExcelSaveOptions.getMinimizeTheNumberOfWorksheets">
       
        <p>Set true if you need to minimize the number of worksheets in resultant workbook. Default value is false; it means save of each PDF page as separated worksheet.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.ExcelSaveOptions.setMinimizeTheNumberOfWorksheets(boolean)">
       
        <p>Set true if you need to minimize the number of worksheets in resultant workbook. Default value is false; it means save of each PDF page as separated worksheet.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.ExcelSaveOptions.isInsertBlankColumnAtFirst">
       
        <p>Set false if you need suppress inserting of blank column as the first column of worksheet. Default value is true; it means that blank column will be inserted.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.ExcelSaveOptions.setInsertBlankColumnAtFirst(boolean)">
       
        <p>Set false if you need suppress inserting of blank column as the first column of worksheet. Default value is true; it means that blank column will be inserted.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.ExcelSaveOptions.isUniformWorksheets">
       
        <p>Set true for using uniform columns division through the document. Default value is false; it means that columns division will independent for each page.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.ExcelSaveOptions.setUniformWorksheets(boolean)">
       
        <p>Defines conversion engine that will be used for conversion</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.ExcelSaveOptions.getFormat">
      / * 
        <p>/ * Gets or sets factor that will be applied to (virtual) scaling font size during conversion to Excel table in / * legacy engine. Setting of less value facilitates the search for columns and prevents merging of them for some / * documents. Default value is 0.9; Setting value to zero allows algorithm choose scaling automatically. / *</p> / * / * @return double value /
      
    </member>
    <member name="M:com.aspose.pdf.ExcelSaveOptions.setFormat(int)">
       
        <p>Output format</p>  
        <p>Use the {@code ExcelSaveOptions.ExcelFormat.XMLSpreadSheet2003} or {@code ExcelSaveOptions.ExcelFormat.XLSX}</p> @param value ExcelFormat element
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.ExcelSaveOptions.#ctor">
       
        <p>Constructor</p> 
      
    </member>
    <member name="T:com.aspose.pdf.ExcelSaveOptions.ExcelFormat">
       
        <p>Defines conversion engine that will be used for conversion</p> @return ConversionEngines element @see ConversionEngines
      
    </member>
    <member name="F:com.aspose.pdf.ExcelSaveOptions.ExcelFormat.XMLSpreadSheet2003">
       
        <p>Excel 2003 XML Format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ExcelSaveOptions.ExcelFormat.XLSX">
       
        <p>Office Open XML (.xlsx) File Format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ExcelSaveOptions.ExcelFormat.CSV">
       
        <p>A comma-separated values (CSV) File Format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ExcelSaveOptions.ExcelFormat.XLSM">
       
        <p>A macro-enabled Office Open XML (.xlsm) File Format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ExcelSaveOptions.ExcelFormat.ODS">
       
        <p>OpenDocument Spreadsheet</p> 
      
    </member>
    <member name="T:com.aspose.pdf.exceptions.CorruptContentException">
      Represents CorruptContentException class
    </member>
    <member name="M:com.aspose.pdf.exceptions.CorruptContentException.#ctor">
       
        <p>Initializes a new instance of the {@code CorruptContentException} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.exceptions.CorruptContentException.#ctor(String)">
       
        <p>Initializes a new instance of the {@code CorruptContentException} class.</p> @param message The message.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.exceptions.CrossTableNotFoundException">
      Represents CrossTableNotFoundException class
    </member>
    <member name="M:com.aspose.pdf.exceptions.CrossTableNotFoundException.#ctor(String)">
       
        <p>Initializes a new instance of the {@code CrossTableNotFoundException} class.</p> @param message The message.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.exceptions.EmptyValueException">
       
        <p>Exception which thrown when requirested value does not exists.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.exceptions.EmptyValueException.#ctor">
       
        <p>Initializes a new instance of the {@code EmptyValueException} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.exceptions.EmptyValueException.#ctor(String)">
       
        <p>Constructor.</p> @param message Exception message.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.exceptions.FontEmbeddingException">
       
        <p>The exception that is thrown when an attempt to embed font became failed</p> 
      
    </member>
    <member name="M:com.aspose.pdf.exceptions.FontEmbeddingException.#ctor(String)">
       
        <p>Initializes a new instance of the {@code FontEmbeddingException} class.</p> @param message The message.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.exceptions.FontEmbeddingException.#ctor(String,Exception)">
       
        <p>Initializes a new instance of the {@code FontEmbeddingException} class with a specified error message and a reference to the inner exception that is the cause of this exception.</p> @param message The error message that explains the reason for the exception. @param innerException The exception that is the cause of the current exception, or a null reference
      
      <param name="String"/>
      <param name="Exception"/>
    </member>
    <member name="M:com.aspose.pdf.exceptions.FontEmbeddingException.#ctor(Exception)">
       
        <p>Initializes a new instance of the {@code FontEmbeddingException} class with a specified error message and a reference to the inner exception that is the cause of this exception.</p> @param innerException The exception that is the cause of the current exception, or a null reference
      
      <param name="Exception"/>
    </member>
    <member name="T:com.aspose.pdf.exceptions.FontNotFoundException">
       
        <p>The exception that is thrown when a font is not found.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.exceptions.FontNotFoundException.#ctor(String)">
       
        <p>Initializes a new instance of the {@code FontNotFoundException} class.</p> @param message The message.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.exceptions.IncorrectCMapUsageException">
       
        <p>The exception that is thrown when font usage is incorrect.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.exceptions.IncorrectCMapUsageException.#ctor(String)">
       
        <p>Initializes a new instance of the {@code IncorrectCMapUsageException} class.</p> @param message The message.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.exceptions.IncorrectFontUsageException">
       
        <p>The exception that is thrown when font usage is incorrect.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.exceptions.IncorrectFontUsageException.#ctor(String)">
       
        <p>Initializes a new instance of the {@code IncorrectFontUsageException} class.</p> @param message The message.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.exceptions.IncorrectFontUsageException.#ctor(String,Exception)">
       
        <p>Initializes a new instance of the {@code IncorrectFontUsageException} class with a specified error message and a reference to the inner exception that is the cause of this exception.</p> @param message The error message that explains the reason for the exception. @param innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.
      
      <param name="String"/>
      <param name="Exception"/>
    </member>
    <member name="T:com.aspose.pdf.exceptions.IndexOutOfRangeException">
       
        <p>Represents Index Out Of Range errors that occur during PDF application execution.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.exceptions.IndexOutOfRangeException.#ctor(String)">
       
        <p>Initializes a new instance of the {@code PdfException} class.</p> @param message The message.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.exceptions.InvalidCgmFileFormatException">
       
        <p>The exception that is thrown when a Cgm file is invalid.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.exceptions.InvalidCgmFileFormatException.#ctor">
       
        <p>Initializes a new instance of the {@code InvalidCgmFileFormatException} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.exceptions.InvalidCgmFileFormatException.#ctor(String)">
       
        <p>Initializes a new instance of the {@code InvalidCgmFileFormatException} class.</p> @param message The message.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.exceptions.InvalidFileFormatException">
       
        <p>The exception that is thrown when a file is invalid.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.exceptions.InvalidFileFormatException.#ctor">
       
        <p>Initializes a new instance of the {@code InvalidFileFormatException} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.exceptions.InvalidFileFormatException.#ctor(String)">
       
        <p>Initializes a new instance of the {@code InvalidFileFormatException} class.</p> @param message The message.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.exceptions.InvalidFormTypeOperationException">
       
        <p>The exception that is thrown when an operation with form type is not valid.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.exceptions.InvalidFormTypeOperationException.#ctor(String)">
       
        <p>Initializes a new instance of the {@code InvalidFormTypeOperationException} class.</p> @param message The message.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.exceptions.InvalidPasswordException">
       
        <p>The exception that is thrown when invalid password is provided by user.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.exceptions.InvalidPasswordException.#ctor(String)">
       
        <p>Initializes a new instance of the {@code InvalidPasswordException} class.</p> @param message The message.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.exceptions.InvalidPdfFileFormatException">
       
        <p>The exception that is thrown when a pdf file is invalid.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.exceptions.InvalidPdfFileFormatException.#ctor(String)">
       
        <p>Initializes a new instance of the {@code InvalidPdfFileFormatException} class.</p> @param message The message.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.exceptions.InvalidValueFormatException">
       
        <p>Exception which thrown when requested value has incorrect format.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.exceptions.InvalidValueFormatException.#ctor">
       
        <p>Initializes a new instance of the {@code InvalidValueFormatException} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.exceptions.InvalidValueFormatException.#ctor(String)">
       
        <p>Constructor.</p> @param message Exception message.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.exceptions.NotImplementedException"/>
    <member name="M:com.aspose.pdf.exceptions.NotImplementedException.#ctor(String,Exception)">
       
        <p>Initializes a new instance of the {@code NotImplementedException} class with a specified error message and a reference to the inner exception that is the cause of this exception.</p> @param message The error message that explains the reason for the exception. @param innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.
      
      <param name="String"/>
      <param name="Exception"/>
    </member>
    <member name="M:com.aspose.pdf.exceptions.NotImplementedException.#ctor(String)">
       
        <p>Initializes a new instance of the {@code NotImplementedException} class with a specified error message and a reference to the inner exception that is the cause of this exception.</p> @param message The error message that explains the reason for the exception.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.exceptions.NotImplementedException.#ctor(Exception)">
       
        <p>Initializes a new instance of the {@code NotImplementedException} class with a specified error message and a reference to the inner exception that is the cause of this exception.</p> @param innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.
      
      <param name="Exception"/>
    </member>
    <member name="T:com.aspose.pdf.exceptions.PdfArgumentException">
       
        <p>Represents errors that occur when incorrect parameters appeared.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.exceptions.PdfArgumentException.#ctor">
       
        <p>Initializes a new instance of the {@code PdfArgumentException} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.exceptions.PdfArgumentException.#ctor(String)">
       
        <p>Initializes a new instance of the {@code PdfArgumentException} class.</p> @param message The message.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.exceptions.PdfArgumentException.#ctor(String,Throwable)">
       
        <p>Initializes a new instance of the {@code PdfArgumentException} class with a specified error message and a reference to the inner exception that is the cause of this exception.</p> @param message The error message that explains the reason for the exception. @param innerException The exception that is the cause of the current exception, or a null reference
      
      <param name="String"/>
      <param name="Throwable"/>
    </member>
    <member name="M:com.aspose.pdf.exceptions.PdfArgumentException.#ctor(String,String)">
       
        <p>Initializes a new instance of the {@code PdfArgumentException} class with a specified error message and a reference to the inner exception that is the cause of this exception.</p> @param message The error message that explains the reason for the exception. @param paramName The incorrect paramName.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.exceptions.PdfException">
       
        <p>Represents errors that occur during PDF application execution.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.exceptions.PdfException.#ctor">
       
        <p>Initializes a new instance of the {@code PdfException} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.exceptions.PdfException.#ctor(String)">
       
        <p>Initializes a new instance of the {@code PdfException} class.</p> @param message The message.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.exceptions.PdfException.#ctor(String,java.lang.Throwable)">
       
        <p>Initializes a new instance of the {@code PdfException} class with a specified error message and a reference to the inner exception that is the cause of this exception.</p> @param message The error message that explains the reason for the exception. @param innerException The exception that is the cause of the current exception, or a null reference
      
      <param name="String"/>
      <param name="java.lang.Throwable"/>
    </member>
    <member name="T:com.aspose.pdf.exceptions.PdfOutOfMemoryException"/>
    <member name="M:com.aspose.pdf.exceptions.PdfOutOfMemoryException.#ctor(String)">
       
        <p>Initializes a new instance of the {@code OutOfMemoryException} class.</p> @param message The message.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.exceptions.PdfOutOfMemoryException.#ctor(String,java.lang.Throwable)">
       
        <p>Initializes a new instance of the {@code PdfException} class with a specified error message and a reference to the inner exception that is the cause of this exception.</p> @param message The error message that explains the reason for the exception. @param innerException The exception that is the cause of the current exception, or a null reference
      
      <param name="String"/>
      <param name="java.lang.Throwable"/>
    </member>
    <member name="T:com.aspose.pdf.exceptions.SanitizationException">
       
        <p>The exception that is thrown when an sanitization operation failed.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.exceptions.SanitizationException.#ctor">
       
        <p>Initializes a new instance of the {@link SanitizationException} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.exceptions.SanitizationException.#ctor(String)">
       
        <p>Initializes a new instance of the {@link SanitizationException} class.</p> @param message The message.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.exceptions.SanitizationException.#ctor(String,java.lang.RuntimeException)">
       
        <p>Initializes a new instance of the {@link SanitizationException} class with a specified error message and a reference to the inner exception that is the cause of this exception.</p> @param message The error message that explains the reason for the exception. @param innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.
      
      <param name="String"/>
      <param name="java.lang.RuntimeException"/>
    </member>
    <member name="M:com.aspose.pdf.exceptions.SanitizationException.#ctor(java.lang.RuntimeException)">
       
        <p>Initializes a new instance of the {@link SanitizationException} class with a specified error message and a reference to the inner exception that is the cause of this exception.</p> @param innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.
      
      <param name="java.lang.RuntimeException"/>
    </member>
    <member name="T:com.aspose.pdf.exceptions.TaggedException"/>
    <member name="M:com.aspose.pdf.exceptions.TaggedException.#ctor(String)">
       
        <p>Initializes a new instance of the {@code OutOfMemoryException} class.</p> @param message The message.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.exceptions.TaggedException.#ctor(TaggedPdfExceptionCode,String)">
       
        <p>Initializes a new instance of the {@link TaggedException} class.</p> @param taggedExeptionCode The TaggedException Code @param list The params list
      
      <param name="TaggedPdfExceptionCode"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.exceptions.TaggedException.#ctor(String,java.lang.Throwable)">
       
        <p>Initializes a new instance of the {@code PdfException} class with a specified error message and a reference to the inner exception that is the cause of this exception.</p> @param message The error message that explains the reason for the exception. @param innerException The exception that is the cause of the current exception, or a null reference
      
      <param name="String"/>
      <param name="java.lang.Throwable"/>
    </member>
    <member name="T:com.aspose.pdf.exceptions.TaggedPdfExceptionCode"/>
    <member name="M:com.aspose.pdf.exceptions.TaggedPdfExceptionCode.toString"/>
    <member name="M:com.aspose.pdf.exceptions.TaggedPdfExceptionCode.getMessage(String)">
      <param name="String"/>
    </member>
    <member name="F:com.aspose.pdf.exceptions.TaggedPdfExceptionCode.Element_AppendingImpossible"/>
    <member name="F:com.aspose.pdf.exceptions.TaggedPdfExceptionCode.Element_ElementAlreadyAppended"/>
    <member name="F:com.aspose.pdf.exceptions.TaggedPdfExceptionCode.RoleMap_StandardStructureTypeCanNotBeRemapped"/>
    <member name="F:com.aspose.pdf.exceptions.TaggedPdfExceptionCode.RoleMap_NonStandardStructureTypeAlreadyMapped"/>
    <member name="F:com.aspose.pdf.exceptions.TaggedPdfExceptionCode.StructureAttribute_AttributeCollectionIsAbsent"/>
    <member name="F:com.aspose.pdf.exceptions.TaggedPdfExceptionCode.StructureAttribute_AttributeOwnerMustBe"/>
    <member name="F:com.aspose.pdf.exceptions.TaggedPdfExceptionCode.StructureAttribute_DoesntAllowValue"/>
    <member name="F:com.aspose.pdf.exceptions.TaggedPdfExceptionCode.StructureAttribute_ArrayMustContainXElements"/>
    <member name="F:com.aspose.pdf.exceptions.TaggedPdfExceptionCode.StructureAttribute_ValueWasNotInitialized"/>
    <member name="F:com.aspose.pdf.exceptions.TaggedPdfExceptionCode.StructureElement_StructureElementIdCanNotBeNullOrEmpty"/>
    <member name="F:com.aspose.pdf.exceptions.TaggedPdfExceptionCode.StructureElement_StructureElementWithIdAlreadyExists"/>
    <member name="T:com.aspose.pdf.exceptions.UnsupportedFontTypeException">
       
        <p>The exception that is thrown when a font type is not supported.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.exceptions.UnsupportedFontTypeException.#ctor(String)">
       
        <p>Initializes a new instance of the {@code UnsupportedFontTypeException} class.</p> @param message The message.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.ExplicitDestination">
       
        <p>Represents the base class for explicit destinations in PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ExplicitDestination.getPage">
       
        <p>Gets the destination page object</p> @return Page object
      
    </member>
    <member name="M:com.aspose.pdf.ExplicitDestination.getPageNumber">
       
        <p>Gets the destination page number</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.ExplicitDestination.createDestination(IPdfArray)">
       
        <p>Creates instance of ExplicitDestination descendant classes.</p> @return DOM explicit destination object. @param engineDest Engine destination object.
      
      <param name="IPdfArray"/>
    </member>
    <member name="M:com.aspose.pdf.ExplicitDestination.createDestination(Page,int,double)">
       
        <p>Creates instances of ExplicitDestination descendant classes.</p> @return The explicit destination object. @param page The object of destination page. @param type The type of explicit destination. @param values Array of double values. @see ExplicitDestinationType
      
      <param name="Page"/>
      <param name="int"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.ExplicitDestination.createDestination(IDocument,int,int,double)">
       
        <p>Creates instances of ExplicitDestination descendant classes.</p> @return The explicit destination object. @param doc Document where destination will be created. @param pageNumber Number of the page. @param type Destionatyion type. @param values Array of destination specific values. @see ExplicitDestinationType
      
      <param name="IDocument"/>
      <param name="int"/>
      <param name="int"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.ExplicitDestination.createDestination(int,int,double)">
       
        <p>Creates instances of ExplicitDestination descendant classes.</p> @return The explicit destination object. @param pageNumber The destination page number. @param type The type of explicit destination. @param values Array of double values. @see ExplicitDestinationType
      
      <param name="int"/>
      <param name="int"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.ExplicitDestination.toString">
       
        <p>Returns string representation of ExplicitDestination object.</p> @return String representation
      
    </member>
    <member name="T:com.aspose.pdf.ExplicitDestinationType">
       
        <p>Enumerates the types of explicit destinations.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ExplicitDestinationType.XYZ">
       
        <p>Display the page with the coordinates (left, top) positioned at the upper-left corner of the window and the contents of the page magnified by the factor zoom. A null value for any of the parameters left, top, or zoom specifies that the current value of that parameter is to be retained unchanged. A zoom value of 0 has the same meaning as a null value.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ExplicitDestinationType.Fit">
       
        <p>Display the page with its contents magnified just enough to fit the entire page within the window both horizontally and vertically. If the required horizontal and vertical magnification factors are different, use the smaller of the two, centering the page within the window in the other dimension.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ExplicitDestinationType.FitH">
       
        <p>Display the page with the vertical coordinate top positioned at the top edge of the window and the contents of the page magnified just enough to fit the entire width of the page within the window. A null value for top specifies that the current value of that parameter is to be retained unchanged.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ExplicitDestinationType.FitV">
       
        <p>Display the page with the horizontal coordinate left positioned at the left edge of the window and the contents of the page magnified just enough to fit the entire height of the page within the window. A null value for left specifies that the current value of that parameter is to be retained unchanged.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ExplicitDestinationType.FitR">
       
        <p>Display the page with its contents magnified just enough to fit the rectangle specified by the coordinates left, bottom, right, and topentirely within the window both horizontally and vertically. If the required horizontal and vertical magnification factors are different, use the smaller of the two, centering the rectangle within the window in the other dimension. A null value for any of the parameters may result in unpredictable behavior.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ExplicitDestinationType.FitB">
       
        <p>Display the page with its contents magnified just enough to fit its bounding box entirely within the window both horizontally and vertically. If the required horizontal and vertical magnification factors are different, use the smaller of the two, centering the bounding box within the window in the other dimension.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ExplicitDestinationType.FitBH">
       
        <p>Display the page with the vertical coordinate top positioned at the top edge of the window and the contents of the page magnified just enough to fit the entire width of its bounding box within the window. A null value for top specifies that the current value of that parameter is to be retained unchanged.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ExplicitDestinationType.FitBV">
       
        <p>Display the page with the horizontal coordinate left positioned at the left edge of the window and the contents of the page magnified just enough to fit the entire height of its bounding box within the window. A null value for left specifies that the current value of that parameter is to be retained unchanged.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.ExplicitDestinationTypeConverter">
      Represents ExplicitDestinationTypeConverter class
    </member>
    <member name="M:com.aspose.pdf.ExplicitDestinationTypeConverter.toString(int)">
      String name for ExplicitDestinationType element @param value ExplicitDestinationType element @return String name @see ExplicitDestinationType
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.ExplicitDestinationTypeConverter.toEnum(String)">
      String ExplicitDestinationType element for its string name @param value String name @return ExplicitDestinationType element @see ExplicitDestinationType
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.ExtendedBoolean">
      Represents boolean type that supports Undefined value.
    </member>
    <member name="F:com.aspose.pdf.ExtendedBoolean.Undefined">
       
        <p>Undefined value value of ExtendnedBoolean.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ExtendedBoolean.False">
       
        <p>False value of ExtendnedBoolean.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ExtendedBoolean.True">
       
        <p>True value of ExtendnedBoolean.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.ExternalSignature">
       
        <p>Creates a detached PKCS#7Detached signature using a X509Certificate2. It supports usb smartcards, tokens without exportable private keys.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ExternalSignature.getCertificate">
       
        <p>The certificate with the private key.</p> @return X509Certificate2 instance with the private key
      
    </member>
    <member name="M:com.aspose.pdf.ExternalSignature.#ctor(X509Certificate2)">
       
        <p>Creates a detached PKCS#7Detached signature using a X509Certificate2. It supports usb smartcards, tokens without exportable private keys.</p> @param certificate The certificate with the private key
      
      <param name="X509Certificate2"/>
    </member>
    <member name="T:com.aspose.pdf.ExtractImageMode">
       
        <p>Defines different modes which can be used while extracting images from documents.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ExtractImageMode.DefinedInResources">
       
        <p>Defines image extraction mode in which all images defined in resources for particular page are extracted.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ExtractImageMode.ActuallyUsed">
       
        <p>Defines image extraction mode in which only those images are extracted that are actually shown on a page.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.Algorithm">
       
        <p>Represents algorithms which can be used to encrypt pdf document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.Algorithm.RC4">
       
        <p>RC4 algorithm.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.Algorithm.AES">
       
        <p>AES algorithm.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.AlignmentType">
       
        <p>Class contains possibly alignment types. 
          <br/> Use HorizontalAlignment instead
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.AlignmentType.toString">
       
        <p>Returns string representation.</p> @return Name value.
      
    </member>
    <member name="M:com.aspose.pdf.facades.AlignmentType.#ctor(String)">
       
        <p>Constructor of AlignmentType.</p> @param name Alignment type name.
      
      <param name="String"/>
    </member>
    <member name="F:com.aspose.pdf.facades.AlignmentType.Center">
       
        <p>Center alignment.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.AlignmentType.Left">
       
        <p>Left alignment.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.AlignmentType.Right">
       
        <p>Right alignment.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.AutoFiller">&lt;p&gt; Represents a class to receive data from database or other datasource, fills them into the designed fields of the template pdf and at last generates new pdf file or stream. It has two template file input modes:input as a stream or a pdf file. It has four types of output modes:one merged stream, one merged file, many small streams, many small files. It can recieve literal data contained in a System.Data.DataTable. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; //Note: mail.pdf is a template pdf which has seven text fields. NorthWind.mdb is the microsoft access db. ////Common part: Get the data from the database NorthWind.mdb fill it into the DataTable. &lt;/pre&gt; &lt;pre&gt; OleDbCommand mQueryCommand; OleDbDataAdapter mDbDataAdapter; OleDbConnection mDbConnection; //Construct the data table. DataTable mDataTable = new DataTable("MailMerge"); DataColumnCollection columns = mDataTable.Columns; columns.add("CompanyName",typeof(string)); columns.add("ContactName",typeof(string)); columns.add("Address",typeof(string)); columns.add("PostalCode",typeof(string)); columns.add("City",typeof(string)); columns.add("Country",typeof(string)); columns.add("Heading",typeof(string)); //Connect to the database source and query the data. mDbConnection = new OleDbConnection(); mDbConnection.setConnectionString ( "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + DbPath + "NorthWind.mdb"); mQueryCommand = new OleDbCommand(); mQueryCommand.setConnection ( mDbConnection); mDbConnection.open(); mQueryCommand.setCommandText ( "select CompanyName, ContactName, Address, PostalCode, City, Country from Customers;"); mDbDataAdapter = new OleDbDataAdapter(mQueryCommand); mDbDataAdapter.fill(mDataTable); for (int i = 0; i&amp;lt;mDataTable.getRows().size();i++) { mDataTable.getRows()[i][mDataTable.getColumns().size() - 1] = "Dear " + mDataTable.Rows[i][0].ToString() + ","; System.out.println("postalCode:" + mDataTable.getRows()[i][3].toString()); System.out.println("Heading:" + mDataTable.getRows()[i][mDataTable.getColumns().Size() - 1].toString()); } mDbDataAdapter.dispose(); mDbConnection.close(); &lt;/pre&gt; &lt;pre&gt; ////End of Common part. ////case one: ////Input template pdf is a pdf file and output is a big merged stream. &lt;/pre&gt; &lt;pre&gt; AutoFiller autoFiller = new AutoFiller(); autoFiller.setInputFileName ( "mail.pdf"); autoFiller.setOutputStream ( Response.getOutputStream()); autoFiller.importDataTable(mDataTable); autoFiller.save(); &lt;/pre&gt; &lt;pre&gt; ////case two: ////Input template pdf is a pdf file and output is a lot of small files. &lt;/pre&gt; &lt;pre&gt; AutoFiller autoFiller = new AutoFiller(); autoFiller.setInputFileName ( "mail.pdf"0; autoFiller.setGeneratingPath ( ".\\"); autoFiller.setBasicFileName ( "outputFile"); autoFiller.importDataTable(mDataTable); autoFiller.save(); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.setUnFlattenFields(String[])">
       
        <p>Sets the fields which will not be flattened. If this property is not set, all the fields will be flattened.</p> @param value array of String value
      
      <param name="String[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.getOutputStream">
       
        <p>Gets the OutputStream. One of four output modes. Its classical use case is Response.OutputStream. Please refer to the online demo.</p> This method is Deprecated. @return the output stream
      
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.setOutputStream(OutputStream)">
       
        <p>Sets the OutputStream. One of four output modes. Its classical use case is Response.OutputStream. Please refer to the online demo.</p> This method is Deprecated. @param value the output stream
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.getInputStream">
       
        <p>Gets the input template stream. One of two input modes.</p> @return InputStream element
      
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.setInputStream(InputStream)">
       
        <p>Sets the input template stream. One of two input modes.</p> @param value InputStream element
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.getInputFileName">
       
        <p>Gets the input template file. One of two input modes.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.setInputFileName(String)">
       
        <p>Sets the input template file. One of two input modes.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.getOutputFileName">
       
        <p>Gets the one big merged output file. One of the four output modes.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.setOutputFileName(String)">
       
        <p>Sets the one big merged output file. One of the four output modes.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.getGeneratingPath">
       
        <p>Gets the Generating Path of the small pdf files if many small pdf files to be generated. It works with another property {@code BasicFileName} BasicFileName. One of the four output modes.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.setGeneratingPath(String)">
       
        <p>Sets the Generating Path of the small pdf files if many small pdf files to be generated. It works with another property {@code BasicFileName} BasicFileName. One of the four output modes.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.getBasicFileName">
       
        <p>Gets the basic file name if many small files will be generated. The generated file will be like "BasicFileName0","BasicFileName1",... It works with another property {@code GeneratingPath}GeneratingPath.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.setBasicFileName(String)">
       
        <p>Sets the basic file name if many small files will be generated. The generated file will be like "BasicFileName0","BasicFileName1",... It works with another property {@code GeneratingPath}GeneratingPath.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.save">
       
        <p>Saves all the pdfs.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.save(String)">
      / * 
        <p>/ * Imports data of DataTable type. Every column's name of the dataTable must be the same as / * one field name of the template pdf in case sensitive. / *</p> / * @param dataTable The dataTable which contains all the data from database or other data source. /
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.save(OutputStream)">
       
        <p>Saves all the pdfs.</p> @param destStream Output stream.
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.bindPdf(String)">
       
        <p>Binds a Pdf file.</p> @param srcFile Pdf file name.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.bindPdf(InputStream)">
       
        <p>Binds a Pdf file.</p> @param srcStream Pdf file stream.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.bindPdf(IDocument)">
       
        <p>Binds a Pdf document.</p> @param srcDoc Pdf document.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.close">
       
        <p>Closes the object and output streams.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.dispose">
       
        <p>Closes the object and output streams.</p> This method is obsolete, use close() instead.
      
    </member>
    <member name="T:com.aspose.pdf.facades.AutoRotateMode">
       
        <p>Direction of the rotation when document is printed.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.AutoRotateMode.None">
       
        <p>No rotation.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.AutoRotateMode.ClockWise">
       
        <p>Rotation direction is clockwise.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.AutoRotateMode.AntiClockWise">
       
        <p>Rotation directon is counterclockwise.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.BlendingColorSpace">
       
        <p>Class represents blending color space.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.BlendingColorSpace.DontChange">
       
        <p>The blending color space is not changed.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.BlendingColorSpace.Auto">
       
        <p>The blending color space is determined automatically.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.BlendingColorSpace.DeviceRGB">
       
        <p>Blending color space is set to DeviceRGB.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.BlendingColorSpace.DeviceCMYK">
       
        <p>Blending color space is set to DeviceCMYK.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.Bookmark">
       
        <p>Represents a bookmark.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.toOutlineItemCollection(IDocument)">
      convert to OutlineItemCollection @param doc Document object @return OutlineItemCollection object
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getAction">
       
        <p>Gets the action bound with the bookmark. If PageNumber is presented the action can not be specified. The action type includes: "GoTo", "GoToR", "Launch", "Named".</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setAction(String)">
       
        <p>Sets the action bound with the bookmark. If PageNumber is presented the action can not be specified. The action type includes: "GoTo", "GoToR", "Launch", "Named".</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getBoldFlag">
       
        <p>Gets the bold flag of bookmark's title.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setBoldFlag(boolean)">
       
        <p>Sets the bold flag of bookmark's title.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getChildItem">
       
        <p>Gets bookmark's children.</p> Obsolete("Use getChildItems() property instead of this one.") @return Bookmarks element
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setChildItem(Bookmarks)">
       
        <p>Sets bookmark's children.</p> Obsolete("Use setChildItems() property instead of this one.") @param value Bookmarks element
      
      <param name="Bookmarks"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getChildItems">
       
        <p>Gets bookmark's children.</p> @return bookmark's children items.
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setChildItems(Bookmarks)">
       
        <p>Sets bookmark's children.</p> @param value bookmark's children items.
      
      <param name="Bookmarks"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getCustomAcorbatViewerMenuActionName">
      Not supported yet. 
        <p>The action name corresponding to execute a menu item in Acrobat viewer.</p> @return array of int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setCustomAcorbatViewerMenuActionName(int[])">
      Not supported yet. 
        <p>Sets the action name corresponding to execute a menu item in Acrobat viewer.</p> @param value array of int value
      
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getDestination">
       
        <p>Gets bookmark's destination page. Required if action is set as "".</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setDestination(String)">
       
        <p>Sets bookmark's destination page. Required if action is set as "".</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getItalicFlag">
       
        <p>Gets the italic flag of bookmark's title.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setItalicFlag(boolean)">
       
        <p>Sets the italic flag of bookmark's title.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getLevel">
       
        <p>Gets bookmark's hierarchy level.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setLevel(int)">
       
        <p>Sets bookmark's hierarchy level.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getPageDisplay">
       
        <p>Gets the type of display bookmark's destination page.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setPageDisplay(String)">
       
        <p>Sets the type of display bookmark's destination page.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getPageDisplay_Bottom">
       
        <p>Gets the bottom coordinate of page display.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setPageDisplay_Bottom(int)">
       
        <p>Sets the bottom coordinate of page display.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getPageDisplay_Left">
       
        <p>Gets the left coordinate of page display.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setPageDisplay_Left(int)">
       
        <p>Sets the left coordinate of page display.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getPageDisplay_Right">
       
        <p>Gets the right coordinate of page display.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setPageDisplay_Right(int)">
       
        <p>Sets the right coordinate of page display.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getPageDisplay_Top">
       
        <p>Gets the top coordinate of page display.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setPageDisplay_Top(int)">
       
        <p>Sets the top coordinate of page display.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getPageDisplay_Zoom">
       
        <p>Gets the zoom factor of page display.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setPageDisplay_Zoom(int)">
       
        <p>Sets the zoom factor of page display.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getPageNumber">
       
        <p>Gets the number of bookmark's destination page.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setPageNumber(int)">
       
        <p>Sets the number of bookmark's destination page.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getRemoteFile">
       
        <p>Gets the file (path) which is required for "GoToR" action of bookmark.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setRemoteFile(String)">
       
        <p>Sets the file (path) which is required for "GoToR" action of bookmark.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getTitle">
       
        <p>Gets bookmark's title.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setTitle(String)">
       
        <p>Sets bookmark's title.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getTitleColor">
       
        <p>Gets the color of bookmark's title.</p> @return Color element
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setTitleColor(java.awt.Color)">
       
        <p>Sets the color of bookmark's title.</p> @param value Color element
      
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.isOpen">
       
        <p>Gets bookmark state (open, close).</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setOpen(boolean)">
       
        <p>Sets bookmark state (open, close).</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.#ctor">
       
        <p>Initializes a new instance of the {@code Bookmark} class.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.Bookmarks">
       
        <p>Represents a collection of {@code Bookmark} objects.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.CgmPdfProducer">
       
        <p>Represents a class to produce PDF from Computer Graphics Metafile(CGM) format.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.CgmPdfProducer.#ctor(ImportOptions)">
      Constructor @param options ImportOptions object
      <param name="ImportOptions"/>
    </member>
    <member name="T:com.aspose.pdf.facades.DataType">
       
        <p>Enumerates field types definitions.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.DataType.FDF">
       
        <p>FDF stream.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.DataType.XML">
       
        <p>XML stream.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.DataType.XFDF">
       
        <p>XFDF stream.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.DataType.PDF">
       
        <p>PDF stream.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.DataType.OLEDB">
       
        <p>OLEDB database, such as MS Access.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.DataType.ODBC">
       
        <p>ODBC database, such as MS SQL Server.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.DefaultMetadataProperties">
       
        <p>Enumeration of standard XMP properties.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.DefaultMetadataProperties.Advisory">
       
        <p>xmp:Advisory property. An unordered array specifying properties that were edited outside the authoring application. Each item should contain a single /// namespace and XPath separated by one ASCII space</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.DefaultMetadataProperties.BaseURL">
       
        <p>xmp:BaseURL property. The base URL for relative URLs in the document content. If this document contains Internet links, and those links are relative, /// they are relative to this base URL. This property provides a standard way for embedded relative URLs to be interpreted by tools. /// Web authoring tools should set the value based on their notion of where URLs will be interpreted</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.DefaultMetadataProperties.CreateDate">
       
        <p>xmp:CreateDate property. The date and time the resource was originally created.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.DefaultMetadataProperties.CreatorTool">
       
        <p>xmp:CreatorTool property. The name of the first known tool used to create the resource.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.DefaultMetadataProperties.Identifier">
       
        <p>xmp:Identifier property. An unordered array of text strings that unambiguously identify the resource within a given context</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.DefaultMetadataProperties.MetadataDate">
       
        <p>xmp:MetadataDate property. The date and time that any metadata for this resource was last changed</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.DefaultMetadataProperties.ModifyDate">
       
        <p>xmp:ModifyDate property. The date and time the resource was last modified.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.DefaultMetadataProperties.Nickname">
       
        <p>xmp:Nickname property. A short informal name for the resource.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.DefaultMetadataProperties.Thumbnails">
       
        <p>xmp:Thumbnails property. An alternative array of thumbnail images for a file, which can differ in characteristics such as size or image encoding.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.DocumentPrivilege">&lt;p&gt; Represents the privileges for accessing Pdf file. Refer to{@code PdfFileSecurity}. There are 4 ways using this class: 1.Using predefined privilege directly. 2.Based on a predefined privilege and change some specifical permissions. 3.Based on a predefined privilege and change some specifical Adobe Professional permissions combination. 4.Mixes the way2 and way3. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; //Way1: Using predefined privilege directly. DocumentPrivilege privilege = DocumentPrivilege.getPrint(); //Way2: Based on a predefined privilege and change some specifical permissions. DocumentPrivilege privilege = DocumentPrivilege.getAllowAll(); privilege.setAllowPrint(false); privilege.setAllowModifyContents(false); //Way3: Based on a predefined privilege and change some specifical Adobe Professional permissions combination. DocumentPrivilege privilege = DocumentPrivilege.getForbidAll(); privilege.setChangeAllowLevel(1); privilege.setPrintAllowLevel(2); //Way4: Mixes the way2 and way3 DocumentPrivilege privilege = DocumentPrivilege.getForbidAll(); privilege.setChangeAllowLevel(1); privilege.setAllowPrint(true); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.getValue">
       
        <p>Gets value</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.isAllowPrint">
       
        <p>Sets the permission which allow print or not. true is allow and false is forbidden.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.setAllowPrint(boolean)">
       
        <p>Sets the permission which allow print or not. true is allow and false is forbidden.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.isAllowDegradedPrinting">
       
        <p>Sets the permission which allow degraded printing or not. true is allow and false is forbidden.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.setAllowDegradedPrinting(boolean)">
       
        <p>Sets the permission which allow degraded printing or not. true is allow and false is forbidden.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.isAllowModifyContents">
       
        <p>Sets the permission which allow modify contents or not. true is allow and false is forbidden.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.setAllowModifyContents(boolean)">
       
        <p>Sets the permission which allow modify contents or not. true is allow and false is forbidden.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.isAllowCopy">
       
        <p>Sets the permission which allow copy or not. true is allow and false is forbidden.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.setAllowCopy(boolean)">
       
        <p>Sets the permission which allow copy or not. true is allow and false is forbidden.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.isAllowModifyAnnotations">
       
        <p>Sets the permission which allow modify annotations or not. true is allow and false is forbidden.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.setAllowModifyAnnotations(boolean)">
       
        <p>Sets the permission which allow modify annotations or not. true is allow and false is forbidden.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.isAllowFillIn">
       
        <p>Sets the permission which allow fill in forms or not. true is allow and false is forbidden.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.setAllowFillIn(boolean)">
       
        <p>Sets the permission which allow fill in forms or not. true is allow and false is forbidden.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.isAllowScreenReaders">
       
        <p>Sets the permission which allow screen readers or not. true is allow and false is forbidden.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.setAllowScreenReaders(boolean)">
       
        <p>Sets the permission which allow screen readers or not. true is allow and false is forbidden.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.isAllowAssembly">
       
        <p>Sets the permission which allow assembly or not. true is allow and false is forbidden.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.setAllowAssembly(boolean)">
       
        <p>Sets the permission which allow assembly or not. true is allow and false is forbidden.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.setPrintAllowLevel(int)">
       
        <p>Sets the print level of document's privilege. Just as the Adobe Professional's Printing Allowed settings. 0: None. 1: Low Resolution (150 dpi). 2: High Resolution.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.setChangeAllowLevel(int)">
       
        <p>Sets the change level of document's privilege. Just as the Adobe Professional's Changes Allowed settings. 0: None. 1: Inserting, Deleting and Rotating pages. 2: Filling in form fields and signing existing signature fields. 3: Commenting, filling in form fields, and signing existing signature fields. 4: Any except extracting pages.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.setCopyAllowLevel(int)">
       
        <p>Sets the copy level of document's privilege. Just as the Adobe Professional's permission settings. 0: None. 1: Enable text access for screen reader devices for the visually impaired. 2: Enable copying of text, images and other content.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.compareTo(Object)">
       
        <p>Compares two {@code DocumentPrivilege} objects.</p> @return A signed integer that indicates the relative values of this instance and value. Less than zero this instance is less than value. Zero this instance is equal to value. Greater than zero this instance is greater than value. @param obj The object to compare with.
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.hashCode">Returns a hash code value for the object. This method is supported for the benefit of hashtables such as those provided by &lt;code&gt;java.util.Hashtable&lt;/code&gt;. &lt;p&gt; The general contract of &lt;code&gt;hashCode&lt;/code&gt; is: &lt;ul&gt; &lt;li&gt;Whenever it is invoked on the same object more than once during an execution of a Java application, the &lt;tt&gt;hashCode&lt;/tt&gt; method must consistently return the same integer, provided no information used in &lt;tt&gt;equals&lt;/tt&gt; comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. &lt;li&gt;If two objects are equal according to the &lt;tt&gt;equals(Object)&lt;/tt&gt; method, then calling the &lt;code&gt;hashCode&lt;/code&gt; method on each of the two objects must produce the same integer result. &lt;li&gt;It is &lt;em&gt;not&lt;/em&gt; required that if two objects are unequal according to the {@link java.lang.Object#equals(java.lang.Object)} method, then calling the &lt;tt&gt;hashCode&lt;/tt&gt; method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hashtables. &lt;/ul&gt; &lt;p&gt; As much as is reasonably practical, the hashCode method defined by class &lt;tt&gt;Object&lt;/tt&gt; does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java&lt;span style="font-size:70%"&gt;&lt;sup&gt;TM&lt;/sup&gt;&lt;/span&gt; programming language.) @return a hash code value for this object. @see java.lang.Object#equals(java.lang.Object) @see java.util.Hashtable</member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.equals(Object)">Indicates whether some other object is "equal to" this one. &lt;p&gt; The &lt;code&gt;equals&lt;/code&gt; method implements an equivalence relation on non-null object references: &lt;ul&gt; &lt;li&gt;It is &lt;i&gt;reflexive&lt;/i&gt;: for any non-null reference value &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;x.equals(x)&lt;/code&gt; should return &lt;code&gt;true&lt;/code&gt;. &lt;li&gt;It is &lt;i&gt;symmetric&lt;/i&gt;: for any non-null reference values &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;x.equals(y)&lt;/code&gt; should return &lt;code&gt;true&lt;/code&gt; if and only if &lt;code&gt;y.equals(x)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;. &lt;li&gt;It is &lt;i&gt;transitive&lt;/i&gt;: for any non-null reference values &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and &lt;code&gt;z&lt;/code&gt;, if &lt;code&gt;x.equals(y)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;y.equals(z)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, then &lt;code&gt;x.equals(z)&lt;/code&gt; should return &lt;code&gt;true&lt;/code&gt;. &lt;li&gt;It is &lt;i&gt;consistent&lt;/i&gt;: for any non-null reference values &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, multiple invocations of &lt;tt&gt;x.equals(y)&lt;/tt&gt; consistently return &lt;code&gt;true&lt;/code&gt; or consistently return &lt;code&gt;false&lt;/code&gt;, provided no information used in &lt;code&gt;equals&lt;/code&gt; comparisons on the objects is modified. &lt;li&gt;For any non-null reference value &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;x.equals(null)&lt;/code&gt; should return &lt;code&gt;false&lt;/code&gt;. &lt;/ul&gt; &lt;p&gt; The &lt;tt&gt;equals&lt;/tt&gt; method for class &lt;code&gt;Object&lt;/code&gt; implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, this method returns &lt;code&gt;true&lt;/code&gt; if and only if &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; refer to the same object (&lt;code&gt;x == y&lt;/code&gt; has the value &lt;code&gt;true&lt;/code&gt;). &lt;p&gt; Note that it is generally necessary to override the &lt;tt&gt;hashCode&lt;/tt&gt; method whenever this method is overridden, so as to maintain the general contract for the &lt;tt&gt;hashCode&lt;/tt&gt; method, which states that equal objects must have equal hash codes. @param obj the reference object with which to compare. @return &lt;code&gt;true&lt;/code&gt; if this object is the same as the obj argument; &lt;code&gt;false&lt;/code&gt; otherwise. @see #hashCode() @see java.util.Hashtable 
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.getDegradedPrinting">
       
        <p>Allows degraded printing.</p> @return DocumentPrivilege element
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.getPrint">
       
        <p>Allows printing file.</p> @return DocumentPrivilege element
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.getModifyContents">
       
        <p>Allows modifying file.</p> @return DocumentPrivilege element
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.getCopy">
       
        <p>Allows copying file.</p> @return DocumentPrivilege element
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.getModifyAnnotations">
       
        <p>Allows modifying annotations of file.</p> @return DocumentPrivilege element
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.getFillIn">
       
        <p>Allows filling forms in file.</p> @return DocumentPrivilege element
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.getScreenReaders">
       
        <p>Allows to reader on screen only.</p> @return DocumentPrivilege element
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.getAssembly">
       
        <p>Allows assemblying file.</p> @return DocumentPrivilege element
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.getAllowAll">
       
        <p>All allowed.</p> @return DocumentPrivilege element
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.getForbidAll">
       
        <p>All Forbidded.</p> @return DocumentPrivilege element
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.#ctor(int)">
      Constructor @param value document's Permissions
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.facades.EncodingType">
       
        <p>Enumerates encoding types of the text using.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.EncodingType.Identity_h">
       
        <p>The Unicode encoding with horizontal writing.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.EncodingType.Identity_v">
       
        <p>The Unicode encoding with vertical writing.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.EncodingType.Cp1250">
       
        <p>A windows text encoding name.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.EncodingType.Cp1252">
       
        <p>A windows text encoding name.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.EncodingType.Cp1257">
       
        <p>A windows text encoding name.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.EncodingType.Winansi">
       
        <p>Windows ansi encoding.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.EncodingType.Macroman">
       
        <p>Mac os standard encoding for Latin text.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.Facade">
       
        <p>Base facade class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Facade.getDocument">
       
        <p>Gets the document facade is working on.</p> @return IDocument element
      
    </member>
    <member name="M:com.aspose.pdf.facades.Facade.bindPdf(String)">
      / * 
        <p>/ * Initializes the facade. / *</p> / * / * @param pdf / * element /
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Facade.bindPdf(InputStream)">
       
        <p>Initializes the facade.</p> @param srcStream The stream of PDF file.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Facade.bindPdf(IDocument)">
       
        <p>Initializes the facade.</p> @param srcDoc The Document object.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Facade.bindPdf(String,String)">
      Initializes the facade. @param srcFile The PDF file @param password The password of the PDF document.
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Facade.bindPdf(InputStream,String)">
      Initializes the facade. @param srcStream The stream of PDF file. @param password The password of the PDF document.
      <param name="InputStream"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Facade.close">
       
        <p>Disposes Document bound with a facade.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Facade.dispose">
       
        <p>Disposes the facade.</p> This method is obsolete, use close() instead.
      
    </member>
    <member name="T:com.aspose.pdf.facades.FieldType">
       
        <p>Enumeration of possible field types.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FieldType.Text">
       
        <p>Text field.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FieldType.ComboBox">
       
        <p>Combo box field.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FieldType.ListBox">
       
        <p>List box field.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FieldType.Radio">
       
        <p>Radio button field.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FieldType.CheckBox">
       
        <p>Check box field.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FieldType.PushButton">
       
        <p>Push button field.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FieldType.MultiLineText">
       
        <p>Multiline text field.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FieldType.Barcode">
       
        <p>Barcode field.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FieldType.InvalidNameOrType">
       
        <p>Invalid field type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FieldType.Signature">
       
        <p>Signature field.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FieldType.Image">
       
        <p>Image field.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FieldType.Numeric">
       
        <p>Numeric field</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FieldType.DateTime">
       
        <p>Date/time field</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.FontColor">
       
        <p>Class representing color of the text.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FontColor.getGreen">
       
        <p>Gets green component of color.</p> @return green component of color.
      
    </member>
    <member name="M:com.aspose.pdf.facades.FontColor.setGreen(int)">
       
        <p>Sets green component of color.</p> @param value green component of color.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FontColor.getRed">
       
        <p>Gets red component of color.</p> @return red component of color.
      
    </member>
    <member name="M:com.aspose.pdf.facades.FontColor.setRed(int)">
       
        <p>Sets red component of color.</p> @param value red component of color.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FontColor.getBlue">
       
        <p>Gets blue component of color.</p> @return blue component of color.
      
    </member>
    <member name="M:com.aspose.pdf.facades.FontColor.setBlue(int)">
       
        <p>Sets blue component of color.</p> @param value blue component of color.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FontColor.#ctor(int,int,int)">
       
        <p>Initializes color with specified color components.</p> @param r Red component. @param g Green component. @param b Blue component.
      
      <param name="int"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FontColor.#ctor">
       
        <p>Initializes color.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.FontStyle">
       
        <p>Enumerates 14 types of font.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FontStyle.Courier">
       
        <p>Courier font.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FontStyle.CourierBold">
       
        <p>Bold Courier font.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FontStyle.CourierOblique">
       
        <p>Oblique Curier font.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FontStyle.CourierBoldOblique">
       
        <p>Bold oblique Courier font.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FontStyle.Helvetica">
       
        <p>Helvetica font.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FontStyle.HelveticaBold">
       
        <p>Bold Helvetica font.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FontStyle.HelveticaOblique">
       
        <p>Oblique Helvetica font.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FontStyle.HelveticaBoldOblique">
       
        <p>Bold oblique Helvetica font.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FontStyle.Symbol">
       
        <p>Symbol font.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FontStyle.TimesRoman">
       
        <p>Times-Roman font.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FontStyle.TimesBold">
       
        <p>Bold Times font.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FontStyle.TimesItalic">
       
        <p>Italic Times font.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FontStyle.TimesBoldItalic">
       
        <p>Bold italic Times font.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FontStyle.ZapfDingbats">
       
        <p>ZapfDingbats font.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FontStyle.Unknown">
       
        <p>Unknown font. Standard font will be used.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FontStyle.CjkFont">
       
        <p>True Type Font for CJK supporting ,default is MS PGothic font.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.Form">
       
        <p>Class representing Acro form object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Form.bindPdf(InputStream,String)">
       
        <p>Initializes the facade.</p> @param srcStream The stream of PDF file. @param password The password of the PDF document.
      
      <param name="InputStream"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.bindPdf(String,String)">
       
        <p>Initializes the facade.</p> @param srcFile The PDF file. @param password The password of the PDF document.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.close">
       
        <p>Closes opened files without any changes.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Form.dispose">
       
        <p>Closes all opened resources.</p> This method is obsolete, use close() instead.
      
    </member>
    <member name="M:com.aspose.pdf.facades.Form.exportFdf(OutputStream)">&lt;p&gt; Exports the content of the fields of the pdf into the fdf stream. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form("PdfForm.pdf"); OutputStream stream = new FileOutputStream("export.fdf"); form.exportFdf(stream); stream.close(); &lt;/pre&gt; @param outputFdfStream The output fdf stream. 
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.exportXfdf(OutputStream)">&lt;p&gt; Exports the content of the fields of the pdf into the xml stream. The button field's value will not be exported. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form("PdfForm.pdf"); FileInputStream fs = new FileInputStream("export.xfdf", FileMode.Create, FileAccess.Write); form.exportXfdf(fs); fs.close(); &lt;/pre&gt; @param outputXfdfStream The output xml stream. 
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.exportXml(OutputStream)">&lt;p&gt; Exports the content of the fields of the pdf into the xml stream. The button field's value will not be exported. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form("PdfForm.pdf")); OutputStream fs = new FileOutputStream("export.xml"); form.exportXml(fs); fs.close(); &lt;/pre&gt; @param outputXmlStream Output Xml stream. 
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.extractXfaData(OutputStream)">
       
        <p>Extracts XFA data packet</p> @param outputXmlStream Stream where XML data will be stored.
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.fillBarcodeField(String,String)">&lt;p&gt; Fill a barcode field according to its fully qualified field name. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form("PdfForm.pdf"); form.fillBarcodeField("textField", "42207252"); &lt;/pre&gt; @return If filling succeed, return true; otherwise, false. @param fieldName The fully qualified field name. @param data The new barcode value. 
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.fillField(String,boolean)">&lt;p&gt; Fills the check box field with a boolean value. Notice: Only be applied to Check Box. Please note that Facades supports only full field names and does not work with partial field names in contrast with Aspose.Pdf.Kit; For example if field has full name "Form.Subform.CheckBoxField" you should specify full name and not "CheckBoxField". You can use FieldNames property to explore existing field names and search required field by its partial name. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form("PdfForm.pdf"); form.fillField("checkboxField", true); //how to search field by its partial name: Form form = new Form("input.pdf", "output.pdf"); for(String fieldName : form.getFieldNames()) { if (fieldName.endsWith("CheckBoxField")) { System.out.println("Full name is: " + fieldName); } } &lt;/pre&gt; @return true if field was found and successfully filled. @param fieldName The field's name to be filled. @param beChecked A boolean flag: true means to check the box, while false to uncheck it. 
      <param name="String"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.fillField(String,int)">&lt;p&gt; Fills the radio box field with a valid index value according to a fully qualified field name. Before filling the fields, only field's name must be known. While the value can be specified by its index. Notice: Only be applied to Radio Box, Combo Box and List Box fields. Please note that Facades supports only full field names and does not work with partial field names in contrast with Aspose.Pdf.Kit; For example if field has full name "Form.Subform.ListBoxField" you should specify full name and not "ListBoxField". You can use FieldNames property to explore existing field names and search required field by its partial name. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; //1 Form form = new Form("PdfForm.pdf"); form.fillField("listboxField", 2); form.fillField("comboboxField", 2); form.fillField("radiobuttonField", 2); //2 //how to search field by its partial name: Form form = new Form("input.pdf", "output.pdf"); for(String fieldName : form.getFieldNames()) { if (fieldName.endsWith("ListBoxField")) { System.out.println("Full name is: " + fieldName); } } &lt;/pre&gt; @return true if field was found and successfully filled. @param fieldName Name of field to be filled. @param index Index of chosen item. 
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.fillField(String,String)">&lt;p&gt; Fills the field with a valid value according to a fully qualified field name. Before filling the fields, every field's names and its corresponding valid values must be known. Both the fields' name and values are case sensitive. Please note that Facades supports only full field names and does not work with partial field names in contrast with Aspose.Pdf.Kit; For example if field has full name "Form.Subform.TextField" you should specify full name and not "TextField". You can use FieldNames property to explore existing field names and search required field by its partial name. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form("PdfForm.pdf"); form.fillField("FirstName", "John"); form.fillField("LastName", "Smith"); //how to search field by its partial name: Form form = new Form("input.pdf", "output.pdf"); for(String fieldName : form.getFieldNames()) { if (fieldName.endsWith("TextField")) { System.out.println("Full name is: " + fieldName); } } &lt;/pre&gt; @return true if field is found and filled successfully. @param fieldName The field's name to be filled. @param fieldValue The field's value which must be a valid value for some fields. 
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.fillField(String,String,boolean)">
       
        <p>Fills field with specified value.</p> @return true if field was found and successfully filled. @param fieldName Name of field @param value New value of the field @param fitFontSize If true, the font size in the edit boxes will be fitted.
      
      <param name="String"/>
      <param name="String"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.fillField(String,String[])">&lt;p&gt; Fill a field with multiple selections.Note: only for AcroForm List Box Field. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new com.aspose.pdf.Form("PdfForm.pdf", "Form_Updated.pdf"); form.fillField("ListBox1", new String[] { "Three", "One" }); form.save(); &lt;/pre&gt; @param fieldName The fully qualified field name. @param fieldValues A String array which contains several items to be selected. 
      <param name="String"/>
      <param name="String[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.fillImageField(String,InputStream)">&lt;p&gt; Overloads function of FillImageField. The input is a image stream. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form("PdfForm.pdf", "PdfForm_filled.pdf"); form.fillImageField("fieldName", new FileInputStream("file.jpg", FileMode.Open, FileAccess.Read)); &lt;/pre&gt; @param fieldName The fully qualified field name. @param imageStream The image's stream. 
      <param name="String"/>
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.fillImageField(String,String)">&lt;p&gt; Pastes an image onto the existing button field as its appearance according to its fully qualified field name. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form("PdfForm.pdf", "PdfForm_filled.pdf"); form.fillImageField("fieldName", "file.jpg"); form.save(); &lt;/pre&gt; @param fieldName The fully qualified field name of the image button field. @param imageFileName The path of the image file, relative and absolute are both ok. 
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.flattenAllFields">&lt;p&gt; Flattens all the fields. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form("PdfForm.pdf"); form.flattenAllFields(); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.facades.Form.flattenField(String)">&lt;p&gt; Flattens a specified field with the fully qualified field name. Any other field will remain unchangable. If the fieldName is invalid, all the fields will remain unchangable. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form("PdfForm.pdf"); form.flattenField("textField"); &lt;/pre&gt; @param fieldName The name of the field to be flattened. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.getAttachmentName">
       
        <p>Gets name of attachment when result of operation is stored into HttpResponse objects as attachment.</p> @return string object
      
    </member>
    <member name="M:com.aspose.pdf.facades.Form.getButtonOptionCurrentValue(String)">&lt;p&gt; Returns the current value for radio button option fields. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form("PdfForm.pdf"); System.out.println(form.GetButtonOptionCurrentValue("btnField")); &lt;/pre&gt; @return String value for the current radio group optino. See also {@code GetButtonOptionValues} @param fieldName Field Name 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.getButtonOptionValues(String)">&lt;p&gt; Gets the radio button option fields and related values based on the field name. This method has meaning for radio button groups. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form("PdfForm.pdf"); java.util.Map values = form.getButtonOptionValues("Color"); System.out.println(values.get("White").toString()); System.out.println(values.get("Black").toString()); &lt;/pre&gt; @return Hash table of option values keyed by form item name @param fieldName Field Name 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.getButtonOptionValuesInternal(String)">&lt;p&gt; Gets the radio button option fields and related values based on the field name. This method has meaning for radio button groups. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form("PdfForm.pdf"); Hashtable values = form.getButtonOptionValues("Color"); System.out.println(values["White"].toString()); System.out.println(values["Black"].toString()); &lt;/pre&gt; @return Hash table of option values keyed by form item name @param fieldName Field Name 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.getContentDisposition">
       
        <p>Gets or sets how content will be stored when result of operation is stored into HttpResponse object. Possible value: inline / attachment. Default: inline.</p> @return ContentDisposition element @see ContentDisposition
      
    </member>
    <member name="M:com.aspose.pdf.facades.Form.getDestFileName">
       
        <p>Gets destination file name.</p> @return string object
      
    </member>
    <member name="M:com.aspose.pdf.facades.Form.getDestStream">
       
        <p>Gets or sets destination stream.</p> @return OutputStream object
      
    </member>
    <member name="M:com.aspose.pdf.facades.Form.getField(String)">&lt;p&gt; Gets the field's value according to its field name. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form("PdfForm.pdf"); System.out.println("Field value = " + form.getField("Field1")); &lt;/pre&gt; @return The field's value. @param fieldName The fully qualified field name. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.getFieldFacade(String)">&lt;p&gt; Returns FrofmFieldFacade object containing all appearance attributes. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; com.aspose.pdf.facades.Form form = new com.aspose.pdf.facades.Form("form.pdf")); FormFieldFacade field = form.getFieldFacade("field1"); System.out.println("Color of field border: " + field.getBorderColor()); &lt;/pre&gt; @return FormFieldFacade object @param fieldName Name of field to read. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.getFieldFlag(String)">&lt;p&gt; Returns flags of the field. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form("PdfForm.pdf"); if (form.getFieldFlag("textField") == ProptyFlag.ReadOnly) { System.out.println("Field is read-only"); } &lt;/pre&gt; @return Property flag (ReadOnly/ Required/NoExport @param fieldName Field name 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.getFieldLimit(String)">&lt;p&gt; Get the limitation of text field. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form("PdfForm.pdf"); System.out.println(form.getFieldLimit("textfieldBox")); &lt;/pre&gt; @return Return the limitation number of characters a text field can be filled. It not set, return 0. @param fieldName The qualified field name. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.getFieldNames">&lt;p&gt; Gets list of field names on the form. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form("PdfForm.pdf"); String[] fields = form.getFieldNames(); for(String field : fields) { System.out.println(field); } &lt;/pre&gt; @return String[] object</member>
    <member name="M:com.aspose.pdf.facades.Form.getFieldType(String)">&lt;p&gt; Returns type of field. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form("PdfForm.pdf"); if (form.getFieldType("textField") == FieldType.Text) { System.out.println("Type of field is text"); } &lt;/pre&gt; @return Element of FileType enumeration corresponding to field type. @param fieldName Field name. @see FieldType 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.getFormSubmitButtonNames">&lt;p&gt; Gets all form submit button names. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form("PdfForm.pdf"); String[] submits = form.getFormSubmitButtonNames(); for(String btn : submits) { System.out.println(btn); } &lt;/pre&gt; @return String[] object</member>
    <member name="M:com.aspose.pdf.facades.Form.getFullFieldName(String)">&lt;p&gt; Gets the full field name according to its short field name. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form("PdfForm.pdf"); System.out.println("Full field name is : " + form.getFullFieldName("textField")); &lt;/pre&gt; @return The full field name. @param fieldName The fully qualified field name. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.getImportResult">
       
        <p>Result of last import operation. Array of objects which describe result of import for each field.</p> @return FormImportResult[] array
      
    </member>
    <member name="M:com.aspose.pdf.facades.Form.getRichText(String)">&lt;p&gt; Get a Rich Text field's value, including the formatting information of every character. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form("PdfForm.pdf"); System.out.println(form.getRichText("txtDescriptionRTF")); &lt;/pre&gt; @return Return a String containing formatting information of the Rich Text field. @param fieldName The fully qualified field name of the Rich Text field. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.getSaveOptions">
       
        <p>Gets or sets save options when result is stored as HttpResponse. Default value: PdfSaveOptions.</p> @return SaveOptions object
      
    </member>
    <member name="M:com.aspose.pdf.facades.Form.getSrcFileName">&lt;p&gt; Gets source file name. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new com.aspose.pdf.Form(); form.setSrcFileName("file.pdf"); &lt;/pre&gt; @return string object</member>
    <member name="M:com.aspose.pdf.facades.Form.getSrcStream">
       
        <p>Gets source stream.</p> @return InputStream object
      
    </member>
    <member name="M:com.aspose.pdf.facades.Form.getSubmitFlags(String)">&lt;p&gt; Returns the submit button's submission flags &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form("PdfForm.pdf"); System.out.println( ( form.getSubmitFlags("btnSubmit") | SubmitFormFlag.Xfdf != 0) ? " XFDF" : " "); /// System.out.println( ( form.getSubmitFlags("btnSubmit") | SubmitFormFlag.Fdf != 0) ? " FDF" : " "); System.out.println( ( form.getSubmitFlags("btnSubmit") | SubmitFormFlag.Pdf != 0) ? " PDF" : " "); &lt;/pre&gt; @return Submission flags of the button. @param fieldName The qualified field name. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.importFdf(InputStream)">&lt;p&gt; Imports the content of the fields from the fdf file and put them into the new pdf. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form("PdfForm.pdf", "PdfForm_imported.pdf"); form.importFdf(new FileInputStream("data.fdf")); form.save(); &lt;/pre&gt; @param inputFdfStream The input fdf stream. 
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.importXfdf(InputStream)">&lt;p&gt; Imports the content of the fields from the xfdf(xml) file and put them into the new pdf. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form("PdfForm.pdf", "Form_ImportXfdf.pdf"); InputStream fs = new FileInputStream("export_old.xfdf"); form.importXfdf(fs); fs.close(); form.save(); &lt;/pre&gt; @param inputXfdfStream The input xfdf(xml) stream. 
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.importXml(InputStream)">&lt;p&gt; Imports the content of the fields from the xml file and put them into the new pdf. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form("PdfForm.pdf"); InputStream fs = new FileInputStream("import.xml"); form.importXml(fs); form.save("Form_Imported.pdf"); &lt;/pre&gt; @param inputXmlStream Stream from which XML for import is read. 
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.importXml(InputStream,boolean)">
       
        <p>Imports the content of the fields from the xml file and put them into the new pdf.</p> @param inputXmlStream The input xml stream. @param IgnoreFormTemplateChanges If this parameter is true then all changes of the XFA form template will not be saved
      
      <param name="InputStream"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.importXml(String)">&lt;p&gt; Imports the content of the fields from the xml file and put them into the new pdf. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form("PdfForm.pdf"); form.importXml("import.xml"); form.save( "Form_Imported.pdf"); &lt;/pre&gt; @param inputXml Stream from which XML for import is read. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.isRequiredField(String)">
       
        <p>Determines whether field is required or not.</p> @return True - the field is required; otherwise, false. @param fieldName The name of field.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.renameField(String,String)">&lt;p&gt; Renames a field. Either AcroForm field or XFA field is OK. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form("PdfForm.pdf", "PdfFormUpdated.pdf"); form.renameField("field", "field1"); form.save(); &lt;/pre&gt; @param fieldName the old field name @param newFieldName the new field name 
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.save">&lt;p&gt; Saves the value of the filled fields and close the opened Pdf document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form("PdfForm.pdf", "PdfForm_Changed.pdf"); form.fillField("textField", "new value"); form.save(); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.facades.Form.save(OutputStream)">
       
        <p>Saves document into specified stream.</p> @param destStream Stream where document will be saved.
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.save(String)">
       
        <p>Saves document into specified file.</p> @param destFile File where document will be saved.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.setAttachmentName(String)">
       
        <p>Sets name of attachment when result of operation is stored into HttpResponse objects as attachment.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.setContentDisposition(int)">
       
        <p>Sets how content will be stored when result of operation is stored into HttpResponse object. Possible value: inline / attachment. Default: inline.</p> @param value ContentDisposition element @see ContentDisposition
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.setConvertTo(int)">
       
        <p>Sets PDF file format. Result file will be saved in specified file format. If this property is not specified then file will be save in default PDF format without conversion.</p> @param value PdfFormat element @see PdfFormat
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.setDestFileName(String)">&lt;p&gt; Sets destination file name. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new com.aspose.pdf.Form(); form.setDestFileName("file.pdf"); &lt;/pre&gt; @param value String object 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.setDestStream(OutputStream)">&lt;p&gt; Gets destination stream. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new com.aspose.pdf.Form(); form.setDestStream (new FileInputStream("file.pdf")); &lt;/pre&gt; @param value OutputStream object 
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.setSaveOptions(SaveOptions)">
       
        <p>Gets or sets save options when result is stored as HttpResponse. Default value: PdfSaveOptions.</p> @param value SaveOptions object
      
      <param name="SaveOptions"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.setSrcFileName(String)">
       
        <p>Sets source file name.</p> @param value string object
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.setSrcStream(InputStream)">&lt;p&gt; Gets source stream. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new com.aspose.pdf.Form(); form.setSrcStream (new FileInputStream("source.pdf"))); &lt;/pre&gt; @param value InputStream object 
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.setXfaData(InputStream)">
       
        <p>Replaces XFA data with specified data packet. Data packet may be extracted using ExtractXfaData.</p> @param inputXmlStream Stream where XML is stored.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.#ctor">&lt;p&gt; Construtcor of Form without parameters. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new com.aspose.pdf.facades.Form(); form.setSrcFileName( "file.pdf"); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.facades.Form.#ctor(IDocument)">
       
        <p>Initializes new {@code Form} object on base of the {@code document}.</p> @param document Pdf document.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.#ctor(IDocument,OutputStream)">
       
        <p>Initializes new {@code Form} object on base of the {@code document}.</p> @param document Pdf document. Obsolete("Use constructor without destination.") @param destStream Destination stream.
      
      <param name="IDocument"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.#ctor(IDocument,String)">
       
        <p>Initializes new {@code Form} object on base of the {@code document}.</p> Obsolete("Use constructor without destination.") @param document Pdf document. @param destFileName Path of the destination file.
      
      <param name="IDocument"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.#ctor(InputStream)">&lt;p&gt; Constructor for form. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form(new FileInputStream("PdfForm.pdf"); &lt;/pre&gt; @param srcStream source stream. 
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.#ctor(InputStream,OutputStream)">&lt;p&gt; Constructor of Form with two stream parameters. Specify same source and destination stream for incremental update. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form(new FileInputStream("InFile.pdf"), new FileOutputStream("OutFile.pdf")); &lt;/pre&gt; Obsolete("Use constructor without destination.") @param srcStream Source stream. @param destStream Destination stream. 
      <param name="InputStream"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.#ctor(InputStream,String)">&lt;p&gt; Constructor of Form &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form(new FileInputStream("PdfForm.pdf"), "PdfForm_Updated.pdf"); &lt;/pre&gt; @param srcStream Source stream. @param destFileName Destination file path. 
      <param name="InputStream"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.#ctor(String)">&lt;p&gt; Constructor of Form. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form("PdfForm.pdf"); &lt;/pre&gt; @param srcFileName Source file path. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.#ctor(String,OutputStream)">&lt;p&gt; Constructor of Form. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form("PdfForm.pdf", "PdfForm_Updated.pdf"); Obsolete("Use constructor without destination.") &lt;/pre&gt; @param srcFileName Source file path. @param destStream Destination file path. 
      <param name="String"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.#ctor(String,String)">&lt;p&gt; Constructor of Form class. Specify same source file name and destination file name to perform incremental update. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form("PdfForm.pdf", "PdfForm_Updated.pdf"); &lt;/pre&gt; @param srcFileName Path of the source file. @param destFileName Path of the destination file. 
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.facades.Form.ImportStatus">
       
        <p>Status of imported field</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.Form.ImportStatus.Success">
       
        <p>Field was successfully imported</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.Form.ImportStatus.FieldNotFound">
       
        <p>Field with this name was not found in the document form.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.FormattedText">
       
        <p>Class which represents formatted text. Contains information about text and its color, size, style.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.getText">
      For Internal usage only @return Internal object
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.getFirstLine">
       
        <p>Gets first line</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.getTextColor">
       
        <p>Internal Gets text color</p> @return Color element
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.getBackColor">
       
        <p>Internal Gets back color</p> @return Color element
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.getFont">
       
        <p>Gets font</p> @return Font element
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.getFontSize">
       
        <p>Gets font size</p> @return float value
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.getTextHeight">
       
        <p>Gets height of text.</p> @return float value
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.getTextWidth">
       
        <p>Gets width of text.</p> @return float value
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.addNewLineText(String)">
       
        <p>Adds a new line to the FormattedText object and sets the newLineText to the next line's text.</p> @param newLineText Text of new added line.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.addNewLineText(String,float)">
       
        <p>Adds a new line to the FormattedText object and sets the newLineText to the next line's text.</p> @param newLineText Text of new added line. @param lineSpacing Spacing of the line.
      
      <param name="String"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.#ctor">
       
        <p>Initializes FormattedText.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.#ctor(String)">
       
        <p>Initializes FormattedText.</p> @param text Text which contained in FormattedText.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.#ctor(String,FontColor,int,int,boolean,float)">
       
        <p>Initializes FormattedText.</p> @param text Text content of the string. @param fontColor Color of the text. @param fontStyle Style of the text. @param encodingType Encoding type (value of EncodingType enumeration). @param embedded True if the font will be embedded. @param textSize Size of the text. @see FontStyle @see EncodingType
      
      <param name="String"/>
      <param name="FontColor"/>
      <param name="int"/>
      <param name="int"/>
      <param name="boolean"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.#ctor(String,FontColor,int,int,boolean,float,float)">
       
        <p>Initialize FormattedText.</p> @param text Text content of the string. @param fontColor Color of the text. @param textFont Font of the text. @param textEncoding Encoding of the text. @param embedded True if text will be embedded. @param textSize Size of the text. @param lineSpacing Additional spacing. @see FontStyle @see EncodingType
      
      <param name="String"/>
      <param name="FontColor"/>
      <param name="int"/>
      <param name="int"/>
      <param name="boolean"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.#ctor(String,java.awt.Color,int,int,boolean,float)">
       
        <p>Initializes FormattedText.</p> @param text Text content of the string. @param color Color of the text. @param textFont Font of the text. @param textEncoding Encoding of the text. @param embedded True if text will be embedded. @param textSize Size of the text. @see FontStyle @see EncodingType
      
      <param name="String"/>
      <param name="java.awt.Color"/>
      <param name="int"/>
      <param name="int"/>
      <param name="boolean"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.#ctor(String,java.awt.Color,int,int,boolean,float,float)">
       
        <p>Initializes FormattedText.</p> @param text Text contents of the string. @param textColor Color of the text. @param textFont Font of the text. @param textEncoding Encoding of the text. @param embedded If true font will be embedded. @param textSize Size of the text. @param lineSpacing Additional spacing. @see FontStyle @see EncodingType
      
      <param name="String"/>
      <param name="java.awt.Color"/>
      <param name="int"/>
      <param name="int"/>
      <param name="boolean"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.#ctor(String,FontColor,FontColor,int,int,boolean,float)">
       
        <p>Initializes FormattedText.</p> @param text Text content of the string. @param textColor Color of the text. @param backColor Color of background. @param textFont Font of the text. @param textEncoding Encoding of the text. @param embedded If true font will be embedded. @param textSize Size of the text. @see FontStyle @see EncodingType
      
      <param name="String"/>
      <param name="FontColor"/>
      <param name="FontColor"/>
      <param name="int"/>
      <param name="int"/>
      <param name="boolean"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.#ctor(String,FontColor,FontColor,int,int,boolean,float,float)">
       
        <p>Initializes FormattedText.</p> @param text Text content. @param textColor Color of the text. @param backColor Color of background. @param textFont Font of the text. @param textEncoding Encoding of the text. @param embedded If true font will be embedded. @param textSize Size of the text. @param lineSpacing Additional spacing. @see FontStyle @see EncodingType
      
      <param name="String"/>
      <param name="FontColor"/>
      <param name="FontColor"/>
      <param name="int"/>
      <param name="int"/>
      <param name="boolean"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.#ctor(String,java.awt.Color,java.awt.Color,int,int,boolean,float)">
       
        <p>Initializes FormattedText.</p> @param text Text content of the string. @param textColor Color of the text. @param backColor Color of background. @param textFont Font of the text. @param encoding Encoding of the text. @param embedded True if font will be embedded. @param textSize Size of the text. @see FontStyle @see EncodingType
      
      <param name="String"/>
      <param name="java.awt.Color"/>
      <param name="java.awt.Color"/>
      <param name="int"/>
      <param name="int"/>
      <param name="boolean"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.#ctor(String,java.awt.Color,java.awt.Color,int,int,boolean,float,float)">
       
        <p>Initializes FormattedText.</p> @param text Text contents of the string. @param textColor Color of the text. @param backColor Color of the background. @param textFont Font of the text. @param textEncoding Encoding of the text. @param embedded If true font is embedded. @param textSize Size of the text. @param lineSpacing Additional spacing. @see FontStyle @see EncodingType
      
      <param name="String"/>
      <param name="java.awt.Color"/>
      <param name="java.awt.Color"/>
      <param name="int"/>
      <param name="int"/>
      <param name="boolean"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.#ctor(String,java.awt.Color,java.awt.Color,String,int,boolean,float)">
       
        <p>Initializes FormattedText.</p> @param text Text content. @param textColor Color of the text. @param backColor Color of background. @param fontName Font of the text. @param textEncoding Encoding of the text. @param embedded If true font will be embedded. @param fontSize Size of the text. @see EncodingType
      
      <param name="String"/>
      <param name="java.awt.Color"/>
      <param name="java.awt.Color"/>
      <param name="String"/>
      <param name="int"/>
      <param name="boolean"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.#ctor(String,java.awt.Color,java.awt.Color)">
       
        <p>Initializes FormattedText.</p> @param text Text content. @param textColor Color of the text. @param backColor Color of background.
      
      <param name="String"/>
      <param name="java.awt.Color"/>
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.#ctor(String,java.awt.Color,String,int,boolean,float)">
       
        <p>Initializes FormattedText.</p> @param text Text content. @param textColor Color of the text. @param fontName Font of the text. @param textEncoding Encoding of the text. @param embedded If true font will be embedded. @param fontSize Size of the text. @see EncodingType
      
      <param name="String"/>
      <param name="java.awt.Color"/>
      <param name="String"/>
      <param name="int"/>
      <param name="boolean"/>
      <param name="float"/>
    </member>
    <member name="T:com.aspose.pdf.facades.FormEditor">
       
        <p>Class for editing forms (adding/deleting field etc)</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.getSrcFileName">
       
        <p>Gets name of source file.</p> @return string object
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.setSrcFileName(String)">&lt;p&gt; Sets name of source file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormEditor editor = new FormEditor(); editor.setSrcFileName(&amp;quot;InputFile.pdf&amp;quot;); &lt;/pre&gt; @param value string object 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.getDestFileName">
       
        <p>Gets destination file name.</p> @return string object
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.setDestFileName(String)">&lt;p&gt; Sets destination file name. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormEditor editor = new FormEditor(); editor.setDestFileName(&amp;quot;OutFile.pdf&amp;quot;); &lt;/pre&gt; @param value string object 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.getSrcStream">
       
        <p>Gets source stream.</p> @return InputStream object
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.setSrcStream(InputStream)">&lt;p&gt; Sets source stream. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormEditor editor = new FormEditor(); editor.setSrcStream(new FileInputStream(&amp;quot;InFile.pdf&amp;quot;)); &lt;/pre&gt; @param value InputStream object 
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.setConvertTo(int)">
       
        <p>Sets {@link PdfFormat} PDF file format. Result file will be saved in specified file format. If this property is not specified then file will be save in default PDF format without conversion.</p> @param value PdfFormat element @see PdfFormat
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.getDestStream">&lt;p&gt; Gets destination stream. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormEditor editor = new FormEditor(); editor.setDestStream(new FileInputStream(&amp;quot;OutFile.pdf&amp;quot;)); &lt;/pre&gt; @return OutputStream object</member>
    <member name="M:com.aspose.pdf.facades.FormEditor.setDestStream(OutputStream)">&lt;p&gt; Sets destination stream. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormEditor editor = new FormEditor(); editor.setDestStream(new FileInputStream(&amp;quot;OutFile.pdf&amp;quot;)); &lt;/pre&gt; @param value OutputStream object 
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.getItems">
      Get Items which will be added to newly created list box or combo box. @return String[] object
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.setItems(String[])">&lt;p&gt; Sets items which will be added to newly created list box or combo box. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; formEditor = new com.aspose.pdf.facadesFormEditor(&amp;quot;input.pdf&amp;quot;, &amp;quot;output.pdf&amp;quot;); formEditor.setItems(new String[] { &amp;quot;AAA&amp;quot;, &amp;quot;BBB&amp;quot;, &amp;quot;CCC&amp;quot; }); formEditor.addField(FieldType.ListBox, &amp;quot;AddedListBoxField&amp;quot;, &amp;quot;BBB&amp;quot;, 1, 10, 30, 110, 130); formEditor.save(); &lt;/pre&gt; @param value String[] object 
      <param name="String[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.getExportItems">&lt;p&gt; Gets options for combo box with export values. &lt;/p&gt; &lt;hr&gt; @return String[][] object</member>
    <member name="M:com.aspose.pdf.facades.FormEditor.setExportItems(String[][])">&lt;p&gt; Sets options for combo box with export values. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormEditor formEditor = new FormEditor("PdfForm.pdf", "PdfForm_Updated.pdf")); formEditor.setExportItems ( new String[][] { new String[] { "1", "Firs" }, new String[] { "2", "Second" }, new String[] { "3", "Third" } }); formEditor.addField(FieldType.ListBox, "AddedListBoxField", "Second", 1, 10, 30, 110, 130); formEditor.save(); &lt;/pre&gt; @param value String[][] object 
      <param name="String[][]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.getFacade">
       
        <p>Gets visual attributes of the field.</p> @return FormFieldFacade object
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.setFacade(FormFieldFacade)">&lt;p&gt; Sets visual attributes of the field. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormEditor fe = new FormEditor(&amp;quot;PdfForm.pdf&amp;quot;, &amp;quot;PdfForm_DecorateField_text.pdf&amp;quot;); fe.setFacade(new FormFieldFacade()); fe.getFacade().setBackgroundColor(Color.red); fe.getFacade().setTextColor(Color.blue); fe.getFacade().setBorderColor(Color.green); fe.getFacade().setAlignment(FormFieldFacade.AlignCenter); fe.setDecorateField(&amp;quot;textField&amp;quot;); fe.save(); &lt;/pre&gt; @param value FormFieldFacade object 
      <param name="FormFieldFacade"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.getRadioGap">
       
        <p>Get the member to record the gap between two neighboring radio buttons in pixels,default is 50.</p> @return float value
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.setRadioGap(float)">&lt;p&gt; Set the member to record the gap between two neighboring radio buttons in pixels,default is 50. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; formEditor = new com.aspose.pdf.facades.FormEditor(&amp;quot;PdfForm.pdf&amp;quot;, &amp;quot;FormEditor_AddField_RadioButton.pdf&amp;quot;); formEditor.setRadioGap(4); formEditor.setRadioHoriz(false); formEditor.setItems(new String[] { &amp;quot;First&amp;quot;, &amp;quot;Second&amp;quot;, &amp;quot;Third&amp;quot; }); formEditor.addField(FieldType.Radio, &amp;quot;AddedRadioButtonField&amp;quot;, &amp;quot;Second&amp;quot;, 1, 10, 30, 110, 130); formEditor.save(); &lt;/pre&gt; @param value float value 
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.getRadioHoriz">&lt;p&gt; Get the flag to indicate whether the radios are arranged horizontally or vertically, default value is true. @return boolean value</member>
    <member name="M:com.aspose.pdf.facades.FormEditor.setRadioHoriz(boolean)">&lt;p&gt; Set the flag to indicate whether the radios are arranged horizontally or vertically, default value is true. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; formEditor = new com.aspose.pdf.facades.FormEditor(&amp;quot;PdfForm.pdf&amp;quot;, &amp;quot;FormEditor_AddField_RadioButton.pdf&amp;quot;); formEditor.setRadioGap(4); formEditor.setRadioHoriz(false); formEditor.setItems(new String[] { &amp;quot;First&amp;quot;, &amp;quot;Second&amp;quot;, &amp;quot;Third&amp;quot; }); formEditor.addField(FieldType.Radio, &amp;quot;AddedRadioButtonField&amp;quot;, &amp;quot;Second&amp;quot;, 1, 10, 30, 110, 130); formEditor.save(); &lt;/pre&gt; @param value boolean value 
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.getRadioButtonItemSize">
       
        <p>Gets or sets size of radio button item size (when new radio button field is added).</p>  
        <pre>FormEditor formEditor = new com.aspose.pdf.facades.FormEditor("PdfForm.pdf", "FormEditor_AddField_RadioButton.pdf"); formEditor.setRadioGap(4); formEditor.setRadioHoriz(false); formEditor.setRadioButtonItemSize(20); formEditor.setItems(new String[] { "First", "Second", "Third" }); formEditor.addField(com.aspose.pdf.facades.FieldType.Radio, "AddedRadioButtonField", "Second", 1, 10, 30, 110, 130); formEditor.save();</pre> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.setRadioButtonItemSize(double)">
       
        <p>Gets or sets size of radio button item size (when new radio button field is added).</p>  
        <pre>FormEditor formEditor = new com.aspose.pdf.facades.FormEditor("PdfForm.pdf", "FormEditor_AddField_RadioButton.pdf"); formEditor.setRadioGap(4); formEditor.setRadioHoriz(false); formEditor.setRadioButtonItemSize(20); formEditor.setItems(new String[] { "First", "Second", "Third" }); formEditor.addField(com.aspose.pdf.facades.FieldType.Radio, "AddedRadioButtonField", "Second", 1, 10, 30, 110, 130); formEditor.save();</pre> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.getSubmitFlag">
       
        <p>Get the submit button's submission flags</p> @return SubmitFormFlag element @see SubmitFormFlag
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.setSubmitFlag(int)">
       
        <p>Set the submit button's submission flags</p> @param value SubmitFormFlag element @see SubmitFormFlag
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.save">
       
        <p>Saves changes into destination file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.setFieldAttribute(String,int)">&lt;p&gt; Set attributes of field. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormEditor formEditor = new FormEditor(&amp;quot;PdfForm.pdf&amp;quot;, &amp;quot;PdfForm_SetFieldAttribute.pdf&amp;quot;); formEditor.setFieldAttribute(&amp;quot;listboxField&amp;quot;, PropertyFlag.ReadOnly); formEditor.setFieldAttribute(&amp;quot;textField&amp;quot;, PropertyFlag.NoExport); &lt;/pre&gt; @return true if attribute was set successfully. @param fieldName Name of field which attributes should be set. @param flag Flag (NoExport/ReadOnly/Required) 
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.setFieldAppearance(String,int)">&lt;p&gt; Set field flags &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormEditor formEditor = new FormEditor(&amp;quot;PdfForm1.pdf&amp;quot;, &amp;quot;FormEditor_SetFieldAppearance.pdf&amp;quot;); formEditor.setFieldAppearance(&amp;quot;Name&amp;quot;, AnnotationFlags.Hidden); formEditor.setFieldAppearance(&amp;quot;Phone&amp;quot;, AnnotationFlags.NoView | AnnotationFlags.Print); &lt;/pre&gt; @return true if flags were updated successfully. @param fieldName Name of field whose flags should be updated. @param flags Flag of the field. @see AnnotationFlags 
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.setSubmitFlag(String,int)">&lt;p&gt; Set submit flag of submit button. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormEditor formEditor = new FormEditor(&amp;quot;PdfForm.pdf&amp;quot;, &amp;quot;FormEditor_SetSubmitFlag.pdf&amp;quot;); formEditor.setSubmitFlag(&amp;quot;btnSubmit&amp;quot;, SubmitFormFlag.Fdf); &lt;/pre&gt; @return boolean value @param fieldName Name of submit button. @param submitFormFlag Submit flag. @see SubmitFormFlag 
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.setSubmitUrl(String,String)">&lt;p&gt; Sets URL of the button. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormEditor formEditor = new FormEditor(&amp;quot;PdfForm.pdf&amp;quot;, &amp;quot;FormEditor_SetSubmitUrl.pdf&amp;quot;); formEditor.setSubmitUrl(&amp;quot;btnSubmit&amp;quot;, &amp;quot;www.mysite.com&amp;quot;); &lt;/pre&gt; @return boolean value @param fieldName Submit button name. @param url Fully qualified URL. 
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.setFieldLimit(String,int)">&lt;p&gt; Sets maximum character count of the text field. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormEditor formEditor = new FormEditor(&amp;quot;PdfForm.pdf&amp;quot;, &amp;quot;FormEditor_SetFieldLimit.pdf&amp;quot;); formEditor.setFieldLimit(&amp;quot;textField&amp;quot;, 15); &lt;/pre&gt; @return true if field limit was successfully set. @param fieldName Name of the text field. @param fieldLimit New value of limit for the field. 
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.setFieldCombNumber(String,int)">&lt;p&gt; Sets number of combs for a regular single-line text field (the field is automatically divided into as many equally spaced positions, or combs, as the value of combNumber parameter). &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormEditor formEditor = new FormEditor("PdfWithAcroForm.pdf", "FormEditor_SetFieldComb.pdf")); formEditor.setFieldCombNumber("textCombField", 5); &lt;/pre&gt; @return If success, return true;else false. @param fieldName The qualified field name. @param combNumber The number of combs to divide the field into. 
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.moveField(String,float,float,float,float)">&lt;p&gt; Set new position of field. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormEditor formEditor = new FormEditor(&amp;quot;PdfForm.pdf&amp;quot;, &amp;quot;FormEditor_MoveField.pdf&amp;quot;); formEditor.moveField(&amp;quot;textField&amp;quot;, 20.5f, 20.3f, 120.6f, 40.8f); &lt;/pre&gt; @return true if field position was changed successfully. @param fieldName Name of field which must be moved. @param llx Abscissa of the lower-left corner of the field. @param lly Ordinate of the lower-left coerner of the field. @param urx Abscissa of the upper-right corner of the field. @param ury Ordinate of the upper-right corner of the field. 
      <param name="String"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.addField(int,String,int,float,float,float,float)">&lt;p&gt; Add field of specified type to the form. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormEditor formEditor = new com.aspose.pdf.facades.FormEditor(&amp;quot;PdfForm.pdf&amp;quot;, &amp;quot;FormEditor_AddField_Text.pdf&amp;quot;); formEditor.addField(FieldType.Text, &amp;quot;AddedTextField&amp;quot;, 1, 10, 30, 110, 46); formEditor.save(); &lt;/pre&gt; @return true if field was successfully added. @param fieldType Type of the field which must be added. @param fieldName Name of the field whic must be added. @param pageNum Page number where new field must be placed. @param llx Abscissa of the lower-left corner of the field. @param lly Ordinate of the lower-left corner of the field. @param urx Abscissa of the upper-right corner of the field. @param ury Ordinate of the upper-right corner of the field. 
      <param name="int"/>
      <param name="String"/>
      <param name="int"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.addField(int,String,String,int,float,float,float,float)">
       
        <p>Add field of specified type to the form.</p> @return true if field was successfully added. @param fieldType Type of the field which must be added. @param fieldName Name of the field whic must be added. @param initValue Initial value of the field. @param pageNum Page number where new field must be placed. @param llx Abscissa of the lower-left corner of the field. @param lly Ordinate of the lower-left corner of the field. @param urx Abscissa of the upper-right corner of the field. @param ury Ordinate of the upper-right corner of the field.
      
      <param name="int"/>
      <param name="String"/>
      <param name="String"/>
      <param name="int"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.removeField(String)">&lt;p&gt; Remove field from the form. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormEditr formEditor = new FormEditor(&amp;quot;PdfForm.pdf&amp;quot;, &amp;quot;FormEditor_RemoveField.pdf&amp;quot;); formEditor.removeField(&amp;quot;listboxField&amp;quot;); formEditor.removeField(&amp;quot;textField&amp;quot;); &lt;/pre&gt; @param fieldName Name of the field which must be removed. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.resetFacade">
       
        <p>Reset all visual attribtues to empty value.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.resetInnerFacade">
       
        <p>Reset all visual attribtues of inner facade to empty value.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.copyInnerField(String,String,int)">
       
        <p>Copies an existing field to the same position in specified page number. A new document will be produced, which contains everything the source document has except for the newly copied field.</p> @param fieldName String value @param newFieldName String value @param pageNum int value
      
      <param name="String"/>
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.copyInnerField(String,String,int,float,float)">
       
        <p>Copies an existing field to a new position specified by both page number and ordinates. A new document will be produced, which contains everything the source document has except for the newly copied field.</p> @param fieldName String value @param newFieldName String value @param pageNum int value @param abscissa float value @param ordinate float value
      
      <param name="String"/>
      <param name="String"/>
      <param name="int"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.copyOuterField(String,String)">
       
        <p>Copies an existing field from one PDF document to another document with original page number and ordinates. Notice: Only for AcroForm fields (excluding radio box).</p> @param srcFileName String value @param fieldName String value
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.copyOuterField(String,String,int)">
       
        <p>Copies an existing field from one PDF document to another document with specified page number and original ordinates. Notice: Only for AcroForm fields (excluding radio box).</p> @param srcFileName String value @param fieldName String value @param pageNum int value
      
      <param name="String"/>
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.copyOuterField(String,String,int,float,float)">
       
        <p>Copies an existing field from one PDF document to another document with specified page number and ordinates. Notice: Only for AcroForm fields (excluding radio box).</p> @param srcFileName String value @param fieldName String value @param pageNum int value @param abscissa float value @param ordinate float value
      
      <param name="String"/>
      <param name="String"/>
      <param name="int"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.decorateField(String)">&lt;p&gt; Changes visual attributes of the specified field. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormEditor fe = new FormEditor(&amp;quot;PdfWithAcroForm.pdf&amp;quot;, &amp;quot;FormEditor_DecorateField_text.pdf&amp;quot;); fe.Facade = new FormFieldFacade(); fe.Facade.setBackgroundColor(Color.Red); fe.Facade.setTextColor(Color.Blue); fe.Facade.setBorderColor(Color.Green); fe.Facade.setAlignment(FormFieldFacade.AlignCenter); fe.decorateField(&amp;quot;textField&amp;quot;); &lt;/pre&gt; @param fieldName The fully qualified field name. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.decorateField(int)">&lt;p&gt; Changes visual attributes of all fields with the specified field type. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormEditor fe = new FormEditor(&amp;quot;PdfForm.pdf&amp;quot;, &amp;quot;FormEditor_DecorateField.pdf&amp;quot;); fe.setFacade(new FormFieldFacade()); fe.getFacade().setBackgroundColor(Color.red); fe.getFacade().setTextColor(Color.blue); fe.getFacade().setBorderColor(Color.green); fe.getFacade().setAlignment(FormFieldFacade.AlignRight); // decorate all text fields. fe.decorateField(FieldType.Text); &lt;/pre&gt; @param fieldType Type of fields which will be decorated. 
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.decorateField">&lt;p&gt; Changes visual attributes of all fields in the PDF document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormEditor fe = new FormEditor(&amp;quot;PdfForm.pdf&amp;quot;, &amp;quot;FormEditor_DecorateField.pdf&amp;quot;); fe.setFacade(new FormFieldFacade()); fe.getFacade().setBackgroundColor(Color.red); fe.getFacade().setTextColor(Color.blue); fe.getFacade().setBorderColor(Color.Green); fe.getFacade().setAlignment(FormFieldFacade.AlignRight); // decorate all fields. fe.decorateField(); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.facades.FormEditor.renameField(String,String)">&lt;p&gt; Change name of the field. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormEditor formEditor = new FormEditor(&amp;quot;PdfForm.pdf&amp;quot;, &amp;quot;PdfForm_updated.pdf&amp;quot;); formEditor.renameField(&amp;quot;textField&amp;quot;, &amp;quot;textField_Renamed&amp;quot;); &lt;/pre&gt; @param fieldName Old name of the field. @param newFieldName New name of the field. 
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.removeFieldAction(String)">&lt;p&gt; Remove submit action of the field. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormEditor formEditor = new FormEditor(&amp;quot;PdfForm.pdf&amp;quot;, &amp;quot;FormEditor_RemoveFieldAction.pdf&amp;quot;); formEditor.removeFieldAction(&amp;quot;btnSubmit&amp;quot;); &lt;/pre&gt; @param fieldName Name of the field. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.addSubmitBtn(String,int,String,String,float,float,float,float)">&lt;p&gt; Add submit button on the form. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormEditor formEditor = new FormEditor(&amp;quot;PdfForm.pdf&amp;quot;, &amp;quot;FormEditor_AddSubmitBtn.pdf&amp;quot;); formEditor.addSubmitBtn(&amp;quot;submit&amp;quot;, 1, &amp;quot;Submit&amp;quot;, &amp;quot;www.check.com&amp;quot;, 10, 200, 70, 270); &lt;/pre&gt; @param fieldName Name of new button. @param page Page where button will be placed. @param label Button caption. @param url URL of the submit button. @param llx Abscissa of the lower-left corner. @param lly Ordinate of the lower-left corner. @param urx Abscissa of the upper-right corner. @param ury Ordinate of the upper-right corner. 
      <param name="String"/>
      <param name="int"/>
      <param name="String"/>
      <param name="String"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.addListItem(String,String)">&lt;p&gt; Adds new item to the list box. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormEditor formEditor = new FormEditor("PdfForm.pdf", PdfForm_out.pdf"); formEditor.addListItem("listBoxField", "Item 4 (New Item)"); &lt;/pre&gt; @param fieldName Name of the field ot which new item will be added. @param itemName Name if new item. 
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.addListItem(String,String[])">&lt;p&gt; Add a new item with Export value to the existing list box field, only for AcroForm combo box field. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormEditor fe = new FormEditor(&amp;quot;PdfForm.pdf&amp;quot;, &amp;quot;FormEditor_AddListItem2.pdf&amp;quot;); fe.addListItem(&amp;quot;listboxField&amp;quot;, new String[] { &amp;quot;4&amp;quot;, &amp;quot;Item4(Added)&amp;quot; }); &lt;/pre&gt; @param fieldName Name of field to which items will be added. @param exportName A String array denoting a new list item with Export Value, i.e. (Item Label, Export Value). 
      <param name="String"/>
      <param name="String[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.delListItem(String,String)">&lt;p&gt; Delete item from the list field. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; formEditor = new com.aspose.pdf.facades.FormEditor(&amp;quot;PdfForm.pdf&amp;quot;, &amp;quot;FormEditor_DelListItem.pdf&amp;quot;); formEditor.delListItem(&amp;quot;listboxField&amp;quot;, &amp;quot;item2&amp;quot;); &lt;/pre&gt; @param fieldName Name of the field. @param itemName Name of the item which must be deleted. 
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.setFieldScript(String,String)">
       
        <p>Set JavaScript for a PushButton field. If old JavaScript existed, it will be replaced by the new one.</p> @param fieldName The fully qualified field name. @param script The Java script to be added/placed into a push button field.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.single2Multiple(String)">&lt;p&gt; Change a single-lined text field to a multiple-lined one. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormEditor formEditor = new FormEditor(&amp;quot;PdfForm.pdf&amp;quot;, &amp;quot;PdfForm_updated.pdf&amp;quot;); formEditor.single2Multiple(&amp;quot;textField&amp;quot;); &lt;/pre&gt; @return If success, return true;else false. @param fieldName The qualified field name. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.setFieldAlignment(String,int)">&lt;p&gt; Set the alignment style of a text field. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormEditor formEditor = new FormEditor("PdfForm.pdf", "FormEditor_updated.pdf")); formEditor.setFieldAlignment(fieldName, FormFieldFacade.AlignCenter); &lt;/pre&gt; @param fieldName The qualified field name. @param alignment The alignment style definition, including FormFieldFacade.AlignLeft, FormFieldFacade.AlignCenter and FormFieldFacade.AlignRight. 
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.setFieldAlignmentV(String,int)">&lt;p&gt; Set the vertical alignment style of a text field. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormEditor fe = new FormEditor(&amp;quot;PdfStaticForm.pdf&amp;quot;, &amp;quot;VerticalAlign.pdf&amp;quot;); fe.setFieldAlignmentV(&amp;quot;form1[0].TextField[0]&amp;quot;, FormFieldFacade.AlignBottom); &lt;/pre&gt; @param fieldName The qualified field name. @param alignment The alignment style definition, including FormFieldFacade.AlignTop, FormFieldFacade.AlignMiddle and FormFieldFacade.AlignRight. 
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.getDocument">
       
        <p>Gets the document {@code FormEditor} is working on.</p> @return IDocument object
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.getContentDisposition">
       
        <p>Gets how content will be stored when result of operation is stored into HttpResponse object. Possible value: inline / attachment. Default: inline.</p> @return ContentDisposition element @see ContentDisposition
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.setContentDisposition(int)">
       
        <p>Sets how content will be stored when result of operation is stored into HttpResponse object. Possible value: inline / attachment. Default: inline.</p> @param value ContentDisposition element @see ContentDisposition
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.getSaveOptions">
       
        <p>Gets save options when result is stored as HttpResponse. Default value: PdfSaveOptions.</p> @return SaveOptions object
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.setSaveOptions(SaveOptions)">
       
        <p>Sets save options when result is stored as HttpResponse. Default value: PdfSaveOptions.</p> @param value SaveOptions object
      
      <param name="SaveOptions"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.getAttachmentName">
       
        <p>Gets name of attachment when result of operation is stored into HttpResponse objects as attachment.</p> @return String object
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.setAttachmentName(String)">
       
        <p>Sets name of attachment when result of operation is stored into HttpResponse objects as attachment.</p> @param value String object
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.close">
      Close object instance
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.dispose">
      Close object instance This method is obsolete, use close() instead.
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.#ctor">&lt;p&gt; Constructor for FormEditor. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormEditor formEditor = new FormEditor(); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.facades.FormEditor.#ctor(IDocument)">
       
        <p>Initializes new {@code FormEditor} object on base of the {@code document} .</p> @param document Pdf document.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.#ctor(IDocument,OutputStream)">
       
        <p>Initializes new {@code FormEditor} object on base of the {@code document} .</p> @param document Pdf document. @param destStream Destination stream.
      
      <param name="IDocument"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.#ctor(IDocument,String)">
       
        <p>Initializes new {@code FormEditor} object on base of the {@code document} .</p> @param document Pdf document. @param destFileName Path of the destination file.
      
      <param name="IDocument"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.#ctor(InputStream,OutputStream)">&lt;p&gt; Constructor for FormEditor. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormEditor formEditor = new FormEditor(new FileInputStream(&amp;quot;InFile.pdf&amp;quot;), new FileOutputStream(&amp;quot;OutFile.pdf&amp;quot;)); &lt;/pre&gt; @param srcStream Source stream. @param destStream Destination stream. 
      <param name="InputStream"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.#ctor(String,String)">&lt;p&gt; Constructor for FormEditor &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormEditor formEditor = new FormEditor(&amp;quot;InFile.pdf&amp;quot;, &amp;quot;OutFile.pdf&amp;quot;); &lt;/pre&gt; @param srcFileName Name of source file. @param destFileName Name of destination file. 
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.facades.FormEditorWeb">
       
        <p>Class for editing forms (ading/deleting field etc)</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditorWeb.getResponse">
       
        <p>Gets Response object where result of operation will be stored.</p> @return HttpServletResponse object
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditorWeb.setResponse(HttpServletResponse)">
       
        <p>Sets Response object where result of operation will be stored.</p> @param value HttpServletResponse object
      
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditorWeb.save">
       
        <p>Saves changes into destination file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditorWeb.#ctor">&lt;p&gt; Constructor for FormEditorWeb. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormEditorWeb FormEditorWeb = new FormEditorWeb(); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.facades.FormEditorWeb.#ctor(IDocument)">
       
        <p>Initializes new {@code FormEditorWeb} object on base of the {@code document}.</p> @param document Pdf document.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditorWeb.#ctor(IDocument,OutputStream)">
       
        <p>Initializes new {@code FormEditorWeb} object on base of the {@code document}.</p> @param document Pdf document. @param destStream Destination stream.
      
      <param name="IDocument"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditorWeb.#ctor(IDocument,String)">
       
        <p>Initializes new {@code FormEditorWeb} object on base of the {@code document}.</p> @param document Pdf document. @param destFileName Path of the destination file.
      
      <param name="IDocument"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditorWeb.#ctor(InputStream,HttpServletResponse)">
       
        <p>Creates FormEditorWeb which will save result into HttpResponse object.</p> @param inputStream Source stream. @param response HttpResponse object where result will be saved.
      
      <param name="InputStream"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditorWeb.#ctor(InputStream,OutputStream)">&lt;p&gt; Constructor for FormEditorWeb. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormEditorWeb FormEditorWeb = new FormEditorWeb(new FileInputStream(&amp;quot;InFile.pdf&amp;quot;), new FileOutputStream(&amp;quot;OutFile.pdf&amp;quot;)); &lt;/pre&gt; @param srcStream Source stream. @param destStream Destination stream. 
      <param name="InputStream"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditorWeb.#ctor(String,HttpServletResponse)">
       
        <p>Creates FormEditorWeb which will save result into HttpResponse object.</p> @param inputFile Source file name. @param response HttpResponse objects where result be saved.
      
      <param name="String"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditorWeb.#ctor(String,String)">&lt;p&gt; Constructor for FormEditorWeb &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormEditorWeb FormEditorWeb = new FormEditorWeb(&amp;quot;InFile.pdf&amp;quot;, &amp;quot;OutFile.pdf&amp;quot;); &lt;/pre&gt; @param srcFileName Name of source file. @param destFileName Name of destination file. 
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.facades.FormFieldFacade">
       
        <p>Class for representing field properties.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getBorderColor">
       
        <p>Gets color of a field border.</p> @return color of a field border.
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setBorderColor(java.awt.Color)">
       
        <p>Sets color of a field border.</p> @param value color of a field border.
      
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getBorderStyle">
       
        <p>Gets style of a field border.</p> @return style of a field border.
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setBorderStyle(int)">
       
        <p>Sets style of a field border.</p> @param value style of a field border.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getBorderWidth">
       
        <p>Get width of a field border.</p> @return width of a field border.
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setBorderWidth(float)">
       
        <p>Set width of a field border.</p> @param value width of a field border.
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getFont">
       
        <p>Gets the font style type of a field text.</p> @return FontStyle element @see FontStyle
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setFont(int)">
       
        <p>Sets the font style type of a field text.</p> @param value FontStyle @see FontStyle
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getCustomFont">
       
        <p>Gets the name of the font when this is non-standart (other then 14 standard fonts).</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setCustomFont(String)">
       
        <p>Sets the name of the font when this is non-standart (other then 14 standard fonts).</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getFontSize">
       
        <p>Gets the size of a field text.</p> @return float value
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setFontSize(float)">
       
        <p>Sets the size of a field text.</p> @param value float value
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getTextColor">
       
        <p>Get the color of the field text.</p> @return Color element
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setTextColor(java.awt.Color)">
       
        <p>Set the color of the field text.</p> @param value Color element
      
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getTextEncoding">
       
        <p>Get the text encoding type of the field text.</p> @return EncodingType element @see EncodingType
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setTextEncoding(int)">
       
        <p>Set the {@link EncodingType} text encoding type of the field text.</p> @param value EncodingType element @see EncodingType
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getAlignment">
       
        <p>Get the alignment of a field text, default is left alignment.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setAlignment(int)">
       
        <p>Set the alignment of a field text, default is left alignment.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getRotation">
       
        <p>Get the rotation of a field text.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setRotation(int)">
       
        <p>Set the rotation of a field text.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getCaption">
       
        <p>Get the normal caption of form field.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setCaption(String)">
       
        <p>Set the normal caption of form field.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getButtonStyle">
       
        <p>Get the style of check box or radio box field, defined by FormFieldFacade.CheckBoxStyle*.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setButtonStyle(int)">
       
        <p>Set the style of check box or radio box field, defined by FormFieldFacade.CheckBoxStyle*.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getBox">
       
        <p>Get a rectangle object holding field's location.</p> @return Rectangle element
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setBox(java.awt.Rectangle)">
       
        <p>Set a rectangle object holding field's location.</p> @param value Rectangle element
      
      <param name="java.awt.Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getPosition">
       
        <p>Get a rectangle object holding field's location.</p> @return array of float value
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setPosition(float[])">
       
        <p>Set a rectangle object holding field's location.</p> @param value array of float value
      
      <param name="float[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getPageNumber">
       
        <p>Get an integer value holding the number of page on which field locates.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setPageNumber(int)">
       
        <p>Set an integer value holding the number of page on which field locates.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getItems">
       
        <p>Get an array of string, each representing an option of a combo box/list/radio box field.</p> @return array of String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setItems(String[])">
       
        <p>Set an array of string, each representing an option of a combo box/list/radio box field.</p> @param value array of String value
      
      <param name="String[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getExportItems">
       
        <p>Get the options for adding a list/combo/radio box</p> @return array of String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setExportItems(String[][])">
       
        <p>Set the options for adding a list/combo/radio box</p> @param value array of String value
      
      <param name="String[][]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getBackgroundColor">
       
        <p>Get the color of a field background, default is white.</p> @return Color element
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setBackgroundColor(java.awt.Color)">
       
        <p>Set the color of a field background, default is white.</p> @param value Color element
      
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.reset">
       
        <p>Reset all visual attribtues to empty value.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getBackgroudColor">
       
        <p>Obsolete property. Use BackgroundColor. This method is Deprecated.</p> @return background color
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setBackgroudColor(java.awt.Color)">
       
        <p>Obsolete property. Use BackgroundColor. This method is Deprecated.</p> @param value background color
      
      <param name="java.awt.Color"/>
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.BORDER_WIDTH_UNDIFIED">
       
        <p>Undefined border width.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.BORDER_WIDTH_UNDEFINED">
       
        <p>Undefined border width.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.BORDER_WIDTH_THIN">
       
        <p>Defines a thin border width.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.BORDER_WIDTH_MEDIUM">
       
        <p>Defines a medium border width.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.BORDER_WIDTH_THICK">
       
        <p>Defines a thick border width.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.BORDER_STYLE_SOLID">
       
        <p>Defines a solid border style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.BORDER_STYLE_DASHED">
       
        <p>Defines a dashed border style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.BORDER_STYLE_BEVELED">
       
        <p>Defines a beveled border style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.BORDER_STYLE_INSET">
       
        <p>Defines an inseted border style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.BORDER_STYLE_UNDERLINE">
       
        <p>Defines an underlined border style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.BORDER_STYLE_UNDEFINED">
       
        <p>Undefined border style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.ALIGN_LEFT">
       
        <p>Defines aglignment to left style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.ALIGN_CENTER">
       
        <p>Defines aglignment to center style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.ALIGN_RIGHT">
       
        <p>Defines aglignment to right style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.ALIGN_UNDEFINED">
       
        <p>Undefined aglignment style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.ALIGN_JUSTIFIED">
       
        <p>Defines text justification alignment style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.ALIGN_TOP">
       
        <p>Defines vertical aglignment as top style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.ALIGN_MIDDLE">
       
        <p>Defines vertical aglignment as middle style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.ALIGN_BOTTOM">
       
        <p>Defines vertical aglignment as bottom style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.CHECK_BOX_STYLE_CIRCLE">
       
        <p>Defines a circle check box style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.CHECK_BOX_STYLE_CHECK">
       
        <p>Defines the shape of a check box field when it checked.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.CHECK_BOX_STYLE_CROSS">
       
        <p>Defines a cross check box style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.CHECK_BOX_STYLE_DIAMOND">
       
        <p>Defines a diamond check box style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.CHECK_BOX_STYLE_STAR">
       
        <p>Defines a star check box style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.CHECK_BOX_STYLE_SQUARE">
       
        <p>Defines a square check box style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.CHECK_BOX_STYLE_UNDEFINED">
       
        <p>Defines an undefined check box style.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.FormWeb">
       
        <p>Representing Acro form Interface.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormWeb.getResponse">
       
        <p>Gets or sets Response object where result of operation will be stored.</p> @return HttpServletResponse object
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormWeb.setResponse(HttpServletResponse)">
       
        <p>Gets or sets Response object where result of operation will be stored.</p> @param value HttpServletResponse object
      
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormWeb.save">&lt;p&gt; Saves the value of the filled fields and close the opened Pdf document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Form form = new Form(&amp;quot;PdfForm.pdf&amp;quot;, &amp;quot;PdfForm_Changed.pdf&amp;quot;); form.fillField(&amp;quot;textField&amp;quot;, &amp;quot;new value&amp;quot;); form.save(); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.facades.FormWeb.#ctor">&lt;p&gt; Construtcor of FormWeb without parameters. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormWeb FormWeb = new com.aspose.pdf.facades.FormWeb(); FormWeb.setSrcFileName(&amp;quot;file.pdf&amp;quot;); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.facades.FormWeb.#ctor(IDocument)">
       
        <p>Initializes new {@code FormWeb} object on base of the {@code document}.</p> @param document Pdf document.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormWeb.#ctor(IDocument,OutputStream)">
       
        <p>Initializes new {@code FormWeb} object on base of the {@code document}.</p> @param document Pdf document. @param destStream Destination stream.
      
      <param name="IDocument"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormWeb.#ctor(IDocument,String)">
       
        <p>Initializes new {@code FormWeb} object on base of the {@code document}.</p> @param document Pdf document. @param destFileName Path of the destination file.
      
      <param name="IDocument"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormWeb.#ctor(InputStream)">&lt;p&gt; Constructor for FormWeb. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormWeb FormWeb = new FormWeb(new FileInputStream(&amp;quot;PdfFormWeb.pdf&amp;quot;)); &lt;/pre&gt; @param srcStream source stream. 
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormWeb.#ctor(InputStream,HttpServletResponse)">
       
        <p>Creates FormWeb which will save result into HttpResponse object.</p> @param inputStream Stream containing source document. @param response HttpResponse object where result will be saved.
      
      <param name="InputStream"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormWeb.#ctor(InputStream,OutputStream)">&lt;p&gt; Constructor of FormWeb with two stream parameters. Specify same source and destination stream for incremental update. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormWeb FormWeb = new FormWeb(new FileInputStream(&amp;quot;InFile.pdf&amp;quot;), new FileOutputStream(&amp;quot;OutFile.pdf&amp;quot;)); &lt;/pre&gt; @param srcStream Source stream. @param destStream Destination stream. 
      <param name="InputStream"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormWeb.#ctor(InputStream,String)">&lt;p&gt; Constructor of FormWeb &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormWeb FormWeb = new FormWeb(new FileInputStream(&amp;quot;PdfFormWeb.pdf&amp;quot;), &amp;quot;PdfFormWeb_Updated.pdf&amp;quot;); &lt;/pre&gt; @param srcStream Source stream. @param destFileName Destination file path. 
      <param name="InputStream"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormWeb.#ctor(String)">&lt;p&gt; Constructor of FormWeb. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormWeb FormWeb = new FormWeb(&amp;quot;PdfFormWeb.pdf&amp;quot;); &lt;/pre&gt; @param srcFileName Source file path. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormWeb.#ctor(String,HttpServletResponse)">
       
        <p>Creates FormWeb which will save result into HttpResponse object.</p> @param inputFile Name of input file. @param response HttpResponse object where result will be stored.
      
      <param name="String"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormWeb.#ctor(String,OutputStream)">&lt;p&gt; Constructor of FormWeb. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormWeb FormWeb = new FormWeb(&amp;quot;PdfFormWeb.pdf&amp;quot;, &amp;quot;PdfFormWeb_Updated.pdf&amp;quot;); &lt;/pre&gt; @param srcFileName Source file path. @param destStream Destination file path. 
      <param name="String"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormWeb.#ctor(String,String)">&lt;p&gt; Constructor of FormWeb class. Specify same source file name and destination file name to perFormWeb incremental update. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; FormWeb FormWeb = new FormWeb(&amp;quot;PdfFormWeb.pdf&amp;quot;, &amp;quot;PdfFormWeb_Updated.pdf&amp;quot;); &lt;/pre&gt; @param srcFileName Path of the source file. @param destFileName Path of the destination file. 
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.facades.IFacade">
      General facade interface that defines common facades methods.
    </member>
    <member name="T:com.aspose.pdf.facades.IForm">
       
        <p>Class representing Acro form object.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.IFormEditor">
       
        <p>Class for editing forms (adding/deleting field etc)</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.ImageMergeMode">
       
        <p>Represents modes for merging images.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ImageMergeMode.Vertical">
       
        <p>Images merged vertically.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ImageMergeMode.Horizontal">
       
        <p>Images merged horizontally.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ImageMergeMode.Center">
       
        <p>Images aligned by center.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.IPdfFileEditor">
       
        <p>Implements operations with PDF file: concatenation, splitting, extracting pages, making booklet, etc.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.IPdfFileStamp">
       
        <p>interface for adding stamps (watermark or background) to PDF files.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.ISaveableFacade">
      Facade interface that defines methods common for all saveable facades.
    </member>
    <member name="T:com.aspose.pdf.facades.KeySize">
       
        <p>Defines different key sizes which can be used to encrypt pdf documents.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.KeySize.x40">
       
        <p>40 bit key. Such key size is used with RC4 algorithm and provides low level of security. Nevertheless old versions of pdf documents can be encrypted only with such keys (v. 1.3 and lower);</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.KeySize.x128">
       
        <p>128 bit key. Both RC4 and AES algorithms can use such key size.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.KeySize.x256">
       
        <p>256 bit key. Such key size can be used only with AES and is recognized with the last Adobe Reader versions (starting from v.9).</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.LineInfo">
       
        <p>Represents the information of line.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.LineInfo.getVerticeCoordinate">
       
        <p>Gets an array of numbers representing the alternating horizontal and vertical,coordinates, respectively, of each vertex.</p> @return array of float value
      
    </member>
    <member name="M:com.aspose.pdf.facades.LineInfo.setVerticeCoordinate(float[])">
       
        <p>Sets an array of numbers representing the alternating horizontal and vertical,coordinates, respectively, of each vertex.</p> @param value array of float value
      
      <param name="float[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.LineInfo.getLineColor">
       
        <p>Gets the color of a line.</p> @return Color element
      
    </member>
    <member name="M:com.aspose.pdf.facades.LineInfo.setLineColor(java.awt.Color)">
       
        <p>Sets the color of a line.</p> @param value Color element
      
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.facades.LineInfo.getLineWidth">
       
        <p>Gets or sets the width of a line.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.LineInfo.setLineWidth(int)">
       
        <p>Sets the width of a line.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.LineInfo.getVisibility">
       
        <p>Gets the visibility of a line.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.LineInfo.setVisibility(boolean)">
       
        <p>Sets the visibility of a line.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.LineInfo.getLineDashPattern">
       
        <p>Gets the dash pattern of a line.</p> @return array of int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.LineInfo.setLineDashPattern(int[])">
       
        <p>Sets the dash pattern of a line.</p> @param value array of int value
      
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.LineInfo.getBorderStyle">
       
        <p>Gets the border style of a line, 0 represents solid, 1 represents dashed, 2 represents beleved, 3 represents insert, 4 represents underline.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.LineInfo.setBorderStyle(int)">
       
        <p>Sets the border style of a line, 0 represents solid, 1 represents dashed, 2 represents beleved, 3 represents insert, 4 represents underline.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.facades.PdfAnnotationEditor">
       
        <p>Represents a class for work with PDF document annotations (comments).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.importAnnotationsFromXfdf(String)">
       
        <p>Document instance for PdfAnnotationEditor.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.importAnnotationFromXfdf(String)">&lt;p&gt; Imports all annotations from XFDF file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); editor.importAnnotationFromXfdf("annots.xfdf"); editor.save("example_out.pdf"); &lt;/pre&gt; @param xfdfFile The input XFDF file. @deprecated Method is obsolete, please use ImportAnnotationsFromXfdf instead 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.importAnnotationsFromXfdf(String,int[])">&lt;p&gt; Imports the specified annotations from XFDF file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); int[] annotTypes = {AnnotationType.Highlight, AnnotationType.Text}; editor.importAnnotationFromXfdf("annots.xfdf", annotTypes); editor.save("example_out.pdf"); &lt;/pre&gt; @param xfdfFile The input XFDF file. @param annotType The annotations array to be imported. 
      <param name="String"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.importAnnotationsFromXfdf(InputStream,int[])">&lt;p&gt; Imports the specified annotations from XFDF data stream. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); int[] annotTypes ={ AnnotationType.Highlight, AnnotationType.Line }; editor.importAnnotationFromXfdf(new FileInputStream("annots.xfdf"), annotTypes); editor.save("example_out.pdf"); &lt;/pre&gt; @param xfdfStream The input XFDF data stream. @param annotType The array of annotation types to be imported. 
      <param name="InputStream"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.importAnnotationsFromXfdf(InputStream)">&lt;p&gt; Imports all annotations from XFDF data stream. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); editor.importAnnotationsFromXfdf(new FileInputStream("annots.xfdf")); editor.save("example_out.pdf"); &lt;/pre&gt; @param xfdfSteam The input XFDF data stream. 
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.importAnnotationFromXfdf(InputStream)">&lt;p&gt; Imports all annotations from XFDF data stream. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); editor.importAnnotationFromXfdf(new FileInputStream("annots.xfdf")); editor.save("example_out.pdf"); &lt;/pre&gt; @param xfdfStream The input XFDF data stream. 
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.importAnnotations(String[],int[])">&lt;p&gt; Imports the specified annotations into document from array of another PDF documents. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); string[] paths = new string[2] {"with_annots1.pdf", "with_annots2.pdf"}; int[] annotTypes = {AnnotationType.Highlight, AnnotationType.Text}; editor.importAnnotations(paths, annotTypes); editor.save("example_out.pdf"); &lt;/pre&gt; @param annotFile The array of paths of PDF documents that contain source annotations. @param annotType The array of annotation types to be imported. 
      <param name="String[]"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.importAnnotations(String[])">&lt;p&gt; Imports annotations into document from array of another PDF documents. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); string[] paths = new string[2] {"with_annots1.pdf", "with_annots2.pdf"}; editor.importAnnotations(paths); editor.save("example_out.pdf"); &lt;/pre&gt; @param annotFile The array of paths of PDF documents that contain source annotations. 
      <param name="String[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.importAnnotations(InputStream[],int[])">&lt;p&gt; Imports the specified annotations into document from array of another PDF document streams. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); InputStream[] streams = new FileInputStream[2]; streams[0]= new FileInputStream("with_annots1.pdf"); streams[1]= new FileInputStream("with_annots2.pdf"); int[] annotTypes = {AnnotationType.Highlight, AnnotationType.Text}; editor.importAnnotations(streams, annotTypes); editor.save("example_out.pdf"); streams[0].close(); streams[1].close(); &lt;/pre&gt; @param annotFileInputStream The array of streams of PDF documents that contain source annotations. @param annotType The annotation types to be imported. 
      <param name="InputStream[]"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.importAnnotations(InputStream[])">&lt;p&gt; Imports annotations into document from array of another PDF document streams. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); InputStream[] streams = new FileInputStream[2]; streams[0]= new FileInputStream("with_annots1.pdf"); streams[1]= new FileInputStream("with_annots2.pdf"); editor.importAnnotations(streams); editor.save("example_out.pdf"); streams[0].Close(); streams[1].Close(); &lt;/pre&gt; @param annotFileInputStream The array of streams of PDF documents that contain source annotations. 
      <param name="InputStream[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.modifyAnnotations(int,int,int,Annotation)">"Use modifyAnnotations(int start, int end, Annotation annotation) instead." &lt;p&gt; Modifies the annotations of the specifed type on the specified page range. It supports to modify next annotation properties: Modified, Title, Contents, Color, Subject and Open. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); com.aspose.pdf.TextAnnotation annot = new com.aspose.pdf.TextAnnotation(); annot.setModified ( new java.util.Date()); annot.setTitle ( "NEW AUTHOR"); annot.setContents ( "NEW CONTENTS"); annot.setColor (com.aspose.pdf.Color.getRed()); annot.setSubject ( "NEW SUBJECT"); annot.setOpen ( true); editor.modifyAnnotations(1, 2, com.aspose.pdf.AnnotationType.Text, annot); editor.save("example_out.pdf"); &lt;/pre&gt; @param start The start page number. @param end The end page number. @param annotType The annotation type. @param annotation The annotation object contains new properties. 
      <param name="int"/>
      <param name="int"/>
      <param name="int"/>
      <param name="Annotation"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.modifyAnnotationsAuthor(int,int,String,String)">&lt;p&gt; Modifies the author of annotations on the specified page range. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); editor.modifyAnnotationsAuthor(1, 2, "PREV AUTHOR", "NEW AUTHOR"); editor.save("example_out.pdf"); &lt;/pre&gt; @param start The start page number. @param end The end page number. @param srcAuthor The author that must be modified. @param desAuthor The new author. 
      <param name="int"/>
      <param name="int"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.flatteningAnnotations">&lt;p&gt; Flattens all annotations in the document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); editor.flatteningAnnotations(); editor.save(example_out.pdf"); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.flatteningAnnotations(com.aspose.pdf.Form.FlattenSettings)">
       
        <p>Flattens all annotations in the document.</p> @param flattenSettings Specifies modes of flattening.
      
      <param name="com.aspose.pdf.Form.FlattenSettings"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.flatteningAnnotations(int,int,int[])">&lt;p&gt; Flattens the annotations of the specified types. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); int[] annotTypes ={AnnotationType.Line, AnnotationType.FreeText}; editor.flatteningAnnotations(1, 2, annotTypes); editor.save("example_out.pdf"); &lt;/pre&gt; @param start The start page. @param end Then end page. @param annotType The annotation types should be flattened. 
      <param name="int"/>
      <param name="int"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.deleteAnnotations">&lt;p&gt; Deletes all annotations in the document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); editor.deleteAnnotations(); editor.save("example_out.pdf"); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.deleteAnnotations(String)">&lt;p&gt; Deletes all annotations of the specified type in the document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); editor.deleteAnnotations("Text"); editor.save("example_out.pdf"); &lt;/pre&gt; @param annotType The type of annotation will be deleted. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.deleteAnnotation(String)">&lt;p&gt; Deletes the annotation with specified annotation name. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); editor.deleteAnnotation("4cfa69cd-9bff-49e0-9005-e22a77cebf38"); editor.save("example_out.pdf"); &lt;/pre&gt; @param annotName The annotation name 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.exportAnnotationsXfdf(OutputStream,int,int,String[])">&lt;p&gt; Exports the content of the specified annotations types into XFDF &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); String[] annotTypes = new String[] {"Text", "Highlight"}; OutputStream stream = new FileOutputStream("example.xfdf"); editor.exportAnnotationsXfdf(stream, 1, 2, annotTypes); stream.close(); &lt;/pre&gt; @param xmlOutputStream The output XFDF stream. @param start Start page from which the annotations of the document will be exported. @param end End page to which the annotations of the document will be exported. @param annotTypes The array of annotation types need be exported. 
      <param name="OutputStream"/>
      <param name="int"/>
      <param name="int"/>
      <param name="String[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.exportAnnotationsToXfdf(java.io.OutputStream)">
       
        <p>Exports annotations to stream.</p> @param xmlOutputStream OutputStream instance (Output stream)
      
      <param name="java.io.OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.exportAnnotationsXfdf(OutputStream,int,int,int[])">&lt;p&gt; Exports the content of the specified annotation types into XFDF &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); int[] annotTypes = new int[] {AnnotationType.Text, AnnotationType.Highlight}; OutputStream stream = new FileOutputStream("example.xfdf"); editor.exportAnnotationsXfdf(stream, 1, 2, annotTypes); stream.close(); &lt;/pre&gt; @param xmlOutputStream The output XFDF stream. @param start Start page from which the annotations of the document will be exported. @param end End page to which the annotations of the document will be exported. @param annotTypes The array of annotation types need be exported. 
      <param name="OutputStream"/>
      <param name="int"/>
      <param name="int"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.extractAnnotations(int,int,String[])">&lt;p&gt; Gets the list of annotations of the specified types. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); String[] annotTypes = new String[] {"Text", "Highlight"}; List annotList = (List)editor.extractAnnotations(1, 2 , annotTypes); &lt;/pre&gt; @param start Start page from which the annotations will be selected. @param end End page to which the annotations will be selected. @param annotTypes The array of needed annotation types. @return Annotations list. 
      <param name="int"/>
      <param name="int"/>
      <param name="String[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.extractAnnotations(int,int,int[])">&lt;p&gt; Gets the list of annotations of the specified types. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); int[] annotTypes = new int[] {AnnotationType.Text, AnnotationType.Highlight}; List annotList = (List)editor.extractAnnotations(1, 2 , annotTypes); &lt;/pre&gt; @param start Start page from which the annotations will be selected. @param end End page to which the annotations will be selected. @param annotTypes The array of needed annotation types. @return Annotations list. 
      <param name="int"/>
      <param name="int"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.save(String)">
       
        <p>Saves the result PDF to file.</p> @param outputFile Output PDF file
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.save(OutputStream)">
       
        <p>Saves the result PDF to stream.</p> @param outputStream Output PDF stream
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.modifyAnnotations(int,int,Annotation)">&lt;p&gt; Modifies the annotations of the specifed type on the specified page range. It supports to modify next annotation properties: Modified, Title, Contents, Color, Subject and Open. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); TextAnnotation annot = new TextAnnotation(); annot.setModified ( new Date()); annot.setTitle ( "NEW AUTHOR"); annot.setContents ( "NEW CONTENTS"); annot.setColor ( Color.RED); annot.setSubject ( "NEW SUBJECT"); annot.setOpen ( true); editor.modifyAnnotations(1, 2, annot); editor.save("example_out.pdf"); &lt;/pre&gt; @param start The start page number. @param end The end page number. @param annotation The annotation object contains new properties. 
      <param name="int"/>
      <param name="int"/>
      <param name="Annotation"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.redactArea(int,Rectangle,java.awt.Color)">
       
        <p>Redacts area on the specified page. All contents is removed.</p> @param pageIndex Index of the page. @param rect Area rectangle. @param color Filling color.
      
      <param name="int"/>
      <param name="Rectangle"/>
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.redactExactArea(int,Rectangle,java.awt.Color)">
       
        <p>Redacts area on the specified page. All contents is removed.</p> @param pageIndex Index of the page. @param rect Area rectangle. @param color Filling color.
      
      <param name="int"/>
      <param name="Rectangle"/>
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.#ctor">
       
        <p>Initializes new {@code PdfAnnotationEditor} object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.#ctor(IDocument)">
       
        <p>Initializes new {@code PdfAnnotationEditor} object on base of the {@code document}.</p> @param document Pdf document.
      
      <param name="IDocument"/>
    </member>
    <member name="T:com.aspose.pdf.facades.PdfBookmarkEditor">
       
        <p>Represents a class to work with PDF file's bookmarks including create, modify, export, import and delete.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.createBookmarks">&lt;p&gt; Creates bookmarks for all pages. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfBookmarkEditor editor = new PdfBookmarkEditor(); editor.bindPdf("example.pdf"); editor.createBookmarks(); editor.save("example_out.pdf"); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.createBookmarkOfPage(String,int)">&lt;p&gt; Creates bookmark for the specified page. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfBookmarkEditor editor = new PdfBookmarkEditor(); editor.bindPdf("example.pdf"); editor.createBookmarkOfPage("bookmark for page 1", 1); editor.save("example_out.pdf"); &lt;/pre&gt; @param bookmarkName The specified bookmark name. @param pageNumber The specified desination page. 
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.createBookmarks(Bookmark)">&lt;p&gt; Creates the specified bookmark in the document. The method can be used for forming nested bookmarks hierarchy. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfBookmarkEditor editor = new PdfBookmarkEditor(); editor.bindPdf("example.pdf"); Bookmark bm1=new Bookmark(); bm1.setPageNumber(1); bm1.setTitle("First child"); Bookmark bm2=new Bookmark(); bm2.setPageNumber(2); bm2.setTitle("Second child"); Bookmark bm=new Bookmark(); bm.setAction=(GoTo"); bm.setPageNumber(1); bm.setTitle("Parent"); Bookmarks bms=new Bookmarks(); bms.add(bm1); bms.add(bm2); bm.setChildItem(bms); editor.setCreateBookmarks(bm); editor.save("example_out.pdf"); &lt;/pre&gt; @param bookmark The bookmark will be added to the document. 
      <param name="Bookmark"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.createBookmarks(java.awt.Color,boolean,boolean)">&lt;p&gt; Create bookmarks for all pages with specified color and style (bold, italic). &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfBookmarkEditor editor = new PdfBookmarkEditor(); editor.bindPdf("example.pdf"); editor.createBookmarks(System.Drawing.Color.Red, true, true); editor.save("example_out.pdf"); &lt;/pre&gt; @param color The color of title. @param boldFlag The flag of bold attribution. @param italicFlag The flag of italic attribution. 
      <param name="java.awt.Color"/>
      <param name="boolean"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.createBookmarkOfPage(String[],int[])">&lt;p&gt; Creates bookmarks for the specified pages. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfBookmarkEditor editor = new PdfBookmarkEditor(); editor.bindPdf("example.pdf"); editor.createBookmarkOfPage("bookmark for page 1", 1); editor.save("example_out.pdf"); &lt;/pre&gt; @param bookmarkName Bookmarks title array. @param pageNumber Bookmarks desination page array. 
      <param name="String[]"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.deleteBookmarks">&lt;p&gt; Deletes all bookmarks of the PDF document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfBookmarkEditor editor = new PdfBookmarkEditor(); editor.bindPdf("example.pdf"); editor.deleteBookmarks(); editor.save("example_out.pdf"); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.deleteBookmarks(String)">&lt;p&gt; Deletes the bookmark of the PDF document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfBookmarkEditor editor = new PdfBookmarkEditor(); editor.bindPdf("example.pdf"); editor.deleteBookmarks("existing bookmark title"); editor.save("example_out.pdf"); &lt;/pre&gt; @param title The title of bookmark deleted. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.modifyBookmarks(String,String)">&lt;p&gt; Modifys bookmark title according to the specified bookmark title. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfBookmarkEditor editor = new PdfBookmarkEditor(); editor.bindPdf("example.pdf"); editor.modifyBookmarks("existing bookmark title", "new bookmark title"); editor.save("example_out.pdf"); &lt;/pre&gt; @param sTitle Source bookmark title. @param dTitle Modified bookmark title. 
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.extractBookmarks">&lt;p&gt; Extracts bookmarks of all levels from the document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfBookmarkEditor editor = new PdfBookmarkEditor(); editor.bindPdf("example.pdf"); Bookmarks bms = editor.ExtractBookmarks(); for(Bookmark bm : bms) System.out.println(bm.Title); &lt;/pre&gt; @return The bookmarks collection of all bookmarks that exist in the document.</member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.extractBookmarks(boolean)">
       
        <p>Extracts bookmarks of all levels from the document.</p> @return List of extracted bookmarks. @param upperLevel If true, extracts only upper level bookmarks. Else, extracts all bookmarks recursively.
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.extractBookmarks(String)">&lt;p&gt; Extracts the bookmarks with the specified title. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfBookmarkEditor editor = new PdfBookmarkEditor(); editor.bindPdf("example.pdf"); Bookmarks bms = editor.ExtractBookmarks("Title"); for(Bookmark bm : {@code (Iterable&lt;Bookmark&gt;)}bms) System.out.println(bm.Title); &lt;/pre&gt; @param title Extracted item title. @return Bookmark object collection has items with the same title. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.extractBookmarks(Bookmark)">&lt;p&gt; Extracts the children of a bookmark with a title like in specified bookamrk. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfBookmarkEditor editor = new PdfBookmarkEditor(); editor.bindPdf("example.pdf"); Bookmark bookmark = new Bookmark(); bookmark.setTitle ( "Title"); Bookmarks bms = editor.ExtractBookmarks(bookmark); for(Bookmark bm : {@code (Iterable&lt;Bookmark&gt;)}bms) System.out.println(bm.Title); &lt;/pre&gt; @return Bookmark collection with child bookmarks. @param bookmark The specified bookamrk. 
      <param name="Bookmark"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.extractBookmarksToHTML(String,String)">&lt;p&gt; Exports bookmarks to HTML file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfBookmarkEditor editor = new PdfBookmarkEditor(); editor.extractBookmarksToHTML("example.pdf", null); &lt;/pre&gt; @param pdfFile The PDF file which bookmarks will be exported. @param cssFile The CSS file to display HTML file, can be null. 
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.exportBookmarksToXML(String)">&lt;p&gt; Exports bookmarks to XML file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfBookmarkEditor editor = new PdfBookmarkEditor(); editor.bindPdf("example.pdf"); editor.exportBookmarksToXML("bookmarks.xml"); &lt;/pre&gt; @param xmlFile The output XML file. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.exportBookmarksToXML(OutputStream)">
       
        <p>Exports bookmarks to XML stream.</p> @param output Output stream where data will be stored.
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.importBookmarksWithXML(String)">&lt;p&gt; Imports bookmarks to the document from XML file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfBookmarkEditor editor = new PdfBookmarkEditor(); editor.bindPdf("example.pdf"); editor.importBookmarksWithXML("bookmarks.xml"); editor.save("example_out.pdf"); &lt;/pre&gt; @param xmlFile The XML file containing bookmarks list. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.importBookmarksWithXML(InputStream)">
       
        <p>Imports bookmarks to the document from XML file.</p> @param stream Stream with bookmarks data.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.exportBookmarksToHtml(String,String)">&lt;p&gt; Exports bookmarks to HTML file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfBookmarkEditor.extractBookmarksToHTML("example.pdf", "bookmarks.html"); &lt;/pre&gt; @param inPdfFile Input PDF file which bookmarks will be exported. @param outHtmlFile Output HTML file 
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.close">
       
        <p>Close the instance of PdfBookmarkEditor and release the resources.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.#ctor">
       
        <p>Initializes new {@code PdfBookmarkEditor} object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.#ctor(IDocument)">
       
        <p>Initializes new {@code PdfBookmarkEditor} object on base of the {@code document}.</p> @param document Pdf document.
      
      <param name="IDocument"/>
    </member>
    <member name="T:com.aspose.pdf.facades.PdfContentEditor">
       
        <p>Represents a class to edit PDF file's content.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.getTextSearchOptions">
       
        <p>Gets text search options.</p> @return TextSearchOptions element
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.setTextSearchOptions(TextSearchOptions)">
       
        <p>Sets text search options.</p> @param value TextSearchOptions element
      
      <param name="TextSearchOptions"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.getTextEditOptions">
       
        <p>Gets text edit options.</p> @return TextEditOptions element
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.setTextEditOptions(TextEditOptions)">
       
        <p>Sets text edit options.</p> @param value setTextEditOptions element
      
      <param name="TextEditOptions"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.getTextReplaceOptions">
       
        <p>Gets text replace options.</p> @return TextReplaceOptions element
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.setTextReplaceOptions(TextReplaceOptions)">
       
        <p>Sets text replace options.</p> @param value TextReplaceOptions element
      
      <param name="TextReplaceOptions"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.getReplaceTextStrategy">
       
        <p>Get a set of parameters for replace text operation</p> @return ReplaceTextStrategy element
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.setReplaceTextStrategy(ReplaceTextStrategy)">
       
        <p>Set a set of parameters for replace text operation</p> @param value ReplaceTextStrategy element
      
      <param name="ReplaceTextStrategy"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.bindPdf(String)">
       
        <p>Binds a PDF file for editing.</p> @param inputFile A PDF file to be edited.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.bindPdf(InputStream)">
       
        <p>Binds a PDF stream for editing.</p> @param inputStream A PDF stream to be edited.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.extractLink">&lt;p&gt; Extracts the collection of Link instances contained in PDF document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); List links = editor.extractLink(); for (object obj : links) { Link link = (Link)obj; // work with Link instance } &lt;/pre&gt; @return The collection of Link objects</member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createWebLink(java.awt.Rectangle,String,int,java.awt.Color,int[])">&lt;p&gt; Creates a web link in PDF document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createWebLink(new Rectangle(0, 0, 100, 100), "http://www.aspose.com", 1, Color.red, new int[] { PredefinedAction.FirstPage, PredefinedAction.PrintDialog }); editor.save("example_out.pdf"); &lt;/pre&gt; @param rect The rectangle for active click. @param url The web link destination. @param originalPage The number of original page on which rectangle bound with web link will be created. @param clr The color of rectangle for active click. @param actionName The array of actions (members of PredefinedAction enum) corresponding to executing menu items in Acrobat viewer. 
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="int"/>
      <param name="java.awt.Color"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createWebLink(java.awt.Rectangle,String,int,java.awt.Color)">&lt;p&gt; Creates a web link in PDF document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createWebLink(new Rectangle(0, 0, 100, 100), "http://www.aspose.com", 1, Color.red }); editor.save("example_out.pdf"); &lt;/pre&gt; @param rect The rectangle for active click. @param url The web link destination. @param originalPage The number of original page where rectangle bound with web link will be created. @param clr The color of rectangle for active click. 
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="int"/>
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createWebLink(java.awt.Rectangle,String,int)">&lt;p&gt; Creates a web link in PDF document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createWebLink(new Rectangle(0, 0, 100, 100), "http://www.aspose.com", 1 }); editor.save("example_out.pdf"); &lt;/pre&gt; @param rect The rectangle for active click. @param url The web link destination. @param originalPage The number of original page where rectangle bound with web link will be created. 
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createLocalLink(java.awt.Rectangle,int,int,java.awt.Color,int[])">&lt;p&gt; Creates a local link in PDF document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createLocalLink(new Rectangle(0, 0, 100, 100), 2, 1, Color.red, new int[] { PredefinedAction.FirstPage, PredefinedAction.PrintDialog }); editor.save("example_out.pdf"); &lt;/pre&gt; @param rect The rectangle for active click. @param desPage The destination page. @param originalPage The number of original page where rectangle bound with local link will be created. @param clr The color of rectangle for active click. @param actionName The array of actions (members of PredefinedAction enum) corresponding to executing menu items in Acrobat viewer. @see com.aspose.pdf.PredefinedAction 
      <param name="java.awt.Rectangle"/>
      <param name="int"/>
      <param name="int"/>
      <param name="java.awt.Color"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createLocalLink(java.awt.Rectangle,int,int,java.awt.Color)">&lt;p&gt; Creates a local link in PDF document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createLocalLink(new Rectangle(0, 0, 100, 100), 2, 1, Color.red }); editor.save("example_out.pdf"); &lt;/pre&gt; @param rect The rectangle for active click. @param desPage The destination page. @param originalPage The number of original page where rectangle bound with local link will be created. @param clr The color of rectangle for active click. 
      <param name="java.awt.Rectangle"/>
      <param name="int"/>
      <param name="int"/>
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createPdfDocumentLink(java.awt.Rectangle,String,int,int,java.awt.Color,int[])">&lt;p&gt; Creates a link to another PDF document page. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createPdfDocumentLink(new Rectangle(0, 0, 100, 100), "another_example.pdf", 1, 1, Color.red, new int[] { PredefinedAction.FirstPage, PredefinedAction.PrintDialog }); editor.save("example_out.pdf"); &lt;/pre&gt; @param rect The rectangle for active click. @param remotePdf The PDF document which page will be opened. @param originalPage The number of original page where rectangle bound with link will be created. @param destinationPage The destination page. @param clr The color of rectangle for active click. @param actionName The array of actions (members of PredefinedAction enum) corresponding to executing menu items in Acrobat viewer. 
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
      <param name="java.awt.Color"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createPdfDocumentLink(java.awt.Rectangle,String,int,int,java.awt.Color)">&lt;p&gt; Creates a link to another PDF document page. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createPdfDocumentLink(new Rectangle(0, 0, 100, 100), "another_example.pdf", 1, 1, Color.red }); editor.save("example_out.pdf"); &lt;/pre&gt; @param rect The rectangle for active click. @param remotePdf The PDF document which page will be opened. @param originalPage The number of original page where rectangle bound with link will be created. @param destinationPage The destination page. @param clr The color of rectangle for active click. 
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createPdfDocumentLink(java.awt.Rectangle,String,int,int)">&lt;p&gt; Creates a link to another PDF document page. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createPdfDocumentLink(new Rectangle(0, 0, 100, 100), "another_example.pdf", 1, 1 }); editor.save("example_out.pdf"); &lt;/pre&gt; @param rect The rectangle for active click. @param remotePdf The PDF document which page will be opened. @param originalPage The number of original page where rectangle bound with link will be created. @param destinationPage The destination page. 
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createCustomActionLink(java.awt.Rectangle,int,java.awt.Color,int[])">
       
        <p>Creates a link to custom actions in PDF document.</p> @param rect The rectangle for active click. @param originalPage The number of original page where rectangle bound with link will be created. @param color The color of rectangle for active click. @param actionName The array of actions (members of PredefinedAction enum) corresponding to executing menu items in Acrobat viewer.
      
      <param name="java.awt.Rectangle"/>
      <param name="int"/>
      <param name="java.awt.Color"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createApplicationLink(java.awt.Rectangle,String,int,java.awt.Color,int[])">
       
        <p>Creates a link to launch an application in PDF document.</p> @param rect The rectangle for active click. @param application The path of application to be launched. @param page The number of original page where rectangle bound with link will be created. @param clr The color of rectangle for active click. @param actionName The array of actions (members of PredefinedAction enum) corresponding to executing menu items in Acrobat viewer.
      
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="int"/>
      <param name="java.awt.Color"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createApplicationLink(java.awt.Rectangle,String,int,java.awt.Color)">&lt;p&gt; Creates a link to launch an application in PDF document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createApplicationLink(new Rectangle(0, 0, 100, 100), "explorer", 1, Color.red }); editor.save("example_out.pdf"); &lt;/pre&gt; @param rect The rectangle for active click. @param application The path of application to be launched. @param page The number of original page where rectangle bound with link will be created. @param clr The color of rectangle for active click. 
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="int"/>
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createApplicationLink(java.awt.Rectangle,String,int)">&lt;p&gt; Creates a link to launch an application in PDF document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createApplicationLink(new Rectangle(0, 0, 100, 100), "explorer", 1 }); editor.save("example_out.pdf"); &lt;/pre&gt; @param rect The rectangle for active click. @param application The path of application to be launched. @param page The number of original page where rectangle bound with link will be created. 
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createJavaScriptLink(String,java.awt.Rectangle,int,java.awt.Color)">&lt;p&gt; Creates a link to JavaScript in PDF document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createJavaScriptLink("app.alert('welcome to aspose!');", new Rectangle(0, 0, 100, 100), 1, Color.red }); editor.save("example_out.pdf"); &lt;/pre&gt; @param code The JavaScript code. @param rect The rectangle for active click. @param originalPage The number of original page where rectangle bound with link will be created. @param color The color of rectangle for active click. 
      <param name="String"/>
      <param name="java.awt.Rectangle"/>
      <param name="int"/>
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createText(java.awt.Rectangle,String,String,boolean,String,int)">&lt;p&gt; Creates text annotation in PDF document &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createText(new Rectangle(0, 0, 100, 100), "Welcome to Aspose", "You are welcome to Aspose!", true, "Key", 1); editor.save("example_out.pdf"); &lt;/pre&gt; @param rect The annotation rectangle defining the location of the annotation on the page. @param title The title of the annotation. @param contents The contents of the annotation. @param open A flag specifying whether the annotation should initially be displayed open. @param icon The name of an icon will be used in displaying the annotation. This value can be: "Comment", "Key", "Note", "Help", "NewParagraph", "Paragraph", "Insert" @param page The number of original page where the text annotation will be created. 
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="String"/>
      <param name="boolean"/>
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createFreeText(java.awt.Rectangle,String,int)">&lt;p&gt; Creates free text annotation in PDF document &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createFreeText(new Rectangle(0, 0, 100, 100), "Welcome to Aspose", 1); editor.save("example_out.pdf"); &lt;/pre&gt; @param rect The annotation rectangle defining the location of the annotation on the page. @param contents The contents of the annotation. @param page The number of original page where the text annotation will be created. 
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createMarkup(java.awt.Rectangle,String,int,int,java.awt.Color)">&lt;p&gt; Creates markup annotation it PDF document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createMarkup(new Rectangle(0, 0, 100, 100), "Welcome to Aspose", 0, 1, Color.red); editor.save("example_out.pdf"); &lt;/pre&gt; @param rect The rectangle defining the location of the annotation on the page. @param contents The contents of the annotation. @param type The type of markup annotation. Can be 0 (Highlight), 1 (Underline), 2 (StrikeOut), 3 (Squiggly). @param page The number of original page where the annotation will be created. @param clr The color of markup. 
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createPopup(java.awt.Rectangle,String,boolean,int)">&lt;p&gt; Creates popup annotation in PDF document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createPopup(new Rectangle(0, 0, 100, 100), "Welcome to Aspose", true, 1); editor.save("example_out.pdf"); &lt;/pre&gt; @param rect The annotation rectangle defining the location of the annotation on the page. @param contents The contents of the annotation. @param open A flag specifying whether the pop-up annotation should initially be displayed open. @param page The number of original page where the annotation will be created. 
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="boolean"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createFileAttachment(java.awt.Rectangle,String,String,int,String)">&lt;p&gt; Creates file attachment annotation. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createFileAttachment(new Rectangle(0, 0, 100, 100), "Welcome to Aspose", "attachment_file.pdf", 1, "Graph"); editor.save("example_out.pdf"); &lt;/pre&gt; @param rect The annotation rectangle defining the location of the annotation on the page. @param contents The contents of the annotation. @param filePath The path of the file will be attached. @param page The number of original page where the annotation will be created. @param name The name of an icon will be used in displaying the annotation. This value can be: "Graph", "PushPin", "Paperclip", "Tag". 
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="String"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createFileAttachment(java.awt.Rectangle,String,InputStream,String,int,String)">&lt;p&gt; Creates file attachment annotation. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); java.io.InputStream attStream = new java.io.FileInputStream("attachment_file.pdf"); editor.createFileAttachment(new Rectangle(0, 0, 100, 100), "Welcome to Aspose", attStream, "attachment_file.pdf", 1, "Graph"); editor.save("example_out.pdf"); &lt;/pre&gt; @param rect The annotation rectangle defining the location of the annotation on the page. @param contents The contents of the annotation. @param attachmentStream The attachment file stream. @param attachmentName The attachment name. @param page The number of original page where the annotation will be created. @param name The name of an icon will be used in displaying the annotation. This value can be: "Graph", "PushPin", "Paperclip", "Tag". 
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="InputStream"/>
      <param name="String"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.addDocumentAttachment(String,String)">&lt;p&gt; Adds document attachment with no annotation. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.addDocumentAttachment("attachment_file.pdf", "description of attachment_file"); editor.save("example_out.pdf"); &lt;/pre&gt; @param fileAttachmentPath The path of the file will be attached. @param description The description information. 
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.addDocumentAttachment(InputStream,String,String)">&lt;p&gt; Adds document attachment with no annotation. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); InputStream attStream = new FileInputStream("attachment_file.pdf") editor.addDocumentAttachment(attStream, "attachment_file.pdf", "description of attachment_file"); editor.save("example_out.pdf"); &lt;/pre&gt; @param fileAttachmentStream The stream of the file will be attached. @param fileAttachmentName The attachment name. @param description The description information. 
      <param name="InputStream"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.deleteAttachments">&lt;p&gt; Deletes all attachments in PDF document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.deleteAttachments(); editor.save("example_out.pdf"); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createLine(java.awt.Rectangle,String,float,float,float,float,int,int,java.awt.Color,String,int[],String[])">&lt;p&gt; Creates line annotation. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createLine(new Rectangle(0, 0, 100, 100), "Welcome to Aspose", 0, 0, 100, 100, 1, 1, Color.red, "D", new int[] {2, 3}, new string[] {"OpenArrow", "ClosedArrow"}); editor.save("example_out.pdf"); &lt;/pre&gt; @param rect The annotation rectangle defining the location of the annotation on the page. @param contents The contents of the annotation. @param x1 The starting horizontal coordinate of the line. @param y1 The starting vertical coordinate of the line. @param x2 The ending horizontal coordinate of the line. @param y2 The ending vertical coordinate of the line. @param page The number of original page where the annotation will be created. @param border The border width in points. If this value is 0 no border is drawn. Default value is 1. @param clr The color of line. @param borderStyle The border style specifying the width and dash pattern to be used in drawing the line. This value can be: "S" (Solid), "D" (Dashed), "B" (Beveled), "I" (Inset), "U" (Underline). @param dashArray A dash array defining a pattern of dashes and gaps to be used in drawing a dashed border. If it is used, borderSyle must be accordingly set to "D". @param LEArray An array of two values respectively specifying the beginning and ending style of the drawing line. The values can be: "Square", "Circle", "Diamond", "OpenArrow", "ClosedArrow", "None", "Butt", "ROpenArrow", "RClosedArrow", "Slash". 
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="int"/>
      <param name="int"/>
      <param name="java.awt.Color"/>
      <param name="String"/>
      <param name="int[]"/>
      <param name="String[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createSquareCircle(java.awt.Rectangle,String,java.awt.Color,boolean,int,int)">&lt;p&gt; Creates square-circle annotation. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createSquareCircle(new Rectangle(0, 0, 100, 100), "Welcome to Aspose", Color.red, false, 1, 5); editor.save("example_out.pdf"); &lt;/pre&gt; @param rect The annotation rectangle defining the location of the annotation on the page. @param contents The contents of the annotation. @param clr The color of square or circle. @param square True (square), false (sircle). @param page The number of original page where the annotation will be created. @param borderWidth The border width of square or circle. 
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="java.awt.Color"/>
      <param name="boolean"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.drawCurve(LineInfo,int,java.awt.Rectangle,String)">
       
        <p>Creates curve annotation.</p>  
        <pre>PdfContentEditor editor = new PdfContentEditor(); newApiEditor.bindPdf("example.pdf"); LineInfo lineInfo = new LineInfo(); lineInfo.setVerticeCoordinate ( new float[] { 0, 0, 100, 100 }); //x1, y1, x2, y2, .. xn, yn lineInfo.setVisibility ( true); editor.drawCurve(lineInfo, 1, new Rectangle(0, 0, 0, 0), "Welcome to Aspose"); editor.save("example_out.pdf");</pre> @param lineInfo The instance of LineInfo class. @param page The number of original page where the annotation will be created. @param annotRect The annotation rectangle defining the location of the annotation on the page. @param annotContents The contents of the annotation.
      
      <param name="LineInfo"/>
      <param name="int"/>
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createPolygon(LineInfo,int,java.awt.Rectangle,String)">&lt;p&gt; Creates polygon annotation. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); LineInfo lineInfo = new LineInfo(); lineInfo.setVerticeCoordinate ( new float[] { 0, 0, 100, 100, 100, 50 }); lineInfo.setVisibility ( true); editor.createPolygon(lineInfo, 1 , new Rectangle(0, 0, 0, 0), "Welcome to Aspose"); editor.save("example_out.pdf"); &lt;/pre&gt; @param lineInfo The instance of LineInfo class. @param page The number of original page where the annotation will be created. @param annotRect The annotation rectangle defining the location of the annotation on the page. @param annotContents The contents of the annotation. 
      <param name="LineInfo"/>
      <param name="int"/>
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createPolyLine(LineInfo,int,java.awt.Rectangle,String)">&lt;p&gt; Creates polyline annotation. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); LineInfo lineInfo = new LineInfo(); lineInfo.setVerticeCoordinate ( new float[] { 0, 0, 100, 100, 100, 50 }); lineInfo.setVisibility ( true); editor.createPolyLine(lineInfo, 1 , new Rectangle(0, 0, 0, 0), "Welcome to Aspose"); editor.save("example_out.pdf"); &lt;/pre&gt; @param lineInfo The instance of LineInfo class. @param page The number of original page where the annotation will be created. @param annotRect The annotation rectangle defining the location of the annotation on the page. @param annotContents The contents of the annotation. 
      <param name="LineInfo"/>
      <param name="int"/>
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createCaret(int,java.awt.Rectangle,java.awt.Rectangle,String,String,java.awt.Color)">&lt;p&gt; Creates caret annotation. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createCaret(1, new Rectangle(50, 50, 100, 100), new Rectangle(60, 60, 70, 70), "None", "Welcome to Aspose", Color.red); editor.save("example_out.pdf"); &lt;/pre&gt; @param page The number of original page where the annotation will be created. @param annotRect The annotation rectangle defining the location of the annotation on the page. @param caretRect The actual boundaries of the underlying caret. @param symbol A symbol will be associated with the caret. Value can be: "P" (Paragraph), "None". @param annotContents The contents of the annotation. @param color The color of the annotation. 
      <param name="int"/>
      <param name="java.awt.Rectangle"/>
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="String"/>
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createRubberStamp(int,java.awt.Rectangle,String,String,java.awt.Color)">&lt;p&gt; Creates a rubber stamp annotation. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createRubberStamp(1, Rectangle(0, 0, 100, 100), "Welcome to Aspose", Color.red); editor.save("example_out.pdf"); &lt;/pre&gt; @param page The number of original page where the annotation will be created. @param annotRect The annotation rectangle defining the location of the annotation on the page. @param icon String value @param annotContents The contents of the annotation. @param color The color of the annotation. 
      <param name="int"/>
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="String"/>
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createRubberStamp(int,java.awt.Rectangle,String,java.awt.Color,String)">&lt;p&gt; Creates a rubber stamp annotation. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createRubberStamp(1, Rectangle(0, 0, 100, 100), "Welcome to Aspose", Color.red, "appearance_file.pdf"); editor.save("example_out.pdf"); &lt;/pre&gt; @param page The number of original page where the annotation will be created. @param annotRect The annotation rectangle defining the location of the annotation on the page. @param annotContents The contents of the annotation. @param color The color of the annotation. @param appearanceFile The path of appearance file. 
      <param name="int"/>
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="java.awt.Color"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createRubberStamp(int,java.awt.Rectangle,String,java.awt.Color,InputStream)">&lt;p&gt; Creates a rubber stamp annotation. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); InputStream appStream = new FileInputStream("appearance_file.pdf"); editor.createRubberStamp(1, Rectangle(0, 0, 100, 100), "Welcome to Aspose", Color.red, appStream); editor.save("example_out.pdf"); &lt;/pre&gt; @param page The number of original page where the annotation will be created. @param annotRect The annotation rectangle defining the location of the annotation on the page. @param annotContents The contents of the annotation. @param color The color of the annotation. @param appearanceStream The stream of appearance file. 
      <param name="int"/>
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="java.awt.Color"/>
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createBookmarksAction(String,java.awt.Color,boolean,boolean,String,String,String)">&lt;p&gt; Creates a bookmark with the specified action. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createBookmarksAction("bookmark title", Color.red, true, true, null, "GoTo", 1(page number)); editor.save("example_out.pdf"); &lt;/pre&gt; @param title The title of the bookmark. @param color The color of the bookmark's title. @param boldFlag The flag of bold attribution. @param italicFlag The flag of italic attribution. @param file Another file or application required when the action type is "GoToR" or "Launch". @param actionType The action type. The value can be: "GoToR", "Launch", "GoTo", "URI". @param destination The local destination or remote destination or URL. 
      <param name="String"/>
      <param name="java.awt.Color"/>
      <param name="boolean"/>
      <param name="boolean"/>
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.addDocumentAdditionalAction(String,String)">&lt;p&gt; Adds additional action for document event. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.addDocumentAdditionalAction(PdfContentEditor.DocumentClose, "app.alert('Good-bye!');"); editor.save("example_out.pdf"); &lt;/pre&gt; @param eventType The document event types. @param code The code of JavaScript. 
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.removeDocumentOpenAction">&lt;p&gt; Removes open action from the document. This operation is useful when concatenating multiple documents that use explicit 'GoTo' action on startup. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.removeDocumentOpenAction(); editor.save("example_out.pdf"); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.changeViewerPreference(int)">&lt;p&gt; Changes the view preference. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.changeViewerPreference(ViewerPreference.HideMenubar); editor.changeViewerPreference(ViewerPreference.PageModeUseNone); editor.save("example_out.pdf"); &lt;/pre&gt; @param viewerAttribution The view attribution defined in the ViewerPreference class. 
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.getViewerPreference">&lt;p&gt; Returns the view preference. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); int prefValue = editor.GetViewerPreference(); if ((prefValue &amp;amp; ViewerPreference.PageModeUseOutline) != 0) { // ... } &lt;/pre&gt; @return Returns set of ViewerPrefernece flags</member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.replaceImage(int,int,String)">&lt;p&gt; Replaces the specified image on the specified page of PDF document with another image. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.replaceImage(1, 1, "image.jpg"); editor.save("example_out.pdf"); &lt;/pre&gt; @param pageNumber The number of page on which the image is replaced. @param index The index of the image object must be replaced. @param imageFile The image file will be used for replacing. 
      <param name="int"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.deleteImage(int,int[])">&lt;p&gt; Deletes the specified images on the specified page. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.deleteImage(1, new int[] {1, 2}); editor.save("example_out.pdf"); &lt;/pre&gt; @param pageNumber The number of page on which images must be deleted. @param index An array repsents images' indexes. 
      <param name="int"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.deleteImage">&lt;p&gt; Deletes all images from PDF document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.deleteImage(); editor.save("example_out.pdf"); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.replaceText(String,int,String,TextState)">&lt;p&gt; Replaces text in the PDF file on the specified page. {@code TextState} object (font family, color) can be specified to replaced text. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to replace text on the first page of the PDF document and set {@code TextState} text properties for the new text. // open document Document doc = new Document(inFile); com.aspose.pdf.Font font = com.aspose.pdf.FontRepository.findFont("Courier New"); font.isEmbedded ( true); // create PdfContentEditor object to edit text PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf(doc); // create textState object com.aspose.pdf.TextState textState = new com.aspose.pdf.TextState(); textState.setFont ( font); textState.setFontSize ( 17); textState.setFontStyle ( com.aspose.pdf.FontStyles.Bold | com.aspose.pdf.FontStyles.Italic); textState.setForegroundColor ( com.aspose.pdf.Color.getRed()); // change text with specified font editor.replaceText("hello world", 1, "hi world", textState); // save document doc.save(outFile); &lt;/pre&gt; @param srcString The string to be replaced. @param thePage Page number (0 means "all pages"). @param destString The replaced string. @param textState Text state (Text Color, Font etc). @return Returns true if replacement was made. 
      <param name="String"/>
      <param name="int"/>
      <param name="String"/>
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.replaceText(String,String)">&lt;p&gt; Replaces text in the PDF file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to replace text in PDF document. // open document Document doc = new Document(inFile); // create PdfContentEditor object to edit text PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf(doc); // change text editor.replaceText("hello world", "hi world"); // save document doc.save(outFile); &lt;/pre&gt; @param srcString The string to be replaced. @param destString Replacing string. @return Returns true if replacement was made. 
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.replaceText(String,int,String)">&lt;p&gt; Replaces text in the PDF file on the specified page. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to replace text in PDF document on the specified page. // open document Document doc = new Document(inFile); // create PdfContentEditor object to edit text PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf(doc); // change text editor.replaceText("hello world", 1, "hi world"); // save document doc.save(outFile); &lt;/pre&gt; @param srcString The sting to be replaced. @param thePage Page number (0 for all pages) @param destString Replacing string. @return Returns true if replacement was made. 
      <param name="String"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.replaceText(String,String,TextState)">&lt;p&gt; Replaces text in the PDF file using specified {@code TextState} object. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to replace text and set {@code TextState} text properties for the new text. Document doc = new Document(inFile); // Create font and mark it to be embedded com.aspose.pdf.Font font = com.aspose.pdf.FontRepository.findFont("Courier New"); font.isEmbedded ( true); // create PdfContentEditor object to edit text PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf(doc); // create textState object com.aspose.pdf.TextState textState = new com.aspose.pdf.TextState(); textState.setFont ( font); textState.setFontStyle ( com.aspose.pdf.FontStyles.Bold | com.aspose.pdf.FontStyles.Italic); // change text with specified font editor.replaceText("hello world", "hi world", textState); // save document doc.save(outFile); &lt;/pre&gt; @param srcString String to be replaced @param destString Replacing string @param textState Text state (Text Color, Font etc) @return Returns true if replacement was made. 
      <param name="String"/>
      <param name="String"/>
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createMovie(java.awt.Rectangle,String,int)">
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createSound(java.awt.Rectangle,String,String,int,String)">
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="String"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.deleteStamp(int,int[])">&lt;p&gt; Deletes multiple stamps on the specified page by stamp indexes. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor contentEditor = new PdfContentEditor(); contentEditor.bindPdf("file.pdf"); contentEditor.deleteStamp(1, new int[] { 2, 3, 5} ); contentEditor.save("outfile.pdf"); &lt;/pre&gt; @param pageNumber Page number where stamp will be deleted. @param index Stamp indexes. 
      <param name="int"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.deleteStampByIds(int[])">&lt;p&gt; Deletes stamps with specified IDs from all pages of the document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor contentEditor = new PdfContentEditor(); contentEditor.bindPdf("file.pdf"); contentEditor.deleteStampByIds(new int[] { 102, 103 } ); contentEditor.save("outfile.pdf"); &lt;/pre&gt; @param stampIds Array of stamp IDs. 
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.deleteStampByIds(int,int[])">&lt;p&gt; Deletes stamps on the specified page by multiple stamp IDs. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor contentEditor = new PdfContentEditor(); contentEditor.bindPdf("file.pdf"); contentEditor.deleteStampByIds(1, new int[] { 100, 101 } ); contentEditor.save("outfile.pdf"); &lt;/pre&gt; @param pageNumber Page number where stamps will be deleted. @param stampIds Array of stamp IDs. 
      <param name="int"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.deleteStampById(int,int)">&lt;p&gt; Deletes stamp on the specified page by stamp ID. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor contentEditor = new PdfContentEditor(); contentEditor.bindPdf("file.pdf"); contentEditor.deleteStampById(1, 100); contentEditor.save("outfile.pdf"); &lt;/pre&gt; @param pageNumber Page number where stamp will be deleted. @param stampId Identifier of stamp which should be deleted. 
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.hideStampById(int,int)">
       
        <p>Hides the stamp. After hiding, stamp visibility may be restored with ShowStampById method.</p> @param pageNumber Number of the page. @param stampId Identifier of stamp which should be hidden.
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.showStampById(int,int)">
       
        <p>Shows stamp which was hidden by HiddenStampById.</p> @param pageNumber Number of the page. @param stampId Identifier of stamp which should be shown.
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.moveStampById(int,int,double,double)">
       
        <p>Changes position of the stamp on page.</p> @param pageNumber Numer of page. @param stampId Identifier of stamp which should be moved. @param x New stamp horizontal pozition on the page. @param y New stamp vertical position on the page.
      
      <param name="int"/>
      <param name="int"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.moveStamp(int,int,double,double)">
       
        <p>Changes position of the stamp on page.</p> @param pageNumber Number of page. @param stampIndex Index of stamp on the page. @param x New stamp horizontal position. @param y New stamp vertical position.
      
      <param name="int"/>
      <param name="int"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.deleteStampById(int)">&lt;p&gt; Delete stamp by ID from all pages of the document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfContentEditor contentEditor = new PdfContentEditor(); contentEditor.bindPdf("file.pdf"); contentEditor.deleteStampById(100); contentEditor.save("outfile.pdf"); &lt;/pre&gt; @param stampId Identifier of stamp which should be deleted. 
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createLocalLink(java.awt.Rectangle,int,int)">
       
        <p>Creates a local link in PDF document.</p> @param rect The rectangle for active click. @param desPage The destination page. @param originalPage The number of original page where rectangle bound with local link will be created.
      
      <param name="java.awt.Rectangle"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.replaceText(String,String,int)">&lt;p&gt; Replaces text in the PDF file and sets font size. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to replace text and set font size for the new text. // open document Document doc = new Document(inFile); // Create font and mark it to be embedded com.aspose.pdf.Font font = FontRepository.FindFont("Courier New"); font.isEmbedded ( true); // create PdfContentEditor object to edit text PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf(doc); // change text with specified font editor.replaceText("hello world", "hi world", 14); // save document doc.save(outFile); &lt;/pre&gt; @param srcString String to be replaced. @param destString Replacing string. @param fontSize Font size. @return Returns true if replacement was made. 
      <param name="String"/>
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.getStamps(int)">
       
        <p>Returns array of stamps on the page.</p> @param pageNumber Page number where stamps will be searched. @return Array of stamps.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.close">
       
        <p>Closes opened document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.#ctor">
       
        <p>The constructor of the PdfContentEditor object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.#ctor(IDocument)">
      / * 
        <p>/ * Binds a Pdf document for editing. / *</p> / * / * @param pdf / * Pdf document which came from Aspose.Pdf.Generator. /
      
      <param name="IDocument"/>
    </member>
    <member name="F:com.aspose.pdf.facades.PdfContentEditor.DOCUMENT_OPEN">
       
        <p>A document event type. Opens a document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfContentEditor.DOCUMENT_CLOSE">
       
        <p>A document event type. Closes a document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfContentEditor.DOCUMENT_WILL_SAVE">
       
        <p>A document event type. Excute a action before saving.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfContentEditor.DOCUMENT_SAVED">
       
        <p>A document event type. Excute a action after saving.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfContentEditor.DOCUMENT_WILL_PRINT">
       
        <p>A document event type. Excute a action before printing.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfContentEditor.DOCUMENT_PRINTED">
       
        <p>A document event type. Excute a action after printing.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.PdfConverter">
       
        <p>Represents a class to convert a pdf file's each page to images, supporting BMP, JPEG, PNG and TIFF now. Supported content in pdfs: pictures, form, comment.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getCoordinateType">
       
        <p>Gets the page coordinate type (Media/Crop boxes). CropBox value is used by default.</p> @return PageCoordinateType element @see PageCoordinateType
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.setCoordinateType(int)">
       
        <p>Sets the page coordinate type (Media/Crop boxes). CropBox value is used by default.</p> @param value PageCoordinateType element @see PageCoordinateType
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.isShowHiddenAreas">
       
        <p>Gets flag that controls visibility of hidden areas on the page. Method is Deprecated.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.setShowHiddenAreas(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getRenderingOptions">
       
        <p>Gets rendering options.</p> @return rendering options.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.setRenderingOptions(RenderingOptions)">
       
        <p>Sets rendering options.</p> @param value rendering options.
      
      <param name="RenderingOptions"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getFormPresentationMode">
       
        <p>Gets form presentation mode.</p> @return form presentation mode. @see FormPresentationMode
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.setFormPresentationMode(int)">
       
        <p>Sets form presentation mode.</p> @param value form presentation mode. @see FormPresentationMode
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getResolution">
       
        <p>Gets resolution during converting. The higher resolution, the slower converting speed. The default value is 150.</p> @return Resolution element
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.setResolution(Resolution)">
       
        <p>Sets resolution during converting. The higher resolution, the slower converting speed. The default value is 150.</p> @param value Resolution element
      
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getStartPage">
       
        <p>Gets start position which you want to convert. The minimal value is 1.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.setStartPage(int)">
       
        <p>Sets start position which you want to convert. The minimal value is 1. 
          <br/> use setEndPage(int) before setStartPage(int)
        </p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getEndPage">
       
        <p>Gets end position which you want to convert.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.setEndPage(int)">
       
        <p>Sets end position which you want to convert. 
          <br/> use setEndPage(int) before setStartPage(int)
        </p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.setRangeOfPages(int,int)">
       
        <p>Sets range of pages between of which you want to convert.</p> @param startPage int value @param EndPage int value
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getPassword">
       
        <p>Gets document OwnerPassword.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.setPassword(String)">
       
        <p>Sets document OwnerPassword.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getUserPassword">
       
        <p>Gets document UserPassword.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.setUserPassword(String)">
       
        <p>Sets document UserPassword.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getPageCount">
       
        <p>Gets the page count.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.doConvert">&lt;p&gt; Do some initial works for converting a pdf document to images. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfConverter converter = new PdfConverter(); converter.bindPdf("D:\\Test\\test.pdf"); converter.doConvert(); String prefix = "D:\\Test\\"; String suffix = ".jpg"; int imageCount = 1; while (converter.hasNextImage()) { converter.getNextImage(prefix + imageCount + suffix); imageCount++; } &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(String)">&lt;p&gt; Converts each pages of a pdf document to images and saves images to a single TIFF file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfConverter converter = new PdfConverter(); converter.bindPdf(@"D:\Test\test.pdf"); converter.doConvert(); converter.saveAsTIFF(@"D:\Test\test.tiff"); &lt;/pre&gt; @param outputFile The file to save the TIFF image. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(String,int)">&lt;p&gt; Converts each pages of a pdf document to images and saves images to a single TIFF file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfConverter converter = new PdfConverter(); converter.bindPdf(@"D:\Test\test.pdf"); converter.doConvert(); converter.saveAsTIFF(@"D:\Test\test.tiff"); &lt;/pre&gt; @param outputFile The output file. @param compressionType Type of the compression. @see CompressionType 
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(String,int,int)">
       
        <p>Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF file.</p> @param outputFile The file name to save the TIFF image @param imageWidth The image width, the unit is pixel. @param imageHeight The image height, the unit is pixel.
      
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(String,PageSize)">
       
        <p>Converts each pages of a pdf document to images with page size and saves images to a single TIFF file.</p> @param outputFile The file name to save the TIFF image @param pageSize The page size of the image.
      
      <param name="String"/>
      <param name="PageSize"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(String,PageSize,TiffSettings)">
       
        <p>Converts each pages of a pdf document to images with page size and saves images to a single TIFF file.</p> @param outputFile The file name to save the TIFF image @param pageSize The page size of the image. @param settings Settings object that defines TIFF parameters.
      
      <param name="String"/>
      <param name="PageSize"/>
      <param name="TiffSettings"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(String,int,int,int)">
       
        <p>Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF file.</p> @param outputFile The file name to save the TIFF image @param imageWidth The image width, the unit is pixel. @param imageHeight The image height, the unit is pixel. @param compressionType Type of the compression. @see CompressionType
      
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(String,int,int,TiffSettings)">
       
        <p>Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF file.</p> @param outputFile The file name to save the TIFF image @param imageWidth The image width, the unit is pixel. @param imageHeight The image height, the unit is pixel. @param settings Settings object that defines TIFF parameters.
      
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
      <param name="TiffSettings"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(String,int,int,TiffSettings,IIndexBitmapConverter)">
       
        <p>Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF file.</p> @param outputFile The file name to save the TIFF image @param imageWidth The image width, the unit is pixel. @param imageHeight The image height, the unit is pixel. @param settings Settings object that defines TIFF parameters. @param converter External converter
      
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
      <param name="TiffSettings"/>
      <param name="IIndexBitmapConverter"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFFClassF(String,int,int)">&lt;p&gt; Converts each pages of a pdf document to images and save images to a single TIFF ClassF file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfConverter converter = new PdfConverter(); converter.bindPdf(@"D:\Test\test.pdf"); converter.doConvert(); converter.saveAsTIFFClassF(@"D:\Test\test.tiff",204,196); &lt;/pre&gt; @param outputFile The stream to save the TIFF image. @param imageWidth The image width, the unit is pixel. @param imageHeight The image height, the unit is pixel. 
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFFClassF(String,PageSize)">
       
        <p>Converts each pages of a pdf document to images and save images to a single TIFF ClassF file.</p> @param outputFile The stream to save the TIFF image. @param pageSize The page size of the image.
      
      <param name="String"/>
      <param name="PageSize"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFFClassF(OutputStream,int,int)">
       
        <p>Converts each pages of a pdf document to images and save images to a single TIFF ClassF stream.</p> @param outputStream The stream to save the TIFF image. @param imageWidth The image width, the unit is pixel. @param imageHeight The image height, the unit is pixel.
      
      <param name="OutputStream"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFFClassF(OutputStream,PageSize)">
       
        <p>Converts each pages of a pdf document to images and save images to a single TIFF ClassF stream.</p> @param outputStream The stream to save the TIFF image. @param pageSize The page size of the image.
      
      <param name="OutputStream"/>
      <param name="PageSize"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(OutputStream)">
       
        <p>Converts each pages of a pdf document to images and saves images to a single TIFF stream.</p> @param outputStream The stream to save the TIFF image.
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(OutputStream,int)">
       
        <p>Converts each pages of a pdf document to images and saves images to a single TIFF file.</p> @param outputStream The output stream. @param compressionType Type of the compression.
      
      <param name="OutputStream"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(OutputStream,PageSize)">
       
        <p>Converts each pages of a pdf document to images with page size and saves images to a single TIFF stream.</p> @param outputStream The stream to save the TIFF image. @param pageSize The page size of the image.
      
      <param name="OutputStream"/>
      <param name="PageSize"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(OutputStream,PageSize,TiffSettings)">
       
        <p>Converts each pages of a pdf document to images with page size and saves images to a single TIFF stream.</p> @param outputStream The stream to save the TIFF image. @param pageSize The page size of the image. @param settings Settings object that defines TIFF parameters.
      
      <param name="OutputStream"/>
      <param name="PageSize"/>
      <param name="TiffSettings"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(OutputStream,int,int)">
       
        <p>Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF stream.</p> @param outputStream The stream to save the TIFF image. @param imageWidth The image width, the unit is pixel. @param imageHeight The image height, the unit is pixel.
      
      <param name="OutputStream"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(OutputStream,int,int,int)">
       
        <p>Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF stream.</p> @param outputStream The stream to save the TIFF image. @param imageWidth The image width, the unit is pixel. @param imageHeight The image height, the unit is pixel. @param compressionType Type of the compression.
      
      <param name="OutputStream"/>
      <param name="int"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(OutputStream,int,int,TiffSettings)">
       
        <p>Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF stream.</p> @param outputStream The stream to save the TIFF image. @param imageWidth The image width, the unit is pixel. @param imageHeight The image height, the unit is pixel. @param settings Settings object that defines TIFF parameters.
      
      <param name="OutputStream"/>
      <param name="int"/>
      <param name="int"/>
      <param name="TiffSettings"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(OutputStream,int,int,TiffSettings,IIndexBitmapConverter)">
       
        <p>Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF stream.</p> @param outputStream The stream to save the TIFF image. @param imageWidth The image width, the unit is pixel. @param imageHeight The image height, the unit is pixel. @param settings Settings object that defines TIFF parameters. @param converter External converter
      
      <param name="OutputStream"/>
      <param name="int"/>
      <param name="int"/>
      <param name="TiffSettings"/>
      <param name="IIndexBitmapConverter"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.hasNextImage">
       
        <p>Indicates whether the pdf file has more images or not.</p> @return Can get more images or not, true if can, or false.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(String)">
       
        <p>Saves image to file with default image format - jpeg.</p> @param outputFile The file path and name to save the image.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(String,PageSize)">
       
        <p>Saves image to file with ith given page size and default image format - jpeg.</p> @param outputFile The file path and name to save the image. @param pageSize The page size of the image.
      
      <param name="String"/>
      <param name="PageSize"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.convertPageToPNGMemoryStream(Page)">
      For internal usage only @param page Internal object @return Internal object
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(String,ImageType)">&lt;p&gt; Saves image to file with the givin image format. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfConverter converter = new PdfConverter(); converter.bindPdf(@"D:\Test\test.pdf"); converter.DoConvert(); String prefix = @"D:\Test\"; String suffix = ".png"; int imageCount = 1; while (converter.HasNextImage()) { converter.getNextImage(prefix + imageCount + suffix, ImageFormat.Png); imageCount++; } &lt;/pre&gt; @param outputFile The file path and name to save the image. @param format The format of the image. 
      <param name="String"/>
      <param name="ImageType"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(String,PageSize,ImageType)">
       
        <p>Saves image to file with given page size and image format.</p> @param outputFile The file path and name to save the image. @param pageSize The page size of the image. @param format The format of the image.
      
      <param name="String"/>
      <param name="PageSize"/>
      <param name="ImageType"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(OutputStream)">
       
        <p>Saves image to stream with default image format - jpeg.</p> @param outputStream The stream to save the image.
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(OutputStream,PageSize)">
       
        <p>Saves image to stream with given page size.</p> @param outputStream The stream to save the image. @param pageSize The page size of the image.
      
      <param name="OutputStream"/>
      <param name="PageSize"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(OutputStream,ImageType)">
       
        <p>Saves image to stream with given image format.</p> @param outputStream The stream to save the image. @param format The format of the image.
      
      <param name="OutputStream"/>
      <param name="ImageType"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(OutputStream,PageSize,ImageType)">
       
        <p>Saves image to stream with given page size.</p> @param outputStream The stream to save the image. @param pageSize The page size of the image. @param format The format of the image.
      
      <param name="OutputStream"/>
      <param name="PageSize"/>
      <param name="ImageType"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(String,ImageType,int,int,int)">&lt;p&gt; Saves image to file with the given image format, dimensions and quality. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfConverter converter = new PdfConverter(); converter.bindPdf(@"D:\Test\test.pdf"); converter.doConvert(); String prefix = @"D:\Test\"; String suffix = ".jpg"; int imageCount = 1; while (converter.HasNextImage()) { converter.getNextImage(prefix + imageCount + suffix, ImageFormat.Jpeg, 800, 1000, 50); imageCount++; } &lt;/pre&gt; @param outputFile The file path and name to save the image. @param format The format of the image. @param imageWidth The image width, the unit is pixel. @param imageHeight The image height, the unit is pixel. @param quality The Jpeg file's quality (0~100), 0 is lowest and 100 is highest 
      <param name="String"/>
      <param name="ImageType"/>
      <param name="int"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(OutputStream,ImageType,int,int,int)">
       
        <p>Saves image to stream with the givin image format, dimensions and quality.</p> @param outputStream The stream to save the image. @param format The format of the image. @param imageWidth The image width, the unit is pixel. @param imageHeight The image height, the unit is pixel. @param quality The Jpeg file's quality (0~100), 0 is lowest and 100 is highest
      
      <param name="OutputStream"/>
      <param name="ImageType"/>
      <param name="int"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(String,ImageType,double,double,int)">&lt;p&gt; Saves image to file with the givin image format, image size, and quality. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfConverter converter = new PdfConverter(); converter.bindPdf(@"D:\Test\test.pdf"); converter.doConvert(); String prefix = @"D:\Test\"; String suffix = ".jpg"; int imageCount = 1; float pixelX=800f; float pixelY=600f; while (converter.HasNextImage()) { converter.getNextImage(prefix + imageCount + suffix, ImageFormat.Jpeg, pixelX, pixelY, 50); imageCount++; } &lt;/pre&gt; @param outputFile The file path and name to save the image. @param format The format of the image. @param imageWidth The image width, the unit is pixels. @param imageHeight The image height, the unit is pixels.. @param quality The Jpeg file's quality (0~100), 0 is lowest and 100 is highest 
      <param name="String"/>
      <param name="ImageType"/>
      <param name="double"/>
      <param name="double"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(OutputStream,ImageType,double,double,int)">
       
        <p>Saves image to stream with the givin image format, size and quality.</p> @param outputStream The stream to save the image. @param format The format of the image. @param imageWidth The image width, the unit is pixel. @param imageHeight The image height, the unit is pixel. @param quality The Jpeg file's quality (0~100), 0 is lowest and 100 is highest
      
      <param name="OutputStream"/>
      <param name="ImageType"/>
      <param name="double"/>
      <param name="double"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.bindPdf(String)">
       
        <p>Binds a Pdf file for converting.</p> @param inputFile The pdf file.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.bindPdf(InputStream)">
       
        <p>Binds a Pdf Stream for convert.</p> @param inputStream The pdf Stream.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.close">
       
        <p>Close the instance of PdfConverter and release the resources.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFFClassF(String)">&lt;p&gt; Converts each pages of a pdf document to images and save images to a single TIFF ClassF file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfConverter converter = new PdfConverter(); converter.bindPdf("D:\\Test\\test.pdf"); converter.doConvert(); converter.saveAsTIFFClassF("D:\\Test\\test.tiff"); &lt;/pre&gt; @param outputFile The stream to save the TIFF image. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFFClassF(OutputStream)">
       
        <p>Converts each pages of a pdf document to images and save images to a single TIFF ClassF stream.</p> @param outputStream The stream to save the TIFF image.
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(String,TiffSettings)">
       
        <p>Converts each pages of a pdf document to images with and saves images to a single TIFF file.</p> @param outputFile The file name to save the TIFF image @param settings Settings.
      
      <param name="String"/>
      <param name="TiffSettings"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(String,TiffSettings,IIndexBitmapConverter)">
       
        <p>Converts each pages of a pdf document to images with and saves images to a single TIFF file.</p> @param outputFile The file name to save the TIFF image @param settings Settings. @param converter External converter
      
      <param name="String"/>
      <param name="TiffSettings"/>
      <param name="IIndexBitmapConverter"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(OutputStream,TiffSettings)">
       
        <p>Converts each pages of a pdf document to images and saves images to a single TIFF stream.</p> @param outputStream The stream to save the TIFF image. @param settings Settings object that defines TIFF parameters.
      
      <param name="OutputStream"/>
      <param name="TiffSettings"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(OutputStream,TiffSettings,IIndexBitmapConverter)">
       
        <p>Converts each pages of a pdf document to images and saves images to a single TIFF stream.</p> @param outputStream The stream to save the TIFF image. @param settings Settings object that defines TIFF parameters. @param converter External converter
      
      <param name="OutputStream"/>
      <param name="TiffSettings"/>
      <param name="IIndexBitmapConverter"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(String,ImageType,int,int)">&lt;p&gt; Saves image to file with the given image format and dimensions. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfConverter converter = new PdfConverter(); converter.bindPdf("D:\\Test\\test.pdf"); converter.DoConvert(); String prefix = "D:\\Test\\"; String suffix = ".jpg"; int imageCount = 1; while (converter.hasNextImage()) { converter.getNextImage(prefix + imageCount + suffix, ImageFormat.Jpeg, 800, 1000); imageCount++; } &lt;/pre&gt; @param outputFile The file path and name to save the image. @param format The format of the image. @param imageWidth The image width, the unit is pixel. @param imageHeight The image height, the unit is pixel. 
      <param name="String"/>
      <param name="ImageType"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(OutputStream,ImageType,int,int)">
       
        <p>Saves image to stream with the givin image format, size and quality.</p> @param outputStream The stream to save the image. @param format The format of the image. @param imageWidth The image width, the unit is pixel. @param imageHeight The image height, the unit is pixel.
      
      <param name="OutputStream"/>
      <param name="ImageType"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(OutputStream,ImageType,int)">
       
        <p>Saves image to stream with given image format and quality.</p> @param outputStream The stream to save the image. @param format The format of the image. @param quality The Jpeg file's quality (0~100), 0 is lowest and 100 is highest @see ImageType
      
      <param name="OutputStream"/>
      <param name="ImageType"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(OutputStream,PageSize,ImageType,int)">
       
        <p>Saves image to stream with given page size, image format and quality.</p> @param outputStream The stream to save the image. @param format The format of the image. @param pageSize The page size of the image. @param quality The Jpeg file's quality (0~100), 0 is lowest and 100 is highest
      
      <param name="OutputStream"/>
      <param name="PageSize"/>
      <param name="ImageType"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(String,ImageType,int)">
       
        <p>Saves image to file with given image format and quality.</p> @param outputFile The file path and name to save the image. @param format The format of the image. @param quality The Jpeg file's quality (0~100), 0 is lowest and 100 is highest
      
      <param name="String"/>
      <param name="ImageType"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(String,PageSize,ImageType,int)">
       
        <p>Saves image to file with given page size, image format and quality.</p> @param outputFile The file path and name to save the image. @param pageSize The page size of the image. @param format The format of the image. @param quality The Jpeg file's quality (0~100), 0 is lowest and 100 is highest
      
      <param name="String"/>
      <param name="PageSize"/>
      <param name="ImageType"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.dispose">
       
        <p>Close the instance of PdfConverter and release the resources.</p> This method is obsolete, use close() instead.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.mergeImages(java.util.List&lt;java.io.InputStream&gt;,int,int,Integer,Integer)">
       
        <p>Merges list of image streams as one image stream. Png/jpg/tiff outputs formats are supported, in case of using non supported format output stream encoded as Jpeg by default.</p> @return Image stream encoded as output image format. @param inputImagesStreams The list of image streams to merge. @param outputImageFormat Image output format for merged stream. @param mergeMode Merge mode. Used for Png/Jpg formats. @param horizontal Horizontal ratio to set canvas width for output image stream. Used for Png/Jpg formats with ImageMergeMode.Center only. @param vertical Vertical ratio to set canvas height for output image stream. Used for Png/Jpg formats with ImageMergeMode.Center only.
      
      <param name="java.util.List&lt;java.io.InputStream&gt;"/>
      <param name="int"/>
      <param name="int"/>
      <param name="Integer"/>
      <param name="Integer"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.mergeImagesAsTiff(java.util.List&lt;java.io.InputStream&gt;)">
       
        <p>Merges list of tiff streams as one multiple frames tiff stream.</p> @return Multiple frames tiff stream. @param inputImagesStreams The list of tiff streams.
      
      <param name="java.util.List&lt;java.io.InputStream&gt;"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.#ctor">
       
        <p>Initializes new {@code PdfConverter} object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.#ctor(IDocument)">
       
        <p>Initializes new {@code PdfConverter} object on base of the {@code document}.</p> @param document Pdf document.
      
      <param name="IDocument"/>
    </member>
    <member name="T:com.aspose.pdf.facades.PdfExtractor">
       
        <p>Class for extracting images and text from PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getStartPage">
       
        <p>Pdf.Engine object representing PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.setStartPage(int)">&lt;p&gt; Sets start page in the page range where extracting operation will be performed. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfExtractor ext = new PdfExtractor(); ext.bindBdf("sample.pdf"); ext.setStartPage(2); ext.setEndPage(5); ext.extractText(); &lt;/pre&gt; @param value start page in the page range. 
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getEndPage">&lt;p&gt; Gets end page in the page range where extracting operation will be performed. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfExtractor ext = new PdfExtractor(); ext.bindBdf("sample.pdf"); ext.setStartPage(2); ext.setEndPage(3); ext.extractText(); &lt;/pre&gt; @return end page.</member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.setEndPage(int)">&lt;p&gt; Sets end page in the page range where extracting operation will be performed. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfExtractor ext = new PdfExtractor(); ext.bindBdf("sample.pdf"); ext.setStartPage(2); ext.setEndPage(3); ext.extractText(); &lt;/pre&gt; @param value end page. 
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getExtractTextMode">&lt;p&gt; Gets the mode for extract text's result. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstratres the {@code ExtractTextMode} property usage in text extraction scenario. PdfExtractor extractor = new PdfExtractor(); extractor.bindPdf(@"D:\Text\text.pdf"); extractor.setExtractTextMode(1); extractor.extractText(); extractor.getText(@"D:\Text\text.txt"); &lt;/pre&gt; Value: 0 is pure text mode and 1 is raw ordering mode. Default is 0. @return extract text's result.</member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.setExtractTextMode(int)">&lt;p&gt; Sets the mode for extract text's result. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstratres the {@code ExtractTextMode} property usage in text extraction scenario. PdfExtractor extractor = new PdfExtractor(); extractor.bindPdf(@"D:\Text\text.pdf"); extractor.setExtractTextMode(1); extractor.extractText(); extractor.getText(@"D:\Text\text.txt"); &lt;/pre&gt; Value: 0 is pure text mode and 1 is raw ordering mode. Default is 0. @param value extract text's result. 
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getTextSearchOptions">
       
        <p>Gets text search options.</p> @return text search options.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.setTextSearchOptions(TextSearchOptions)">
       
        <p>Sets text search options.</p> @param value text search options.
      
      <param name="TextSearchOptions"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getExtractImageMode">&lt;p&gt; Sets the mode for extract images process. &lt;/p&gt; &lt;hr&gt; Default value is ExtractImageMode.DefinedInResources that extracts all images defined in resources. To extract actually shown images ExtractImageMode.ActuallyUsed mode should be used. @return ExtractImageMode value @see ExtractImageMode</member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.setExtractImageMode(int)">&lt;p&gt; Sets the mode for extract images process. &lt;/p&gt; &lt;hr&gt; Default value is ExtractImageMode.DefinedInResources that extracts all images defined in resources. To extract actually shown images ExtractImageMode.ActuallyUsed mode should be used. @param value ExtractImageMode value @see ExtractImageMode 
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.isBidi">
       
        <p>Is true when text has hebriew or arabic symbols. This case must be specially considered because string functions change their behaviour and start process text from right to left (except numbers and other non text chars).</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.extractText">&lt;p&gt; Extracts text from a Pdf document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; First example demonstratres how to extract all the text from PDF file. PdfExtractor extractor = new PdfExtractor(); extractor.bindPdf("D:\Text\text.pdf"); extractor.extractText(); extractor.getText("D:\Text\text.txt"); &lt;/pre&gt; Second example demonstratres how to extract each page's text into one txt file. &lt;pre&gt; PdfExtractor extractor = new PdfExtractor(); extractor.bindPdf(TestPath + "Aspose.Pdf.Kit.Pdf"); extractor.extractText(); String prefix = TestPath + "Aspose.Pdf.Kit"; String suffix = ".txt"; int pageCount = 1; while (extractor.hasNextPageText()) { extractor.getNextPageText(prefix + pageCount + suffix); pageCount++; } &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.extractText(java.nio.charset.Charset)">&lt;p&gt; Extracts text from a Pdf document using specified encoding. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; First example demonstrates how to extract all the text from PDF file. PdfExtractor extractor = new PdfExtractor(); extractor.bindPdf("D:\\Text\\text.pdf"); extractor.extractText(Encoding.Unicode); extractor.getText("D:\\Text\\text.txt"); &lt;/pre&gt; Second example demonstrates how to extract each page's text into one txt file. &lt;pre&gt; PdfExtractor extractor = new PdfExtractor(); extractor.bindPdf(TestPath + "Aspose.Pdf.Kit.Pdf"); extractor.extractText(java.nio.charset.Charset.forName("UTF-8")); String prefix = TestPath + "Aspose.Pdf.Kit"; String suffix = ".txt"; int pageCount = 1; while (extractor.hasNextPageText()) { extractor.getNextPageText(prefix + pageCount + suffix); pageCount++; } &lt;/pre&gt; @param encoding The encoding of the extracted text. 
      <param name="java.nio.charset.Charset"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.extractTextInternal(TextEncodingInternal)">
      For Internal usage only @param encoding The encoding of the extracted text.
      <param name="TextEncodingInternal"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getText(String)">
       
        <p>Saves text to file. see also:{@code ExtractText}</p> @param outputFile The file path and name to save the text.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getText(OutputStream)">
       
        <p>Saves text to stream. see also:{@code ExtractText}</p> @param outputStream The stream to save the text.
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.bindPdf(String)">&lt;p&gt; Bind input PDF file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfExtractor ext = new PdfExtractor(); ext.bindPdf("sample.pdf"); &lt;/pre&gt; @param inputFile PDF fiel to bind 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.bindPdf(InputStream)">&lt;p&gt; Binds PDF document from stream. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfExtractor ext = new PdfExtractor(); InputStream stream = new FileInputStream("sample.pdf"); ext.bindPdf(stream); &lt;/pre&gt; @param inputStream Stream containing PDF document data 
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.extractImage">&lt;p&gt; Extract images from PDF file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfExtractor extractor = new PdfExtractor(); extractor.bindPdf("sample.pdf"); extractor.extractImage(); int i = 1; while (extractor.HasNextImage()) { extractor.getNextImage("image-" + i +".pdf"); } &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.hasNextImage">&lt;p&gt; Checks if more images are accessible in PDF document. Note: ExtractImage must be called before using of this method. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfExtractor extractor = new PdfExtractor(); extractor.bindPdf("sample.pdf"); extractor.extractImage(); int i = 1; while (extractor.hasNextImage()) { extractor.getNextImage("image-" + i +".pdf"); } &lt;/pre&gt; @return Trues if more images are accessible</member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getNextImage(String)">&lt;p&gt; Retreives next image from PDF document. Note: ExtractImage must be called before using of this method. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfExtractor extractor = new PdfExtractor(); extractor.bindPdf("sample.pdf"); extractor.extractImage(); int i = 1; while (extractor.hasNextImage()) { extractor.getNextImage("image-" + i +".pdf"); } &lt;/pre&gt; @return True is image is successfully extracted @param outputFile File where image will be stored 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getNextImage(String,ImageType)">
       
        <p>Retreives next image from PDF document with given image format. Note: ExtractImage must be called before using of this method.</p> @return True is image is successfully extracted @param outputFile File where image will be stored @param format ImageType element
      
      <param name="String"/>
      <param name="ImageType"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getNextImage(OutputStream,ImageType)">
       
        <p>Retreive next image from PDF file and stores it into stream with given image format.</p> @return True in case the image is successfully extracted. @param outputStream Stream where image data will be saved @param format The format of the image.
      
      <param name="OutputStream"/>
      <param name="ImageType"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getNextImage(OutputStream)">
       
        <p>Retreive next image from PDF file and stores it into stream.</p> @return True in case the image is successfully extracted. @param outputStream Stream where image data will be saved
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getAttachNames">&lt;p&gt; Returns list of attachments in PDF file. Note: ExtractAttachments must be called befor using this method. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Example demonstrates how to extract attachment names form PDF file. PdfExtractor extractor = new PdfExtractor(); extractor.bindPdf(TestSettings.GetInputFile("sample.pdf")); extractor.ExtractAttachment(); List attachments = extractor.getAttachNames(); for (String name : {@code (Iterable&lt;String&gt;)}attachments) System.out.println(name); &lt;/pre&gt; @return List of attachments</member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.extractAttachment">
      Extracts attachments from a Pdf document.
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.extractAttachment(String)">
       
        <p>Extracts attachment to PDF file by attachment name.</p> @param attachmentFileName Name of attachment to extract
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getAttachment(String)">
       
        <p>Stores attachment into file.</p> @param outputPath Directory path where attachment(s) will be stored. Null or empty string means attachment(s) will be placed in the application directory.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.hasNextPageText">&lt;p&gt; Indicates that whether can get more texts or not. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstratres the {@code HasNextPageText} property usage in text extraction scenario. PdfExtractor extractor = new PdfExtractor(); extractor.bindPdf(TestPath + "Aspose.Pdf.Kit.Pdf"); extractor.extractText(Encoding.Unicode); String prefix = TestPath + "Aspose.Pdf.Kit"; String suffix = ".txt"; int pageCount = 1; while (extractor.hasNextPageText()) { extractor.getNextPageText(prefix + pageCount + suffix); pageCount++; } &lt;/pre&gt; @return Can get more texts or not, true is can, or false.</member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getNextPageText(String)">&lt;p&gt; Saves one page's text to file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstratres the GetNextPageText method usage in text extraction scenario. PdfExtractor extractor = new PdfExtractor(); extractor.bindPdf(TestPath + @"Aspose.Pdf.Kit.Pdf"); extractor.extractText(Encoding.Unicode); String prefix = TestPath + @"Aspose.Pdf.Kit"; String suffix = ".txt"; int pageCount = 1; while (extractor.hasNextPageText()) { extractor.getNextPageText(prefix + pageCount + suffix); pageCount++; } &lt;/pre&gt; @param outputFile The file path and name to save the text. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getNextPageText(OutputStream)">&lt;p&gt; Saves one page's text to stream. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstratres the {@code GetNextPageText} method usage in text extraction scenario. PdfExtractor extractor = new PdfExtractor(); extractor.bindPdf(TestPath + @"Aspose.Pdf.Kit.Pdf"); extractor.extractText(Encoding.Unicode); String prefix = TestPath + "Aspose.Pdf.Kit"; String suffix = ".txt"; int pageCount = 1; while (extractor.hasNextPageText()) { FileInputStream fs = new FileInputStream(prefix + pageCount + suffix, FileMode.Create); extractor.getNextPageText(fs); fs.close(); pageCount++; } &lt;/pre&gt; @param outputStream The stream to save the text. 
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getText(OutputStream,boolean)">
       
        <p>Saves text to stream. see also:{@code ExtractText}</p> @param outputStream The stream to save the text. @param filterNotAscii If this parameter is true all Not ASCII simbols will be removed
      
      <param name="OutputStream"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getAttachment">&lt;p&gt; Saves all the attachment file to streams. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfExtractor extractor = new PdfExtractor(); extractor.bindPdf(path + "Attach.pdf"); extractor.extractAttachment(); IList names = extractor.getAttachNames(); ByteArrayOutputStream[] tempStreams = extractor.getAttachment(); for (int i=0; i&amp;lt;tempStreams.Length; i++) { string name = (string)names[i]; OutputStream fs = new FileOutputStream(path + name); fs.write(tempStreams[i].toByteArray()); fs.close(); } &lt;/pre&gt; @return The stream array of the attachment file in the pdf document.</member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getAttachmentInfo">
       
        <p>Gets the list of attachments.</p> @return Returns an List&lt;FileSpecificatio&gt;.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getResolution">
       
        <p>Gets resolution for extracted images. Default value is 150. Images which have greater resolution value are more clear. However increasing resolution value results in increasing time and memory needed to extract images. Usually to get clear image it's enough to set resolution to 150 or 300.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.setResolution(int)">
       
        <p>Set resolution for extracted images. Default value is 150. Images which have greater resolution value are more clear. However increasing resolution value results in increasing time and memory needed to extract images. Usually to get clear image it's enough to set resolution to 150 or 300.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getPassword">
       
        <p>Gets input file's password.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.setPassword(String)">
       
        <p>Sets input file's password.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.extractMarkedContentAsImages(Page,String)">&lt;p&gt; Gets all the Marked Content containers as separate images. &lt;/p&gt; Every Marked Content will be saved as image with png format named with {@code MCID_&lt;ID number of block for the page&gt;.png} @param page Page for process. @param path The path where images will be saved. 
      <param name="Page"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.#ctor">
      / * 
        <p>/ * Binds a Pdf document for editing. / *</p> / * / * @param pdf / * Pdf document which came from Aspose.Pdf.Generator. /
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.#ctor(IDocument)">
       
        <p>Initializes new {@code PdfExtractor} object on base of the {@code document}.</p> @param document Pdf document.
      
      <param name="IDocument"/>
    </member>
    <member name="T:com.aspose.pdf.facades.PdfFileEditor">
       
        <p>Implements operations with PDF file: concatenation, splitting, extracting pages, making booklet, etc.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.getCorruptedItems">&lt;p&gt; Array of encountered problems when concatenation was performed. For every corrupted document from passed to Concatenate() function new CorruptedItem entry is created. This property may be used only when CorruptedFileAction is ConcatenateIgnoringCorrupted. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; //concatenate documents and show information about corrupted documents PdfFileEditor pfe = new PdfFileEditor(); pfe.setCorruptedFileAction(PdfFileEditor.ConcatenateCorruptedFileAction.ConcatenateIgnoringCorrupted); {@code if (pfe.getCorruptedItems().length &gt;0)} { for(PdfFileEditor.CorruptedItem item : pfe.getCorruptedItems()) { System.out.println(item.getIndex()+ " reason: " + item.getException()); } } &lt;/pre&gt; @return array of PdfFileEditor.CorruptedItem</member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.getCorruptedFileAction">
       
        <p>This property defines behavior when concatenating process met corrupted file. Possible values are: StopWithError and ConcatenateIgnoringCorrupted.</p> @return ConcatenateCorruptedFileAction element @see ConcatenateCorruptedFileAction
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.setCorruptedFileAction(int)">
       
        <p>This property defines behavior when concatenating process met corrupted file. Possible values are: StopWithError and ConcatenateIgnoringCorrupted.</p> @param value int value @see ConcatenateCorruptedFileAction
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.getOwnerPassword">
       
        <p>Gets owner's password if the source input Pdf file is encrypted. This property is not implemented yet.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.setOwnerPassword(String)">
       
        <p>Sets owner's password if the source input Pdf file is encrypted. This property is not implemented yet.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.getAllowConcatenateExceptions">&lt;p&gt; If set to true, exceptions are thrown if error occured. Else excetion are not thrown and methods return false if failed. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); pfe.setAllowConcatenatedException (true); &lt;/pre&gt; @return boolean value</member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.setAllowConcatenateExceptions(boolean)">&lt;p&gt; If set to true, exceptions are thrown if error occured. Else excetion are not thrown and methods return false if failed. &lt;/p&gt; @param value boolean value &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); pfe.setAllowConcatenatedException (true); &lt;/pre&gt; 
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.setConvertTo(int)">
       
        <p>Sets PDF file format. Result file will be saved in specified file format. If this property is not specified then file will be save in default PDF format without conversion.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.getCloseConcatenatedStreams">
      If set to true, streams are closed after operation. @return boolean value
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.setCloseConcatenatedStreams(boolean)">&lt;p&gt; If set to true, streams are closed after operation. &lt;/p&gt; @param value boolean value &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); pfe.setCloseConcatenatedStreams (true); &lt;/pre&gt; 
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.getUniqueSuffix">
       
        <p>Get format of the suffix which is added to field name to make it unique when forms are concatenated. This string must contain %NUM% substring which will be replaced with numbers. For example if UniqueSuffix = "ABC%NUM%" then for field "fieldName" names will be: fieldNameABC1, fieldNameABC2, fieldNameABC3 etc.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.setUniqueSuffix(String)">&lt;p&gt; Set format of the suffix which is added to field name to make it unique when forms are concatenated. This string must contain %NUM% substring which will be replaced with numbers. For example if UniqueSuffix = "ABC%NUM%" then for field "fieldName" names will be: fieldNameABC1, fieldNameABC2, fieldNameABC3 etc. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor ed = new PdfFileEditor(); ed.setUniqueSuffix ( "_%NUM%"); &lt;/pre&gt; @param value String object 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.getKeepFieldsUnique">
       
        <p>If true then field names will be made unique when forms are concatenated. Suffixes will be added to field names, suffix template may be specified in UniqueSuffix property.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.setKeepFieldsUnique(boolean)">
       
        <p>If true then field names will be made unique when forms are concatenated. Suffixes will be added to field names, suffix template may be specified in UniqueSuffix property.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.getRemoveSignatures">
       
        <p>If true, all signatures will be removed from fields (fields will remain); otherwise, you can get invalid signatures.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.setRemoveSignatures(boolean)">
       
        <p>If true, all signatures will be removed from fields (fields will remain); otherwise, you can get invalid signatures.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.concatenate(String,String,String)">&lt;p&gt; Concatentates two files. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor fileEditor = new PdfFileEditor(); fileEditor.concatenate("file1.pdf", "file2.pdf", "outfile.pdf"); &lt;/pre&gt; @return True if operation was succeeded. @param firstInputFile First file to concatenate. @param secInputFile Second file to concatenate. @param outputFile Output file. 
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.concatenate(InputStream,InputStream,OutputStream)">&lt;p&gt; Concatenates two files. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor fileEditor = new PdfFileEditor(); InputStream stream1 = new FileInputStream("file1.pdf"); InputStream stream2 = new FileInputStream("file2.pdf"); OutputStream outstream = new FileOutputStream("outfile.pdf"); fileEditor.concatenate(stream1, stream2, outstream); &lt;/pre&gt; @return True if operation was succeeded. @param firstInputStream Stream of first file. @param secInputStream Stream of second file. @param outputStream Stream where result file will be stored. 
      <param name="InputStream"/>
      <param name="InputStream"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.concatenate(IDocument[],IDocument)">
       
        <p>Concatenates documents.</p> @return True if concatenation is successful. @param src Array of source documents. @param dest Destination document.
      
      <param name="IDocument[]"/>
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.concatenate(String[],String)">&lt;p&gt; Concatenates files into one file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); pfe.concatenate(new String[] { "src1.pdf", "src2.pdf" }, "dest.pdf"); &lt;/pre&gt; @return True if operation was succeeded. @param inputFiles Array of files to concatenate. @param outputFile Name of output file. 
      <param name="String[]"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.concatenate(InputStream[],OutputStream)">&lt;p&gt; Concatenates files &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor fileEditor = new PdfFileEditor(); InputStream stream1 = new FileInputStream("file1.pdf"); InputStream stream2 = new FileInputStream("file2.pdf"); OutputStream outstream = new FileOutputStream("outfile.pdf"); fileEditor.concatenate(new Stream[] { stream1, stream2 } , outstream); &lt;/pre&gt; @return True if operation was succeeded. @param inputStream Array of streams to be concatenated. @param outputStream Stream where result file will be stored. 
      <param name="InputStream[]"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.concatenate(String,String,String,String)">&lt;p&gt; Merges two Pdf documents into a new Pdf document with pages in alternate ways and fill the blank places with blank pages. e.g.: document1 has 5 pages: p1, p2, p3, p4, p5. document2 has 3 pages: p1', p2', p3'. Merging the two Pdf document will produce the result document with pages:p1, p1', p2, p2', p3, p3', p4, blankpage, p5, blankpage. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); pfe.concatenate("src1.pdf", "src2.pdf", "blank.pdf", "dest.pdf"); &lt;/pre&gt; @return True if operation was succeeded. @param firstInputFile First file. @param secInputFile Second file. @param blankPageFile PDF file with blank page. @param outputFile Result file. 
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.concatenate(InputStream,InputStream,InputStream,OutputStream)">&lt;p&gt; Merges two Pdf documents into a new Pdf document with pages in alternate ways and fill the blank places with blank pages. e.g.: document1 has 5 pages: p1, p2, p3, p4, p5. document2 has 3 pages: p1', p2', p3'. Merging the two Pdf document will produce the result document with pages:p1, p1', p2, p2', p3, p3', p4, blankpage, p5, blankpage. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor fileEditor = new PdfFileEditor(); InputStream stream1 = new FileInputStream("file1.pdf"); InputStream stream2 = new FileInputStream("file2.pdf"); InputStream blank = new FileInputStream("blank.pdf"); OutputStream outstream = new FileOutputStream("outfile.pdf"); fileEditor.concatenate(new Stream[] { stream1, stream2, blank } , outstream); &lt;/pre&gt; @return True if operation was succeeded. @param firstInputStream The first Pdf Stream. @param secInputStream The second Pdf Stream. @param blankPageStream The Pdf Stream with blank page @param outputStream Output Pdf Stream. 
      <param name="InputStream"/>
      <param name="InputStream"/>
      <param name="InputStream"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.append(InputStream,InputStream[],int,int,OutputStream)">&lt;p&gt; Appends pages, which are chosen from array of documents in portStreams. The result document includes firstInputFile and all portStreams documents pages in the range startPage to endPage. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor fileEditor = new PdfFileEditor(); InputStream instream = new FileInputStream("input.pdf"); InputStream stream1 = new FileInputStream("file1.pdf"); InputStream stream2 = new FileInputStream("file2.pdf"); OtputStream outstream = new FileOutputStream("outfile.pdf"); fileEditor.append(instream, new InputStream[] { stream1, stream2}, 3, 5, outstream); &lt;/pre&gt; @return True for success, or false. @param inputStream Input Pdf stream. @param portStreams Documents to copy pages from. @param startPage Page starts in portStreams documents. @param endPage Page ends in portStreams documents . @param outputStream Output Pdf stream. 
      <param name="InputStream"/>
      <param name="InputStream[]"/>
      <param name="int"/>
      <param name="int"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.append(String,String[],int,int,String)">&lt;p&gt; Appends pages, which are chosen from portFiles documents. The result document includes firstInputFile and all portFiles documents pages in the range startPage to endPage. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor fileEditor = new PdfFileEditor(); fileEditor.append("input.pdf", new string[] { "file1.pdf", "file2.pdf"}, 3, 5, "outfile.pdf"); &lt;/pre&gt; @return True if operation was succeeded. @param inputFile Input Pdf file. @param portFiles Documents to copy pages from. @param startPage Page starts in portFiles documents. @param endPage Page ends in portFiles documents . @param outputFile Output Pdf document. 
      <param name="String"/>
      <param name="String[]"/>
      <param name="int"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.append(String,String,int,int,String)">&lt;p&gt; Appends pages, which are chosen from portFile within the range from startPage to endPage, in portFile at the end of firstInputFile. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor fileEditor = new PdfFileEditor(); fileEditor.append("input.pdf", "file1.pdf", 3, 5, "outfile.pdf"); &lt;/pre&gt; @return True if operation was succeeded. @param inputFile Input Pdf file. @param portFile Pages from Pdf file. @param startPage Page starts in portFile. @param endPage Page ends in portFile. @param outputFile Output Pdf document. 
      <param name="String"/>
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.append(InputStream,InputStream,int,int,OutputStream)">&lt;p&gt; Appends pages,which are chosen from portStream within the range from startPage to endPage, in portStream at the end of firstInputStream. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor fileEditor = new PdfFileEditor(); InputStream instream = new FileInputStream("input.pdf"); InputStream stream1 = new FileInputStream("file1.pdf"); OutputStream outstream = new FileOutputStream("outfile.pdf"); fileEditor.append(instream, stream1, 3, 5, outstream); &lt;/pre&gt; @return True for success, or false. @param inputStream Input file Stream. @param portStream Pages from Pdf file Stream. @param startPage Page starts in portFile Stream. @param endPage Page ends in portFile Stream. @param outputStream Output Pdf file Stream. 
      <param name="InputStream"/>
      <param name="InputStream"/>
      <param name="int"/>
      <param name="int"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.insert(String,int,String,int,int,String)">&lt;p&gt; Inserts pages from an other file into the Pdf file at a position. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); pfe.insert("file1.pdf", 1, "file2.pdf", 2, 6, "out.pdf"); &lt;/pre&gt; @return True for success, or false. @param inputFile Input Pdf file. @param insertLocation Position in input file. @param portFile The porting Pdf file. @param startPage Start position in portFile. @param endPage End position in portFile. @param outputFile Output Pdf file. 
      <param name="String"/>
      <param name="int"/>
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.insert(InputStream,int,InputStream,int,int,OutputStream)">&lt;p&gt; Inserts pages from an other file into the input Pdf file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); outstream sourceStream = new FileInputStream("file1.pdf"); outstream insertedStream = new FileInputStream("file2.pdf"); OutputStream outStream = new FileOutputStream("out.pdf"); pfe.insert(sourceStream, 1, insertedStream, 2, 6, outStream); &lt;/pre&gt; @return True for success, or false. @param inputStream Input Stream of Pdf file. @param insertLocation Insert position in input file. @param portStream Stream of Pdf file for pages. @param startPage From which page to start. @param endPage To which page to end. @param outputStream Output Stream. 
      <param name="InputStream"/>
      <param name="int"/>
      <param name="InputStream"/>
      <param name="int"/>
      <param name="int"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.insert(String,int,String,int[],String)">&lt;p&gt; Inserts pages from an other file into the input Pdf file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); outstream sourceStream = new FileInputStream("file1.pdf"); outstream insertedStream = new FileInputStream("file2.pdf"); OutputStream outStream = new FileInputStream("out.pdf"); pfe.insert(sourceStream, 1, insertedStream, 2, 6, outStream); &lt;/pre&gt; @return True for success, or false. @param inputFile Input Pdf file. @param insertLocation Insert position in input file. @param portFile Pages from the Pdf file. @param pageNumber The page number of the ported in portFile. @param outputFile Output Pdf file. 
      <param name="String"/>
      <param name="int"/>
      <param name="String"/>
      <param name="int[]"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.insert(InputStream,int,InputStream,int[],OutputStream)">&lt;p&gt; Inserts pages from an other file into the input Pdf file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); outstream sourceStream = new FileInputStream("file1.pdf"); outstream insertedStream = new FileInputStream("file2.pdf"); OutputStream outStream = new FileoutputStream("out.pdf"); pfe.Insert(sourceStream, 1, insertedStream, new int[] { 3, 4, 5}, outStream); &lt;/pre&gt; @return True if operation was succeeded. @param inputStream Input Stream of Pdf file. @param insertLocation Insert position in input file. @param portStream Stream of Pdf file for pages. @param pageNumber The page number of the ported in portFile. @param outputStream Output Stream. 
      <param name="InputStream"/>
      <param name="int"/>
      <param name="InputStream"/>
      <param name="int[]"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.delete(String,int[],String)">&lt;p&gt; Deletes pages specified by number array from input file, saves as a new Pdf file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); pfe.delete("input.pdf", new int[] { 2, 3 }, "out.pdf"); &lt;/pre&gt; @return True if operation was succeeded. @param inputFile Input file path. @param pageNumber Index of page out of the input file. @param outputFile Output file path. 
      <param name="String"/>
      <param name="int[]"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.delete(InputStream,int[],OutputStream)">&lt;p&gt; Deletes pages specified by number array from input file, saves as a new Pdf file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); InputStream intputStream = new FileInputStream("input.pdf"); OutputStream outputStream = new FileInputStream("output.pdf"); pfe.Delete(inputStream, new int[] { 2, 3 }, outputStream); &lt;/pre&gt; @return True for success, or false. @param inputStream Input file Stream. @param pageNumber Index of page out of the input file. @param outputStream Output file stream. 
      <param name="InputStream"/>
      <param name="int[]"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.extract(String,int,int,String)">&lt;p&gt; Extracts pages from input file,saves as a new Pdf file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); pfe.Extract("input.pdf", 3, 7, "output.pdf"); &lt;/pre&gt; @return True for success, or false. @param inputFile Input Pdf file path. @param startPage Start page number. @param endPage End page number. @param outputFile Output Pdf file path. 
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.extract(String,int[],String)">&lt;p&gt; Extracts pages specified by number array, saves as a new PDF file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); pfe.extract("input.pdf", new int[] { 3, 5, 7 }, "output.pdf"); &lt;/pre&gt; @return True if operation was succeeded. @param inputFile Input file path. @param pageNumber Index of page out of the input file. @param outputFile Output file path. 
      <param name="String"/>
      <param name="int[]"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.extract(InputStream,int,int,OutputStream)">&lt;p&gt; Extracts pages from input file,saves as a new Pdf file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); InputStream sourceStream = new FileInputStream("file1.pdf"); OutputStream outStream = new FileOutputStream("out.pdf"); pfe.extract(sourceStream, 1, 3, 6, outStream); &lt;/pre&gt; @return True for success, or false. @param inputStream Input file Stream. @param startPage Start page number. @param endPage End page number. @param outputStream Output Pdf file Stream. 
      <param name="InputStream"/>
      <param name="int"/>
      <param name="int"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.extract(InputStream,int[],OutputStream)">&lt;p&gt; Extracts pages specified by number array, saves as a new Pdf file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); InputStream sourceStream = new FileInputStream("file1.pdf"); OutputStream outStream = new FileInputStream("out.pdf"); pfe.extract(sourceStream, new int[] { 3, 5, 8 }, outStream); &lt;/pre&gt; @return True for success, or false. @param inputStream Input file Stream. @param pageNumber Index of page out of the input file. @param outputStream Output file stream. 
      <param name="InputStream"/>
      <param name="int[]"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.splitFromFirst(String,int,String)">&lt;p&gt; Splits Pdf file from first page to specified location,and saves the front part as a new file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); pfe.splitFromFirst("input.pdf", 5, "out.pdf"); &lt;/pre&gt; @return True for success, or false. @param inputFile Source Pdf file. @param location The splitting point. @param outputFile Output Pdf file. 
      <param name="String"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.splitFromFirst(InputStream,int,OutputStream)">&lt;p&gt; Splits from start to specified location,and saves the front part in output Stream. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); InputStream sourceStream = new FileInputStream("file1.pdf"); OutputStream outStream = new FileOutputStream("out.pdf"); pfe.splitFromFirst(sourceStream, 5, outStream); &lt;/pre&gt; &lt;hr&gt; The streams are NOT closed after this operation. @return True for success, or false. @param inputStream Source Pdf file Stream. @param location The splitting point. @param outputStream Output file Stream. 
      <param name="InputStream"/>
      <param name="int"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.splitToEnd(String,int,String)">&lt;p&gt; Splits from location, and saves the rear part as a new file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); pfe.splitToEnd("input.pdf", 5, "out.pdf"); &lt;/pre&gt; @return True for success, or false. @param inputFile Source Pdf file. @param location The splitting position. @param outputFile Output Pdf file path. 
      <param name="String"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.splitToEnd(InputStream,int,OutputStream)">&lt;p&gt; Splits from specified location, and saves the rear part as a new file Stream. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); InputStream sourceStream = new FileInputStream("file1.pdf"); OutputStream outStream = new FileInputStream("out.pdf"); pfe.splitToEnd(sourceStream, 5, outStream); &lt;/pre&gt; &lt;hr&gt; The streams are NOT closed after this operation unless CloseConcatedStreams is specified. @return True if splitting was successful. @param inputStream Source Pdf file Stream. @param location The splitting position. @param outputStream Output Pdf file Stream. 
      <param name="InputStream"/>
      <param name="int"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.makeBooklet(String,String)">&lt;p&gt; Makes booklet from the input file to output file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); pfe.makeBooklet("input.pdf", "output.pdf"); &lt;/pre&gt; @return boolean - True for success, or false. @param inputFile Input pdf file path and name. @param outputFile Output pdf file path and name. 
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.makeBooklet(InputStream,OutputStream)">&lt;p&gt; Makes booklet from the InputStream to outputStream. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); InputStream inputStream = new FileInputStream("input.pdf"); OutputStream outputStream = new FileInputStream("output.pdf"); pfe.makeBooklet(inputStream, outputStream); &lt;/pre&gt; @return True if operation was succeeded. @param inputStream Input pdf stream. @param outputStream output pdf stream. 
      <param name="InputStream"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.makeBooklet(String,String,PageSize)">&lt;p&gt; Makes booklet from the inputFile to outputFile. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); pfe.makeBooklet("input.pdf", "output.pdf", PageSize.A4); &lt;/pre&gt; @return True if operation is succeeded. @param inputFile Input pdf file path and name. @param outputFile Output pdf file path and name. @param pageSize The page size of the output pdf file. 
      <param name="String"/>
      <param name="String"/>
      <param name="PageSize"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.makeBooklet(InputStream,OutputStream,PageSize)">&lt;p&gt; Makes booklet from the input stream and save result into output stream. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); InputStream inputStream = new FileInputStream("input.pdf"); OutputStream outputStream = new FileInputStream("output.pdf"); pfe.makeBooklet(inputStream, outputStream, PageSize.A4); &lt;/pre&gt; @return True if operation was succeeded. @param inputStream Input PDF stream. @param outputStream output pdf stream. @param pageSize The page size of the output pdf file. 
      <param name="InputStream"/>
      <param name="OutputStream"/>
      <param name="PageSize"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.makeBooklet(String,String,int[],int[])">&lt;p&gt; Makes customized booklet from the firstInputFile to outputFile. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); pfe.makeBooklet("input.pdf", "output.pdf", new int[] { 2, 4, 6 }, new int[] 1, 3, 5, 7 }); &lt;/pre&gt; @return boolean - True for success, or false. @param inputFile The input file. @param outputFile Output pdf file path and name. @param leftPages The left pages of the booklet. @param rightPages The right pages of the booklet. 
      <param name="String"/>
      <param name="String"/>
      <param name="int[]"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.makeBooklet(InputStream,OutputStream,int[],int[])">&lt;p&gt; Makes customized booklet from the firstInputStream to outputStream. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); InputStream inputStream = new FileInputStream("input.pdf"); OutputStream outputStream = new FileOutputStream("output.pdf"); pfe.makeBooklet(inputStream, outputStream, new int[] { 2, 4, 6 }, new int[] 1, 3, 5, 7 }); &lt;/pre&gt; @return boolean - True for success, or false. @param inputStream The input stream. @param outputStream output pdf stream. @param leftPages The left pages. @param rightPages The right pages. 
      <param name="InputStream"/>
      <param name="OutputStream"/>
      <param name="int[]"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.makeBooklet(String,String,PageSize,int[],int[])">&lt;p&gt; Makes customized booklet from the firstInputFile to outputFile. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); pfe.makeBooklet("input.pdf", "output.pdf", PageSize.A4, new int[] { 2, 4, 6 }, new int[] 1, 3, 5, 7 }); &lt;/pre&gt; @return boolean - True for success, or false. @param inputFile The input file. @param outputFile Output pdf file path and name. @param pageSize The page size of the output pdf file. @param leftPages The left pages. @param rightPages The right pages. 
      <param name="String"/>
      <param name="String"/>
      <param name="PageSize"/>
      <param name="int[]"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.makeBooklet(InputStream,OutputStream,PageSize,int[],int[])">&lt;p&gt; Makes booklet from the firstInputStream to outputStream. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); InputStream inputStream = new FileInputStream("input.pdf"); OutputStream outputStream = new FileOutputStream("output.pdf"); pfe.makeBooklet(inputStream, outputStream, PageSize.A4, new int[] { 2, 4, 6 }, new int[] 1, 3, 5, 7 }); &lt;/pre&gt; @return boolean - True for success, or false. @param inputStream The input stream. @param outputStream output pdf stream. @param pageSize The page size of the output pdf file. @param leftPages The left pages. @param rightPages The right pages. 
      <param name="InputStream"/>
      <param name="OutputStream"/>
      <param name="PageSize"/>
      <param name="int[]"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.makeNUp(String,String,int,int)">&lt;p&gt; Makes N-Up document from the firstInputFile to outputFile. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); pfe.makeNUp("input.pdf", "output.pdf", 3, 3); &lt;/pre&gt; @return boolean - True for success, or false. @param inputFile Input pdf file path and name. @param outputFile Output pdf file path and name. @param x Number of columns. @param y Number of rows. 
      <param name="String"/>
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.makeNUp(InputStream,OutputStream,int,int)">&lt;p&gt; Makes N-Up document from the input stream and saves result into output stream. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); InputStream inputStream = new FileInputStream("input.pdf"); OutputStream outputStream = new FileOutputStream("output.pdf"); pfe.makeNUp(inputStream, outputStream, 3, 3); &lt;/pre&gt; @return boolean - True for success, or false. @param inputStream Input pdf stream. @param outputStream Output pdf stream. @param x Number of columns. @param y Number of rows. 
      <param name="InputStream"/>
      <param name="OutputStream"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.makeNUp(InputStream,OutputStream,int,int,PageSize)">&lt;p&gt; Makes N-Up document from the first input stream to output stream. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); InputStream inputStream = new FileInputStream("input.pdf"); OutputStream outputStream = new FileOutputStream("output.pdf"); pfe.MakeNUp(inputStream, outputStream, 3, 3, PageSize.A4); &lt;/pre&gt; @return True if operation was succeeded. @param inputStream Input pdf stream. @param outputStream Output pdf stream. @param x Number of columns. @param y Number of rows. @param pageSize The page size of the output pdf file. 
      <param name="InputStream"/>
      <param name="OutputStream"/>
      <param name="int"/>
      <param name="int"/>
      <param name="PageSize"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.makeNUp(String,String,String)">&lt;p&gt; Makes N-Up document from the two input PDF files to outputFile. Each page of outputFile will contain two pages, one page is from the first input file and another is from the second input file. The two pages are piled up horizontally. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); pfe.makeNUp("input1.pdf", "input2.pdf", "output.pdf"); &lt;/pre&gt; @return boolean - True for success, or false. @param firstInputFile first input file. @param secondInputFile second input file. @param outputFile Output pdf file path and name. 
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.makeNUp(InputStream,InputStream,OutputStream)">&lt;p&gt; Makes N-Up document from the two input PDF streams to outputStream. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); InputStream input1 = new FileInputStream("input1.pdf"); InputStream input2 = new FileInputStream("input2.pdf"); OutputStream output = new FileOutputStream("output.pdf"); pfe.makeNUp(input1, input2, output); &lt;/pre&gt; @return boolean - True for success, or false. @param firstInputStream first input stream. @param secondInputStream second input stream. @param outputStream Output pdf stream. 
      <param name="InputStream"/>
      <param name="InputStream"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.makeNUp(String[],String,boolean)">&lt;p&gt; Makes N-Up document from the multi input PDF files to outputFile. Each page of outputFile will contain multi pages, which are combination with pages in the input files of the same page number. The multi pages piled up horizontally if isSidewise is true and piled up vertically if isSidewise is false. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); pfe.makeNUp(new String[] { "input1.pdf", "input2.pdf", "input3.pdf" }, "output.pdf", false); &lt;/pre&gt; @return boolean - True for success, or false. @param inputFiles Input Pdf files. @param outputFile Output pdf file path and name. @param isSidewise Piled up way, true for horizontally and flase for vertically. 
      <param name="String[]"/>
      <param name="String"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.makeNUp(InputStream[],OutputStream,boolean)">&lt;p&gt; Makes N-Up document from the multi input PDF streams to outputStream. Each page of outputStream will contain multi pages, which are combination with pages in the input streams of the same page number. The multi-pages piled up horizontally if isSidewise is true and piled up vertically if isSidewise is false. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); InputStream stream1 = new FileInputStream("input1.pdf"); InputStream stream2 = new FileInputStream("input2.pdf"); InputStream stream3 = new FileInputStream("input3.pdf"); OutputStream output = new FileOutputStream("output.pdf"); pfe.makeNUp(new InputStream[] { stream1, stream2, stream3 }, output, false); &lt;/pre&gt; @return boolean - True for success, or false. @param inputStreams Input Pdf streams. @param outputStream Output pdf stream. @param isSidewise Piled up way, true for horizontally and flase for vertically 
      <param name="InputStream[]"/>
      <param name="OutputStream"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.makeNUp(String,String,int,int,PageSize)">&lt;p&gt; Makes N-Up document from the input file to outputFile. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); pfe.makeNUp("input.pdf", "output.pdf", 3, 3, PageSize.A4); &lt;/pre&gt; @return boolean - True for success, or false. @param inputFile Input pdf file path and name. @param outputFile Output pdf file path and name. @param x Number of columns. @param y Number of rows. @param pageSize The page size of the output pdf file. 
      <param name="String"/>
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
      <param name="PageSize"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.splitToPages(String)">
       
        <p>Splits the PDF file into single-page documents.</p> @return Output PDF streams, each stream buffers a single-page PDF document. @param inputFile Input PDF file name.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.splitToPages(InputStream)">
       
        <p>Splits the Pdf file into single-page documents.</p> @param inputStream Input Pdf stream. @return ByteArrayInputStream[] array
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.splitToBulks(String,int[][])">
       
        <p>Splits the Pdf file into several documents.The documents can be single-page or multi-pages.</p> @return Output PDF streams, each stream buffers a PDF document. @param inputFile Input PDF file. @param numberOfPage Array which contains array of double elements, which is start and end pages of document.
      
      <param name="String"/>
      <param name="int[][]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.splitToBulks(InputStream,int[][])">
       
        <p>Splits the Pdf file into several documents.The documents can be single-page or multi-pages.</p> @return Output PDF streams, each stream buffers a PDF document. @param inputStream Input PDF stream. @param numberOfPage The start page and the end page of each document.
      
      <param name="InputStream"/>
      <param name="int[][]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.getLastException">&lt;p&gt; Gets last occured exception. May be used to check the reason of failure when AllowconcatenateExceptions = false. &lt;/p&gt; @return Exception object &lt;hr&gt; &lt;pre&gt; PdfFileEditor pfe = new PdfFileEditor(); pfe.setAllowConcatenateExceptions ( false); if (!pfe.concatenate("file1.pdf", "file2.pdf", "file3.pdf")) { System.out.println("Error occured:"); if (pfe.getLastException() != null) { System.out.println(pfe.getLastException().getMessage()); if (pfe.getLastException().getCause() != null) System.out.println(pfe.getLastException().getCause().getMessage()); } } &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.resizeContents(InputStream,OutputStream,int[],ContentsResizeParameters)">&lt;p&gt; Resizes contents of pages of the document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor fileEditor = new PdfFileEditor(); InputStream src = new FileInputStream("input.pdf"); OutputStream dest = new FileOutputStream("output.pdf"); PdfFileEditor.ContentsResizeParameters parameters = new PdfFileEditor.ContentsResizeParameters( //left margin = 10% of page width PdfFileEditor.ContentsResizeValue.percents(10), //new contents width calculated automatically as width - left margin - right margin (100% - 10% - 10% = 80%) null, //right margin is 10% of page PdfFileEditor.ContentsResizeValue.percents(10), //top margin = 10% of height PdfFileEditor.ContentsResizeValue.percents(10), //new contents height is calculated automatically (similar to width) null, //bottom margin is 10% PdfFileEditor.ContentsResizeValue.percents(10) ); fileEditor.resizeContents(src, dest, new int[] { 1, 2, 3}, parameters); dest.close(); &lt;/pre&gt; @return Returns true if success. @param source Stream with source document. @param destination Stream with the destination document. @param pages Array of page indexes. @param parameters Resize parameters. 
      <param name="InputStream"/>
      <param name="OutputStream"/>
      <param name="int[]"/>
      <param name="ContentsResizeParameters"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.resizeContents(InputStream,OutputStream,int[],double,double)">&lt;p&gt; Resizes contents of document pages. Shrinks contents of page and adds margins. New size of contents is specified in default space units. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor fileEditor = new PdfFileEditor(); InputStream src = new FileInputStream("input.pdf"); OutputStream dest = new FileOutputStream("output.pdf"); fileEditor.resizeContents(src, dest, //resize all pages of document null, //new contents width = 200 200, //new contents height = 300 300); // rest area of page will be empty &lt;/pre&gt; @return True if resize was successful. @param source Stream which contains source document. @param destination Stream where resultant document will be saved. @param pages Array of page indexes. If null then all document pages will be processed. @param newWidth New width of page contents in default space units. @param newHeight New height of page contents in default space units. 
      <param name="InputStream"/>
      <param name="OutputStream"/>
      <param name="int[]"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.resizeContentsPct(InputStream,OutputStream,int[],double,double)">&lt;p&gt; Resizes contents of document pages. Shrinks contents of page and adds margins. New contents size is specified in percents. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor fileEditor = new PdfFileEditor(); InputStream src = new FileInputStream("input.pdf"); OutputStream dest = new FileOutputStream("output.pdf"); fileEditor.resizePct(src, dest, //resize all pages of document null, //new contents width = 60% of initial size 60, //new contents height = 60% of initial size 60); // Rest area of page will be empty (page margins). Size of left and right margins is (100% - 60%) / 2 = 20% // The same for top and bottom margins. &lt;/pre&gt; @return boolean value @param source Stream which contains source document. @param destination Stream where resultant document will be saved. @param pages Array of page indexes. If null then all document pages will be processed. @param newWidth New width of page contents in percents. @param newHeight New height of page contents in percetns. 
      <param name="InputStream"/>
      <param name="OutputStream"/>
      <param name="int[]"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.addMargins(InputStream,OutputStream,int[],double,double,double,double)">&lt;p&gt; Resizes page contents and add specifed margins. Margins are specified in default space units. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor fileEditor = new PdfFileEditor(); InmputStream src = new FileInputStream("input.pdf"); OutputStream dest = new FileInputStream("output.pdf"); fileEditor.addMargins(src, dest, //process pages 1, 2, 3 new int[] { 1, 2, 3}, //left margin is 10 units 10, //right margin is 5 units 5, //top margin is 5 units 5, //bottom margin is 5 units 5); dest.Close(); &lt;/pre&gt; @return boolean value @param source Stream which contains source document. @param destination Stream where resultant document will be saved. @param pages Array of page indexes. If null then all document pages will be processed. @param leftMargin Left margin. @param rightMargin Right margin. @param topMargin Top margin. @param bottomMargin Bottom margin. 
      <param name="InputStream"/>
      <param name="OutputStream"/>
      <param name="int[]"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.addMarginsPct(InputStream,OutputStream,int[],double,double,double,double)">&lt;p&gt; Resizes page contents and add specified margins. Margins are specified in percents of intitial page size. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor fileEditor = new PdfFileEditor(); InmputStream src = new FileInputStream("input.pdf"); OutputStream dest = new FileInputStream("output.pdf"); fileEditor.addMarginsPct(src, dest, //process pages 1, 2, 3 new int[] { 1, 2, 3}, //left margin is 15% of page width 15, //right margin is 10% of page width 10, //top margin is 20% of page width 20, //bottom margin is 5% of page width 5); dest.close(); &lt;/pre&gt; @return boolean value @param source Stream which contains source document. @param destination Stream where resultant document will be saved. @param pages Array of page indexes. If null then all document pages will be processed. @param leftMargin Left margin in percents of initial page size. @param rightMargin Right margin in percents of initial page size. @param topMargin Top margin in percents of initial page size. @param bottomMargin Bottom margin in percents of initial page size. 
      <param name="InputStream"/>
      <param name="OutputStream"/>
      <param name="int[]"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.resizeContents(String,String,int[],double,double)">&lt;p&gt; Resizes contents of document pages. Shrinks contents of page and adds margins. New size of contents is specified in default space units. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor fileEditor = new PdfFileEditor(); fileEditor.resizeContents("input.pdf", "output.pdf", //resize all pages of document null, //new contents width = 200 200, //new contents height = 300 300); // rest area of page will be empty &lt;/pre&gt; @return True if resize was successful. @param source Path to source document. @param destination Path where resultant document will be saved. @param pages Array of page indexes. If null then all document pages will be processed. @param newWidth New width of page contents in default space units. @param newHeight New height of page contents in default space units. 
      <param name="String"/>
      <param name="String"/>
      <param name="int[]"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.resizeContentsPct(String,String,int[],double,double)">&lt;p&gt; Resizes contents of document pages. Shrinks contents of page and adds margins. New contents size is specified in percents. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor fileEditor = new PdfFileEditor(); fileEditor.resizePct("input.pdf", "output.pdf", //resize all pages of document null, //new contents width = 60% of initial size 60, //new contents height = 60% of initial size 60); // Rest area of page will be empty (page margins). Size of left and right margins is (100% - 60%) / 2 = 20% // The same for top and bottom margins. &lt;/pre&gt; @return true if resize was successful. @param source Path to source document. @param destination Path where resultant document will be saved. @param pages Array of page indexes. If null then all document pages will be processed. @param newWidth New width of page contents in percents. @param newHeight New height of page contents in percetns. 
      <param name="String"/>
      <param name="String"/>
      <param name="int[]"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.addMargins(String,String,int[],double,double,double,double)">&lt;p&gt; Resizes page contents and add specifed margins. Margins are specified in default space units. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor fileEditor = new PdfFileEditor(); fileEditor.addMargins("input.pdf", "output.pdf", //process pages 1, 2, 3 new int[] { 1, 2, 3}, //left margin is 10 units 10, //right margin is 5 units 5, //top margin is 5 units 5, //bottom margin is 5 units 5); &lt;/pre&gt; @return true if resize was successful. @param source Path to source document. @param destination Path where resultant document will be saved. @param pages Array of page indexes. If null then all document pages will be processed. @param leftMargin Left margin. @param rightMargin Right margin. @param topMargin Top margin. @param bottomMargin Bottom margin. 
      <param name="String"/>
      <param name="String"/>
      <param name="int[]"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.addMarginsPct(String,String,int[],double,double,double,double)">&lt;p&gt; Resizes page contents and add specified margins. Margins are specified in percents of intitial page size. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor fileEditor = new PdfFileEditor(); fileEditor.addMarginsPct("input.pdf", "output.pdf", //process pages 1, 2, 3 new int[] { 1, 2, 3}, //left margin is 15% of page width 15, //right margin is 10% of page width 10, //top margin is 20% of page width 20, //bottom margin is 5% of page width 5); &lt;/pre&gt; @return true if resize was successful @param source Path to source document. @param destination Path where resultant document will be saved. @param pages Array of page indexes. If null then all document pages will be processed. @param leftMargin Left margin in percents of initial page size. @param rightMargin Right margin in percents of initial page size. @param topMargin Top margin in percents of initial page size. @param bottomMargin Bottom margin in percents of initial page size. 
      <param name="String"/>
      <param name="String"/>
      <param name="int[]"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.resizeContents(String,String,int[],ContentsResizeParameters)">&lt;p&gt; Resizes contents of pages in document. If page is shrinked blank margins are added around the page. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor fileEditor = new PdfFileEditor(); PdfFileEditor.ContentsResizeParameters parameters = new PdfFileEditor.ContentsResizeParameters( //left margin = 10% of page width PdfFileEditor.ContentsResizeValue.percents(10), //new contents width calculated automatically as width - left margin - right margin (100% - 10% - 10% = 80%) null, //right margin is 10% of page PdfFileEditor.ContentsResizeValue.percents(10), //top margin = 10% of height PdfFileEditor.ContentsResizeValue.percents(10), //new contents height is calculated automatically (similar to width) null, //bottom margin is 10% PdfFileEditor.ContentsResizeValue.percents(10) ); fileEditor.resizeContents("input.pdf", "output.pdf", new int[] { 1, 2,.3}, parameters); &lt;/pre&gt; @return trure if resize was successful. @param source Source document path. @param destination Destination document path. @param pages Array of page indexes (page index starts from 1). @param parameters Parameters of page resize. 
      <param name="String"/>
      <param name="String"/>
      <param name="int[]"/>
      <param name="ContentsResizeParameters"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.resizeContents(IDocument,int[],ContentsResizeParameters)">&lt;p&gt; Resizes pages of document. Blank margins are added around of shrinked page. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileEditor fileEditor = new PdfFileEditor(); Document doc = new Document("input.pdf"); PdfFileEditor.ContentsResizeParameters parameters = new PdfFileEditor.ContentsResizeParameters( //left margin = 10% of page width PdfFileEditor.ContentsResizeValue.percents(10), //new contents width calculated automatically as width - left margin - right margin (100% - 10% - 10% = 80%) null, //right margin is 10% of page PdfFileEditor.ContentsResizeValue.percents(10), //top margin = 10% of height PdfFileEditor.ContentsResizeValue.percents(10), //new contents height is calculated automatically (similar to width) null, //bottom margin is 10% PdfFileEditor.ContentsResizeValue.percents(10) ); fileEditor.resizeContents(doc, new int[] { 1, 2, 3}, parameters); doc.save("output.pdf"); &lt;/pre&gt; @param source Source document. @param pages List of page indexes. @param parameters Resize parameters. 
      <param name="IDocument"/>
      <param name="int[]"/>
      <param name="ContentsResizeParameters"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.getContentDisposition">
       
        <p>Gets how content will be stored when result of operation is stored into HttpServletResponse object. Possible value: inline / attachment. Default: inline.</p> @return ContentDisposition element @see ContentDisposition
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.setContentDisposition(int)">
       
        <p>Sets how content will be stored when result of operation is stored into HttpServletResponse object. Possible value: inline / attachment. Default: inline.</p> @param value int value @see ContentDisposition
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.getSaveOptions">
       
        <p>Gets or sets save options when result is stored as HttpServletResponse. Default value: PdfSaveOptions.</p> @return SaveOptions object
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.setSaveOptions(SaveOptions)">
       
        <p>Sets save options when result is stored as HttpServletResponse. Default value: PdfSaveOptions.</p> @param value SaveOptions object
      
      <param name="SaveOptions"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.getAttachmentName">
       
        <p>Gets name of attachment when result of operation is stored into HttpServletResponse objects as attachment.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.setAttachmentName(String)">
       
        <p>Sets name of attachment when result of operation is stored into HttpServletResponse objects as attachment.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.#ctor">
       
        <p>PdfFileEditor constructor.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.PdfFileEditor.ConcatenationProgressHandler">
       
        <p>Represents class with abstract method that usually supplied by calling side and handles progress events that comes from concatenation. Usually such supplied customer's handler can be used to show total concatenation progress on console or in progress bar.</p> represents information about occurred progress event
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.ConcatenationProgressHandler.invoke(ProgressEventHandlerInfo)">
      <param name="ProgressEventHandlerInfo"/>
    </member>
    <member name="T:com.aspose.pdf.facades.PdfFileEditor.ProgressEventHandlerInfo">
       
        <p>This class represents information about concatenation progress that can be used in external application.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.ProgressEventHandlerInfo.getEventType">
       
        <p>Type of progress event that occurred</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.ProgressEventHandlerInfo.setEventType(int)">
       
        <p>Type of progress event that occurred</p> @param eventType int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.ProgressEventHandlerInfo.getDocumentNumber">
       
        <p>Progress for document with number</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.ProgressEventHandlerInfo.setDocumentNumber(int)">
       
        <p>Progress for document with number</p> @param documentNumber int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.ProgressEventHandlerInfo.getValue">
       
        <p>Current value of progress value</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.ProgressEventHandlerInfo.setValue(int)">
       
        <p>Current value of progress value</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.ProgressEventHandlerInfo.getMaxValue">
       
        <p>Maximum possible value of progress value</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.ProgressEventHandlerInfo.setMaxValue(int)">
       
        <p>Maximum possible value of progress value</p> @param maxValue int value
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.facades.PdfFileEditor.PageBreak">
       
        <p>Data of page break position.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.PageBreak.getPageNumber">
       
        <p>Number of page (starting from 1) where page break must be added.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.PageBreak.setPageNumber(int)">
       
        <p>Number of page (starting from 1) where page break must be added.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.PageBreak.getPosition">
       
        <p>Vertical position of page break.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.PageBreak.setPosition(double)">
       
        <p>Vertical position of page break.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.PageBreak.#ctor(int,double)">
       
        <p>Constructor to create PageBreak object.</p> @param pageNumber Number of page where page break is placed. @param position Vertical position of page break.
      
      <param name="int"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.facades.PdfFileEditor.ProgressEventType">
       
        <p>This enum describes possible progress event types that can occure during concatenation</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileEditor.ProgressEventType.PageConcatenated">
      Occurs event when concatenated page.
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileEditor.ProgressEventType.BlankPage">
      Occurs event when added blank page.
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileEditor.ProgressEventType.DocumentEmbeddedFiles">
      Occurs event when added embedded files
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileEditor.ProgressEventType.DocumentForms">
      Occurs event when added embedded files.
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileEditor.ProgressEventType.DocumentOutlines">
      Occurs event when added outlines files.
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileEditor.ProgressEventType.DocumentJavaScript">
      Occurs event when added JavaScript files at creation document.
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileEditor.ProgressEventType.DocumentLogicalStructure">
      Occurs event when added logical structure.
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileEditor.ProgressEventType.AllPagesCopied">
      Occurs event when added documentWorksheet.
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileEditor.ProgressEventType.DocumentConcated">
      Occurs event when added document to resualt document.
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileEditor.ProgressEventType.TotalPercentage">
      Occurs event when added percentage completed.
    </member>
    <member name="T:com.aspose.pdf.facades.PdfFileEditor.ConcatenateCorruptedFileAction">
       
        <p>Action performed when corrupted file was met in concatenation process.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileEditor.ConcatenateCorruptedFileAction.StopWithError">
       
        <p>If corrupted file was met, then stop concatentation process and return error.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileEditor.ConcatenateCorruptedFileAction.ConcatenateIgnoringCorrupted">
       
        <p>If corrupted file was met, then don't stop concatenation and don't process corrupted file. List of corrupted files is accessible in Failures property.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileEditor.ConcatenateCorruptedFileAction.ConcatenateIgnoringCorruptedObjects">
       
        <p>When corrupted object is met in source document, process will not stopped and corrupted object only is ignored.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.PdfFileEditor.CorruptedItem">
       
        <p>Class which provides information about corrupted files in time of concatenation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.CorruptedItem.getIndex">
       
        <p>Index of corrupted file.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.CorruptedItem.getException">
       
        <p>Exception thrown for this file which indicates problem with the file.</p> @return Throwable element
      
    </member>
    <member name="T:com.aspose.pdf.facades.PdfFileEditorWeb">
      Represents PdfFileEditorWeb class 
        <p>Implements operations with PDF file: concatenation, splitting, extracting pages, making booklet, etc.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.concatenate(String[],HttpServletResponse)">
       
        <p>Concatenates files and saves reslt into HttpResposnse object.</p> @return true if concatenation was successful. @param inputFiles Array of files to concatenate. @param response Response object.
      
      <param name="String[]"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.concatenate(InputStream[],HttpServletResponse)">
       
        <p>Concatenates files and stores result into HttpServletResponse object.</p> @return true if operation was succeeded. @param inputStream Streams array which contain files to concatenate. @param response Response object/
      
      <param name="InputStream[]"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.append(InputStream,InputStream[],int,int,HttpServletResponse)">
       
        <p>Appends documents to source document and saves result into response object.</p> @return true if operation was successful. @param inputStream Stream which contains source document. @param portStreams Array of streams with documents to be appended. @param startPage Start page of appended page. @param endPage End page of appended pages. @param response Response object where document will be saved.
      
      <param name="InputStream"/>
      <param name="InputStream[]"/>
      <param name="int"/>
      <param name="int"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.append(String,String[],int,int,HttpServletResponse)">
       
        <p>Appends documents to source document and saves result into HttpServletResponse object.</p> @return true if operation was succeeded. @param inputFile Name of file containing source document. @param portFiles Array of file names containing appended documents @param startPage Start page of appended pages. @param endPage End page of appended pages. @param response Response object where document will be saved.
      
      <param name="String"/>
      <param name="String[]"/>
      <param name="int"/>
      <param name="int"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.insert(String,int,String,int[],HttpServletResponse)">
       
        <p>Inserts contents of file into source file and stores result into HttpServletResponse object.</p> @return true of inserting was successful. @param inputFile Source file name. @param insertLocation Page number where second file will be inserted. @param portFile Path to file which will be inserted. @param pageNumber Array of page numbers in source file wihich will be inserted. @param response Response object where result will be stored.
      
      <param name="String"/>
      <param name="int"/>
      <param name="String"/>
      <param name="int[]"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.insert(InputStream,int,InputStream,int[],HttpServletResponse)">
       
        <p>Inserts document into other document and stores result into response object.</p> @return True if operation was succeeded. @param inputStream Stream with source document @param insertLocation Location where other document will be inserted. @param portStream Document to be inserted. @param pageNumber Array of page numbers in second document which will be inserted. @param response Response object where result will be stored.
      
      <param name="InputStream"/>
      <param name="int"/>
      <param name="InputStream"/>
      <param name="int[]"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.delete(String,int[],HttpServletResponse)">
       
        <p>Deletes specified pages from document and stores result into HttpServletResponse object.</p> @return True if operation was succeeded. @param inputFile Path of source file. @param pageNumber Array of page numbers which must be deleted. @param response Response object where result document will be stored.
      
      <param name="String"/>
      <param name="int[]"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.delete(InputStream,int[],HttpServletResponse)">
       
        <p>Deletes specified pages from document and saves result into HttpServletResponse object.</p> @return True if operation succeded. @param inputStream Source document stream. @param pageNumber Array of page numbers which will be deleted. @param response HttpServletResponse object
      
      <param name="InputStream"/>
      <param name="int[]"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.extract(InputStream,int[],HttpServletResponse)">
       
        <p>Extracts specified pages form source file and stores result into HttpServletResponse object.</p> @return True if operation was succeeded. @param inputStream Stream of source document. @param pageNumber Array of page numbers which will be extracted. @param response HttpServletResponse object where result will be stored.
      
      <param name="InputStream"/>
      <param name="int[]"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.extract(String,int[],HttpServletResponse)">
       
        <p>Extracts specified pages from source file and stores result into HttpServletResponse object.</p> @return true if pages were extracted successfully. @param inputFile Source file path. @param pageNumber Array of page numbers which will be extracted. @param response HttpServletResponse object where result will be stored.
      
      <param name="String"/>
      <param name="int[]"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.splitFromFirst(String,int,HttpServletResponse)">
       
        <p>Splits document from first page to location and saves result into HttpServletResponse objects.</p> @return True if operation was succeeded. @param inputFile Source file name. @param location Split point. @param response HttpServletResponse objects.
      
      <param name="String"/>
      <param name="int"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.splitFromFirst(InputStream,int,HttpServletResponse)">
       
        <p>Splits document from start to specified location and stores result into HttpServletResponse object.</p> @return True if operation was succeeded. @param inputStream Stream of source document. @param location The splitting point. @param response HttpServletResponse object where result will be stored.
      
      <param name="InputStream"/>
      <param name="int"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.splitToEnd(InputStream,int,HttpServletResponse)">
       
        <p>Splits from specified location, and saves the rear part into HttpServletResponse object.</p> @return true if splitting was successful. @param inputStream Source document stream. @param location Split point. @param response HttpServletResponse object.
      
      <param name="InputStream"/>
      <param name="int"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.splitToEnd(String,int,HttpServletResponse)">
       
        <p>Splits from specified location, and saves the rear part into HttpServletResponse object.</p> @return True if operation was succeeded. @param inputFile source file name. @param location Split point. @param response HttpServletResponse objects.
      
      <param name="String"/>
      <param name="int"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.makeBooklet(String,PageSize,int[],int[],HttpServletResponse)">
       
        <p>Makes booklet from source file and stores result into HttpServletResponse objects.</p> @return True if operation was succeeded. @param inputFile Source file path. @param pageSize Desired page size. @param leftPages Aray of page numbers to be placed in left. @param rightPages Array of page numbers to be placed in right. @param response HttpServletResponse object where result will be stored.
      
      <param name="String"/>
      <param name="PageSize"/>
      <param name="int[]"/>
      <param name="int[]"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.makeBooklet(InputStream,PageSize,int[],int[],HttpServletResponse)">
       
        <p>Make booklet from PDF file and stores it into HttpServletResponse.</p> @return True if operation was succeeded. @param inputStream Input document stream. @param pageSize Desired page size. @param leftPages Array of page numbers which will be placed in left. @param rightPages Array of page numbers which will b eplaced in right. @param response HttpServletResponse object.
      
      <param name="InputStream"/>
      <param name="PageSize"/>
      <param name="int[]"/>
      <param name="int[]"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.makeBooklet(String,PageSize,HttpServletResponse)">
       
        <p>Makes booklet from source file and stores result into HttpServletResponse objects.</p> @return True if operation is succeeded. @param inputFile Source file path. @param pageSize Desired page size in output file. @param response HttpServletResponse object where result will be stored.
      
      <param name="String"/>
      <param name="PageSize"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.makeBooklet(InputStream,PageSize,HttpServletResponse)">
       
        <p>Makes booklet from source file and stores result into HttpServletResponse.</p> @return true if booklet was built successfully. @param inputStream Input document stream. @param pageSize Desired page size in output file. @param response Respose object where resut will be saved.
      
      <param name="InputStream"/>
      <param name="PageSize"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.makeNUp(InputStream,int,int,PageSize,HttpServletResponse)">
       
        <p>Makes N-up document and stores result into HttpServletResponse object.</p> @return True if operation was succeeded. @param inputStream Stream of source document. @param x Number of columns. @param y Number of rows. @param pageSize Page size in result file. @param response HttpServletResponse object where result will be stored.
      
      <param name="InputStream"/>
      <param name="int"/>
      <param name="int"/>
      <param name="PageSize"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.makeNUp(String,int,int,PageSize,HttpServletResponse)">
       
        <p>Makes N-up document and stores result into HttpServletResponse object.</p> @return True if operation was succeeded. @param inputFile Path to source file. @param x Number of columns. @param y Number of rows. @param pageSize Page size in result file. @param response HttpServletResponse object where result will be stored.
      
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
      <param name="PageSize"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.makeNUp(String,int,int,HttpServletResponse)">
       
        <p>Makes N-up document and stores result into HttpServletResponse.</p> @return True if operation was succeeded. @param inputFile Source file name. @param x Number of columns. @param y Number of rows. @param response HttpServletResponse object where result will be stored.
      
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.makeNUp(InputStream,int,int,HttpServletResponse)">
       
        <p>Makes N-up document and stores result into HttpServletResponse.</p> @return True if operation was succeeded. @param inputStream Stream of input document. @param x Number of columns. @param y Number of rows. @param response HttpServletResponse where result will be stored.
      
      <param name="InputStream"/>
      <param name="int"/>
      <param name="int"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.resizeContents(String,int[],ContentsResizeParameters,HttpServletResponse)">
       
        <p>Resizes contents of pages in document. If page is shrinked blank margins are added around the page.Result is stored into HttpServletResponse object.</p> @return True if operation was succeeded. @param source Path to source file. @param pages Array of pages to be resized. @param parameters Resize parameters. @param response HttpServletResponse object where result is saved.
      
      <param name="String"/>
      <param name="int[]"/>
      <param name="ContentsResizeParameters"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.resizeContents(Stream,int[],ContentsResizeParameters,HttpServletResponse)">
       
        <p>Resizes contents of pages in document. If page is shrinked blank margins are added around the page.Result is stored into HttpServletResponse object.</p> @return True if operation was succeeded. @param source Stream of source file. @param pages Array of pages to be resized. @param parameters Resize parameters. @param response HttpServletResponse object where result is saved.
      
      <param name="Stream"/>
      <param name="int[]"/>
      <param name="ContentsResizeParameters"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.#ctor">
       
        <p>PdfFileEditorWeb constructor.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.PdfFileInfo">
       
        <p>Represents a class for accessing meta information of PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.bindPdf(String,String)">
       
        <p>Initializes the facade.</p> @param srcFile The PDF file. @param password The password of the PDF document.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.bindPdf(IDocument)">
       
        <p>Initializes the facade.</p> @param srcDoc The Document object.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getAuthor">
       
        <p>Gets the Author information of PDF document.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.setAuthor(String)">
       
        <p>Sets the Author information of PDF document.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.isEncrypted">
       
        <p>Checkes whether the PDF document is encrypted.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.isPdfFile">
       
        <p>Checkes whether the source input is a valid PDF file.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getCreationDate">
       
        <p>Gets the CreationDate information of PDF document.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.setCreationDate(String)">
       
        <p>Sets the CreationDate information of PDF document.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getCreator">
       
        <p>Gets the Creator information of PDF document.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.setCreator(String)">
       
        <p>Sets the Creator information of PDF document.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.hasCollection">
       
        <p>Returns true if the current input file is a 'Portfolio' file containing collection of PDF files in it.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getHeader">&lt;p&gt; Gets the customized information of PDF document. &lt;/p&gt; @return {@code Map&lt;String, String&gt;} object</member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.setHeader(java.util.Map&lt;String, String&gt;)">&lt;p&gt; Sets the customized information of PDF document. &lt;/p&gt; @param value {@code Map&lt;String, String&gt;} object 
      <param name="java.util.Map&lt;String, String&gt;"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getInputFile">
       
        <p>Gets the input file.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.setInputFile(String)">
       
        <p>Sets the input file.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getInputStream">
       
        <p>Gets the input stream.</p> @return InputStream object
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.setInputStream(InputStream)">
       
        <p>Sets the input stream.</p> @param value InputStream object
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getKeywords">
       
        <p>Gets the Keywords information of PDF document.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.setKeywords(String)">
       
        <p>Sets the Keywords information of PDF document.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getModDate">
       
        <p>Gets the ModDate date information of PDF document.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.setModDate(String)">
       
        <p>Sets the ModDate date information of PDF document.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getNumberOfPages">
       
        <p>Gets the number of document pages.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getProducer">
       
        <p>Gets the Producer information of PDF document.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getSubject">
       
        <p>Gets the Subject information of PDF document.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.setSubject(String)">
       
        <p>Sets the Subject information of PDF document.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getTitle">
       
        <p>Gets the Title information of PDF document.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.setTitle(String)">
       
        <p>Sets the Title information of PDF document.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.clearInfo">
       
        <p>Clears all meta information of PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getDocumentPrivilege">
       
        <p>Gets the PDF document privilege settings.</p> @return The PDF document privilege settings.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getMetaInfo(String)">
       
        <p>Gets customized information of PDF document with property name. If there is no property match the name it will return a blank string.</p> @return Custom meta property value. @param name Custom meta property key.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getPageHeight(int)">
       
        <p>Gets the height of the specified page.</p> @return The height of the page. @param pageNum Page number.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getPageRotation(int)">
       
        <p>Gets the rotation of the specified page.</p> @return The rotation of the page. The value may be 0,90,180,270. @param pageNum Page number.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getPageWidth(int)">
       
        <p>Gets the width of the specified page.</p> @return The width of the page. @param pageNum Page number.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getPageXOffset(int)">
       
        <p>Gets the horizontal offset of the specified page display area.</p> @return The horizontal offset from the left side of the page. @param pageNum Page number.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getPageYOffset(int)">
       
        <p>Gets the vertical offset of the specified page display area.</p> @return The vertical offset of the page display area. @param pageNum Page number.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getPdfVersion">
       
        <p>Gets the version info of PDF document.</p> @return The version string.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.saveNewInfo(OutputStream)">
       
        <p>Save updated PDF document into specified stream.</p> @return True if success otherwise is false. @param outputStream Output stream.
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.saveNewInfo(String)">
       
        <p>Save updated PDF document into specified file.</p> @return True if success otherwise is false. @param outputFile Output file.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.save(OutputStream)">
       
        <p>Saves the PDF document to the specified file.</p> @param destStream The destination stream.
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.setMetaInfo(String,String)">
       
        <p>Sets customized information of PDF document.</p> @param name Custom meta property key. @param value Custom meta property value.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.saveNewInfoWithXmp(String)">
       
        <p>Changes the properties specified explicitly by setting file information, other properties remain.</p> @return True for success, or false. @param outputFileName Output file.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getPasswordType">
       
        <p>Returns the type of password which was passed for creating PdfFileInfo instance. See possible values in {@code PasswordType}. Pay attention that pdf document can be opened using both user (or open) password and owner (or permissions, edit) password.</p> @return PasswordType element @see PasswordType
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.hasOpenPassword">
       
        <p>Returns true if password is needed to open password protected pdf document.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.hasEditPassword">
       
        <p>Returns true if password is needed to modify permissions or document security property. Pay attention that this property can be read only if valid password was provided in {@code PdfFileInfo} constructor. In case PasswordType is Inaccessible (means that invalid password was provided) reading this property will fail with {@code InvalidPasswordException}.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.close">
       
        <p>Closes all resources used by this document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.dispose">
       
        <p>Closes all resources used by this instance.</p> This method is obsolete, use close() instead.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.#ctor">
       
        <p>Initializes a new instance of the com.aspose.pdf.facades.PdfFileInfo class with default values.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.#ctor(InputStream)">
       
        <p>Initializes a new instance of the com.aspose.pdf.facades.PdfFileInfo class.</p> @param inputStream Stream where input file is placed.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.#ctor(InputStream,String)">
       
        <p>Initializes a new instance of the com.aspose.pdf.facades.PdfFileInfo class.</p> @param inputStream Stream where input file is placed. @param password Password for access to file.
      
      <param name="InputStream"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.#ctor(String)">
       
        <p>Initializes a new instance of the com.aspose.pdf.facades.PdfFileInfo class.</p> @param inputFile Name of file containing input file.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.#ctor(String,String)">
       
        <p>Initializes a new instance of the com.aspose.pdf.facades.PdfFileInfo class.</p> @param inputFile Name of file containing input file. @param password Password for access to file.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.#ctor(IDocument)">
       
        <p>Initializes new {@code PdfFileInfo} object on base of the {@code document}.</p> @param document Pdf document.
      
      <param name="IDocument"/>
    </member>
    <member name="T:com.aspose.pdf.facades.PdfFileMend">
       
        <p>Represents a class for adding texts and images on the pages of existing PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.getInputStream">
       
        <p>Gets the input stream.</p> @return input stream.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.setInputStream(InputStream)">
       
        <p>Sets the input stream.</p> @param value input stream.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.getOutputStream">
       
        <p>Gets the output stream.</p> @return output stream.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.setOutputStream(OutputStream)">
       
        <p>This method is Deprecated. Use Save(outputStream) method for getting facade results.</p> @param value output stream.
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.getInputFile">
       
        <p>Gets the input file.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.setInputFile(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.getOutputFile">
       
        <p>Gets the output file.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.setOutputFile(String)">
       
        <p>Sets the output file.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.setWordWrap(boolean)">
       
        <p>Sets a bool value that indicates word wrap in AddText methods. If the value is true, the text in FormattedText will word wrap. By defalt, the value is false.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.getWrapMode">
       
        <p>Gets word wrapping algorithm.</p> @return WordWrapMode value @see WordWrapMode
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.setWrapMode(int)">
       
        <p>Sets word wrapping algorithm.</p> @param value WordWrapMode element @see WordWrapMode
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.getTextPositioningMode">
       
        <p>Gets text positioning strategy. {@code PositioningMode} Default mode is Legacy.</p> @return PositioningMode element @see PositioningMode
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.setTextPositioningMode(int)">
       
        <p>Sets text positioning strategy. {@code PositioningMode} Default mode is Legacy.</p> @param value PositioningMode element @see PositioningMode
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.addImage(InputStream,int,float,float,float,float)">&lt;p&gt; Adds image to the specified page of PDF document at specified coordinates. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf"); InputStream stream = new FileInputStream("picture.jpg")) mendor.addImage(stream, 1, 10, 10, 100, 100); mendor.close(); &lt;/pre&gt; @return True if success false otherwise. @param imageStream Input image stream. @param pageNum The number of page that will receive the image. @param lowerLeftX The lower left x of image rectangle. @param lowerLeftY The lower left y of image rectangle. @param upperRightX The upper right x of image rectangle. @param upperRightY The upper right y of image rectangle. 
      <param name="InputStream"/>
      <param name="int"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.addImage(InputStream,int,float,float,float,float,CompositingParameters)">&lt;p&gt; Adds image to the specified page of PDF document at specified coordinates. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf"); InputStream stream = new FileInputStream("picture.jpg")) mendor.addImage(stream, 1, 10, 10, 100, 100, new CompositingParameters(BlendMode.Multiply); mendor.close(); &lt;/pre&gt; @return True if success false otherwise. @param imageStream Input image stream. @param pageNum The number of page that will receive the image. @param lowerLeftX The lower left x of image rectangle. @param lowerLeftY The lower left y of image rectangle. @param upperRightX The upper right x of image rectangle. @param upperRightY The upper right y of image rectangle. @param compositingParameters The graphics compositing parameters for the image. 
      <param name="InputStream"/>
      <param name="int"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="CompositingParameters"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.addImage(InputStream,int[],float,float,float,float)">&lt;p&gt; Adds image to the specified pages of PDF document at specified coordinates. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf"); InputStream stream = new FileInputStream("picture.jpg") mendor.addImage(stream, new int[]{1, 2}, 10, 10, 100, 100); mendor.close(); &lt;/pre&gt; @return True if success false otherwise. @param imageStream Input image stream. @param pageNums The numbers of pages that will receive the image. @param lowerLeftX The lower left x of image rectangle. @param lowerLeftY The lower left y of image rectangle. @param upperRightX The upper right x of image rectangle. @param upperRightY The upper right y of image rectangle. 
      <param name="InputStream"/>
      <param name="int[]"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.addImage(InputStream,int[],float,float,float,float,CompositingParameters)">&lt;p&gt; Adds image to the specified pages of PDF document at specified coordinates. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf"); InputStream stream = new FileInputStream("picture.jpg") mendor.addImage(stream, new int[]{1, 2}, 10, 10, 100, 100, new CompositingParameters(BlendMode.Multiply); mendor.close(); &lt;/pre&gt; @return True if success false otherwise. @param imageStream Input image stream. @param pageNums The numbers of pages that will receive the image. @param lowerLeftX The lower left x of image rectangle. @param lowerLeftY The lower left y of image rectangle. @param upperRightX The upper right x of image rectangle. @param upperRightY The upper right y of image rectangle. @param compositingParameters The graphics compositing parameters for the images. 
      <param name="InputStream"/>
      <param name="int[]"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="CompositingParameters"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.addImage(String,int,float,float,float,float)">&lt;p&gt; Adds image to the specified page of PDF document at specified coordinates. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf"); mendor.addImage("picture.jpg", 1, 10, 10, 100, 100); mendor.close(); &lt;/pre&gt; @return True if success false otherwise. @param imageName The path of input image file. @param pageNum The number of page that will receive the image. @param lowerLeftX The lower left x of image rectangle. @param lowerLeftY The lower left y of image rectangle. @param upperRightX The upper right x of image rectangle. @param upperRightY The upper right y of image rectangle. 
      <param name="String"/>
      <param name="int"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.addImage(String,int,float,float,float,float,CompositingParameters)">&lt;p&gt; Adds image to the specified page of PDF document at specified coordinates. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf"); mendor.addImage("picture.jpg", 1, 10, 10, 100, 100, new CompositingParameters(BlendMode.Multiply)); mendor.close(); &lt;/pre&gt; @return True if success false otherwise. @param imageName The path of input image file. @param pageNum The number of page that will receive the image. @param lowerLeftX The lower left x of image rectangle. @param lowerLeftY The lower left y of image rectangle. @param upperRightX The upper right x of image rectangle. @param upperRightY The upper right y of image rectangle. @param compositingParameters The graphics compositing parameters for the images. 
      <param name="String"/>
      <param name="int"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="CompositingParameters"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.addImage(String,int[],float,float,float,float)">&lt;p&gt; Adds image to the specified pages of PDF document at specified coordinates. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf"); mendor.addImage("picture.jpg", 1, 10, 10, 100, 100); mendor.close(); &lt;/pre&gt; @return True if success false otherwise. @param imageName The path of input image file. @param pageNums The numbers of pages that will receive the image. @param lowerLeftX The lower left x of image rectangle. @param lowerLeftY The lower left y of image rectangle. @param upperRightX The upper right x of image rectangle. @param upperRightY The upper right y of image rectangle. 
      <param name="String"/>
      <param name="int[]"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.addImage(String,int[],float,float,float,float,CompositingParameters)">&lt;p&gt; Adds image to the specified pages of PDF document at specified coordinates. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf"); mendor.addImage("picture.jpg", 1, 10, 10, 100, 100, new CompositingParameters(BlendMode.Multiply)); mendor.close(); &lt;/pre&gt; @return True if success false otherwise. @param imageName The path of input image file. @param pageNums The numbers of pages that will receive the image. @param lowerLeftX The lower left x of image rectangle. @param lowerLeftY The lower left y of image rectangle. @param upperRightX The upper right x of image rectangle. @param upperRightY The upper right y of image rectangle. @param compositingParameters The graphics compositing parameters for the images. 
      <param name="String"/>
      <param name="int[]"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="CompositingParameters"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.addText(FormattedText,int,float,float)">
       
        <p>Not implemented.</p> @return True in case text was successfully added. @param text FormattedText object. @param pageNum Page number. @param lowerLeftX Lower left X coordinate. @param lowerLeftY Lower left Y coordinate.
      
      <param name="FormattedText"/>
      <param name="int"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.addText(FormattedText,int,float,float,float,float)">
       
        <p>Not implemented.</p> @return True in case text was successfully added. @param text FormattedText object. @param pageNum Page number. @param lowerLeftX Lower left X coordinate. @param lowerLeftY Lower left Y coordinate. @param upperRightX Upper right X coordinate. @param upperRightY Upper right Y coordinate.
      
      <param name="FormattedText"/>
      <param name="int"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.addText(FormattedText,Integer[],float,float,float,float)">
       
        <p>Not implemented.</p> @return True in case text was successfully added. @param text FormattedText object. @param pageNums Page numbers array. @param lowerLeftX Lower left X coordinate. @param lowerLeftY Lower left Y coordinate. @param upperRightX Upper right X coordinate. @param upperRightY Upper right Y coordinate.
      
      <param name="FormattedText"/>
      <param name="Integer[]"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.close">
       
        <p>Closes PdfFileMend object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.dispose">
      Closes PdfFileMend object. This method is obsolete, use close() instead.
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.save(String)">
       
        <p>Saves the PDF document to the specified file.</p> @param destFile The destination file.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.save(OutputStream)">
       
        <p>Saves the PDF document to the specified file.</p> @param destStream The destination stream.
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.getDocument">
       
        <p>Gets the document {@code PdfFileMend} is working on.</p> @return IDocument object
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.#ctor">
       
        <p>Constructor.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.#ctor(String,String)">
       
        <p>Constructor.</p>  
        <p>Obsolete("Use constructor without destination.")</p> @param inputFileName Input PDF file name. @param outputFileName Output PDF file name.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.#ctor(InputStream,OutputStream)">
       
        <p>Constructor. Obsolete("Use constructor without destination.")</p> @param inputStream Input PDF stream. @param outputStream Output PDF stream.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.#ctor(Stream,Stream)">
       
        <p>Constructor.</p>  
        <p>Obsolete("Use constructor without destination.")</p> @param inputStream Input PDF stream. @param outputStream Output PDF stream.
      
      <param name="Stream"/>
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.#ctor(IDocument)">
       
        <p>Initializes new {@code PdfFileMend} object on base of the {@code document}.</p> @param document Pdf document.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.#ctor(IDocument,String)">
       
        <p>Initializes new {@code PdfFileMend} object on base of the {@code document}.</p>  
        <p>Obsolete("Use constructor without destination.")</p> @param document Pdf document. @param outputFileName Output PDF file name.
      
      <param name="IDocument"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.#ctor(IDocument,Stream)">
       
        <p>Initializes new {@code PdfFileMend} object on base of the {@code document}.</p>  
        <p>Obsolete("Use constructor without destination.")</p> @param document Pdf document. @param outputStream Output PDF stream.
      
      <param name="IDocument"/>
      <param name="Stream"/>
    </member>
    <member name="T:com.aspose.pdf.facades.PdfFileSanitization">
       
        <p>Represents sanitization and recovery API. Use it if you can't create/open documents in any other way.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSanitization.getLog">
       
        <p>After file has Saved you can check what was done with file.</p> @return list of String elements
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSanitization.getUseTrimTop">
       
        <p>Allows to remove data before pdf data.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSanitization.setUseTrimTop(boolean)">
       
        <p>Allows to remove data before pdf data.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSanitization.getUseTrimBottom">
       
        <p>Allows to remove data after pdf data</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSanitization.setUseTrimBottom(boolean)">
       
        <p>Allows to remove data after pdf data</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSanitization.save(String)">
       
        <p>Saves the result PDF to file.</p> @param outputFile output pdf file
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSanitization.save(java.io.OutputStream)">
       
        <p>Saves the result PDF to stream.</p> @param outputStream output pdf stream
      
      <param name="java.io.OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSanitization.bindPdf(String)">
       
        <p>Binds a Pdf file for Sanitize.</p> @param inputFile The pdf file to be edited.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSanitization.bindPdf(java.io.InputStream)">
       
        <p>Binds a Pdf stream for Sanitize.</p> @param inputStream The pdf stream to be edited.
      
      <param name="java.io.InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSanitization.bindPdf(Document)">
       
        <p>Initializes the facade.</p> @param srcDoc The Document object.
      
      <param name="Document"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSanitization.recover">
       
        <p>Recovers document. Use properties to customize.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSanitization.trimTop">
       
        <p>Removes data before %PDF.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSanitization.trimBottom">
       
        <p>Removes data after last %%EOF.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSanitization.close">
       
        <p>Closes the facade.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSanitization.#ctor">
       
        <p>Initializes a new instance.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.PdfFileSecurity">
       
        <p>Represents encrypting or decrypting a Pdf file with owner or user password, changing the security setting and password.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.setInputFile(String)">
       
        <p>Sets the input file.</p> Obsolete("Use bindPdf(inputStream) method for facade initialization.") @param value String object
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.setInputStream(InputStream)">
       
        <p>Sets the input stream.</p> Obsolete("Use bindPdf(inputStream) method for facade initialization.") @param value InputStream object
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.setOutputFile(String)">
       
        <p>Sets the output file.</p> Obsolete("Use save(outputStream) method for getting facade results.") @param value String object
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.setOutputStream(OutputStream)">
       
        <p>Sets the output stream.</p> Obsolete("Use save(outputStream) method for getting facade results.") @param value OutputStream object
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.getAllowExceptions">
       
        <p>If this value set to true, exception will be thrown on opearation failure. Else, method returns false on failure and last exception can be checked with LastException variable.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.setAllowExceptions(boolean)">
       
        <p>If this value set to true, exception will be thrown on opearation failure. Else, method returns false on failure and last exception can be checked with LastException variable.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.getLastException">
       
        <p>Returns exception which was thrown by last operation.</p> @return java.lang.RuntimeException
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.encryptFile(String,String,DocumentPrivilege,int)">&lt;p&gt; Encrypts Pdf file with userpassword and ownerpassword and sets the document's privileges to access. The user password and the owner password can be null or empty. The owner password will be replaced with a random string if the input owner password is null or empty. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; String inFile = &amp;quot;..\\AsposePdfKitExample\\example1.pdf&amp;quot;; // The TestPath may be // re-assigned. String outFile = &amp;quot;..\\AsposePdfKitExample\\Kit0401.pdf&amp;quot;; // The TestPath may be // re-assigned. PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile, outFile); fileSecurity.EncryptFile(&amp;quot;userpass&amp;quot;, &amp;quot;ownerpass&amp;quot;, DocumentPrivilege.Print, KeySize.x256); &lt;/pre&gt; @return True for success, or false. @param userPassword User password. @param ownerPassword Owner password. @param privilege Set privilege. @param keySize KeySize.x40 for 40 bits encryption, KeySize.x128 for 128 bits encryption and KeySize.x256 for 256 bits encryption. 
      <param name="String"/>
      <param name="String"/>
      <param name="DocumentPrivilege"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.encryptFile(String,String,DocumentPrivilege,int,int)">&lt;p&gt; Encrypts Pdf file with userpassword and ownerpassword and sets the document's privileges to access. The user password and the owner password can be null or empty. The owner password will be replaced with a random string if the input owner password is null or empty. There are 6 possible combinations of KeySize and Algorithm values. However (KeySize.x40, Algorithm.AES) and (KeySize.x256, Algorithm.RC4) are invalid and corresponding exception will be raised if kit encounters this combination. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; String inFile = &amp;quot;..\\AsposePdfKitExample\\example1.pdf&amp;quot;; // The TestPath may be // re-assigned. String outFile = &amp;quot;..\\AsposePdfKitExample\\Kit0401.pdf&amp;quot;; // The TestPath may be // re-assigned. PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile, outFile); fileSecurity.encryptFile(&amp;quot;userpass&amp;quot;, &amp;quot;ownerpass&amp;quot;, DocumentPrivilege.Print, KeySize.x256, Algorithm.AES); &lt;/pre&gt; @return True for success, or false. @param userPassword User password. @param ownerPassword Owner password. @param privilege Set privilege. @param keySize KeySize.x40 for 40 bits encryption, KeySize.x128 for 128 bits encryption and KeySize.x256 for 256 bits encryption. @param cipher Algorithm.AES to encrypt using AES algorithm or Algorithm.RC4 for RC4 encryption. 
      <param name="String"/>
      <param name="String"/>
      <param name="DocumentPrivilege"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.decryptFile(String)">&lt;p&gt; Decrypts an encrypted Pdf document by owner password. If the document hasn't owner password, it is allow to use user password. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; string inFile = &amp;quot;..\\AsposePdfKitExample\\Kit0401.pdf&amp;quot;; // The TestPath may be // re-assigned. string outFile = &amp;quot;..\\AsposePdfKitExample\\Kit0404.pdf&amp;quot;; // The TestPath may be // re-assigned. PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile, outFile); fileSecurity.DecryptFile(&amp;quot;ownerpass&amp;quot;); &lt;/pre&gt; @return True for success,or false. @param ownerPassword Owner password. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.setPrivilege(DocumentPrivilege)">&lt;p&gt; Sets Pdf file security with empty user/owner passwords. The owner password will be added by a random string. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; string inFile = &amp;quot;..\\AsposePdfKitExample\\example1.pdf&amp;quot;; // The TestPath may be re-assigned. string outFile = &amp;quot;..\\AsposePdfKitExample\\Kit0405.pdf&amp;quot;; // The TestPath may be re-assigned. PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile, outFile); fileSecurity.setPrivilege(DocumentPrivilege.Print); &lt;/pre&gt; @return True for success, or false. @param privilege Set privilege. 
      <param name="DocumentPrivilege"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.setPrivilege(String,String,DocumentPrivilege)">&lt;p&gt; Sets Pdf file security with original password. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; string inFile = &amp;quot;..\\AsposePdfKitExample\\example1.pdf&amp;quot;; // The TestPath may be re-assigned. string outFile = &amp;quot;..\\AsposePdfKitExample\\Kit0405.pdf&amp;quot;; // The TestPath may be re-assigned. PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile, outFile); fileSecurity.setPrivilege(userPassword, ownerPassword, DocumentPrivilege.getPrint()); &lt;/pre&gt; @return True for success, or false. @param userPassword Original user password. @param ownerPassword Original owner password. @param privilege Set privilege. 
      <param name="String"/>
      <param name="String"/>
      <param name="DocumentPrivilege"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.changePassword(String,String,String)">&lt;p&gt; Changes the user password and owner password by owner password, keeps the original security settings. The new user password and the new owner password can be null or empty. The owner password will be replaced with a random string if the new owner password is null or empty. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; string inFile = &amp;quot;..\\AsposePdfKitExample\\Kit0406.pdf&amp;quot;; // The TestPath may be // re-assigned. string outFile = &amp;quot;..\\AsposePdfKitExample\\Kit0407.pdf&amp;quot;; // The TestPath may be // re-assigned. PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile, outFile); fileSecurity.ChangePassword(&amp;quot;owner&amp;quot;, &amp;quot;newuser&amp;quot;, &amp;quot;newowner&amp;quot;); &lt;/pre&gt; @return True for success,or false. @param ownerPassword Original Owner password. @param newUserPassword New User password. @param newOwnerPassword New Owner password. 
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.changePassword(String,String,String,DocumentPrivilege,int)">&lt;p&gt; Changes the user password and password by owner password, allows to reset Pdf documnent security. The new user password and the new owner password can be null or empty. The owner password will be replaced with a random string if the new owner password is null or empty. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; string inFile = &amp;quot;..\\AsposePdfKitExample\\Kit0401.pdf&amp;quot;; // The TestPath may be // re-assigned. string outFile = &amp;quot;..\\AsposePdfKitExample\\Kit0407.pdf&amp;quot;; // The TestPath may be // re-assigned. PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile, outFile); fileSecurity.ChangePassword(&amp;quot;owner&amp;quot;, &amp;quot;newuser&amp;quot;, &amp;quot;newowner&amp;quot;, DocumentPrivilege.Print, KeySize.x256); &lt;/pre&gt; @return True for success, or false. @param ownerPassword Original owner password. @param newUserPassword New User password. @param newOwnerPassword New Owner password. @param privilege Reset security. @param keySize KeySize.x40 for 40 bits encryption, KeySize.x128 for 128 bits encryption and KeySize.x256 for 256 bits encryption. 
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
      <param name="DocumentPrivilege"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.changePassword(String,String,String,DocumentPrivilege,int,int)">&lt;p&gt; Changes the user password and password by owner password, allows to reset Pdf documnent security. The new user password and the new owner password can be null or empty. The owner password will be replaced with a random string if the new owner password is null or empty. There are 6 possible combinations of KeySize and Algorithm values. However (KeySize.x40, Algorithm.AES) and (KeySize.x256, Algorithm.RC4) are invalid and corresponding exception will be raised if kit encounters this combination. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; string inFile = &amp;quot;..\\AsposePdfKitExample\\Kit0401.pdf&amp;quot;; // The TestPath may be // re-assigned. string outFile = &amp;quot;..\\AsposePdfKitExample\\Kit0407.pdf&amp;quot;; // The TestPath may be // re-assigned. PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile, outFile); fileSecurity.ChangePassword(&amp;quot;owner&amp;quot;, &amp;quot;newuser&amp;quot;, &amp;quot;newowner&amp;quot;, DocumentPrivilege.Print, KeySize.x256, Algorithm.AES); &lt;/pre&gt; @return True for success, or false. @param ownerPassword Original owner password. @param newUserPassword New User password. @param newOwnerPassword New Owner password. @param privilege Reset security. @param keySize KeySize.x40 for 40 bits encryption, KeySize.x128 for 128 bits encryption and KeySize.x256 for 256 bits encryption. @param cipher Algorithm.AES to encrypt using AES algorithm or Algorithm.RC4 for RC4 encryption. 
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
      <param name="DocumentPrivilege"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.bindPdf(String)">
       
        <p>Initializes the facade.</p> @param srcFile The PDF file.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.bindPdf(InputStream)">
       
        <p>Initializes the facade.</p> @param srcStream The stream of PDF file.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.close">
       
        <p>Closes the facade.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.dispose">
       
        <p>Closes the facade.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.#ctor(InputStream,OutputStream)">
       
        <p>Initialize the object of PdfFileSecurity with input and output stream.</p>  
        <p>Obsolete("Use constructor without destination.")</p> @param inputStream Input Pdf Stream. @param outputStream Output Pdf Stream.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.#ctor(String,String)">
       
        <p>Initializes the object of PdfFileSecurity with input and output file.</p>  
        <p>Obsolete("Use constructor without destination.")</p> @param inputFile Source input Pdf file. @param outputFile Output Pdf file.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.#ctor">
       
        <p>Initialize the object of PdfFileSecurity.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.#ctor(IDocument)">
       
        <p>Initializes new {@code PdfFileSecurity} object on base of the {@code document}.</p> @param document Pdf document.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.#ctor(IDocument,String)">
       
        <p>Initializes new {@code PdfFileSecurity} object on base of the {@code document}.</p>  
        <p>Obsolete("Use constructor without destination.")</p> @param document Pdf document. @param outputFile Output Pdf file.
      
      <param name="IDocument"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.#ctor(IDocument,OutputStream)">
       
        <p>Initializes new {@code PdfFileSecurity} object on base of the {@code document}.</p>  
        <p>Obsolete("Use constructor without destination.")</p> @param document Pdf document. @param outputStream Output Pdf Stream.
      
      <param name="IDocument"/>
      <param name="OutputStream"/>
    </member>
    <member name="T:com.aspose.pdf.facades.PdfFileSignature">
       
        <p>Represents a class to sign a pdf file with a certificate.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.getSignatureAppearance">
       
        <p>Gets a graphic appearance for the signature. Property value represents image file name.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.setSignatureAppearance(String)">
       
        <p>Sets a graphic appearance for the signature. Property value represents image file name.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.isLtvEnabled">
       
        <p>Gets the LTV enabled flag.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.bindPdf(String)">
       
        <p>Binds a Pdf file for editing.</p> @param inputFile The pdf file to be edited.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.bindPdf(InputStream)">
       
        <p>Binds a Pdf stream for editing.</p> @param inputStream The pdf stream to be edited.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.save(String)">
       
        <p>Saves the result PDF to file.</p> @param outputFile output pdf file
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.save(OutputStream)">
       
        <p>Saves the result PDF to stream.</p> @param outputStream output pdf stream
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.sign(int,String,String,String,boolean,java.awt.Rectangle)">
       
        <p>Make a signature on the pdf document.</p>  
        <pre>String inFile = TestPath + "example1.pdf"; String outFile = TestPath + "signature.pdf"; PdfFileSignature pdfSign = new PdfFileSignature(); pdfSign.bindPdf(inFile); Rectangle rect = new Rectangle(100, 100, 200, 200); pdfSign.setSignatureAppearance ( TestPath + "butterfly.jpg"); pdfSign.setCertificate("certificate.pfx", "password"); pdfSign.sign(2, "Allen", "success", "ChangSha", true, rect); pdfSign.save(outFile);</pre> @param page The page number on which signature is made. @param SigReason The reason of signature. @param SigContact The contact of signature. @param SigLocation The location of signature. @param visible The visiblity of signature. @param annotRect The rect of signature.
      
      <param name="int"/>
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
      <param name="boolean"/>
      <param name="java.awt.Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.sign(int,String,String,String,boolean,java.awt.Rectangle,Signature)">&lt;p&gt; Sign the document with the given type signature. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; String inFile = TestPath + "example1.pdf"; String outFile = TestPath + "signature.pdf"; PdfFileSignature pdfSign = new PdfFileSignature(inFile, outFile); Rectangle rect = new Rectangle(100, 100, 200, 100); pdfSign.setSignatureAppearance ( TestPath + "butterfly.jpg"); pdfSign.sign(2, "Allen", "success", "ChangSha", true, rect, new PKCS1("certificate.pfx", "password")); pdfSign.save(); &lt;/pre&gt; @param page The page number on which signature is made. @param SigReason The reason of signature. @param SigContact The contact of signature. @param SigLocation The location of signature. @param visible The visiblity of signature. @param annotRect The rect of signature. @param sig The type of the signature, could be PKCS1, PKCS7 and PKCS7Detached. 
      <param name="int"/>
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
      <param name="boolean"/>
      <param name="java.awt.Rectangle"/>
      <param name="Signature"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.sign(int,boolean,java.awt.Rectangle,Signature)">&lt;p&gt; Sign the document with the given type signature. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; String inFile = TestPath + "example1.pdf"; String outFile = TestPath + "signature.pdf"; PKCS1 sig = new PKCS1("certificate.pfx", "password"); sig.setReason ( "Some reason"); sig.setContact ( "Smith"); sig.setLocation ( "New York"); PdfFileSignature pdfSign = new PdfFileSignature(inFile, outFile); Rectangle rect = new Rectangle(100, 100, 200, 100); pdfSign.setSignatureAppearance ( TestPath + "butterfly.jpg"); pdfSign.sign(2, true, rect, sig); pdfSign.save(); &lt;/pre&gt; @param page The page number on which signature is made. @param visible The visiblity of signature. @param annotRect The rect of signature. @param sig The type of the signature, could be PKCS1, PKCS7 and PKCS7Detached. Such data as signature reason, contact and location must be already present in this object (see corresponding properties). 
      <param name="int"/>
      <param name="boolean"/>
      <param name="java.awt.Rectangle"/>
      <param name="Signature"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.sign(String,String,String,String,Signature)">&lt;p&gt; Sign the document with the given type signature which is placed in already presented signature field. Before signing signature field must be empty, i.e. field must not contain signature dictionary. Thus pdf document already has signature field, you should not supply the place to stamp the signature, corresponding page and rectangle are taken from signature field which is found by signature name (see SigName parameter). &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; String inFile = TestPath + "example1.pdf"; String outFile = TestPath + "signature.pdf"; PKCS1 sig = new PKCS1("certificate.pfx", "password"); PdfFileSignature pdfSign = new PdfFileSignature(inFile, outFile); pdfSign.setSignatureAppearance ( TestPath + "butterfly.jpg"); pdfSign.sign("Signature1", "Allen", "success", "ChangSha", sig); pdfSign.save(); &lt;/pre&gt; @param SigName The name of the signature field. @param SigReason The reason of signature. @param SigContact The contact of signature. @param SigLocation The location of signature. @param sig The type of the signature, could be PKCS1, PKCS7 and PKCS7Detached. 
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
      <param name="Signature"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.sign(int,String,String,String,String,boolean,java.awt.Rectangle,Signature)">&lt;p&gt; Sign the document with the given type signature which is placed in already presented signature field. Before signing pdf document should already has signature field, corresponding page and rectangle are taken from signature field which is found by signature name (see SigName parameter). &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; String inFile = TestPath + "blankWithSignature.pdf"; String outFile = TestPath + "signature.pdf"; PKCS7 sig = new PKCS7("certificate.pfx", "password"); PdfFileSignature pdfSign = new PdfFileSignature(inFile); Rectangle rect = new Rectangle(100, 100, 100, 100); pdfSign.setSignatureAppearance( TestPath + "butterfly.jpg"); pdfSign.sign(1, "Signature1", "ReasonToTest", "ContactMe", "SomeLocation", true, rect, sig); pdfSign.save(outFile); &lt;/pre&gt; @param page The page number on which signature is made. @param SigName The name of the signature field. @param SigReason The reason of signature. @param SigContact The contact of signature. @param SigLocation The location of signature. @param visible The visiblity of signature. @param annotRect The rect of signature. @param sig The type of the signature, could be PKCS1, PKCS7 and PKCS7Detached. 
      <param name="int"/>
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
      <param name="boolean"/>
      <param name="java.awt.Rectangle"/>
      <param name="Signature"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.sign(String,Signature)">&lt;p&gt; Sign the document with the given type signature which is placed in already presented signature field. Before signing signature field must be empty, i.e. field must not contain signature dictionary. Thus pdf document already has signature field, you should not supply the place to stamp the signature, corresponding page and rectangle are taken from signature field which is found by signature name (see SigName parameter). Such data as signature reason, contact and location must be provided by corresponding properties of the Signature object sig. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; String inFile = TestPath + "example1.pdf"; String outFile = TestPath + "signature.pdf"; PKCS1 sig = new PKCS1("certificate.pfx", "password"); sig.setReason ( "Some reason"); sig.setContact ( "Smith"); sig.setLocation ( "New York"); PdfFileSignature pdfSign = new PdfFileSignature(inFile, outFile); pdfSign.setSignatureAppearance ( TestPath + "butterfly.jpg"); pdfSign.sign("Signature1", sig); pdfSign.save(); &lt;/pre&gt; @param SigName The name of the signature field. @param sig The type of the signature, could be PKCS1 (Pkcs1Signature object), PKCS7 and PKCS7 detached (Pkcs7Signature object) 
      <param name="String"/>
      <param name="Signature"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.isCertified">
       
        <p>Gets the flag determining whether a document is certified or not.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.getAccessPermissions">
       
        <p>Returns the access permissions value of certified document by the MDP signature type.</p> @return If the document is being certified, than returns access permissions value; otherwise, is thrown. @see com.aspose.pdf.DocMDPAccessPermissions
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.certify(int,String,String,String,boolean,java.awt.Rectangle,DocMDPSignature)">
       
        <p>Certify the document with the MDP signature. Such data as signature reason, contact and location must be provided by corresponding properties of the Signature object sig.</p> @param page The page on which signature is made. @param SigReason The reason of signature. @param SigContact The contact of signature. @param SigLocation The location of signature. @param visible The visiblity of signature. @param annotRect The rect of signature. @param docMdpSignature The document MDP type of the signature.
      
      <param name="int"/>
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
      <param name="boolean"/>
      <param name="java.awt.Rectangle"/>
      <param name="DocMDPSignature"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.certify(String,DocMDPSignature)">
       
        <p>Certify the document with the MDP signature which is placed in already presented signature field. Before signing signature field must be empty, i.e. field must not contain signature dictionary. Thus pdf document already has signature field, you should not supply the place to stamp the signature, corresponding page and rectangle are taken from signature field which is found by signature name (see sigName parameter).</p> @param sigName The name of the signature field. @param docMdpSignature The type of the signature, could be {@code 
        <PKCS1 cref="PKCS1"/>}, {@code 
        <PKCS7 cref="PKCS7"/>} and {@code 
        <PKCS7Detached cref="PKCS7Detached"/>}
      
      <param name="String"/>
      <param name="DocMDPSignature"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.getSignNames">&lt;p&gt; Gets the names of all not empty signatures. &lt;/p&gt; &lt;hr&gt; @return Return a arrayList.</member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.getSignNames(boolean)">&lt;p&gt; Gets the names of all not empty signatures. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; String inFile=TestPath + "example1.pdf"; PdfFileSignature pdfSign=new PdfFileSignature(); pdfSign.bindPdf(inFile); ArrayList names=pdfSign.getSignNames(true); for(int i=0;i&amp;lt;names.Count;i++) { System.out.println("signature name:"+(String)names[i]); System.out.println("coverswholedocument:"+pdfSign.IsCoversWholeDocument((String)names[i])); System.out.println("revision:"+pdfSign.GetRevision((String)names[i])); System.out.println("verifysigned:"+pdfSign.VerifySigned((String)names[i])); System.out.println("reason:"+pdfSign.GetReason((String)names[i])); System.out.println("location:"+pdfSign.GetLocation((String)names[i])); System.out.println("datatime:"+pdfSign.GetDateTime((String)names[i])); } System.out.println("totalvision:"+pdfSign.GetTotalRevision()); &lt;/pre&gt; @param onlyActive boolean value, if true, return only active signatures; otherwise, return all signatures. @return Return a arrayList. 
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.getBlankSignNames">
       
        <p>Gets the names of all empty signature fields.</p> @return Return a arrayList.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.isContainSignature">
       
        <p>Checks if the pdf has a digital signature or not.</p> @return Return a result of bool type.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.containsSignature">
       
        <p>Checks if the pdf has a digital signature or not.</p> @return Return a result of bool type.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.containsUsageRights">
       
        <p>Checks if the pdf has a usage rights or not.</p> @return Returns a result of bool type.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.isCoversWholeDocument(String)">
       
        <p>Checks if the signature covers the whole document.</p> @param signName The name of signature. @return Return a result of bool type.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.coversWholeDocument(String)">
       
        <p>Checks if the signature covers the whole document.</p> @param signName The name of signature. @return Return a result of bool type.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.getRevision(String)">
       
        <p>Gets the revision of a signature.</p> @param signName The name of signature. @return Return the number of signature revision.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.getTotalRevision">
       
        <p>Gets the toltal revision.</p> @return Return the total number of signature revision.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.removeUsageRights">
       
        <p>Removes the usage rights entry.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.removeSignature(String)">&lt;p&gt; Remove the signature according to the name of the signature. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; String inFile = TestPath + "example1.pdf"; PdfFileSignature pdfSign = new PdfFileSignature(); pdfSign.bindPdf(inFile); List names = pdfSign.getSignNames(); for(int i = 0; i &amp;lt; names.size(); i++) { pdfSign.removeSignature((String)names.get(i)); } pdfSign.save(TestPath + "signed_removed.pdf"); &lt;/pre&gt; @param signName The name of signature. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.removeSignature(String,boolean)">&lt;p&gt; Removes the signature according to the name of the signature. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; String inFile = TestPath + "example1.pdf"; PdfFileSignature pdfSign = new PdfFileSignature(); pdfSign.BindPdf(inFile); List names = pdfSign.getSignNames(); for(int i = 0; i &amp;lt; names.size(); i++) { pdfSign.removeSignature((String)names.get(i), false); } pdfSign.save(TestPath + "signed_removed.pdf"); &lt;/pre&gt; @param signName The name of signature. @param removeField If set to true, than removes both of signature and field from document; otherwise, signature only. 
      <param name="String"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.verifySigned(String)">
       
        <p>Checks the validity of a signature.</p> @param signName The name of signature. @return Return a result of bool type.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.getSignerName(String)">
       
        <p>Gets the name of person or organization who signing the pdf document.</p> @param signName The name of signature. @return Returns the result of the signer's name.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.getDateTime(String)">
       
        <p>Gets the signature's datetime.</p> @param signName The name of signature. @return Return the result of DateTime type.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.getReason(String)">
       
        <p>Gets the reason of a signature.</p> @param signName The name of signature. @return Returns a result of String type.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.getLocation(String)">
       
        <p>Gets the location of a signature.</p> @param signName The name of signature. @return Returns a result of String type.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.getContactInfo(String)">
       
        <p>Gets the contact information of a signature.</p> @param signName The name of signature. @return Returns a result of String type.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.verifySignature(String)">
       
        <p>Checks the validity of a signature.</p> @param signName The name of signature. @return Return a result of bool type.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.extractImage(String)">
       
        <p>Extracts signature's image.</p> @param signName The name of signature. @return If image was successfully found than returns stream object; otherwise, null.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.extractCertificate(String)">
       
        <p>Extracts signature's single X.509 certificate as a stream.</p> @param signName The name of signature. @return If certificate was found returns X.509 single certificate; otherwise, null.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.save">
       
        <p>Save signed pdf file. Output filename must be provided before with the help of coresponding PdfFileSignature constructor.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.setCertificate(String,String)">
       
        <p>Set certificate file and password for signing routine.</p> @param pfx PKCS #12 certificate file. @param pass Password to get access for the certificate private key.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.getSignatureAppearanceStream">
       
        <p>Gets a graphic appearance for the signature. Property value represents image stream.</p> @return InputStream element
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.setSignatureAppearanceStream(InputStream)">
       
        <p>Sets a graphic appearance for the signature. Property value represents image stream.</p> @param value InputStream element
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.close">
      Closes the facade.
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.dispose">
      Closes the facade. This method is obsolete, use close() instead.
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.#ctor">
       
        <p>The constructor of PdfFileSignature class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.#ctor(String)">
       
        <p>The constructor of PdfFileSignature class.</p> @param inputFile The input file for signature.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.#ctor(String,String)">
       
        <p>The constructor of PdfFileSignature class.</p> @param inputFile The input file for signature. @param outputFile The output file.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.#ctor(IDocument)">
       
        <p>Initializes new {@code PdfFileSignature} object on base of the {@code document}.</p> @param document Pdf document.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.#ctor(IDocument,String)">
       
        <p>Initializes new {@code PdfFileSignature} object on base of the {@code document}.</p> @param document Pdf document. @param outputFile The output file.
      
      <param name="IDocument"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.facades.PdfFileStamp">
       
        <p>Class for adding stamps (watermark or background) to PDF files.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.getKeepSecurity">
       
        <p>Keeps security if true. (This feature will be implemented in next versions).</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.setKeepSecurity(boolean)">
       
        <p>Keeps security if true. (This feature will be implemented in next versions).</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.getInputFile">
       
        <p>Gets name and path of input file.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.setInputFile(String)">
       
        <p>Sets name and path of input file.</p> Obsolete("Use bindPdf(inputFile) method for facade initialization.") @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.getInputStream">
       
        <p>Gets input stream.</p> Obsolete("Use bindPdf(inputFile) method for facade initialization.") @return InputStream object
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.setInputStream(InputStream)">
       
        <p>Sets input stream.</p> @param value InputStream object
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.getOutputFile">
       
        <p>Gets name and path of output file.</p> Obsolete("Use Save(outputFile) method for getting facade results.") @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.setOutputFile(String)">
       
        <p>Sets name and path of output file.</p> Obsolete("Use Save(outputFile) method for getting facade results.") @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.getOutputStream">
       
        <p>Gets output stream.</p> @return OutputStream object
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.setOutputStream(OutputStream)">
       
        <p>Sets or sets output stream.</p> @param value OutputStream object
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.getPageNumberRotation">
       
        <p>Gets rotation of page number. Rotation is in degrees. Default is 0.</p> @return float value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.setPageNumberRotation(float)">
       
        <p>Sets rotation of page number. Rotation is in degrees. Default is 0.</p> @param value float value
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.setConvertTo(int)">
       
        <p>Sets PDF file format. Result file will be saved in specified file format. If this property is not specified then file will be save in default PDF format without conversion.</p> @param value PdfFormat element
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.getPageHeight">&lt;p&gt; Gets height of first page in souorce file. &lt;/p&gt; @return float value &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp(&amp;quot;input.pdf&amp;quot;, &amp;quot;output.pdf&amp;quot;); System.out.println(&amp;quot;Height = &amp;quot; + fileStamp.getPageHeight()); fileStamp.close(); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.getPageWidth">&lt;p&gt; Gets width of first page in input file. &lt;/p&gt; @return float value &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp(&amp;quot;input.pdf&amp;quot;, &amp;quot;output.pdf&amp;quot;); System.out.println(&amp;quot;Width = &amp;quot; + fileStamp.getPageWidth()); fileStamp.close(); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.getStartingNumber">
       
        <p>Gets or sets starting number for first page in input file. Next pages will be numbered starting from this value.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.setStartingNumber(int)">&lt;p&gt; Sets starting number for first page in input file. Next pages will be numbered starting from this value. For example if StartingNumber is set to 100, document pages will have numbers 100, 101, 102... &lt;/p&gt; @param value int value &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp(&amp;quot;input.pdf&amp;quot;, &amp;quot;output.pdf&amp;quot;); fileStamp.setStartingNumber(100); fileStamp.addPageNumber(&amp;quot;Page #&amp;quot;); fileStamp.close(); &lt;/pre&gt; 
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.close">&lt;p&gt; Closes opened files and saves changes. Warning. If input or output streams are specified they are not closed by Close() method. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf"); //do some work... stamp.close(); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addStamp(Stamp)">&lt;p&gt; Adds stamp to the file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp(&amp;quot;input.pdf&amp;quot;, &amp;quot;output.pdf&amp;quot;); Stamp stamp = new com.aspose.pdf.facades.Stamp(); stamp.setOrigin(140, 400); stamp.setImageSize(50, 50); stamp.setOpacity(0.8f); stamp.isBackground(true); stamp.bindImage(&amp;quot;image.jpg&amp;quot;); fileStamp.addStamp(stamp); fileStamp.close(); &lt;/pre&gt; @param stamp Stamp object which. 
      <param name="Stamp"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.getNumberingStyle">
       
        <p>Gets or sets pabge numbering style. Possible values: NumeralsArabic, NumeralsRomanUppercase, NumeralsRomanLowercase, LettersAppercase, LettersLowercase</p> @return NumberingStyle element @see NumberingStyle
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.setNumberingStyle(int)">
       
        <p>Gets or sets pabge numbering style. Possible values: NumeralsArabic, NumeralsRomanUppercase, NumeralsRomanLowercase, LettersAppercase, LettersLowercase</p> @param value NumberingStyle element @see NumberingStyle
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addPageNumber(String)">&lt;p&gt; Add page number to file. Page number text may contain # sign which will be replaced with number of the page. Page number is placed in the bottom of the page centered horizontally. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber("Page #"); fileStamp.close(); &lt;/pre&gt; @param formatString Text of page number 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addPageNumber(FormattedText)">&lt;p&gt; Adds page number to the page. Page number may contain # sign which will be replaced with page number. Page number is placed in the bottom of the page centered horizontally. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber(new FormattedText("Page #")); fileStamp.close(); &lt;/pre&gt; @param formattedText Format string for page number representes as FormattedText. 
      <param name="FormattedText"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addPageNumber(String,int,float,float,float,float)">&lt;p&gt; Adds page number to the pages of document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber("Page #", PdfFileStamp.PosBottomLeft, 100, 100, 200, 200); fileStamp.close(); &lt;/pre&gt; @param formatString Format string for page number. @param position Position where page number will be placed on the page. 0-bottom middle, 1-bottom right, 2-upper right, 3 - sides right, 4 - upper middle,5 - bottom left,6 - sides left,7 - upper left. You can use the following constants: PosBottomMiddle = 0, PosBottomRight = 1, PosUpperRight = 2, PosSidesRight = 3, PosUpperMiddle, PosBottomLeft = 5, PosSidesLeft, PosUpperLeft @param leftMargin Margin on the left edge of the page. @param rightMargin Margin on the right edge of the page. @param topMargin Margin on the top edge of the page. @param bottomMargin Margin on the bottom edge of the page. 
      <param name="String"/>
      <param name="int"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addPageNumber(String,float,float)">&lt;p&gt; Adds page number at the specified position on the page. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber(new FormattedText("Page #"), 123, 357); fileStamp.close(); &lt;/pre&gt; @param formatString Format string. Format string can contain # sign which will be replaced with page number. @param x X coordinate of page number. @param y Y coordinate of page number. 
      <param name="String"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addPageNumber(FormattedText,int,float,float,float,float)">&lt;p&gt; Adds page number to the pages of document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber(new FormattedText("Page #"), PdfFileStamp.PosBottomLeft, 100, 100, 200, 200); fileStamp.close(); &lt;/pre&gt; @param formattedText FormattedText object which represents page number format and properties iof the text. @param position Position where page number will be placed on the page. 0-bottom middle, 1-bottom right, 2-upper right, 3 - sides right, 4 - upper middle,5 - bottom left,6 - sides left,7 - upper left. You can use the following constants: PosBottomMiddle = 0, PosBottomRight = 1, PosUpperRight = 2, PosSidesRight = 3, PosUpperMiddle, PosBottomLeft = 5, PosSidesLeft, PosUpperLeft @param leftMargin Margin on the left edge of the page. @param rightMargin Margin on the right edge of the page. @param topMargin Margin on the top edge of the page. @param bottomMargin Margin on the bottom edge of the page. 
      <param name="FormattedText"/>
      <param name="int"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addPageNumber(FormattedText,float,float)">&lt;p&gt; Adds page number at the specified position on the page. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber(new FormattedText("Page #"), 123, 357); fileStamp.close(); &lt;/pre&gt; @param formattedText Formatted text which represents page number format and properties of the text. Format string can contain # sign which will be replaced with page number. @param x X coordinate of page number. @param y Y coordinate of page number. 
      <param name="FormattedText"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addHeader(FormattedText,float)">&lt;p&gt; Adds header to the page. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addHeader(new FormattedText("Head of the page"), 50); fileStamp.close(); &lt;/pre&gt; @param formattedText Text for header and properties of the text. @param topMargin Margin on the top of page. 
      <param name="FormattedText"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addHeader(FormattedText,float,float,float)">&lt;p&gt; Adds header to the pages of file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf"); stamp.addHeader(new FormattedText("Head of the page"), 10, 50, 50); &lt;/pre&gt; @param formattedText Formatted text object which contains page text and its properties. @param topMargin Margin on the top of the page. @param leftMargin Margin on the left of the page. @param rightMargin Margin on the right of the page. 
      <param name="FormattedText"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addHeader(String,float)">&lt;p&gt; Adds image as header to the pages of the file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); InpetuStream input = new FileInputStream(TestSettings.GetInputFile("test.jpg")); fileStamp.addHeader("image.jpg", 50); fileStamp.close(); &lt;/pre&gt; @param imageFile Path to the image file. @param topMargin Margin at top of the page. 
      <param name="String"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addHeader(String,float,float,float)">&lt;p&gt; Adds image as header on the pages. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); InputStream input = new FileInputStream(TestSettings.GetInputFile("test.jpg")); fileStamp.addHeader("image.jpg", 50, 100, 100); fileStamp.close(); &lt;/pre&gt; @param imageFile Path to the image file. @param topMargin Margin at top of the page. @param leftMargin Margin at left side of the page. @param rightMargin Margin at right side of the page. 
      <param name="String"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addHeader(InputStream,float)">&lt;p&gt; Adds image as header on the pages. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); InputStream input = new FileInputStream("test.jpg"); fileStamp.addHeader(new FileInputStream("image.jpg"), 50); fileStamp.close(); &lt;/pre&gt; @param imageStream Stream of the image. @param topMargin Margin at top of the page. 
      <param name="InputStream"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addHeader(InputStream,float,float,float)">&lt;p&gt; Adds image at the top of the page. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); IjnputStream input = new FileInputStream("test.jpg"); fileStamp.addHeader(new FileInputStream("image.jpg"), 50, 100, 100); fileStamp.close(); &lt;/pre&gt; @param inputStream Stream which contains image data. @param topMargin Margin at top of the page. @param leftMargin Margin at left side of the page. @param rightMargin Margin at right side of the page. 
      <param name="InputStream"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addFooter(FormattedText,float)">&lt;p&gt; Adds footer to the pages of the document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf"); stamp.addFooter(new FormattedText("Foot of the page"), 10); &lt;/pre&gt; @param formattedText FormattedText object which contains text of the footer and text properties. @param bottomMargin Margin at the top of page. 
      <param name="FormattedText"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addFooter(FormattedText,float,float,float)">&lt;p&gt; Adds footer to the pages of the document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf"); stamp.addFooter(new FormattedText("Foot of the page"), 10, 50, 50); &lt;/pre&gt; @param formattedText FormattedText object which contains footer text and text properties. @param bottomMargin Margin at the bottom of the page. @param leftMargin Margin at the left side of the page. @param rightMargin Margin at the right side of the page. 
      <param name="FormattedText"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addFooter(String,float)">&lt;p&gt; Adds image as footer to the pages of the document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); InputStream input = new FileInputStream("test.jpg"); fileStamp.addFooter("image.jpg", 50); fileStamp.close(); &lt;/pre&gt; @param imageFile Image file name and path. @param bottomMargin Margin at the bottom of the page. 
      <param name="String"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addFooter(String,float,float,float)">
       
        <p>Adds image as footer of the pages.</p> @param imageFile Iamge file name and path. @param bottomMargin Margin at the bottom of the page. @param leftMargin Margin at the left side of the page. @param rightMargin Margin at the right side of the page.
      
      <param name="String"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addFooter(InputStream,float)">&lt;p&gt; Adds image as footer of the page. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); InputStream input = new FileInputStream("test.jpg"); fileStamp.addFooter(new FileInputStream("image.jpg"), 50); fileStamp.close(); &lt;/pre&gt; @param imageStream Stream contains image data. @param bottomMargin Margin at the bottom of the page. 
      <param name="InputStream"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addFooter(InputStream,float,float,float)">&lt;p&gt; Adds image as footer of the page. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); InputStream input = new FileInputStream("test.jpg"); fileStamp.addFooter(new FileInputStream("image.jpg"), 50, 50, 50); fileStamp.close(); &lt;/pre&gt; @param imageStream Stream contains image data. @param bottomMargin Margin at the bottom of the page. @param leftMargin Margin at the left side of the page. @param rightMargin Margin at the right side of the page. 
      <param name="InputStream"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addPageNumber(String,int)">&lt;p&gt; Adds page number to the pages. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber("Page #", PdfFileStamp.POS_UPPER_RIGHT); fileStamp.close(); &lt;/pre&gt; @param formatString Format of the page number. This text may contain # which will be replaced with page number. @param position Position where page number will be placed on the page. 0-bottom middle, 1-bottom right, 2-upper right, 3 - sides right, 4 - upper middle,5 - bottom left,6 - sides left,7 - upper left. You can use the following constants: PosBottomMiddle = 0, PosBottomRight = 1, PosUpperRight = 2, PosSidesRight = 3, PosUpperMiddle, PosBottomLeft = 5, PosSidesLeft, PosUpperLeft 
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addPageNumber(FormattedText,int)">&lt;p&gt; Adds page number to the pages. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber("Page #", PdfFileStamp.POS_UPPER_RIGHT); fileStamp.close(); &lt;/pre&gt; @param formattedText FormattedText object which contains format of the page number and text properties. This text may contain # which will be replaced with page number. @param position Position where page number will be placed on the page. 0-bottom middle, 1-bottom right, 2-upper right, 3 - sides right, 4 - upper middle,5 - bottom left,6 - sides left,7 - upper left. You can use the following constants: PosBottomMiddle = 0, PosBottomRight = 1, PosUpperRight = 2, PosSidesRight = 3, PosUpperMiddle, PosBottomLeft = 5, PosSidesLeft, PosUpperLeft 
      <param name="FormattedText"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.getContentDisposition">
       
        <p>Gets how content will be stored when result of operation is stored into HttpResponse object. Possible value: inline / attachment. Default: inline.</p> @return ContentDisposition element @see com.aspose.pdf.ContentDisposition
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.setContentDisposition(int)">
       
        <p>Sets how content will be stored when result of operation is stored into HttpResponse object. Possible value: inline / attachment. Default: inline.</p> @param value ContentDisposition element @see com.aspose.pdf.ContentDisposition
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.getSaveOptions">
       
        <p>Gets save options when result is stored as HttpResponse. Default value: PdfSaveOptions.</p> @return SaveOptions object
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.setSaveOptions(SaveOptions)">
       
        <p>Sets save options when result is stored as HttpResponse. Default value: PdfSaveOptions.</p> @param value SaveOptions object
      
      <param name="SaveOptions"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.getAttachmentName">
       
        <p>Gets name of attachment when result of operation is stored into HttpResponse objects as attachment.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.setAttachmentName(String)">
       
        <p>Sets name of attachment when result of operation is stored into HttpResponse objects as attachment.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.#ctor">&lt;p&gt; Constructor of the PdfFileStamp. Input file and output file may be specified via corresponding properties. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp(); fileStamp.setInputFile ( "input.pdf"); fileStamp.setOutputFile ( "output.pdf"); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.#ctor(IDocument)">
       
        <p>Initializes new {@code PdfFileStamp} object on base of the {@code document}.</p> @param document Pdf document.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.#ctor(IDocument,OutputStream)">
       
        <p>Initializes new {@code PdfFileStamp} object on base of the {@code document}.</p> @param document Pdf document. @param outputStream Output stream.
      
      <param name="IDocument"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.#ctor(IDocument,String)">
       
        <p>Initializes new {@code PdfFileStamp} object on base of the {@code document}.</p> @param document Pdf document. @param outputFile Output file name and path.
      
      <param name="IDocument"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.#ctor(InputStream,OutputStream)">&lt;p&gt; Constructor for PdfFileStamp. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; [SampleCode] InputStream input = new FileInputStream("input.pdf"); OutputStream output = new FileInputStream("output.pdf"); PdfFileStamp stamp = new PdfFileStamp(input, output); &lt;/pre&gt; @param inputStream Input stream. @param outputStream Output stream. 
      <param name="InputStream"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.#ctor(InputStream,OutputStream,boolean)">
       
        <p>Constructor of PdfFileStamp.</p> @param inputStream Input stream. @param outputStream Output stream. @param keepSecurity Keep security if true.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.#ctor(String,String)">&lt;p&gt; Constructor for PdfFileStamp. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf"); &lt;/pre&gt; @param inputFile Input file name and path. @param outputFile Output file name and path. 
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.#ctor(String,String,boolean)">
       
        <p>Constructor for PdfFileStamp.</p> @param inputFile Input file name and path. @param outputFile Output file name and path. @param keepSecurity Keep security if true.
      
      <param name="String"/>
      <param name="String"/>
      <param name="boolean"/>
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileStamp.POS_BOTTOM_MIDDLE">
       
        <p>Bottom middle position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileStamp.POS_BOTTOM_RIGHT">
       
        <p>Bottom right position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileStamp.POS_UPPER_RIGHT">
       
        <p>Right upper position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileStamp.POS_SIDES_RIGHT">
       
        <p>Right position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileStamp.POS_UPPER_MIDDLE">
       
        <p>Upper middle position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileStamp.POS_BOTTOM_LEFT">
       
        <p>Bottom left position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileStamp.POS_SIDES_LEFT">
       
        <p>Left position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileStamp.POS_UPPER_LEFT">
       
        <p>Upper let position.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.PdfFileStampWeb">
       
        <p>Class for adding stamps (watermark or background) to PDF files. Enable to work with HttpServletResponse.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.getKeepSecurity">
       
        <p>Keeps security if true. (This feature will be implemented in next versions).</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.setKeepSecurity(boolean)">
       
        <p>Keeps security if true. (This feature will be implemented in next versions).</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.getInputFile">
       
        <p>Gets name and path of input file.</p> @return String object
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.setInputFile(String)">
       
        <p>Sets name and path of input file.</p> @param value String object
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.getInputStream">
       
        <p>Gets input stream.</p> @return InputStream object
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.setInputStream(InputStream)">
       
        <p>Sets input stream.</p> @param value InputStream object
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.getOutputFile">
       
        <p>Gets name and path of output file.</p> @return String object
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.setOutputFile(String)">
       
        <p>Sets name and path of output file.</p> @param value String object
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.getOutputStream">
       
        <p>Gets output stream.</p> @return OutputStream object
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.setOutputStream(OutputStream)">
       
        <p>Sets or sets output stream.</p> @param value OutputStream object
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.getPageNumberRotation">
       
        <p>Gets rotation of page number. Rotation is in degrees. Default is 0.</p> @return float value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.setPageNumberRotation(float)">
       
        <p>Sets rotation of page number. Rotation is in degrees. Default is 0.</p> @param value float value
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.setConvertTo(int)">
       
        <p>Sets PDF file format. Result file will be saved in specified file format. If this property is not specified then file will be save in default PDF format without conversion.</p> @param value PdfFormat element @see com.aspose.pdf.PdfFormat
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.getPageHeight">&lt;p&gt; Gets height of first page in source file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); System.out.println("Height = " + fileStamp.getPageHeight()); fileStamp.close(); &lt;/pre&gt; @return float value</member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.getPageWidth">&lt;p&gt; Gets width of first page in input file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); System.out.println("Width = " + fileStamp.getPageWidth()); fileStamp.close(); &lt;/pre&gt; @return float value</member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.getStartingNumber">
      Gets or sets starting number for first page in input file. Next pages will be numbered starting from this value. @return int value
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.setStartingNumber(int)">&lt;p&gt; Sets starting number for first page in input file. Next pages will be numbered starting from this value. For example if StartingNumber is set to 100, document pages will have numbers 100, 101, 102... &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.setStartingNumber( 100); fileStamp.addPageNumber("Page #"); fileStamp.close(); &lt;/pre&gt; @param value int value 
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addStamp(Stamp)">&lt;p&gt; Adds stamp to the file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); Stamp stamp = new com.aspose.pdf.facades.Stamp(); stamp.setOrigin(140, 400); stamp.setImageSize(50, 50); stamp.setOpacity ( 0.8f); stamp.isBackground ( true); stamp.bindImage("image.jpg"); fileStamp.addStamp(stamp); fileStamp.close(); &lt;/pre&gt; @param stamp Stamp object. 
      <param name="Stamp"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addPageNumber(String)">&lt;p&gt; Add page number to file. Page number text may contain # sign which will be replaced with number of the page. Page number is placed in the bottom of the page centered horizontally. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber("Page #"); fileStamp.close(); &lt;/pre&gt; @param formatString Text of page number 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addPageNumber(FormattedText)">&lt;p&gt; Adds page number to the page. Page number may contain # sign which will be replaced with page number. Page number is placed in the bottom of the page centered horizontally. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber(new FormattedText("Page #")); fileStamp.close(); &lt;/pre&gt; @param formattedText Format string for page number representes as FormattedText. 
      <param name="FormattedText"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addPageNumber(String,int,float,float,float,float)">&lt;p&gt; Adds page number to the pages of document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber("Page #", PdfFileStamp.POS_BOTTOM_LEFT, 100, 100, 200, 200); fileStamp.close(); &lt;/pre&gt; @param formatString Format string for page number. @param position Position where page number will be placed on the page. 0-bottom middle, 1-bottom right, 2-upper right, 3 - sides right, 4 - upper middle,5 - bottom left,6 - sides left,7 - upper left. You can use the following constants: PosBottomMiddle = 0, PosBottomRight = 1, PosUpperRight = 2, PosSidesRight = 3, PosUpperMiddle, PosBottomLeft = 5, PosSidesLeft, PosUpperLeft @param leftMargin Margin on the left edge of the page. @param rightMargin Margin on the right edge of the page. @param topMargin Margin on the top edge of the page. @param bottomMargin Margin on the bottom edge of the page. 
      <param name="String"/>
      <param name="int"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addPageNumber(String,float,float)">&lt;p&gt; Adds page number at the specified position on the page. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber(new FormattedText("Page #"), 123, 357); fileStamp.close(); &lt;/pre&gt; @param formatString Format string. Format string can contain # sign which will be replaced with page number. @param x X coordinate of page number. @param y Y coordinate of page number. 
      <param name="String"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addPageNumber(FormattedText,int,float,float,float,float)">&lt;p&gt; Adds page number to the pages of document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber(new FormattedText("Page #"), PdfFileStamp.POS_BOTTOM_LEFT, 100, 100, 200, 200); fileStamp.close(); &lt;/pre&gt; @param formattedText FormattedText object which represents page number format and properties iof the text. @param position Position where page number will be placed on the page. 0-bottom middle, 1-bottom right, 2-upper right, 3 - sides right, 4 - upper middle,5 - bottom left,6 - sides left,7 - upper left. You can use the following constants: PosBottomMiddle = 0, PosBottomRight = 1, PosUpperRight = 2, PosSidesRight = 3, PosUpperMiddle, PosBottomLeft = 5, PosSidesLeft, PosUpperLeft @param leftMargin Margin on the left edge of the page. @param rightMargin Margin on the right edge of the page. @param topMargin Margin on the top edge of the page. @param bottomMargin Margin on the bottom edge of the page. 
      <param name="FormattedText"/>
      <param name="int"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addPageNumber(FormattedText,float,float)">&lt;p&gt; Adds page number at the specified position on the page. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber(new FormattedText("Page #"), 123, 357); fileStamp.close(); &lt;/pre&gt; @param formattedText Formatted text which represents page number format and properties of the text. Format string can contain # sign which will be replaced with page number. @param x X coordinate of page number. @param y Y coordinate of page number. 
      <param name="FormattedText"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addHeader(FormattedText,float)">&lt;p&gt; Adds header to the page. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addHeader(new FormattedText("Head of the page"), 50); fileStamp.close(); &lt;/pre&gt; @param formattedText Text for header and properties of the text. @param topMargin Margin on the top of page. 
      <param name="FormattedText"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addHeader(FormattedText,float,float,float)">&lt;p&gt; Adds header to the pages of file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf"); stamp.addHeader(new FormattedText("Head of the page"), 10, 50, 50); &lt;/pre&gt; @param formattedText Formatted text object which contains page text and its properties. @param topMargin Margin on the top of the page. @param leftMargin Margin on the left of the page. @param rightMargin Margin on the right of the page. 
      <param name="FormattedText"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addHeader(String,float)">&lt;p&gt; Adds image as header to the pages of the file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); fileStamp.addHeader("image.jpg", 50); fileStamp.close(); &lt;/pre&gt; @param imageFile Path to the image file. @param topMargin Margin at top of the page. 
      <param name="String"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addHeader(String,float,float,float)">&lt;p&gt; Adds image as header on the pages. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); fileStamp.addHeader("image.jpg", 50, 100, 100); fileStamp.close(); &lt;/pre&gt; @param imageFile Path to the image file. @param topMargin Margin at top of the page. @param leftMargin Margin at left side of the page. @param rightMargin Margin at right side of the page. 
      <param name="String"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addHeader(InputStream,float)">&lt;p&gt; Adds image as header on the pages. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); InputStream input = new FileInputStream("test.jpg"); fileStamp.addHeader(input, 50); fileStamp.close(); &lt;/pre&gt; @param imageStream Stream of the image. @param topMargin Margin at top of the page. 
      <param name="InputStream"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addHeader(InputStream,float,float,float)">&lt;p&gt; Adds image at the top of the page. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); InputStream input = new FileInputStream("test.jpg"); fileStamp.addHeader(input, 50, 100, 100); fileStamp.close(); &lt;/pre&gt; @param inputStream Stream which contains image data. @param topMargin Margin at top of the page. @param leftMargin Margin at left side of the page. @param rightMargin Margin at right side of the page. 
      <param name="InputStream"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addFooter(FormattedText,float)">&lt;p&gt; Adds footer to the pages of the document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf"); stamp.addFooter(new FormattedText("Foot of the page"), 10); &lt;/pre&gt; @param formattedText FormattedText object which contains text of the footer and text properties. @param bottomMargin Margin at the top of page. 
      <param name="FormattedText"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addFooter(FormattedText,float,float,float)">&lt;p&gt; Adds footer to the pages of the document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf"); stamp.addFooter(new FormattedText("Foot of the page"), 10, 50, 50); &lt;/pre&gt; @param formattedText FormattedText object which contains footer text and text properties. @param bottomMargin Margin at the bottom of the page. @param leftMargin Margin at the left side of the page. @param rightMargin Margin at the right side of the page. 
      <param name="FormattedText"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addFooter(String,float)">&lt;p&gt; Adds image as footer to the pages of the document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); fileStamp.addFooter("image.jpg", 50); fileStamp.close(); &lt;/pre&gt; @param imageFile Image file name and path. @param bottomMargin Margin at the bottom of the page. 
      <param name="String"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addFooter(String,float,float,float)">
       
        <p>Adds image as footer of the pages.</p> @param imageFile Iamge file name and path. @param bottomMargin Margin at the bottom of the page. @param leftMargin Margin at the left side of the page. @param rightMargin Margin at the right side of the page.
      
      <param name="String"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addFooter(InputStream,float)">&lt;p&gt; Adds image as footer of the page. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); InputStream input = new FileInputStream("test.jpg"); fileStamp.addFooter(input, 50); fileStamp.close(); &lt;/pre&gt; @param imageStream Stream contains image data. @param bottomMargin Margin at the bottom of the page. 
      <param name="InputStream"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addFooter(InputStream,float,float,float)">&lt;p&gt; Adds image as footer of the page. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); InputStream input = new FileInputStream("test.jpg"); fileStamp.addFooter(input, 50, 50, 50); fileStamp.close(); &lt;/pre&gt; @param imageStream Stream contains image data. @param bottomMargin Margin at the bottom of the page. @param leftMargin Margin at the left side of the page. @param rightMargin Margin at the right side of the page. 
      <param name="InputStream"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addPageNumber(String,int)">&lt;p&gt; Adds page number to the pages. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber("Page #", PdfFileStamp.PosUpperRight); fileStamp.close(); &lt;/pre&gt; @param formatString Format of the page number. This text may contain # which will be replaced with page number. @param position Position where page number will be placed on the page. 0-bottom middle, 1-bottom right, 2-upper right, 3 - sides right, 4 - upper middle,5 - bottom left,6 - sides left,7 - upper left. You can use the following constants: PosBottomMiddle = 0, PosBottomRight = 1, PosUpperRight = 2, PosSidesRight = 3, PosUpperMiddle, PosBottomLeft = 5, PosSidesLeft, PosUpperLeft 
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addPageNumber(FormattedText,int)">&lt;p&gt; Adds page number to the pages. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber("Page #", PdfFileStamp.PosUpperRight); fileStamp.close(); &lt;/pre&gt; @param formattedText FormattedText object which contains format of the page number and text properties. This text may contain # which will be replaced with page number. @param position Position where page number will be placed on the page. 0-bottom middle, 1-bottom right, 2-upper right, 3 - sides right, 4 - upper middle,5 - bottom left,6 - sides left,7 - upper left. You can use the following constants: PosBottomMiddle = 0, PosBottomRight = 1, PosUpperRight = 2, PosSidesRight = 3, PosUpperMiddle, PosBottomLeft = 5, PosSidesLeft, PosUpperLeft 
      <param name="FormattedText"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.getContentDisposition">
       
        <p>Gets how content will be stored when result of operation is stored into HttpResponse object. Possible value: inline / attachment. Default: inline.</p> @return ContentDisposition element
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.setContentDisposition(int)">
       
        <p>Sets how content will be stored when result of operation is stored into HttpResponse object. Possible value: inline / attachment. Default: inline.</p> @param value ContentDisposition element
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.getSaveOptions">
       
        <p>Gets save options when result is stored as HttpResponse. Default value: PdfSaveOptions.</p> @return SaveOptions object
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.setSaveOptions(SaveOptions)">
       
        <p>Sets save options when result is stored as HttpResponse. Default value: PdfSaveOptions.</p> @param value SaveOptions object
      
      <param name="SaveOptions"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.getAttachmentName">
       
        <p>Gets name of attachment when result of operation is stored into HttpResponse objects as attachment.</p> @return string object
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.setAttachmentName(String)">
       
        <p>Sets name of attachment when result of operation is stored into HttpResponse objects as attachment.</p> @param value string object
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.close">&lt;p&gt; Closes opened files and saves changes. Warning. If input or output streams are specified they are not closed by Close() method. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf"); //do some work... stamp.close(); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.getResponse">
       
        <p>Gets Response object where result of operation will be stored.</p> @return HttpServletResponse object
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.setResponse(HttpServletResponse)">
       
        <p>Sets Response object where result of operation will be stored.</p> @param value HttpServletResponse object
      
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.#ctor">&lt;p&gt; Constructor of the PdfFileStamp. Input file and output file may be specified via corresponding properties. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp(); fileStamp.setInputFile ( "input.pdf"); fileStamp.setOutputFile ( "output.pdf"); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.#ctor(IDocument)">
       
        <p>Initializes new {@code PdfFileStamp} object on base of the {@code document}.</p> @param document Pdf document.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.#ctor(IDocument,OutputStream)">
       
        <p>Initializes new {@code PdfFileStamp} object on base of the {@code document}.</p> @param document Pdf document. @param outputStream Output stream.
      
      <param name="IDocument"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.#ctor(IDocument,String)">
       
        <p>Initializes new {@code PdfFileStamp} object on base of the {@code document}.</p> @param document Pdf document. @param outputFile Output file name and path.
      
      <param name="IDocument"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.#ctor(InputStream,OutputStream)">&lt;p&gt; Constructor for PdfFileStamp. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; InputStream input = new FileInputStream("input.pdf"); OutputStream output = new FileInputStream("output.pdf"); PdfFileStamp stamp = new PdfFileStamp(input, output); &lt;/pre&gt; @param inputStream Input stream. @param outputStream Output stream. 
      <param name="InputStream"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.#ctor(InputStream,OutputStream,boolean)">
       
        <p>Constructor of PdfFileStamp.</p> @param inputStream Input stream. @param outputStream Output stream. @param keepSecurity Keep security if true.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.#ctor(String,String)">&lt;p&gt; Constructor for PdfFileStamp. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf"); &lt;/pre&gt; @param inputFile Input file name and path. @param outputFile Output file name and path. 
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.#ctor(String,String,boolean)">
       
        <p>Constructor for PdfFileStamp.</p> @param inputFile Input file name and path. @param outputFile Output file name and path. @param keepSecurity Keep security if true.
      
      <param name="String"/>
      <param name="String"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.#ctor(InputStream,HttpServletResponse)">
       
        <p>Creates PdfFileStampWeb which will save result into HttpResponse object.</p> @param inputStream Stream with input document. @param response HttpResponse object where result will be saved.
      
      <param name="InputStream"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.#ctor(String,HttpServletResponse)">
       
        <p>Creates PdfFileStampWeb which will save result into HttpResponse object.</p> @param inputFile Source file name. @param response HttpResponse object where result will be saved.
      
      <param name="String"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileStampWeb.POS_BOTTOM_MIDDLE">
       
        <p>Bottom middle position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileStampWeb.POS_BOTTOM_RIGHT">
       
        <p>Bottom right position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileStampWeb.POS_UPPER_RIGHT">
       
        <p>Right upper position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileStampWeb.POS_SIDES_RIGHT">
       
        <p>Right position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileStampWeb.POS_UPPER_MIDDLE">
       
        <p>Upper middle position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileStampWeb.POS_BOTTOM_LEFT">
       
        <p>Bottom left position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileStampWeb.POS_SIDES_LEFT">
       
        <p>Left position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileStampWeb.POS_UPPER_LEFT">
       
        <p>Upper let position.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.PdfJavaScriptStripper">
       
        <p>Class for removing all Java Script code.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfJavaScriptStripper.strip(String,String)">
       
        <p>Remove Java Script from document.</p> @return true if JavaScript was stripped successfully. @param inputFile File containig the document. @param outputFile File where document will be stored.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfJavaScriptStripper.strip(InputStream,OutputStream)">
       
        <p>Remove Java Script from the document.</p> @return true if JavaScript was stripped successfully. @param inStream Stream containing document. @param outStream Stream where the document will be stored.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
    </member>
    <member name="T:com.aspose.pdf.facades.PdfPageEditor">
       
        <p>Represents a class to edit the PDF file's page, including rotating page, zooming page, moving position and changing page size.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.getTransitionDuration">
       
        <p>Gets duration of the transition effect.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.setTransitionDuration(int)">
       
        <p>Sets duration of the transition effect.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.getTransitionType">
       
        <p>Gets transition style to use when moving to this page from another during a presentation.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.setTransitionType(int)">
       
        <p>Sets transition style to use when moving to this page from another during a presentation.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.getDisplayDuration">
       
        <p>Gets display duration for pages.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.setDisplayDuration(int)">
       
        <p>Sets display duration for pages.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.getProcessPages">
       
        <p>Gets the page numbers to be edited. By default, each page would be edited.</p> @return array of int values
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.setProcessPages(int[])">
       
        <p>Sets the page numbers to be edited. By default, each page would be edited.</p> @param value array of int values
      
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.getRotation">
       
        <p>Gets the rotation of the pages, the rotation must be 0, 90, 180 or 270. Default value is 0.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.setRotation(int)">
       
        <p>Sets the rotation of the pages, the rotation must be 0, 90, 180 or 270. Default value is 0.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.getPageRotations">&lt;p&gt; Gets the rotation of the pages, A hashtable contains the page number and rotation degree, the key represents the page number, the value of key represents the rotation in degrees. &lt;/p&gt; @return {@code Map&lt;Integer, Integer&gt;} object</member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.setPageRotations(java.util.Map&lt;Integer, Integer&gt;)">&lt;p&gt; Sets the rotation of the pages, A hashtable contains the page number and rotation degree, the key represents the page number, the value of key represents the rotation in degrees. &lt;/p&gt; @param value {@code Map&lt;Integer, Integer&gt;} object 
      <param name="java.util.Map&lt;Integer, Integer&gt;"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.getZoom">
       
        <p>Get zoom coefficient. Value 1.0 corresponds to 100%. Default value is 1.0.</p> @return float value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.setZoom(float)">&lt;p&gt; Sets zoom coefficient. Value 1.0 corresponds to 100%. Default value is 1.0. &lt;/p&gt; @param value float value &lt;hr&gt; &lt;pre&gt; The following example demonstrates how to change zoom of the document pages. PdfPageEditor editor = new PdfPageEditor(); editor.bindPdf("sample.pdf"); editor.setZoom ( 0.5f); &lt;/pre&gt; 
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.getPageSize">
       
        <p>Gets the output file's page size.</p> @return PageSize object
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.setPageSize(PageSize)">
       
        <p>Sets the output file's page size.</p> @param value PageSize object
      
      <param name="PageSize"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.getAlignment">
       
        <p>Gets the horizontal alignment of the original PDF content on the result page, default is AlignmentType.Left.
          <br/> Use getHorizontalAlignment instead
        </p> @return AlignmentType object @see HorizontalAlignment
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.setAlignment(AlignmentType)">
       
        <p>Sets the horizontal alignment of the original PDF content on the result page, default is AlignmentType.Left.
          <br/> Use setHorizontalAlignment instead
        </p> @param value AlignmentType value
      
      <param name="AlignmentType"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.getHorizontalAlignment">
       
        <p>Gets the horizontal alignment of the original PDF content on the result page, default is AlignmentType.Left.</p> @return HorizontalAlignment element @see HorizontalAlignment
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.setHorizontalAlignment(int)">
       
        <p>Sets the horizontal alignment of the original PDF content on the result page, default is AlignmentType.Left.</p> @param value int value @see HorizontalAlignment
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.getVerticalAlignment">
       
        <p>Gets the vertical alignment of the original PDF content on the result page, default is VerticalAlignmentType.Bottom.
          <br/> Use getVerticalAlignmentType instead
        </p> @return VerticalAlignmentType object
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.setVerticalAlignment(VerticalAlignmentType)">
       
        <p>Sets the vertical alignment of the original PDF content on the result page, default is VerticalAlignmentType.Bottom.
          <br/> Use setVerticalAlignmentType instead
        </p> @param value VerticalAlignmentType value
      
      <param name="VerticalAlignmentType"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.getVerticalAlignmentType">
       
        <p>Gets the vertical alignment of the original PDF content on the result page, default is VerticalAlignmentType.Bottom.</p> @return VerticalAlignmentType element @see VerticalAlignmentType
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.setVerticalAlignmentType(int)">
       
        <p>Sets the vertical alignment of the original PDF content on the result page, default is VerticalAlignmentType.Bottom.</p> @param value VerticalAlignment element @see VerticalAlignment
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.movePosition(float,float)">&lt;p&gt; Moves the origin from (0, 0) to the point that appointted. The origin is left-bottom and the unit is point(1 inch = 72 points). &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfPageEditor editor = new PdfPageEditor(); editor.bindPdf("input.pdf"); editor.movePosition(-100, 60); editor.save("moved.pdf"); &lt;/pre&gt; @param moveX X-coordinate. @param moveY Y-coordinate. 
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.getPages">&lt;p&gt; Returns total number of pages. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The following example demonstrates using of GetPages() method: PdfPageEditor editor = new PdfPageEditor(); editor.bindPdf("sample.pdf"); System.out.println("Document has: " + editor.GetPages()); &lt;/pre&gt; @return Number of pages.</member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.getPageSize(int)">&lt;p&gt; Returns the page size of the specified page. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The following example demonstrates using of GetPageSize method: PdfPageEditor editor = new PdfPageEditor(); editor.bindPdf("sample.pdf"); PageSize size = editor.getPageSize(1); System.out.println("Size of 1st page : " + size.getWidth() + " x " + size.getHeight()); &lt;/pre&gt; @param page Page index. Document pages are numbered from 1. @return Result is instance of PageSize. Use Width and Height properties of the returned object to get page width and height. 
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.getPageRotation(int)">&lt;p&gt; Returns the rotation of specified page. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The following example demonstrates how to get page rotation: PdfPageEditor editor = new PdfPageEditor(); editor.bindPdf("sample.pdf"); int rotation = editor.getPageSize(1); System.out.println("Rotation of 1st page : " + rotation + " degrees"); &lt;/pre&gt; @param page Page index. Document pages are numbered from 1. @return Page rotation in degrees. 
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.getPageBoxSize(int,String)">&lt;p&gt; Returns size of specified box in document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The following example demonstrates how to get media box of the 1st page: PdfPageEditor editor = new PdfPageEditor(); editor.bindPdf("sample.pdf"); Rectangle rect = editor.getBoxSize(1, "media"); &lt;/pre&gt; @param page Page index. Document pages are numbered from 1. @param pageBoxName Box type name. Valid values are: "art", "bleed", "crop", "media", "trim". @return Rectangle which contains requested box. 
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.save(String)">&lt;p&gt; Saves changed document into file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The following sample demonstrates how to save changed PDF document PdfPageEditor editor = new PdfPageEditor(); editor.bindPdf("sample.pdf"); editor.setZoom ( 0.5f); editor.save("newdocument.pdf"); &lt;/pre&gt; @param outputFile Path to file where document will be saved. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.save(OutputStream)">&lt;p&gt; Saves changed document into stream. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The following sample demonstrates how to save changed PDF document into stream. PdfPageEditor editor = new PdfPageEditor(); editor.bindPdf("sample.pdf"); editor.setZoom ( 0.5f); editor.save("newdocument.pdf"); &lt;/pre&gt; @param outputStream Stream where changed PDF document will be saved. 
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.applyChanges">
       
        <p>Apply changes made to the document pages.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.#ctor">
       
        <p>Constructor for PdfPageEditor class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.#ctor(Document)">
       
        <p>Constructor for PdfPageEditor class.</p> @param document Document object which should be processed.
      
      <param name="Document"/>
    </member>
    <member name="F:com.aspose.pdf.facades.PdfPageEditor.SPLITVOUT">
       
        <p>Out Vertical Split</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfPageEditor.SPLITHOUT">
       
        <p>Out Horizontal Split</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfPageEditor.SPLITVIN">
       
        <p>In Vertical Split</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfPageEditor.SPLITHIN">
       
        <p>IN Horizontal Split</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfPageEditor.BLINDV">
       
        <p>Vertical Blinds</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfPageEditor.BLINDH">
       
        <p>Vertical Blinds</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfPageEditor.INBOX">
       
        <p>Inward Box</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfPageEditor.OUTBOX">
       
        <p>Outward Box</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfPageEditor.LRWIPE">
       
        <p>Left-Right Wipe</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfPageEditor.RLWIPE">
       
        <p>Right-Left Wipe</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfPageEditor.BTWIPE">
       
        <p>Bottom-Top Wipe</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfPageEditor.TBWIPE">
       
        <p>Top-Bottom Wipe</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfPageEditor.DISSOLVE">
       
        <p>The old page dissolves</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfPageEditor.LRGLITTER">
       
        <p>Left-Right Glitter</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfPageEditor.TBGLITTER">
       
        <p>Top-Bottom Glitter</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfPageEditor.DGLITTER">
       
        <p>Diagonal Glitter</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.PdfPrintPageInfo">
       
        <p>Represents an object that contains current printing page info.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPrintPageInfo.getPageNumber">
       
        <p>Gets currently printed page number;</p> @return PageNumber int value
      
    </member>
    <member name="T:com.aspose.pdf.facades.PdfProducer">&lt;p&gt; Represents a class to produce PDF from other formats. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt;This sample shows how to produce Pdf file from CGM file. String inputFile = "myImage.cgm"; String outputFile = "myPdf.pdf"; try { PdfProducer.produce(inputFile, ImportFormat.Cgm, outputFile); // Success produced pdf file. } catch (Exception e) { // Do something... } &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.facades.PdfProducer.produce(InputStream,int,OutputStream)">&lt;p&gt; Produce the PDF stream using specified import format. @param inputStream Input stream. @param format Import format. @param outputStream Output PDF stream. @see ImportFormat 
      <param name="InputStream"/>
      <param name="int"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfProducer.produce(String,int,OutputStream)">
      <param name="String"/>
      <param name="int"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfProducer.produce(InputStream,int,String)">&lt;p&gt; Produce the PDF file using specified import format. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt;This sample shows how to produce Pdf file from CGM stream. String inputFile = "myImage.cgm"; String outputFile = "myPdf.pdf"; using (FileInputStream inputStream = File.OpenRead(inputFile)) using (FileOutputStream outputStream = File.Create(outputFile)) { PdfProducer.produce(inputStream, ImportFormat.Cgm, outputStream); } &lt;/pre&gt; @exception InvalidFileFormatException The exception is thrown when a file is invalid. @exception ArgumentNullException Input stream is null @exception ArgumentException Output file name is an empty string @param inputStream Input stream. @param format Import format. @param outputFileName Output PDF file @see ImportFormat 
      <param name="InputStream"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfProducer.produce(String,int,String)">&lt;p&gt; Produce the PDF file using specified import format. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt;This sample shows how to produce Pdf file from CGM file. String inputFile = "myImage.cgm"; String outputFile = "myPdf.pdf"; PdfProducer.produce(inputFile, ImportFormat.Cgm, outputFile); &lt;/pre&gt; @exception InvalidFileFormatException The exception is thrown when a file is invalid. @exception ArgumentException Input or output file name is an empty string @param inputFileName Input file name. @param format Import format. @param outputFileName Output PDF file 
      <param name="String"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfProducer.produce(String,ImportOptions,OutputStream)">
      <param name="String"/>
      <param name="ImportOptions"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfProducer.produce(InputStream,ImportOptions,String)">
      <param name="InputStream"/>
      <param name="ImportOptions"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfProducer.produce(String,ImportOptions,String)">&lt;p&gt; Produce the PDF file using specified import option. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt;This sample shows how to produce Pdf file from CGM file. String inputFile = "myImage.cgm"; String outputFile = "myPdf.pdf"; ImportOptions importOptions = new CgmImportOptions(); PdfProducer.produce(inputStream, importOptions, outputStream); &lt;/pre&gt; @exception InvalidFileFormatException The exception is thrown when a file is invalid. @exception ArgumentException Input or output file name is an empty string @param inputFileName Input file name. @param options Import option. @param outputFileName Output PDF stream. 
      <param name="String"/>
      <param name="ImportOptions"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfProducer.produce(InputStream,ImportOptions,OutputStream)">&lt;p&gt; Produce the PDF file using specified import option. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt;This sample shows how to produce Pdf stream from CGM stream. String inputFile = "myImage.cgm"; String outputFile = "myPdf.pdf"; ImportOptions importOptions = new CgmImportOptions(); using (FileInputStream inputStream = File.OpenRead(inputFile)) using (FileOutputStream outputStream = File.Create(outputFile)) { PdfProducer.produce(inputStream, importOptions, outputStream); } &lt;/pre&gt; @exception InvalidFileFormatException The exception is thrown when a file is invalid. @exception ArgumentNullException Input or output stream is null. @param inputStream Input stream. @param options Import option. @param outputStream Output PDF stream. 
      <param name="InputStream"/>
      <param name="ImportOptions"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfProducer.produceInternal(Stream,ImportOptions,Stream)">
      <param name="Stream"/>
      <param name="ImportOptions"/>
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfProducer.getProducer(ImportOptions)">
       
        <p>Get the producer for specified import option.</p> @return PDF producer. @param options Import option
      
      <param name="ImportOptions"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfProducer.getProducer(int)">
       
        <p>Get the producer for specified import format.</p> @return PDF producer. @param format Import option
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfProducer.getImportOptions(int)">
       
        <p>Get the {@code ImportOptions} for specified import format.</p> @return Import option. @param format Import format.
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.facades.PdfQueryPageSettingsEventHandler">
       
        <p>Represents the method that handles the QueryPageSettings event of a PrintDocument.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfQueryPageSettingsEventHandler.invoke(Object,QueryPageSettingsEventArgs,PdfPrintPageInfo)">
       
        <p>Represents the method that handles the QueryPageSettings event of a PrintDocument.</p> @param sender The source of the event. @param queryPageSettingsEventArgs A QueryPageSettingsEventArgs that contains the event data. @param currentPageInfo Currently printed page info.
      
      <param name="Object"/>
      <param name="QueryPageSettingsEventArgs"/>
      <param name="PdfPrintPageInfo"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfQueryPageSettingsEventHandler.beginInvoke(Object,QueryPageSettingsEventArgs,PdfPrintPageInfo,AsyncCallback,Object)">
      Internal method @param sender Internal object @param queryPageSettingsEventArgs Internal object @param currentPageInfo Internal object @param callback Internal object @param state Internal object @return Internal object
      <param name="Object"/>
      <param name="QueryPageSettingsEventArgs"/>
      <param name="PdfPrintPageInfo"/>
      <param name="AsyncCallback"/>
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfQueryPageSettingsEventHandler.endInvoke(IAsyncResult)">
      Internal method @param result Internal object
      <param name="IAsyncResult"/>
    </member>
    <member name="T:com.aspose.pdf.facades.PdfViewer">
       
        <p>Represents a class to view or print a pdf.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.isShowHiddenAreas">
       
        <p>This method is Deprecated Gets flag that controls visibility of hidden areas on the page.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.setShowHiddenAreas(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getPrintStatus">
       
        <p>Gets the result of printing job. If success than null; otherwise, exception object.</p> @return exception object or null
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getUseIntermidiateImage">
       
        <p>Gets the using of conversion of pdf page into intermidiate png file during printing in file mode. Use it when the size of output file is important.</p> @return boolean value.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.setUseIntermidiateImage(boolean)">
       
        <p>Sets the using of conversion of pdf page into intermidiate png file during printing in file mode. Use it when the size of output file is important.</p> @param value boolean value.
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getCopiesPrinted">
       
        <p>Gets copies printed</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getCoordinateType">
       
        <p>Gets the page coordinate type (Media/Crop boxes). CropBox value is used by default.</p> @return PageCoordinateType element @see PageCoordinateType
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.setCoordinateType(int)">
       
        <p>Sets the page coordinate type (Media/Crop boxes). CropBox value is used by default.</p> @param value PageCoordinateType element @see PageCoordinateType
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getPrintAsImage">&lt;p&gt; Gets a mode for PdfViewer to print as image. &lt;/p&gt; @return boolean value &lt;hr&gt; If true prints always as image (generates image that is printed) If false prints directly to device if all features are supported. In case document contains non-supported features the system may automatically decide to print as image. Default falue is false.</member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.setPrintAsImage(boolean)">&lt;p&gt; Sets a mode for PdfViewer to print as image. &lt;/p&gt; @param value boolean value &lt;hr&gt; If true prints always as image (generates image that is printed) If false prints directly to device if all features are supported. In case document contains non-supported features the system may automatically decide to print as image. Default falue is false. 
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getPageCount">
       
        <p>Gets page count of the current Pdf file.</p> @return return page count.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getPassword">
       
        <p>Gets input document password.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.setPassword(String)">
       
        <p>Sets input document password.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getPrintPageDialog">
       
        <p>Gets a bool value that indicates whether produce the page number dialog when printing.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.setPrintPageDialog(boolean)">
       
        <p>Sets a boolean value that indicates whether produce the page number dialog when printing.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getPrintAsGrayscale">&lt;p&gt; Gets or sets a bool value that indicates whether the page is being printed as grayscale. By default is false. &lt;/p&gt; &lt;hr&gt; Default false is false. @return boolean value</member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.setPrintAsGrayscale(boolean)">&lt;p&gt; Gets or sets a bool value that indicates whether the page is being printed as grayscale. By default is false. &lt;/p&gt; &lt;hr&gt; Default false is false. @param value boolean value 
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getPrinterJobName">
       
        <p>Gets name of document in printer queue when document is printed. Default value is file name.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.setPrinterJobName(String)">
       
        <p>Sets name of document in printer queue when document is printed. Default value is file name.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getFormPresentationMode">
       
        <p>Gets form presentation mode.</p> @return FormPresentationMode element @see FormPresentationMode
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.setFormPresentationMode(int)">
       
        <p>Sets form presentation mode.</p> @param value FormPresentationMode element
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getRenderingOptions">
       
        <p>Gets rendering options.</p> @return RenderingOptions object
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.setRenderingOptions(RenderingOptions)">
       
        <p>Sets rendering options.</p> @param value RenderingOptions value
      
      <param name="RenderingOptions"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getVerticalAlignment">
       
        <p>Gets a value that indicates vertical alignment</p> @return VerticalAlignment element @see VerticalAlignment
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.setVerticalAlignment(int)">
       
        <p>Sets a value that indicates vertical alignment</p> @param value VerticalAlignment element @see VerticalAlignment
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getHorizontalAlignment">
       
        <p>Gets a value that indicates horizontal alignment</p> @return HorizontalAlignment element @see HorizontalAlignment
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.setHorizontalAlignment(int)">
       
        <p>Sets a value that indicates horizontal alignment</p> @param value HorizontalAlignment element @see HorizontalAlignment
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getAutoResize">
       
        <p>Sets a bool value that indicates whether the file be printed with optimized size.</p> @return boolean value: If false print page without page scaling. If true print page with scaling to fit to printable area.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.setAutoResize(boolean)">
       
        <p>Sets a bool value that indicates whether the file be printed with optimized size.</p> @param value boolean value: If false print page without page scaling. If true print page with scaling to fit to printable area.
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getAutoRotate">
       
        <p>Gets a bool value that indicates whether the file be printed with auto rotation</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.setAutoRotate(boolean)">
       
        <p>Sets a bool value that indicates whether the file be printed with auto rotation</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getAutoRotateMode">
       
        <p>Gets an AutoRotateMode value that indicates direction of rotation</p> @return AutoRotateMode element @see AutoRotateMode
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.setAutoRotateMode(int)">
       
        <p>Sets an AutoRotateMode value that indicates direction of rotation</p> @param value AutoRotateMode element @see AutoRotateMode
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getResolution">
       
        <p>Gets or sets resolution during viewing and printing. The higher resolution, the slower speed. The default value is 150.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.setResolution(int)">
       
        <p>Sets resolution during viewing and printing. The higher resolution, the slower speed. The default value is 150.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.printLargePdf(String)">&lt;p&gt; Opens and prints a large Pdf file. If your Pdf file has hundreds of pages or more or its size is more than 3 MB, this method is recommended to get better performance. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfViewer viewer = new PdfViewer(); viewer.setAutoResize(true); // print the file with adjusted size viewer.setAutoRotate(true); // print the file with adjusted rotation viewer.setPrintPageDialog(false);// do not produce the page number dialog when // printing viewer.setPrintLargePdf(&amp;quot;d:\test.pdf&amp;quot;); &lt;/pre&gt; @param filePath The path of Pdf file. &lt;hr&gt; This method has integrated the opening and the printing of the file and you need not calling the OpenPdfFile() explicitly. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.printLargePdf(InputStream)">&lt;p&gt; Opens and prints a large Pdf stream. If your Pdf file has hundreds of pages or more or its size is more than 3 MB, this method is recommended to get better performance. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfViewer viewer = new PdfViewer(); viewer.setAutoResize ( true); //print the file with adjusted size viewer.setAutoRotate ( true); //print the file with adjusted rotation viewer.printPageDialog=false;//do not produce the page number dialog when printing viewer.printLargePdf(new MemoryStream(File.ReadAllBytes(@"d:\test.pdf"))); viewer.closePdfFile(); &lt;/pre&gt; &lt;hr&gt; This method has integrated the opening and the printing of the file and you need not calling the OpenPdfFile() explicitly. @param inputStream The pdf stream to be opened and printed.. 
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.printLargePdf(String,PdfPrinterSettings)">&lt;p&gt; Opens and prints a large Pdf file with specified printer settings. If your Pdf file has hundreds of pages or more or its size is more than 3 MB, this method is recommended to get better performance. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfViewer viewer = new PdfViewer(); viewer.setAutoResize ( true); //print the file with adjusted size viewer.setAutoRotate ( true); //print the file with adjusted rotation viewer.setPrintPageDialog ( false);//do not produce the page number dialog when printing PrinterSettings ps = new PrinterSettings(); PrintDocument prtdoc = new PrintDocument(); ps.setPrinterName ( prtdoc.getPrinterSettings().getPrinterName()); viewer.printLargePdf("d:\\test.pdf",ps); viewer.closePdfFile(); &lt;/pre&gt; &lt;hr&gt; This method has integrated the opening and the printing of the file and you need not calling the OpenPdfFile() explicitly. @param filePath The path of Pdf file. @param printerSettings The printer settings. 
      <param name="String"/>
      <param name="PdfPrinterSettings"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.printLargePdf(InputStream,PdfPrinterSettings)">&lt;p&gt; Opens and prints a large Pdf stream with specified printer settings. If your Pdf file has hundreds of pages or more or its size is more than 3 MB, this method is recommended to get better performance. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfViewer viewer = new PdfViewer(); viewer.setAutoResize(true); // print the file with adjusted size viewer.setAutoRotate(true); // print the file with adjusted rotation viewer.setPrintPageDialog(false); // do not produce the page number dialog when // printing PrinterSettings ps = new PrinterSettings(); PrintDocument prtdoc = new PrintDocument(); ps.setPrinterName(prtdoc.getPrinterSettings().getPrinterName()); viewer.printLargePdf(new FileInputStream(&amp;quot;d:\\middleware.pdf&amp;quot;), ps); viewer.closePdfFile(); &lt;/pre&gt; &lt;hr&gt; This method has integrated the opening and the printing of the file and you need not calling the OpenPdfFile() explicitly. @param inputStream The pdf stream to be opened and printed.. @param printerSettings The printer settings. 
      <param name="InputStream"/>
      <param name="PdfPrinterSettings"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.printLargePdf(String,PrintPageSettings,PdfPrinterSettings)">&lt;p&gt; Opens and prints a large Pdf file with specified page settings and printer settings. If your Pdf file has hundreds of pages or more or its size is more than 3 MB, this method is recommended to get better performance. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfViewer viewer = new PdfViewer(); viewer.setAutoResize(true); // print the file with adjusted size viewer.setAutoRotate(true); // print the file with adjusted rotation viewer.setPrintPageDialog(false); // do not produce the page number dialog when // printing PrinterSettings ps = new PrinterSettings(); PrintDocument prtdoc = new PrintDocument(); ps.setPrinterName(prtdoc.getPrinterSettings().getPrinterName()); PageSettings pgs = new PageSettings(); pgs.setPaperSize(new PaperSize(&amp;quot;A4&amp;quot;, 827, 1169)); pgs.setMargins(new Margins(0, 0, 0, 0)); viewer.printLargePdf(&amp;quot;d:\\test.pdf&amp;quot;, pgs, ps); viewer.closePdfFile(); &lt;/pre&gt; &lt;hr&gt; This method has integrated the opening and the printing of the file and you need not calling the OpenPdfFile() explicitly. @param filePath The path of Pdf file. @param pageSettings The page settings. @param printerSettings The printer settings. 
      <param name="String"/>
      <param name="PrintPageSettings"/>
      <param name="PdfPrinterSettings"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.printLargePdf(InputStream,PrintPageSettings,PdfPrinterSettings)">&lt;p&gt; Opens and prints a large Pdf stream with specified page settings and printer settings. If your Pdf file has hundreds of pages or more or its size is more than 3 MB, this method is recommended to get better performance. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfViewer viewer = new PdfViewer(); viewer.setAutoResize ( true); //print the file with adjusted size viewer.setAutoRotate ( true); //print the file with adjusted rotation viewer.setPrintPageDialog ( false);//do not produce the page number dialog when printing PrinterSettings ps = new PrinterSettings(); PrintDocument prtdoc = new PrintDocument(); ps.setPrinterName ( prtdoc.getPrinterSettings().getPrinterName()); PageSettings pgs = new PageSettings(); pgs.setPaperSize ( new PaperSize("A4", 827, 1169)); pgs.setMargins ( new Margins(0, 0, 0, 0)); viewer.printLargePdf(new FileInputStream("d:\\middleware.pdf"),pgs,ps); viewer.closePdfFile(); &lt;/pre&gt; &lt;hr&gt; This method has integrated the opening and the printing of the file and you need not calling the OpenPdfFile() explicitly. @param inputStream The pdf stream to be opened and printed. @param pageSettings The page settings. @param printerSettings The printer settings. 
      <param name="InputStream"/>
      <param name="PrintPageSettings"/>
      <param name="PdfPrinterSettings"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.decodeAllPages">
       
        <p>Get pages of current pdf file.</p> @return return the array of Pdf page images.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.decodePage(int)">
       
        <p>Decodes a page of one Pdf file.</p> @return return the Pdf page image. @param pageNumber The page number of one Pdf file which must be between 1 and PageCount.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.printDocumentWithSettings(PrintPageSettings,PdfPrinterSettings)">&lt;p&gt; Prints the Pdf document with settings. If the document size is not complatible to page size, pdf.kit will extend it to fit page size. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfViewer viewer = new PdfViewer(); viewer.openPdfFile("d:\\test.pdf"); viewer.setAutoResize ( true); //print the file with adjusted size viewer.setAutoRotate ( true); //print the file with adjusted rotation viewer.setPrintPageDialog ( false);//do not produce the page number dialog when printing PrinterSettings ps = new PrinterSettings(); PrintDocument prtdoc = new PrintDocument(); ps.setPrinterName ( prtdoc.getPrinterSettings.getPrinterName()); PageSettings pgs = new PageSettings(); pgs.setPaperSize ( new PaperSize("A4", 827, 1169)); pgs.setMargins ( new Margins(0, 0, 0, 0)); viewer.printDocumentWithSettings(pgs, ps); viewer.closePdfFile(); &lt;/pre&gt; @param pageSettings The page setting of the printing document. @param printerSettings The printer setting of the printing document. &lt;hr&gt; printerSettings object is used to print the document. pageSettings.PrinterSettings object is ignored. 
      <param name="PrintPageSettings"/>
      <param name="PdfPrinterSettings"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.printDocumentWithSettings(PdfPrinterSettings)">&lt;p&gt; Prints the Pdf document with printer settings. The output page size will fit the the document first page size. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfViewer viewer = new PdfViewer(); viewer.openPdfFile("d:\\test.pdf"); viewer.setAutoResize ( true); //print the file with adjusted size viewer.setAutoRotate ( true); //print the file with adjusted rotation viewer.setPrintPageDialog ( false); //do not produce the page number dialog when printing PrinterSettings ps = new PrinterSettings(); PrintDocument prtdoc = new PrintDocument(); ps.setPrinterName ( prtdoc.getPrinterSettings().PrinterName()); viewer.printDocumentWithSettings(ps); viewer.closePdfFile(); &lt;/pre&gt; @param printerSettings The printer setting of the printing document. 
      <param name="PdfPrinterSettings"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.printDocument">&lt;p&gt; Prints the Pdf document using default printer. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfViewer viewer = new PdfViewer(); viewer.openPdfFile("d:\\test.pdf"); viewer.setAutoResize ( true); //print the file with adjusted size viewer.setAutoRotate ( true); //print the file with adjusted rotation viewer.setPrintPageDialog ( false); //do not produce the page number dialog when printing viewer.printDocument(ps); viewer.closePdfFile(); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getDefaultPageSettings">
       
        <p>Gets the default page settings.</p> @return Page settings object.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getDefaultPrinterSettings">
       
        <p>Gets the default printer settings.</p> @return Page settings object.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.openPdfFile(String)">&lt;p&gt; Opens a Pdf file, but does not actually decode the pages of the Pdf file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfViewer viewer = new PdfViewer(); viewer.openPdfFile("d:\\test.pdf"); viewer.closePdfFile(); &lt;/pre&gt; @param filePath The path of Pdf file. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.openPdfFile(InputStream)">&lt;p&gt; Opens a Pdf file stream. But does not actually decode the pages of the Pdf file. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfViewer viewer = new PdfViewer(); viewer.openPdfFile(new FileInputStream("d:\\test.pdf"))); viewer.closePdfFile(); &lt;/pre&gt; @param inputStream The pdf stream to be opened. 
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.closePdfFile">
       
        <p>Closes the current Pdf file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.decodePageToImage(int,ImageType)">
       
        <p>Decodes page to BufferedImage</p> @param pageNumber int value @param imageFormat ImageType object @return BufferedImage value
      
      <param name="int"/>
      <param name="ImageType"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getScaleFactor">
       
        <p>Gets a floating point value that indicates scale factor. The default value is 1.0.</p> @return floating point value.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.setScaleFactor(float)">
       
        <p>Sets a floating point value that indicates scale factor. The default value is 1.0.</p> @param value floating point value.
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.bindPdf(String)">
       
        <p>Initializes the facade.</p> @param srcFile The PDF file.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.bindPdf(InputStream)">
       
        <p>Initializes the facade.</p> @param srcStream The stream of PDF file.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.bindPdf(IDocument)">
       
        <p>Initializes the facade.</p> @param srcDoc The Document object.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.save(String)">
       
        <p>Saves the result PDF document to file.</p> @param destFile The path of output PDF document.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.save(InputStream)">
       
        <p>Saves the result PDF document to stream.</p> @param destStream The stream of output PDF document.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.close">
      Closes the current Pdf file.
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.dispose">
       
        <p>Disposes the facade resources.</p> This method is obsolete, use close() instead.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.#ctor">
       
        <p>Initializes new {@code PdfViewer} object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.#ctor(IDocument)">
       
        <p>Initializes new {@code PdfViewer} object.</p> @param document Document object.
      
      <param name="IDocument"/>
    </member>
    <member name="F:com.aspose.pdf.facades.PdfViewer.PdfQueryPageSettings">
       
        <p>Adds/removes subscription on the last page printing event.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfViewer.EndPrint">
      Adds/removes subscription on the last page printing event.
    </member>
    <member name="T:com.aspose.pdf.facades.PdfXmpMetadata">
       
        <p>Class for manipulation with XMP metadata.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.registerNamespaceURI(String,String)">&lt;p&gt; Registers the namespace URI. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfXmpMetadata xmp = new PdfXmpMetadata("input.pdf"); xmp.registerNamespaceURI("xmp", "http://ns.adobe.com/xap/1.0/"); &lt;/pre&gt; @param prefix The prefix. @param namespaceURI The namespace URI. 
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.getNamespaceURIByPrefix(String)">&lt;p&gt; Gets namespace URI by prefix. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfXmpMetadata xmp = new PdfXmpMetadata("input.pdf"); System.out.println(xmp.getNamespaceURIByPrefix("xmp")); &lt;/pre&gt; @param prefix The prefix. @return Namespace URI. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.getPrefixByNamespaceURI(String)">&lt;p&gt; Gets the prefix by namespace URI. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfXmpMetadata xmp = new PdfXmpMetadata("input.pdf"); System.out.println(xmp.getPrefixByNamespaceURI("http://ns.adobe.com/xap/1.0/")); &lt;/pre&gt; @param namespaceURI Namespace URI. @return The prefix value. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.addItem(int,XmpValue)">&lt;p&gt; Adds value to XMP metadata. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfXmpMetadata xmp = new PdfXmpMetadata(); xmp.bindPdf("input.pdf"); xmp.add(DefaultMetadataProperties.Nickname, "name1"); xmp.save(TestSettings.getOutputFile("XMP_AddedValue.pdf")); &lt;/pre&gt; @param key The key name. @param value Value which will be added. 
      <param name="int"/>
      <param name="XmpValue"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.add(XmpPdfAExtensionObject,String,String,String)">
       
        <p>Adds extension field into metadata.</p> @param xmpPdfAExtensionObject The pdf extension object to add. @param namespacePrefix The prefix of schema. @param namespaceUri The namespace uri of schema. @param schemaDescription The optional description of schema.
      
      <param name="XmpPdfAExtensionObject"/>
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.clear">&lt;p&gt; Removes all elements from the object. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfXmpMetadata xmp = new PdfXmpMetadata(); xmp.bindPdf("input.pdf"); xmp.clear(); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.removeItemByKey(int)">&lt;p&gt; Removes element with specified key. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfXmpMetadata xmp = new PdfXmpMetadata(); xmp.bindPdf("input.pdf"); xmp.remove(DefaultMetadataProperties.Nickname); &lt;/pre&gt; @param key Key of the element which will be deleted. @see DefaultMetadataProperties 
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.addItem(String,XmpValue)">&lt;p&gt; Adds new element to the dictionary object. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfXmpMetadata xmp = new PdfXmpMetadata(); xmp.bindPdf("input.pdf"); xmp.add("xmp:Nickname", "Nickname1"); &lt;/pre&gt; @param key Key of new element. @param value Value of the element. 
      <param name="String"/>
      <param name="XmpValue"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.addItem(String,Object)">
       
        <p>Adds new element to the dictionary object.</p> @param key Key of new element. @param value Value of the element.
      
      <param name="String"/>
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.contains(String)">&lt;p&gt; Checks if dictionary contains the specified key. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfXmpMetadata xmp = new PdfXmpMetadata(); xmp.bindPdf("input.pdf"); xmp.add("xmp:Nickname", "Nickname1"); if (!xmp.contains("xmp:Nickname")) System.out.println("Key does not exists"); &lt;/pre&gt; @param key Key which will be checked. @return True - if the dictionary contains the specified key; otherwise, false. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.contains(int)">
       
        <p>Checks if dictionary contains the specified property.</p> @param property Property which will be checked. @return True - if the dictionary contains the specified property; otherwise, false.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.iterator">
       
        <p>Gets enumerator object of the dictionary.</p> @return The enumerator object.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.getKeys">
       
        <p>Gets keys from the dictionary.</p> @return ICollection element
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.removeItemByKey(String)">&lt;p&gt; Removes key from the dictionary. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfXmpMetadata xmp = new PdfXmpMetadata(); xmp.bindPdf("input.pdf"); xmp.remove("xmp:Nickname"); &lt;/pre&gt; @param key Key which will be removed. @return True - if key removed; otherwise, false. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.getExtensionFields">&lt;p&gt; Gets the dictionary of extension fields. &lt;/p&gt; @return {@code Hashtable&lt;String, XmpPdfAExtensionSchema&gt;} object</member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.getValues">
       
        <p>Gets the collection of values in dictionary.</p> @return ICollection object
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.get_Item(String)">&lt;p&gt; Gets value by key. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfXmpMetadata pxm = new PdfXmpMetadata(); pxm.bindPdf("PdfFile.pdf"); System.out.println(pxm.get_Item("xmp:Nickname")); &lt;/pre&gt; @param key The key name to get. @return Object by key 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.set_Item(String,XmpValue)">&lt;p&gt; Sets value by key. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfXmpMetadata pxm = new PdfXmpMetadata(); pxm.bindPdf("PdfFile.pdf"); System.out.println(pxm.get_Item("xmp:Nickname")); &lt;/pre&gt; @param key The key name to set. @param value The value to set. 
      <param name="String"/>
      <param name="XmpValue"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.isFixedSize">
       
        <p>Returns true is collection has fixed size.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.isReadOnly">
       
        <p>Returns true if collection is read-only.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.size">&lt;p&gt; Gets count if items in the collection. &lt;/p&gt; @return int value &lt;hr&gt; &lt;pre&gt; PdfXmpMetadata pxm = new PdfXmpMetadata(); pxm.bindPdf("PdfFile.pdf"); System.out.println("Count = " + pxm.size()); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.isSynchronized">
       
        <p>Returns true if collection is synchronized.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.getSyncRoot">
       
        <p>Gets synchroniztion object of the collection.</p> @return Object element
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.iteratorIt">
       
        <p>Gets enumerator object of the collection.</p> @return IEnumerator object
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.iterator_Rename_Namesake"/>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.getByDefaultMetadataProperties(int)">&lt;p&gt; Gets value of XMP metadata by key. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfXmpMetadata pxm = new PdfXmpMetadata(); pxm.bindPdf("PdfFile.pdf"); System.out.println(pxm.get_Item(DefaultMetadataProperties.CreatorTool)); &lt;/pre&gt; @param key Key of the value. @return Value from XMP metadata. @see DefaultMetadataProperties 
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.setByDefaultMetadataProperties(int,XmpValue)">&lt;p&gt; Sets value of XMP metadata by key. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfXmpMetadata pxm = new PdfXmpMetadata(); pxm.bindPdf("PdfFile.pdf"); System.out.println(pxm.get_Item(DefaultMetadataProperties.CreatorTool)); &lt;/pre&gt; @param key Key of the DefaultMetadataProperties value. @param value Object. @see DefaultMetadataProperties 
      <param name="int"/>
      <param name="XmpValue"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.getXmpMetadata">&lt;p&gt; Get the XmpMetadata of the input pdf in a xml format. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfXmpMetadata pxm = new PdfXmpMetadata(); pxm.bindPdf("PdfFile.pdf"); byte[] data = pxm.getXmpMetadata(); &lt;/pre&gt; @return The bytes of the XmpMetadata.</member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.getXmpMetadata(String)">&lt;p&gt; Get a part of the XmpMetadata of the input pdf according to a meta name. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfXmpMetadata pxm = new PdfXmpMetadata(); pxm.bindPdf("PdfFile.pdf"); byte[] data = pxm.getXmpMetadata("dc:creator"); &lt;/pre&gt; @param name Metadata name. @return Bytes of metadata. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.containsKey(String)">
       
        <p>Determines does this dictionary contasins specified key.</p> @param key Key to search in the dictionary. @return true if key is found.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.tryGetValue(String,Object[])">
       
        <p>Tries to find key in the dictionary and retreives value if found.</p> @param key Key to search in the dictionary. @param value Retreived value. @return true if key was found.
      
      <param name="String"/>
      <param name="Object[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.#ctor">&lt;p&gt; Constructor for PdfXmpMetadata. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfXmlMetadata xmp = new PdfXmpMetadata(); xmp.bindPdf("input.pdf"); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.#ctor(IDocument)">
       
        <p>Initializes new {@code PdfXmpMetadata} object on base of the {@code document}.</p> @param document Pdf document.
      
      <param name="IDocument"/>
    </member>
    <member name="T:com.aspose.pdf.facades.PositioningMode">
       
        <p>Defines positioning mode. Possible values include Legacy (backward compatibility) and Current (updated text position calculation method)</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PositioningMode.Legacy">
       
        <p>Legacy text positioning</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PositioningMode.ModernLineSpacing">
       
        <p>Updated line spacing, vertical position calculation is done by the old rules (i.e. text is positioned relative to bottom-left corner of the specified rectangle)</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PositioningMode.Current">
       
        <p>Updated line spacing and vertical position calculation is done based on left-top corner rather than left-bottom.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.PropertyFlag">
       
        <p>Enumeration of possible field flags.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PropertyFlag.ReadOnly">
       
        <p>Field is read-only.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PropertyFlag.Required">
       
        <p>Field is required.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PropertyFlag.NoExport">
       
        <p>Field is not exportable.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PropertyFlag.InvalidFlag">
       
        <p>Invalid field flag.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.ReplaceTextStrategy">
       
        <p>This class contains parameters which define PdfContentEditor behavior when ReplaceText operation is performed.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.ReplaceTextStrategy.isRegularExpressionUsed">
       
        <p>If false, string to find is a simple text. If true, string to find is regular expression.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.ReplaceTextStrategy.setRegularExpressionUsed(boolean)">
       
        <p>If false, string to find is a simple text. If true, string to find is regular expression.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.ReplaceTextStrategy.getNoCharacterBehavior">
       
        <p>Action which is performed when no approppriate font found for changed text (Throw exception / Substitute other font / Replace anyway).</p> @return NoCharacterAction value. @see NoCharacterAction
      
    </member>
    <member name="M:com.aspose.pdf.facades.ReplaceTextStrategy.setNoCharacterBehavior(int)">
       
        <p>Action which is performed when no approppriate font found for changed text (Throw exception / Substitute other font / Replace anyway).</p> @param value NoCharacterAction value. @see NoCharacterAction
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.ReplaceTextStrategy.getReplaceScope">
       
        <p>Scope of the replacement operation (replace first occurence or replace all occurences).</p> @return Scope element @see Scope
      
    </member>
    <member name="M:com.aspose.pdf.facades.ReplaceTextStrategy.setReplaceScope(int)">
       
        <p>Scope of the replacement operation (replace first occurence or replace all occurences).</p> @param value int value @see Scope
        <pre>Example: ReplaceTextStrategy replaceTxt = new ReplaceTextStrategy(); replaceTxt.setReplaceScope(ReplaceTextStrategy.Scope.REPLACE_ALL);</pre> 
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.facades.ReplaceTextStrategy.Scope">
       
        <p>Scope where replace text operation is applied REPLACE_FIRST by default</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ReplaceTextStrategy.Scope.ReplaceFirst">
       
        <p>Replace only first occurence of the text on each of affected pages</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ReplaceTextStrategy.Scope.ReplaceAll">
       
        <p>Replace all text occurences on all affected pages</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.ReplaceTextStrategy.NoCharacterAction">
       
        <p>Action to perform if font does not contain required character</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ReplaceTextStrategy.NoCharacterAction.ThrowException">
       
        <p>Throw exception</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ReplaceTextStrategy.NoCharacterAction.UseStandardFont">
       
        <p>Repalce font to standard font which contains required character</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ReplaceTextStrategy.NoCharacterAction.ReplaceAnyway">
       
        <p>Replace text anyway without font substitution</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.SaveableFacade">&lt;p&gt; Base class for all saveable facades.</member>
    <member name="M:com.aspose.pdf.facades.SaveableFacade.save(String)">
       
        <p>Saves the PDF document to the specified file.</p> @param destFile The destination file.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.SaveableFacade.save(java.io.OutputStream)">
       
        <p>Saves the PDF document to the specified stream.</p> @param destStream The destination stream.
      
      <param name="java.io.OutputStream"/>
    </member>
    <member name="T:com.aspose.pdf.facades.Stamp">
       
        <p>Class represeting stamp.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.getStampId">
       
        <p>Gets identifier of stamp.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.setStampId(int)">
       
        <p>Sets identifier of stamp.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.getQuality">
       
        <p>Gets quality of image stamp in percent. Valiued values 0..100%.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.setQuality(int)">
       
        <p>Sets quality of image stamp in percent. Valiued values 0..100%.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.getOpacity">
       
        <p>Gets opacity of the stamp.</p> @return float value
      
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.setOpacity(float)">
       
        <p>Sets opacity of the stamp.</p> @param value float value
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.getPageNumber">
       
        <p>Gets page number.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.setPageNumber(int)">
       
        <p>Sets page number.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.getPages">
       
        <p>Gets array with numbers of pages which will be affected by stamp.</p> @return int array
      
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.setPages(int[])">&lt;p&gt; Sets array with numbers of pages which will be affected by stamp. If Pages = null all pages of the document are affected. &lt;/p&gt; @param value int array &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); Stamp stamp = new com.aspose.pdf.facades.Stamp(); stamp.bindLogo(new FormattedText(text)); //put stamp only on 1st, 4th and 6th page. stamp.setPages(new int[] { 1, 4, 6 }); fileStamp.addStamp(stamp); fileStamp.close(); &lt;/pre&gt; 
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.bindTextState(TextState)">
       
        <p>Sets text state of stamp text.</p> @param textState TextState object which specifies text properties.
      
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.getRotation">
       
        <p>Gets rotation of the stamp in degrees.</p> @return float value
      
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.setRotation(float)">&lt;p&gt; Gets or sets rotation of the stamp in degrees. &lt;/p&gt; @param value float value &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); Stamp stamp = new Stamp(); stamp.bindLogo(new FormattedText("STAMP")); stamp.setRotation(90); fileStamp.addStamp(stamp); fileStamp.close(); &lt;/pre&gt; 
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.isBackground">
       
        <p>Gets background status. If true stamp will be placed as background of the spamped page. By default is set to false.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.setBackground(boolean)">
       
        <p>Sets background status. If true stamp will be placed as background of the spamped page. By default is set to false.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.getBlendingSpace">
       
        <p>Gets a BlendingColorSpace value that defines a color space that is used to perform transparency and blending operations on the page.</p> @return int value @see BlendingColorSpace
      
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.setBlendingSpace(int)">
       
        <p>Sets a BlendingColorSpace value that defines a color space that is used to perform transparency and blending operations on the page.</p> @param value int value @see BlendingColorSpace
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.bindPdf(String,int)">&lt;p&gt; Sets PDF file and number of page which will be used as stamp. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); Stamp stamp = new Stamp(); //First page will be used as stamp. stamp.bindPdf("stamp.pdf", 1); stamp.isBackground (true); fileStamp.addStamp(stamp); fileStamp.close(); &lt;/pre&gt; @param pdfFile Path to PDF file. @param pageNumber Number of page in PDF file 
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.bindPdf(InputStream,int)">&lt;p&gt; Sets PDF file and number of page which will be used as stamp. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); Stamp stamp = new Stamp(); //First page will be used as stamp. InputStream stream = new FileInputStream("stamp.pdf"); stamp.bindPdf(stream, 1); fileStamp.addStamp(stamp); fileStamp.close(); &lt;/pre&gt; @param pdfStream Stream which contains PDF document. @param pageNumber Page index of the document whihc will be used as stamp. 
      <param name="InputStream"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.bindImage(String)">&lt;p&gt; Sets image as a stamp. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); Stamp stamp = new Stamp(); stamp.bindImage("image.jpg"); fileStamp.addStamp(stamp); fileStamp.close(); &lt;/pre&gt; @param imageFile Image file name and path. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.bindLogo(FormattedText)">
       
        <p>Sets text as stamp.</p> @param formattedText FormattedText object which specifies text and text properties.
      
      <param name="FormattedText"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.setOrigin(float,float)">
       
        <p>Sets position on page where stamp will be placed.</p> @param originX X coordinate of the stamp. @param originY Y coordinate of the stamp.
      
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.setImageSize(float,float)">
       
        <p>Sets size of image stamp. Image will be scaled according to the specified values.</p> @param width Image width. @param height Image height.
      
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.bindImage(InputStream)">
       
        <p>Sets image which will be used as stamp.</p> @param image Stream which contains image data.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.close">
      Closes this instance
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.#ctor">
       
        <p>Constructor for Stamp object.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.StampInfo">
       
        <p>Class representing stamp information.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.StampInfo.getStampId">
       
        <p>Gets identifier of the stamp.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.StampInfo.getIndexOnPage">
       
        <p>Gets stamp index on the page.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.facades.StampInfo.getStampType">
       
        <p>Gets stamp type (image / form).</p> @return StampType element @see StampType
      
    </member>
    <member name="M:com.aspose.pdf.facades.StampInfo.getRectangle">
       
        <p>Gets rectangle where stamp is placed.</p> @return Rectangle element
      
    </member>
    <member name="M:com.aspose.pdf.facades.StampInfo.getImageInternal">
       
        <p>Gets image of stamp. May be null if stamp does not contain images (for example for text stamp).</p> @return Image object
      
    </member>
    <member name="M:com.aspose.pdf.facades.StampInfo.getImage">
       
        <p>Gets image of stamp. May be null if stamp does not contain images (for example for text stamp).</p> @return BufferedImage object
      
    </member>
    <member name="M:com.aspose.pdf.facades.StampInfo.getForm">
       
        <p>Gets XForm of the stamp.</p> @return XForm object
      
    </member>
    <member name="M:com.aspose.pdf.facades.StampInfo.getText">
       
        <p>Gets text in the stamp.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.facades.StampInfo.getVisible">
       
        <p>Gets visibility of stamp. If false then stamp is hidden (with HideStampById). Hidden stamp may be restored by ShowStampById.</p> @return boolean value
      
    </member>
    <member name="T:com.aspose.pdf.facades.StampType">
       
        <p>Describes stamp types.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.StampType.Form">
       
        <p>Stamp if Form.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.StampType.Image">
       
        <p>Stamp is image.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.SubmitFormFlag">
       
        <p>Enumeration of possible submit form flags.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.SubmitFormFlag.Fdf">
       
        <p>Data will be returned in FDF format.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.SubmitFormFlag.Html">
       
        <p>Data will be returned in HTML format.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.SubmitFormFlag.Xfdf">
       
        <p>Data will be returned in XFDF format.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.SubmitFormFlag.FdfWithComments">
       
        <p>Data will be returned in FDF format with comments.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.SubmitFormFlag.XfdfWithComments">
       
        <p>Data will be returned in XFDF format with comments.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.SubmitFormFlag.Pdf">
       
        <p>Whole PDF file will be submitted.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.TextProperties">
       
        <p>Represents text properties such as: text size, color, style etc.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.TextProperties.getColor">
       
        <p>Gets text color.</p> @return Color object
      
    </member>
    <member name="M:com.aspose.pdf.facades.TextProperties.setColor(java.awt.Color)">
       
        <p>Sets text color.</p> @param value Color object
      
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.facades.TextProperties.isColorSpecified">
       
        <p>Gets a value that indicates whether the {@code Color} property is specified.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.TextProperties.getTextSize">
       
        <p>Gets text size.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.facades.TextProperties.setTextSize(double)">
       
        <p>Sets text size.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.facades.TextProperties.isTextSizeSpecified">
       
        <p>Gets a value that indicates whether the {@code TextSize} property is specified.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.facades.TextProperties.#ctor(double)">
       
        <p>Creates {@code TextProperties} object for the specified text size</p> @param textSize Text size value.
      
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.facades.VerticalAlignmentType">
       
        <p>Class representing possible vertical alignment values. 
          <br/> Use VerticalAlignment instead
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.VerticalAlignmentType.toString">
       
        <p>Returns string representation.</p> @return Name value.
      
    </member>
    <member name="M:com.aspose.pdf.facades.VerticalAlignmentType.#ctor(String)">
       
        <p>Initializes vertical alignment by its name.</p> @param name Vertical alignment type name.
      
      <param name="String"/>
    </member>
    <member name="F:com.aspose.pdf.facades.VerticalAlignmentType.Top">
       
        <p>Top alignment.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.VerticalAlignmentType.Center">
       
        <p>Center alignment type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.VerticalAlignmentType.Bottom">
       
        <p>Bottom alignment type.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.ViewerPreference">
       
        <p>Describes viewer prefereces (page mode, non full screen page mode, page layout).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.PAGE_MODE_USE_OC">
       
        <p>Optional content group panel visible.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.DISPLAY_DOC_TITLE">
       
        <p>A flag specifying whether the window's title bar should display the document title</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.NON_FULL_SCREEN_PAGE_MODE_USE_OC">
       
        <p>Optional content group panel visible.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.PAGE_LAYOUT_SINGLE_PAGE">
       
        <p>Display one page at a time.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.PAGE_LAYOUT_ONE_COLUMN">
       
        <p>Display the pages in one column.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.PAGE_LAYOUT_TWO_COLUMN_LEFT">
       
        <p>Display the pages in two columns, with odd-numbered pages on the right</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.PAGE_LAYOUT_TWO_COLUMN_RIGHT">
       
        <p>Display the pages in two columns, with odd-numbered pages on the right.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.PAGE_MODE_USE_NONE">
       
        <p>Neither document outline nor thumbnail images visible</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.PAGE_MODE_USE_OUTLINES">
       
        <p>Document outline visible.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.PAGE_MODE_USE_THUMBS">
       
        <p>Thumbnail images visible.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.PAGE_MODE_FULL_SCREEN">
       
        <p>Full-screen mode, with no menu bar, window controls, or any other window visible.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.PAGE_MODE_USE_ATTACHMENT">
       
        <p>Page mode with attacments.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.HIDE_TOOLBAR">
       
        <p>A flag specifying whether to hide the conforming reader's tool bars when the document is active.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.HIDE_MENUBAR">
       
        <p>A flag specifying whether to hide the conforming reader's menu bar when the document is active.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.HIDE_WINDOW_UI">
       
        <p>A flag specifying whether to hide user interface elements in the document's window (such as scroll bars and navigation controls), leaving only the document's contents displayed.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.FIT_WINDOW">
       
        <p>A flag specifying whether to resize the document's window to fit the size of the first displayed page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.CENTER_WINDOW">
       
        <p>A flag specifying whether to position the document's window in the center of the screen.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.NON_FULL_SCREEN_PAGE_MODE_USE_NONE">
       
        <p>Neither document outline nor thumbnail images visible.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.NON_FULL_SCREEN_PAGE_MODE_USE_OUTLINES">
       
        <p>Document outline visible.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.NON_FULL_SCREEN_PAGE_MODE_USE_THUMBS">
       
        <p>Thumbnail images visible</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.DIRECTION_L_2_R">
       
        <p>Text reading order left to right.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.DIRECTION_R_2_L">
       
        <p>Text reading order right to left.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.SIMPLEX">
       
        <p>Print single-sided.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.DUPLEX_FLIP_SHORT_EDGE">
       
        <p>Duplex and flip on the short edge of the sheet.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.DUPLEX_FLIP_LONG_EDGE">
       
        <p>Duplex and flip on the short edge of the sheet.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.WordWrapMode">
       
        <p>Defines word wrapping strategies</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.WordWrapMode.Default">
       
        <p>Default algorithm (allows breaking words in the middle)</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.WordWrapMode.ByWords">
       
        <p>Word wrapping only wraps complete words. If the complete word cannot be wrapped, attempts to wrap word in the middle</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Field">
       
        <p>Base class for acro form fields.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Field.getPartialName">
       
        <p>Gets partial name of the field.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.Field.setPartialName(String)">
       
        <p>Sets partial name of the field.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Field.getAlternateName">
       
        <p>Gets alternate name of the field (An alternate field name that shall be used in place of the actual field name wherever the field shall be identified in the user interface). Alternate name is used as field tooltip in Adobe Acrobat.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.Field.setAlternateName(String)">
       
        <p>Sets alternate name of the field (An alternate field name that shall be used in place of the actual field name wherever the field shall be identified in the user interface). Alternate name is used as field tooltip in Adobe Acrobat.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Field.getMappingName">
       
        <p>Gets mapping name of the field that shall be used when exporting interactive form field data from the document.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.Field.setMappingName(String)">
       
        <p>Sets mapping name of the field that shall be used when exporting interactive form field data from the document.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Field.recalculate">
       
        <p>Recaculates all calculated fields on the form.</p> @return true if field value was changed during recalculation.
      
    </member>
    <member name="M:com.aspose.pdf.Field.getValue">
       
        <p>Gets value of the field.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.Field.setValue(String)">
       
        <p>Set value.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Field.isSynchronized">
       
        <p>Returns true if dictionary is synchronized.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Field.size">
       
        <p>Gets number of subfields in this field. (For example number of items in radio button field).</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.Field.getSyncRoot">
       
        <p>Synchronization object.</p> @return object value
      
    </member>
    <member name="M:com.aspose.pdf.Field.isGroup">
       
        <p>Gets boolean value which indicates is this field non-terminal field i.e. group of fields.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Field.copyTo(Field[],int)">
       
        <p>Copies subfields of this field into array starting from specified index.</p> @param array Array where field must be copied. @param index Starting index where fields will be copied.
      
      <param name="Field[]"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Field.iterator">
      / * 
        <p>/ * Returns enumerator of contained fields. / *</p> / * @return Enumerator. /
      
    </member>
    <member name="M:com.aspose.pdf.Field.flatten">
       
        <p>Removes this field and place its value directly on the page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Field.get_Item(String)">
       
        <p>Gets subfield contained in this field by name of the subfield.</p> @param name Contained subfield name. @return Field instance.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Field.get_Item(int)">
       
        <p>Gets subfield contained in this field by index.</p> @param index Index of the reuqested subfield. @return Field instance.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Field.setPosition(Point)">
       
        <p>Set position of the field.</p> @param point Point where field should be positioned.
      
      <param name="Point"/>
    </member>
    <member name="M:com.aspose.pdf.Field.updateAppearances">
       
        <p>Update appearances value.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Field.getAnnotationIndex">
       
        <p>Gets index of this anotation on the page.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.Field.setAnnotationIndex(int)">
       
        <p>Sets index of this anotation on the page.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Field.getPageIndex">
       
        <p>Gets index of page which contains this field.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.Field.getRect">
       
        <p>Gets the field rectangle.</p> @return the field rectangle.
      
    </member>
    <member name="M:com.aspose.pdf.Field.setRect(Rectangle)">
       
        <p>Sets the field rectangle.</p> @param value the field rectangle.
      
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Field.isSharedField">
       
        <p>Property for Generator support. Used when field is added to header or footer. If true, this field will created once and it's appearance will be visible on all pages of the document. If false, separated field will be created for every document page.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Field.setSharedField(boolean)">
       
        <p>Property for Generator support. Used when field is added to header or footer. If true, this field will created once and it's appearance will be visible on all pages of the document. If false, separated field will be created for every document page.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Field.isFitIntoRectangle">
       
        <p>If true then font size will reduced to fit text to specified rectangle.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Field.setFitIntoRectangle(boolean)">
       
        <p>If true then font size will reduced to fit text to specified rectangle.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Field.getMaxFontSize">
       
        <p>Maximal font size which can be used for field contents. -1 to don't check size.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Field.setMaxFontSize(double)">
       
        <p>Maximal font size which can be used for field contents. -1 to don't check size.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Field.getMinFontSize">
       
        <p>Minimal font size which can be used for field contents. -1 to don't check size.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Field.setMinFontSize(double)">
       
        <p>Minimal font size which can be used for field contents. -1 to don't check size.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Field.getTabOrder">
       
        <p>Gets or sets tab order of the field.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.Field.setTabOrder(int)">
       
        <p>Gets or sets tab order of the field.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Field.add(WidgetAnnotation)">
      <param name="WidgetAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.Field.clear"/>
    <member name="M:com.aspose.pdf.Field.contains(WidgetAnnotation)">
      <param name="WidgetAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.Field.copyTo(WidgetAnnotation[],int)">
      <param name="WidgetAnnotation[]"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Field.isReadOnly"/>
    <member name="M:com.aspose.pdf.Field.remove(WidgetAnnotation)">
      <param name="WidgetAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.Field.#ctor(IDocument)">
       
        <p>Creates field for use in Generator.</p> @param doc Document where field will be created.
      
      <param name="IDocument"/>
    </member>
    <member name="F:com.aspose.pdf.Field._Password">
      _Password
    </member>
    <member name="F:com.aspose.pdf.Field._FileSelect">
      _FileSelect
    </member>
    <member name="T:com.aspose.pdf.FigureElement">
       
        <p>Class representing logical structure figure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FigureElement.getImage">
       
        <p>Gets the value of figure structure element.</p> @return Image object
      
    </member>
    <member name="M:com.aspose.pdf.FigureElement.#ctor(ITrailerable,IPdfDictionary)">
      <param name="ITrailerable"/>
      <param name="IPdfDictionary"/>
    </member>
    <member name="T:com.aspose.pdf.FileAttachmentAnnotation">
       
        <p>Class describes file attachment annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FileAttachmentAnnotation.getAnnotationType">
       
        <p>Gets type of annotation.</p> @return int value @see AnnotationType
      
    </member>
    <member name="M:com.aspose.pdf.FileAttachmentAnnotation.getFile">
       
        <p>Get specification of the file associated with this annotation.</p> @return file specification.
      
    </member>
    <member name="M:com.aspose.pdf.FileAttachmentAnnotation.setFile(FileSpecification)">
       
        <p>Set specification of the file associated with this annotation.</p> @param value file specification.
      
      <param name="FileSpecification"/>
    </member>
    <member name="M:com.aspose.pdf.FileAttachmentAnnotation.getIcon">
       
        <p>Gets icon that shall be used in displaying annotation.</p> @return FileIcon value @see FileIcon
      
    </member>
    <member name="M:com.aspose.pdf.FileAttachmentAnnotation.setIcon(int)">
       
        <p>Sets icon that shall be used in displaying annotation.</p> @param value FileIcon value @see FileIcon
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.FileAttachmentAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor object to process annotation.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.FileAttachmentAnnotation.#ctor(Page,Rectangle,FileSpecification)">
       
        <p>Creates new FileAttachment annotation on the specified page.</p> @param page Document's page where annotation should be created. @param rect Required rectangle that sets annotation's border. @param fileSpec Describes the file that shoud be bound with the annotation.
      
      <param name="Page"/>
      <param name="Rectangle"/>
      <param name="FileSpecification"/>
    </member>
    <member name="T:com.aspose.pdf.FileEncoding">
       
        <p>Encoding of the attached file. Possible values: Zip - file is compressed with ZIP, None - file is non compressed.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.FileEncoding.None">
       
        <p>File is not compressed.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.FileEncoding.Zip">
       
        <p>File is compressed with ZIP algorithhm.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.FileFontSource">
       
        <p>Represents single font file source.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FileFontSource.getFilePath">
       
        <p>Path to the font file.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.FileFontSource.setFilePath(String)">
       
        <p>Path to the font file.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FileFontSource.equals(Object)">
       
        <p>Check if font file source objects are equal.</p> @return True if both objects are font file sources targeted to the same file. @param obj Font file source object which will be compared.
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.FileFontSource.hashCode">Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by {@link java.util.HashMap}. &lt;p&gt; The general contract of {@code hashCode} is: &lt;ul&gt; &lt;li&gt;Whenever it is invoked on the same object more than once during an execution of a Java application, the {@code hashCode} method must consistently return the same integer, provided no information used in {@code equals} comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. &lt;li&gt;If two objects are equal according to the {@code equals(Object)} method, then calling the {@code hashCode} method on each of the two objects must produce the same integer result. &lt;li&gt;It is &lt;em&gt;not&lt;/em&gt; required that if two objects are unequal according to the {@link java.lang.Object#equals(java.lang.Object)} method, then calling the {@code hashCode} method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. &lt;/ul&gt; &lt;p&gt; As much as is reasonably practical, the hashCode method defined by class {@code Object} does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java &lt;span style="font-size:70%"&gt;&lt;sup&gt;TM&lt;/sup&gt;&lt;/span&gt; programming language.) @return a hash code value for this object. @see java.lang.Object#equals(java.lang.Object) @see java.lang.System#identityHashCode</member>
    <member name="M:com.aspose.pdf.FileFontSource.#ctor(String)">
       
        <p>Initializes a new instance of {@code FileFontSource} class.</p> @param filePath Path to the font file.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.FileHyperlink">
       
        <p>Represents file hyperlink object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FileHyperlink.getPath">
       
        <p>Gets or sets the path to file.</p> @return String object
      
    </member>
    <member name="M:com.aspose.pdf.FileHyperlink.setPath(String)">
       
        <p>Gets or sets the path to file.</p> @param value String object
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FileHyperlink.#ctor">
       
        <p>Initializes a new instance of the {@code FileHyperlink} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FileHyperlink.#ctor(String)">
       
        <p>Initializes a new instance of the {@code FileHyperlink} class.</p> @param path Path to file.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.FileIcon">
       
        <p>An icon to be used in displaying the annotation.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.FileIcon.PushPin">
       
        <p>PushPin icon (default value).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.FileIcon.Graph">
       
        <p>Graph icon.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.FileIcon.Paperclip">
       
        <p>Paperclip icon.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.FileIcon.Tag">
       
        <p>This is tag icon.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.FileIconConverter">
      Represents FileIconConverter class
    </member>
    <member name="M:com.aspose.pdf.FileIconConverter.toString(int)">
      Get String name for FileIcon element @param value FileIcon element @return String object @see FileIcon
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.FileIconConverter.toEnum(String)">
      Get FileIcon element for String name @param value String object @return FileIcon element @see FileIcon
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.FileParams">
       
        <p>Defines an embedded file parameter dictionary that shall contain additional file-specific information.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FileParams.getSize">
       
        <p>The size of the uncompressed embedded file, in bytes.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.FileParams.getCreationDate">
       
        <p>Get the date and time when the embedded file was created.</p> @return Date object
      
    </member>
    <member name="M:com.aspose.pdf.FileParams.setCreationDate(java.util.Date)">
       
        <p>Set the date and time when the embedded file was created.</p> @param value Date object
      
      <param name="java.util.Date"/>
    </member>
    <member name="M:com.aspose.pdf.FileParams.getModDate">
       
        <p>Get the date and time when the embedded file was last modified.</p> @return Date object
      
    </member>
    <member name="M:com.aspose.pdf.FileParams.setModDate(java.util.Date)">
       
        <p>Set the date and time when the embedded file was last modified.</p> @param value Date object
      
      <param name="java.util.Date"/>
    </member>
    <member name="M:com.aspose.pdf.FileParams.getCheckSum">
       
        <p>A 16-byte string that is the checksum of the bytes of the uncompressed embedded file. The checksum is calculated by applying the standard MD5 message-digest algorithm to the bytes of the embedded file stream.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.FileParams.#ctor(FileSpecification)">
       
        <p>Constructor for FileParams class.</p> @param spec File specification.
      
      <param name="FileSpecification"/>
    </member>
    <member name="T:com.aspose.pdf.FileSelectBoxField">
       
        <p>Field for file select box element.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.FileSpecification">
       
        <p>Class representing embedded file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.getEncoding">
       
        <p>Gets encoding format. Possible values: Zip - file is compressed with ZIP, None - file is not compressed.</p> @return int value @see FileEncoding
      
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.setEncoding(int)">
       
        <p>Sets encoding format. Possible values: Zip - file is compressed with ZIP, None - file is not compressed.</p> @param value int value @see FileEncoding
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.isIncludeContents">
       
        <p>If true, contents of the file will be included in the file specification.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.setIncludeContents(boolean)">
       
        <p>If true, contents of the file will be included in the file specification.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.getEngineDict">
       
        <p>Pdf dictionary containing information about the file. Internal only</p> @return IPdfDictionary object
      
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.getEngineObj">
       
        <p>Internal only</p> @return IPdfObject object
      
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.getEncryptedPayload">
       
        <p>Gets encrypted payload.</p> @return EncryptedPayload instance
      
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.getDescription">
       
        <p>Gets text associated with the file specification.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.setDescription(String)">
       
        <p>Sets text associated with the file specification.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.getAFRelationship">
       
        <p>Associated file Relationship.</p> @return AFRelationship element
      
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.setAFRelationship(int)">
       
        <p>Associated file Relationship.</p> @param value AFRelationship element
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.getStreamContents">
       
        <p>Gets contents of file as stream. Contents is not loaded into memory which allows to decrease memory usage. But this stream does not support positioning and Length property. If you need this features please use Contents property instead.</p> @return InputStream object
      
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.getContentsInternal">
       
        <p>Gets contents file.</p> @return Stream object
      
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.getContents">
       
        <p>Gets contents file.</p> @return InputStream object
      
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.setContents(InputStream)">
       
        <p>Sets contents file.</p> @param value InputStream object
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.setContents(byte[])">
       
        <p>Sets contents file.</p> @param value array of bytes
      
      <param name="byte[]"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.getParams">
       
        <p>Gets file paramteres.</p> @return FileParams object
      
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.setParams(FileParams)">
       
        <p>Sets file paramteres.</p> @param value FileParams object
      
      <param name="FileParams"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.getMIMEType">
       
        <p>Gets subtype of the embedded file</p> @return string value
      
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.setMIMEType(String)">
       
        <p>Sets MIMEType.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.getName">
       
        <p>Gets file specification name.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.setName(String)">
       
        <p>Sets file specification name.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.getUnicodeName">
       
        <p>Gets file specification unicode name.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.setUnicodeName(String)">
       
        <p>Sets file specification unicode name.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.getFileSystem">
       
        <p>Gets name of the file system.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.setFileSystem(String)">
       
        <p>Sets name of the file system.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.getValue(String)">
       
        <p>Gets application-specific parameter.</p> @return String value - if parameter found; otherwise, null. @param key Parameter name.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.setValue(String,String)">
       
        <p>Sets application-specific parameter.</p> @param key Parameter name. @param value New parameter value.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.close">
       
        <p>Dispose contents.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.dispose">
       
        <p>Dispose contents.</p> This method is obsolete, use close() instead.
      
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.#ctor(IPdfPrimitive)">
       
        <p>File specification</p> @param specification IPdfPrimitive object
      
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.#ctor(String)">
       
        <p>Constructor for FileSpecification</p> @param file File path.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.#ctor(Stream,String)">
       
        <p>Constructor for file specification.</p> @param stream Stream containing data file. @param name File specification.
      
      <param name="Stream"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.#ctor(InputStream,String)">
       
        <p>Constructor for file specification.</p> @param stream Stream containing data file. @param name File specification.
      
      <param name="InputStream"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.#ctor(String,String)">
       
        <p>Constructor for FileSpecification.</p> @param file File path. @param description File description.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.#ctor(Stream,String,String)">
       
        <p>Constructor for FileSpecification.</p> @param stream Stream to be used in the document. @param name A file specification string. @param description File description.
      
      <param name="Stream"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.#ctor(InputStream,String,String)">
       
        <p>Constructor for FileSpecification.</p> @param stream Stream to be used in the document. @param name A file specification string. @param description File description.
      
      <param name="InputStream"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.#ctor(String,Annotation)">
       
        <p>Constructor for FileSpecification.</p> @param fileName String object @param annot Annotation object
      
      <param name="String"/>
      <param name="Annotation"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.#ctor">
       
        <p>Create new empty file specification.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.FitBExplicitDestination">
       
        <p>Represents explicit destination that displays the page with its contents magnified just enough to fit its bounding box entirely within the window both horizontally and vertically. If the required horizontal and vertical magnification factors are different, use the smaller of the two, centering the bounding box within the window in the other dimension.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FitBExplicitDestination.toString">
       
        <p>Converts the object state into string value. Example: "1 FitB".</p> @return String value representing object state.
      
    </member>
    <member name="M:com.aspose.pdf.FitBExplicitDestination.#ctor(Page)">
       
        <p>Creates the instance and initializes it by DOM page object.</p> @param page DOM page object.
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.FitBExplicitDestination.#ctor(Document,int)">
       
        <p>Creates remote explicit destination.</p> @param document The parent document that contains this object. @param pageNumber The destination page number of remote document.
      
      <param name="Document"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.FitBExplicitDestination.#ctor(int)">
       
        <p>Creates remote explicit destination.</p> @param pageNumber The destination page number of remote document.
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.FitBHExplicitDestination">
       
        <p>Represents explicit destination that displays the page with the vertical coordinate top positioned at the top edge of the window and the contents of the page magnified just enough to fit the entire width of its bounding box within the window. A null value for top specifies that the current value of that parameter is to be retained unchanged.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FitBHExplicitDestination.getTop">
       
        <p>Gets the vertical coordinate top positioned at the top edge of the window.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.FitBHExplicitDestination.toString">
       
        <p>Converts the object state into string value. Example: "1 FitBH 100".</p> @return String value representing object state.
      
    </member>
    <member name="M:com.aspose.pdf.FitBHExplicitDestination.#ctor(Page,double)">
       
        <p>Creates the instance and initializes it by DOM page object and top parameter.</p> @param page DOM page object. @param top The vertical coordinate top positioned at the top edge of the window.
      
      <param name="Page"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.FitBHExplicitDestination.#ctor(Document,int,double)">
       
        <p>Creates remote explicit destination.</p> @param document The parent document that contains this object. @param pageNumber The destination page number of remote document. @param top The vertical coordinate top positioned at the top edge of the window.
      
      <param name="Document"/>
      <param name="int"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.FitBHExplicitDestination.#ctor(int,double)">
       
        <p>Creates remote explicit destination.</p> @param pageNumber The destination page number of remote document. @param top The vertical coordinate top positioned at the top edge of the window.
      
      <param name="int"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.FitBVExplicitDestination">
       
        <p>Represents explicit destination that displays the page with the horizontal coordinate left positioned at the left edge of the window and the contents of the page magnified just enough to fit the entire height of its bounding box within the window. A null value for left specifies that the current value of that parameter is to be retained unchanged.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FitBVExplicitDestination.getLeft">
       
        <p>Gets the horizontal coordinate left positioned at the left edge of the window.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.FitBVExplicitDestination.toString">
       
        <p>Converts the object state into string value. Example: "1 FitBV 100".</p> @return String value representing object state.
      
    </member>
    <member name="M:com.aspose.pdf.FitBVExplicitDestination.#ctor(Page,double)">
       
        <p>Creates the instance and initializes it by DOM page object and left parameter.</p> @param page DOM page object. @param left The horizontal coordinate left positioned at the left edge of the window.
      
      <param name="Page"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.FitBVExplicitDestination.#ctor(Document,int,double)">
       
        <p>Creates remote explicit destination.</p> @param document The parent document that contains this object. @param pageNumber The destination page number of remote document. @param left The horizontal coordinate left positioned at the left edge of the window.
      
      <param name="Document"/>
      <param name="int"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.FitBVExplicitDestination.#ctor(int,double)">
       
        <p>Creates remote explicit destination.</p> @param pageNumber The destination page number of remote document. @param left The horizontal coordinate left positioned at the left edge of the window.
      
      <param name="int"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.FitExplicitDestination">
       
        <p>Represents explicit destination that displays the page with its contents magnified just enough to fit the entire page within the window both horizontally and vertically. If the required horizontal and vertical magnification factors are different, use the smaller of the two, centering the page within the window in the other dimension.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FitExplicitDestination.toString">
       
        <p>Converts the object state into string value. Example: "1 Fit".</p> @return String value representing object state.
      
    </member>
    <member name="M:com.aspose.pdf.FitExplicitDestination.#ctor(Page)">
       
        <p>Creates local explicit destination.</p> @param page The destination page object.
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.FitExplicitDestination.#ctor(Document,int)">
       
        <p>Creates remote explicit destination.</p> @param document The Document object. @param pageNumber The destination page number.
      
      <param name="Document"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.FitExplicitDestination.#ctor(int)">
       
        <p>Creates remote explicit destination.</p> @param pageNumber The destination page number of remote document.
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.FitHExplicitDestination">
       
        <p>Represents explicit destination that displays the page with the vertical coordinate top positioned at the top edge of the window and the contents of the page magnified just enough to fit the entire width of the page within the window. A null value for top specifies that the current value of that parameter is to be retained unchanged.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FitHExplicitDestination.getTop">
       
        <p>Gets the vertical coordinate top positioned at the top edge of the window.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.FitHExplicitDestination.toString">
       
        <p>Converts the object state into string value. Example: "1 FitH 100".</p> @return String value representing object state.
      
    </member>
    <member name="M:com.aspose.pdf.FitHExplicitDestination.#ctor(Page,double)">
       
        <p>Creates the instance and initializes it by DOM page object and top parameter.</p> @param page DOM page object. @param top The vertical coordinate top positioned at the top edge of the window.
      
      <param name="Page"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.FitHExplicitDestination.#ctor(Document,int,double)">
       
        <p>Creates remote explicit destination.</p> @param document The parent document that contains this object. @param pageNumber The destination page number of remote document. @param top The vertical coordinate top positioned at the top edge of the window.
      
      <param name="Document"/>
      <param name="int"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.FitHExplicitDestination.#ctor(int,double)">
       
        <p>Creates remote explicit destination.</p> @param pageNumber The destination page number of remote document. @param top The vertical coordinate top positioned at the top edge of the window.
      
      <param name="int"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.FitRExplicitDestination">
       
        <p>Represents explicit destination that displays the page with its contents magnified just enough to fit the rectangle specified by the coordinates left, bottom, right, and topentirely within the window both horizontally and vertically. If the required horizontal and vertical magnification factors are different, use the smaller of the two, centering the rectangle within the window in the other dimension. A null value for any of the parameters may result in unpredictable behavior.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FitRExplicitDestination.getLeft">
       
        <p>Gets left horizontal coordinate of visible rectangle.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.FitRExplicitDestination.getBottom">
       
        <p>Gets bottom vertical coordinate of visible rectangle.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.FitRExplicitDestination.getRight">
       
        <p>Gets right horizontal coordinate of visible rectangle.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.FitRExplicitDestination.getTop">
       
        <p>Gets top vertical coordinate of visible rectangle.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.FitRExplicitDestination.toString">
       
        <p>Converts the object state into string value. Example: "1 FitR 100 200 300 400".</p> @return String value representing object state.
      
    </member>
    <member name="M:com.aspose.pdf.FitRExplicitDestination.#ctor(Page,double,double,double,double)">
       
        <p>Creates the instance and initializes it by DOM page object and visible parameters.</p> @param page DOM page object. @param left Left horizontal coordinate of visible rectangle. @param bottom Bottom vertical coordinate of visible rectangle. @param right Right horizontal coordinate of visible rectangle. @param top Top vertical coordinate of visible rectangle.
      
      <param name="Page"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.FitRExplicitDestination.#ctor(Document,int,double,double,double,double)">
       
        <p>Creates remote explicit destination.</p> @param document The parent document that contains this object. @param pageNumber The destination page number of remote document. @param left Left horizontal coordinate of visible rectangle. @param bottom Bottom vertical coordinate of visible rectangle. @param right Right horizontal coordinate of visible rectangle. @param top Top vertical coordinate of visible rectangle.
      
      <param name="Document"/>
      <param name="int"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.FitRExplicitDestination.#ctor(int,double,double,double,double)">
       
        <p>Creates remote explicit destination.</p> @param pageNumber The destination page number of remote document. @param left Left horizontal coordinate of visible rectangle. @param bottom Bottom vertical coordinate of visible rectangle. @param right Right horizontal coordinate of visible rectangle. @param top Top vertical coordinate of visible rectangle.
      
      <param name="int"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.FitVExplicitDestination">
       
        <p>Represents explicit destination that displays the page with the horizontal coordinate left positioned at the left edge of the window and the contents of the page magnified just enough to fit the entire height of the page within the window. A null value for left specifies that the current value of that parameter is to be retained unchanged.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FitVExplicitDestination.getLeft">
       
        <p>Gets the horizontal coordinate left positioned at the left edge of the window.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.FitVExplicitDestination.toString">
       
        <p>Converts the object state into string value. Example: "1 FitV 100".</p> @return String value representing object state.
      
    </member>
    <member name="M:com.aspose.pdf.FitVExplicitDestination.#ctor(Page,double)">
       
        <p>Creates the instance and initializes it by DOM page object and left parameter.</p> @param page DOM page object. @param left The horizontal coordinate left positioned at the left edge of the window.
      
      <param name="Page"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.FitVExplicitDestination.#ctor(Document,int,double)">
       
        <p>Creates remote explicit destination.</p> @param document The parent document that contains this object. @param pageNumber The destination page number of remote document. @param left The horizontal coordinate left positioned at the left edge of the window.
      
      <param name="Document"/>
      <param name="int"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.FitVExplicitDestination.#ctor(int,double)">
       
        <p>Creates remote explicit destination.</p> @param pageNumber The destination page number of remote document. @param left The horizontal coordinate left positioned at the left edge of the window.
      
      <param name="int"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.FixedPrint">
       
        <p>Represent Fixed print data of Watermark Annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FixedPrint.getMatrix">
       
        <p>Gets matrix value.</p> @return Matrix instance
      
    </member>
    <member name="M:com.aspose.pdf.FixedPrint.setMatrix(Matrix)">
       
        <p>Sets matrix value.</p> @param value Matrix instance
      
      <param name="Matrix"/>
    </member>
    <member name="M:com.aspose.pdf.FixedPrint.getHorizontalTranslation">
       
        <p>Gets horizontal translation.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.FixedPrint.setHorizontalTranslation(double)">
       
        <p>Sets horizontal translation.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.FixedPrint.getVerticalTranslation">
       
        <p>Gets vertical translation.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.FixedPrint.setVerticalTranslation(double)">
       
        <p>Sets vertical translation.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.Fixup">
       
        <p>This enum represents an type of Fixup.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Fixup.ConvertAllPagesIntoCMYKImagesAndPreserveTextInformation">
       
        <p>Not supported.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Fixup.ConvertFontsToOutlines">
       
        <p>Not supported.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Fixup.DerivePageGeometryBoxesFromCropMarks">
       
        <p>Not supported.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Fixup.EmbedMissingFonts">
       
        <p>Not supported.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Fixup.RotatePagesToLandscape">
       
        <p>Rotate all pages to landscape if portrait by 90 degrees.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Fixup.RotatePagesToPortrait">
       
        <p>Rotate all pages to portrait if landscape by 90 degrees.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.FloatingBox">
      Represents a FloatingBox in a Pdf document. FloatingBox is custom positioned.
    </member>
    <member name="M:com.aspose.pdf.FloatingBox.getColumnInfo">
      Gets a column info @return ColumnInfo object
    </member>
    <member name="M:com.aspose.pdf.FloatingBox.setColumnInfo(ColumnInfo)">
      Sets a column info @param value ColumnInfo value
      <param name="ColumnInfo"/>
    </member>
    <member name="M:com.aspose.pdf.FloatingBox.getWidth">
      Gets a float value that indicates the width of the floating box. @return double value
    </member>
    <member name="M:com.aspose.pdf.FloatingBox.setWidth(double)">
      Sets a float value that indicates the width of the floating box. @param value double value
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.FloatingBox.getHeight">
      Gets a float value that indicates the height of the floating box. @return value that indicates the height.
    </member>
    <member name="M:com.aspose.pdf.FloatingBox.setHeight(double)">
      Sets a float value that indicates the height of the floating box. @param value value that indicates the height.
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.FloatingBox.isNeedRepeating">
      Gets a boolean value that indicates whether the paragraph need to be repeated on next page. Default value is true.The attribute is only valid when the paragraph itself and the object its ReferenceParagraphID referred to both are included in RepeatingRows. @return boolean value
    </member>
    <member name="M:com.aspose.pdf.FloatingBox.setNeedRepeating(boolean)">
      Sets a boolean value that indicates whether the paragraph need to be repeated on next page. Default value is true.The attribute is only valid when the paragraph itself and the object its ReferenceParagraphID referred to both are included in RepeatingRows. @param value boolean value
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.FloatingBox.getParagraphs">
      Gets a collection that indicates all paragraphs in the cell. @return collection that indicates all paragraphs.
    </member>
    <member name="M:com.aspose.pdf.FloatingBox.setParagraphs(Paragraphs)">
       
        <p>Sets a collection that indicates all paragraphs in the cell.</p> @param value collection that indicates all paragraphs.
      
      <param name="Paragraphs"/>
    </member>
    <member name="M:com.aspose.pdf.FloatingBox.getBorder">
      Gets a object that indicates the border info of the floating box. @return object that indicates the border info.
    </member>
    <member name="M:com.aspose.pdf.FloatingBox.setBorder(BorderInfo)">
      Sets a object that indicates the border info of the floating box. @param value object that indicates the border info.
      <param name="BorderInfo"/>
    </member>
    <member name="M:com.aspose.pdf.FloatingBox.getBackgroundColor">
      Gets a object that indicates the background color of the floating box. @return object that indicates the background color.
    </member>
    <member name="M:com.aspose.pdf.FloatingBox.setBackgroundColor(Color)">
      Sets a object that indicates the background color of the floating box. @param value object that indicates the background color.
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.FloatingBox.getBackgroundImage">
       
        <p>Gets or sets background image for page (for generator only).</p> @return Image instance
      
    </member>
    <member name="M:com.aspose.pdf.FloatingBox.setBackgroundImage(Image)">
       
        <p>Gets or sets background image for page (for generator only).</p> @param value Image instance
      
      <param name="Image"/>
    </member>
    <member name="M:com.aspose.pdf.FloatingBox.getPadding">
       
        <p>Gets a object that indicates the padding of the floating box.</p> @return object that indicates the padding.
      
    </member>
    <member name="M:com.aspose.pdf.FloatingBox.setPadding(MarginInfo)">
       
        <p>Sets a object that indicates the padding of the floating box.</p> @param value object that indicates the padding.
      
      <param name="MarginInfo"/>
    </member>
    <member name="M:com.aspose.pdf.FloatingBox.getLeft">
       
        <p>Gets the table left coordinate.</p> @return table left coordinate.
      
    </member>
    <member name="M:com.aspose.pdf.FloatingBox.setLeft(double)">
       
        <p>Sets the table left coordinate.</p> @param value table left coordinate.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.FloatingBox.getTop">
       
        <p>Gets the table top coordinate.</p> @return table top coordinate.
      
    </member>
    <member name="M:com.aspose.pdf.FloatingBox.setTop(double)">
       
        <p>Sets the table top coordinate.</p> @param value table top coordinate.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.FloatingBox.deepClone">
       
        <p>Clones a new {@code FloatingBox} object. Paragraphs in the floating box are not cloned.</p> @return The new {@code FloatingBox} object.
      
    </member>
    <member name="M:com.aspose.pdf.FloatingBox.#ctor(float,float)">
       
        <p>Initializes a new instance of the {@code FloatingBox} class with specified width and height.</p> @param width The width of the box. @param height The height of the box.
      
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.FloatingBox.#ctor">
       
        <p>Initializes a new instance of the {@code FloatingBox} class.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.FolderFontSource">
       
        <p>Represents the folder that contains font files.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FolderFontSource.getFolderPath">
       
        <p>Path to the folder that contains font files.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.FolderFontSource.setFolderPath(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FolderFontSource.equals(Object)">
       
        <p>Check if folder font source objects are equal.</p> @return True if both objects are folder font sources targeted to the same folder. @param obj Folder font source object which will be compared.
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.FolderFontSource.hashCode">Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by {@link java.util.HashMap}. &lt;p&gt; The general contract of {@code hashCode} is: &lt;ul&gt; &lt;li&gt;Whenever it is invoked on the same object more than once during an execution of a Java application, the {@code hashCode} method must consistently return the same integer, provided no information used in {@code equals} comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. &lt;li&gt;If two objects are equal according to the {@code equals(Object)} method, then calling the {@code hashCode} method on each of the two objects must produce the same integer result. &lt;li&gt;It is &lt;em&gt;not&lt;/em&gt; required that if two objects are unequal according to the {@link java.lang.Object#equals(java.lang.Object)} method, then calling the {@code hashCode} method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. &lt;/ul&gt; &lt;p&gt; As much as is reasonably practical, the hashCode method defined by class {@code Object} does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java&lt;span style="font-size:70%"&gt;&lt;sup&gt;TM&lt;/sup&gt;&lt;/span&gt; programming language.) @return a hash code value for this object. @see java.lang.Object#equals(java.lang.Object) @see java.lang.System#identityHashCode</member>
    <member name="M:com.aspose.pdf.FolderFontSource.#ctor(String)">
       
        <p>Initializes a new instance of {@code FolderFontSource} class.</p> @param folderPath Path to the folder.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.Font">&lt;p&gt; Represents font object. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to search text on first page and change font of a first search occurrence. // Open document Document doc = new Document("input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get_Item(1).accept(absorber); // Create font and mark it to be embedded Font font = FontRepository.findFont("Arial"); font.isEmbedded(true); // Change font of the first text occurrence absorber.getTextFragments().get_Item(1).getTextState().setFont( font); // Save document doc.save("output.pdf"); &lt;/pre&gt; @see TextFragmentAbsorber @see FontRepository @see IDocument</member>
    <member name="M:com.aspose.pdf.Font.getType">
      The font's type Name @return String object
    </member>
    <member name="M:com.aspose.pdf.Font.getFontName">&lt;p&gt; Gets font name of the {@code Font} object. &lt;/p&gt; @return String value &lt;hr&gt; &lt;pre&gt; The example demonstrates how to search text on first page and view font name of a first text occurrence. // Open document Document doc = new Document(@"D:\Tests\input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get_Item(1).accept(absorber); // View font name of first text occurrence System.out.println(absorber.getTextFragments().get_Item(1).getTextState().getFont().getFontName()); &lt;/pre&gt; @see TextFragmentAbsorber @see IDocument</member>
    <member name="M:com.aspose.pdf.Font.getDecodedFontName">
       
        <p>Sometimes PDF fonts(usually Chinese/Japanese/Korean fonts) could have specificical font name. This name is value of PDF font property "BaseFont" and sometimes this property could be represented in hexademical form. If read this name directly it could be represented in non-readable form. To get readable form it's necessary to decode font's name by rules specifical for this font. This property returns decoded font name, so use it for cases when you meet with a non-readable {@code FontName}. If property {@code FontName} has readable form this property will be the same as {@code FontName}, so you can use this property for any cases when you need to get font name in a readable form.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.Font.getBaseFont">
       
        <p>Gets BaseFont value of PDF font object. Also known as PostScript name of the font.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.Font.getLastFontEmbeddingError">
       
        <p>An objective of this method - to return description of error if an attempt to embed font was failed. If there are no error cases it returns empty string.</p> @return Error description
      
    </member>
    <member name="M:com.aspose.pdf.Font.isEmbedded">&lt;p&gt; Gets a value that indicates whether the font is embedded. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The following example demonstrates how to find a font, mark it as embedded, search text on the document's page and replace the text font. // Create font and mark it to be embedded com.aspose.pdf.Font font = com.aspose.pdf.FontRepository.findFont("Arial"); font.isEmbedded ( true); // open document com.aspose.pdf.Document doc = new com.aspose.pdf.Document("D:\\Tests\\input.pdf"); // create TextFragmentAbsorber object to find all "hello world" text occurrences com.aspose.pdf.TextFragmentAbsorber absorber = new com.aspose.pdf.TextFragmentAbsorber("hello world"); // accept the absorber for first page doc.getPages().get_Item(1).accept(absorber); // change font for the first text occurrence absorber.getTextFragments().get_Item(1).getTextState().setFont(font); // save document doc.save("D:\\Tests\\output.pdf"); &lt;/pre&gt; @return boolean value @see TextFragmentAbsorber @see FontRepository @see IDocument</member>
    <member name="M:com.aspose.pdf.Font.setEmbedded(boolean)">
       
        <p>Sets a value that indicates whether the font is embedded.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Font.isSubset">&lt;p&gt; Gets a value that indicates whether the font is a subset. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to search text on first page and get the value that indicates whether the font is a subset. // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get_Item(1).accept(absorber); // View font's IsSubset value of first text occurrence if(absorber.TextFragments[1].TextState.Font.IsSubset) System.out.println("the font is a subset"); &lt;/pre&gt; @return boolean value @see TextFragmentAbsorber @see IDocument</member>
    <member name="M:com.aspose.pdf.Font.setSubset(boolean)">
       
        <p>Sets a value that indicates whether the font is a subset.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Font.isAccessible">&lt;p&gt; Gets indicating whether the font is present (installed) in the system. &lt;/p&gt; @return boolean value &lt;hr&gt; &lt;pre&gt; The example demonstrates how to search text on first page and get the value that indicates whether the font is installed in the system. // Open document Document doc = new Document(&amp;quot;D:\\Tests\\input.pdf&amp;quot;); // Create TextFragmentAbsorber object to find all &amp;quot;hello world&amp;quot; text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber(&amp;quot;hello world&amp;quot;); // Accept the absorber for first page doc.getPages().get_Item(1).accept(absorber); // View font's IsSubset value of first text occurrence if (absorber.getTextFragments().get_Item(1).getTextState().getFont() .isAccessible()) System.out.println(&amp;quot;the font is installed in the system&amp;quot;); &lt;/pre&gt; &lt;hr&gt; &lt;p&gt; Some operations are not available with fonts that could not be found in the system. &lt;/p&gt;</member>
    <member name="M:com.aspose.pdf.Font.getFontOptions">
       
        <p>Useful properties to tune Font behavior</p> @return IFontOptions object
      
    </member>
    <member name="M:com.aspose.pdf.Font.getIPdfFont">&lt;p&gt; Pdf font object. &lt;/p&gt; &lt;hr&gt; &lt;p&gt; For internal usage only &lt;/p&gt; @return IPdfFont object</member>
    <member name="M:com.aspose.pdf.Font.getIFont">&lt;p&gt; System font object. &lt;/p&gt; &lt;hr&gt; &lt;p&gt; For internal usage only &lt;/p&gt; @return IFont object</member>
    <member name="M:com.aspose.pdf.Font.save(OutputStream)">
       
        <p>Saves the font into the stream. Note that the font is saved to intermediate TTF format intended to be used in a converted copy of the original document only. The font file is not intended to be used outside the original document context.</p> @param stream OutputStream to save the font.
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.Font.measureString(String,float)">
       
        <p>Measures the string.</p> @return Width of the string represented with this font and the specified size. @param str The string. @param fontSize Font size.
      
      <param name="String"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.Font.doesFontContainAllCharacters(String)">
       
        <p>Determines if the font contains specified chars</p> @param value String value @return true if all the characters from text are present in the current font.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.FontAbsorber">
       
        <p>Represents an absorber object of fonts. Performs search for fonts and provides access to search results via {@code FontAbsorber.Fonts} collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FontAbsorber.getFonts">
       
        <p>Gets collection of search occurrences that are presented with {@code Font} objects.</p> @return FontCollection object
      
    </member>
    <member name="M:com.aspose.pdf.FontAbsorber.visit(Document,int,int)">
       
        <p>Performs search in the specified range of pages of the document.</p> @param pdf Pdf pocument object. @param startPage Pdf pocument start page. @param pageCount Pdf document page count
      
      <param name="Document"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.FontAbsorber.visit(Document)">
       
        <p>Performs search on the specified document.</p> @param pdf Pdf pocument object.
      
      <param name="Document"/>
    </member>
    <member name="M:com.aspose.pdf.FontAbsorber.#ctor">
       
        <p>Initializes a new instance of the {@code FontAbsorber} that performs search for fonts of the document.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.FontCollection">&lt;p&gt; Represents font collection. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to make all font declared on page as embedded. // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // ensure all fonts declared on page resources are embedded // note that if fonts are declared on form resources they are not accessible from page resources for(com.aspsoe.pdf.Font font : doc.getPages().get_Item(1).getResources().getFonts()) { if(!font.isEmbedded()) font.isEmbedded(true); } doc.save("D:\\Tests\\input.pdf"); &lt;/pre&gt; &lt;hr&gt; &lt;p&gt; Font collections represented by {@code FontCollection} class are used in several scenarios. For example, in resources with {@code Resources.Fonts} property. &lt;/p&gt;</member>
    <member name="M:com.aspose.pdf.FontCollection.size">
       
        <p>Gets the number of {@code Font} object elements actually contained in the collection.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.FontCollection.getSyncRoot">
       
        <p>Gets an object that can be used to synchronize access to the collection.</p> @return Object for synchronization
      
    </member>
    <member name="M:com.aspose.pdf.FontCollection.isSynchronized">
       
        <p>Gets a value indicating whether access to the collection is synchronized (thread safe).</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.FontCollection.isReadOnly">
       
        <p>Gets a value indicating whether collection is read-only</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.FontCollection.iterator_Rename_Namesake">
       
        <p>Returns an enumerator for the entire collection.</p> @return Enumerator object.
      
    </member>
    <member name="M:com.aspose.pdf.FontCollection.iterator">
       
        <p>Returns an enumerator for the entire collection.</p> @return Enumerator object.
      
    </member>
    <member name="M:com.aspose.pdf.FontCollection.copyTo(Font[],int)">
       
        <p>Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array</p> @param array Array of objects which will be copied. @param index Starting index from which copying will be started.
      
      <param name="Font[]"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.FontCollection.add(Font,String[])">
       
        <p>Adds new font to font resources and returns automatically assigned name of font resource.</p> @param newFont Font object. @param resName The automatically assigned resource item name.
      
      <param name="Font"/>
      <param name="String[]"/>
    </member>
    <member name="M:com.aspose.pdf.FontCollection.add(Font)">
       
        <p>Adds Font into collection.</p> @param fragment Font object
      
      <param name="Font"/>
    </member>
    <member name="M:com.aspose.pdf.FontCollection.get_Item(int)">
       
        <p>Gets the font element at the specified index.</p> @param index Index within the collection. @return Font object.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.FontCollection.get_Item(String)">
       
        <p>Gets font from the collection by font name. Exception is thrown if font was not found.</p> @param name Name of the font. @return Found font.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FontCollection.contains(String)">
       
        <p>Checks if font exists in font collection.</p> @param name Font name. @return True in case collection contains the font with specified name.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FontCollection.getHash"/>
    <member name="M:com.aspose.pdf.FontCollection.add(String,IPdfObject)">
       
        <p>Add new font to font collection.</p> @param resName String object @param newFont IPdfObject object
      
      <param name="String"/>
      <param name="IPdfObject"/>
    </member>
    <member name="M:com.aspose.pdf.FontCollection.add(String,String)">
       
        <p>Adds to font resources new font entry with specified base font name.</p> @param resName String object @param baseFontName String object
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FontCollection.clear_Rename_Namesake">
      / * 
        <p>/ * Adds Font into collection. / *</p> / * @param item Font to add into collection /
      
    </member>
    <member name="M:com.aspose.pdf.FontCollection.contains(Font)">
       
        <p>Determines whether the collection contains a specific value.</p> @param item The object to locate in the collection @return true if item is found in the collection; otherwise, false.
      
      <param name="Font"/>
    </member>
    <member name="M:com.aspose.pdf.FontCollection.remove(Font)">
       
        <p>Deletes specified item from collection.</p> @param item The object to delete @return true if item was deleted from collection; otherwise, false.
      
      <param name="Font"/>
    </member>
    <member name="T:com.aspose.pdf.FontEmbeddingOptions">
       
        <p>PDF/A standard requires, that all fonts must be embedded into document. This class includes flags for cases when it's not possible to embed some font cause this font is absent on destination PC.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FontEmbeddingOptions.getUseDefaultSubstitution">
       
        <p>Declares to substitute non-embedded font using default font substitution strategy. By default false;</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.FontEmbeddingOptions.setUseDefaultSubstitution(boolean)">
       
        <p>Declares to substitute non-embedded font using default font substitution strategy. By default false;</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.FontEmbeddingOptions.#ctor">
       
        <p>Constructor</p> 
      
    </member>
    <member name="T:com.aspose.pdf.FontRepository">&lt;p&gt; Performs font search. Searches in system installed fonts and standard Pdf fonts. Also provides functionality to open custom fonts. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to find font and replace the font of text of first page. // Find font Font font = FontRepository.findFont("Arial"); // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get_Item(1).accept(absorber); // Change font of the first text occurrence absorber.getTextFragments().get_Item(1).getTextState().setFont(font); // Save document doc.save("D:\\Tests\\output.pdf"); &lt;/pre&gt; @see TextFragmentAbsorber @see IDocument</member>
    <member name="M:com.aspose.pdf.FontRepository.getSubstitutions">
       
        <p>Gets font substitution strategies collection.</p> @return FontSubstitutionCollection object
      
    </member>
    <member name="M:com.aspose.pdf.FontRepository.getSources">
       
        <p>Gets font sources collection.</p> @return FontSourceCollection object
      
    </member>
    <member name="M:com.aspose.pdf.FontRepository.findFont(String)">&lt;p&gt; Searches and returns font with specified font name. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to find font and replace the font of text of first page. // Find font Font font = FontRepository.findFont("Arial"); // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get_Item(1).accept(absorber); // Change font of the first text occurrence absorber.getTextFragments().get_Item(1).getTextState().setFont ( font); // Save document doc.save("D:\\Tests\\output.pdf"); &lt;/pre&gt; @return Font object. @param fontName Font name. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FontRepository.findFont(String,boolean)">&lt;p&gt; Searches and returns font with specified font name ignoring or honoring case sensitivity. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to find font and replace the font of text of first page. // Find font Font font = FontRepository.findFont("Arial", FontStyles.Italic); // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get_Item(1).accept(absorber); // Change font of the first text occurence absorber.getTextFragments().get_Item(1).getTextState().setFont(font); // Save document doc.save("D:\\Tests\\output.pdf"); &lt;/pre&gt; @return Font object. @param fontName Font name. @param ignoreCase case sensitivity 
      <param name="String"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.FontRepository.findFont(String,int)">&lt;p&gt; Searches and returns font with specified font name and font style. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to find font and replace the font of text of first page. // Find font Font font = FontRepository.findFont("Arial", FontStyles.Italic); // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get_Item(1).accept(absorber); // Change font of the first text occurence absorber.getTextFragments().get_Item(1).getTextState().setFont(font); // Save document doc.save("D:\\Tests\\output.pdf"); &lt;/pre&gt; @return Font object corresponding to search request parameters. @param fontFamilyName Font family name. @param stl Font style value. @see FontStyles 
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.FontRepository.findFont(String,int,boolean)">&lt;p&gt; Searches and returns font with specified font name and font style ignoring or honoring case sensitivity. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to find font and replace the font of text of first page. // Find font Font font = FontRepository.findFont("Arial", FontStyles.Italic, true); // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get_Item(1).accept(absorber); // Change font of the first text occurence absorber.getTextFragments().get_Item(1).getTextState().setFont(font); // Save document doc.save("D:\\Tests\\output.pdf"); &lt;/pre&gt; @return Font object corresponding to search request parameters. @param fontFamilyName Font family name. @param stl Font style value. @param ignoreCase case sensitivity 
      <param name="String"/>
      <param name="int"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.FontRepository.openFont(InputStream,int)">&lt;p&gt; Opens font with specified font stream. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to open font and replace the font of text of first page. // Open font InputStream fontStream = new FileInputStream("C:\\WINDOWS\\Fonts\\arial.ttf")) { Font font = FontRepository.openFont(fontStream, , FontTypes.TTF); // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get_Item(1).accept(absorber); // Change font of the first text occurrence absorber.getTextFragments().get_Item(1).getTextState().setFont ( font); // Save document doc.save("D:\\Tests\\output.pdf"); } &lt;/pre&gt; @return Font object. @param fontStream Font stream. @param fontType Font type value. @see FontTypes 
      <param name="InputStream"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.FontRepository.openFont(String)">&lt;p&gt; Opens font with specified font file path. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to open font and replace the font of text of first page. // Open font Font font = FontRepository.openFont("C:\\WINDOWS\\Fonts\\arial.ttf"); // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get_Item(1).accept(absorber); // Change font of the first text occurrence absorber.getTextFragments().get_Item(1).getTextState().setFont ( font); // Save document doc.save("D:\\Tests\\output.pdf"); &lt;/pre&gt; @return Font object. @param fontFilePath Font file path. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FontRepository.openFont(String,String)">&lt;p&gt; Opens font with specified font file path and metrics file path. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to open Type1 font with metrics and replace the font of text of first page. // Open font Font font = FontRepository.openFont("courier.pfb", "courier.afm"); // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get_Item(1).accept(absorber); // Change font of the first text occurrence absorber.getTextFragments().get_Item(1).sgetTextState().setFont(font); // Save document doc.save("D:\\Tests\\output.pdf"); &lt;/pre&gt; @return Font object. @param fontFilePath Font file path. @param metricsFilePath Font metrics file patrh. 
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FontRepository.reloadFonts">
       
        <p>Reloads all fonts specified by property {@code Sources}({@link #getSources})</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FontRepository.loadFonts">
       
        <p>Loads system installed fonts and standard Pdf fonts. This method was designed to speed up font loading process. By default fonts are loaded on first request for any font. Use of this method loads system and standard Pdf fonts immediately before any Pdf document was open.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FontRepository.isReplaceNotFoundFonts">
      Is not found fonts will be replaced by standard font. @return boolean value
    </member>
    <member name="M:com.aspose.pdf.FontRepository.setReplaceNotFoundFonts(boolean)">
      Set TRUE if need to replace not found fonts with the default font. The default value is false. @param value boolean
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.FontRepository.clear"/>
    <member name="M:com.aspose.pdf.FontRepository.getLocalFontPaths">
       
        <p>Copy of the list with actual font directories.</p> @return list of String
      
    </member>
    <member name="M:com.aspose.pdf.FontRepository.isThreadStaticConfigEnabled">&lt;p&gt; Returns status of Font Sources storage configuration. &lt;br&gt; If true, used ThreadStatic and every thread has own Font Sources. &lt;br&gt; If false, used global static configuration for all the threads. &lt;/p&gt; &lt;hr&gt; Default value is True. @return boolean value</member>
    <member name="M:com.aspose.pdf.FontRepository.setThreadStaticConfigEnabled(boolean)">
       
        <p>Option for setting Font Sources storage configuration.
          <br/> If true, used ThreadStatic and every thread has own Font Sources. 
          <br/> If false, used global static configuration for all the threads.
        </p> @param isTheadLocal boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.FontRepository.addLocalFontPath(String)">
       
        <p>Add one more path to fonts.</p> @param path String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FontRepository.setLocalFontPaths(java.util.List&lt;String&gt;)">&lt;p&gt; Sets user list with font paths &lt;/p&gt; @param newFontPathsList {@code List&lt;String&gt;} object 
      <param name="java.util.List&lt;String&gt;"/>
    </member>
    <member name="M:com.aspose.pdf.FontRepository.restoreLocalFontPath">
       
        <p>Restores list for standard font directories by default.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FontRepository.addSystemFont(Font)">&lt;p&gt; Add system font with specified font. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to add system font. InputStream fontStream = new FileInputStream("C:\\WINDOWS\\Fonts\\arial.ttf")) Font font = FontRepository.openFont(fontStream, FontTypes.TTF); FontRepository.addSystemFont(font); &lt;/pre&gt; @param font Font instance 
      <param name="Font"/>
    </member>
    <member name="T:com.aspose.pdf.FontSource">
      Represents a base class fot font source.
    </member>
    <member name="T:com.aspose.pdf.FontStyles">&lt;p&gt; Specifies style information applied to text. &lt;/p&gt; &lt;hr&gt; &lt;p&gt; This enumeration has a {@code FlagsAttribute} attribute that allows a combination of its member values. &lt;/p&gt;</member>
    <member name="F:com.aspose.pdf.FontStyles.Regular">
       
        <p>Regular text.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.FontStyles.Bold">
       
        <p>Bold text.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.FontStyles.Italic">
       
        <p>Italic text.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.FontSubsetStrategy">
       
        <p>enumerates strategies for font subsetting</p> 
      
    </member>
    <member name="F:com.aspose.pdf.FontSubsetStrategy.SubsetEmbeddedFontsOnly">
       
        <p>Declares to subset only fonts which are embedded in document already</p> 
      
    </member>
    <member name="F:com.aspose.pdf.FontSubsetStrategy.SubsetAllFonts">
       
        <p>Declares to subsets all the fonts, non-embedded and embedded both</p> 
      
    </member>
    <member name="T:com.aspose.pdf.FooterArtifact">
      Describes footer artifact. This may be used to set footer of the page.
    </member>
    <member name="M:com.aspose.pdf.FooterArtifact.#ctor">
      Creates Footer Artifact instance.
    </member>
    <member name="T:com.aspose.pdf.Form">
       
        <p>Class representing form object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Form.getSignDependentElementsRenderingModeWhenConverted">
       
        <p>Forms can contain signing information, i.e. can be signed or unsigned. And form's view sometimes must depend on whether form is signed or not. This property tells to form's converter (f.e. during conversion XFA form to Standard form) whether result form must be rendered as signed or as unsigned.</p> @return SignDependentElementsRenderingModes element @see SignDependentElementsRenderingModes
      
    </member>
    <member name="M:com.aspose.pdf.Form.setSignDependentElementsRenderingModeWhenConverted(int)">
       
        <p>Forms can contain signing information, i.e. can be signed or unsigned. And form's view sometimes must depend on whether form is signed or not. This property tells to form's converter (f.e. during conversion XFA form to Standard form) whether result form must be rendered as signed or as unsigned.</p> @param signDependentElementsRenderingModeWhenConverted SignDependentElementsRenderingModes element @see SignDependentElementsRenderingModes
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Form.getDocument">
      For internal usage only @return IDocument object
    </member>
    <member name="M:com.aspose.pdf.Form.get_xfa">
      For internal usage only @return XFA object
    </member>
    <member name="M:com.aspose.pdf.Form.isSynchronized">
       
        <p>Returns true if object is thread-safe.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Form.getSyncRoot">
       
        <p>Returns synchronization object.</p> @return Object for synchronization
      
    </member>
    <member name="M:com.aspose.pdf.Form.getAutoRecalculate">
       
        <p>If set, all form fields will be recalculated when any field is changed. Default value is true. Set to false in order to increase performance when filling form with large amount of calculated fields.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Form.setAutoRecalculate(boolean)">
       
        <p>If set, all form fields will be recalculated when any field is changed. Default value is true. Set to false in order to increase performance when filling form with large amount of calculated fields.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Form.getAutoRestoreForm">
       
        <p>If set, absent form fields will be automatically created if they present in annotations.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Form.setAutoRestoreForm(boolean)">
       
        <p>If set, absent form fields will be automatically created if they present in annotations.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Form.size">
       
        <p>Gets number of the fields on this form.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.Form.getDefaultResources">
       
        <p>Gets default resources placed on this form.</p> @return Resources value
      
    </member>
    <member name="M:com.aspose.pdf.Form.getDefaultAppearance">
       
        <p>Gets default appearance of the form (object which describes default font, text size and color for fields on the form).</p> @return DefaultAppearance object
      
    </member>
    <member name="M:com.aspose.pdf.Form.setDefaultAppearance(DefaultAppearance)">
       
        <p>Sets default appearance of the form (object which describes default font, text size and color for fields on the form).</p> @param value DefaultAppearance object
      
      <param name="DefaultAppearance"/>
    </member>
    <member name="M:com.aspose.pdf.Form.getXFA">
       
        <p>Gets XFA data of the form (if presents).</p> @return XFA value
      
    </member>
    <member name="M:com.aspose.pdf.Form.getIgnoreNeedsRendering">
       
        <p>If this property is true the value of NeedsRendering key will be ignored during conversion XFA form to Standard form. It is false by default.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Form.setIgnoreNeedsRendering(boolean)">
       
        <p>If this property is true the value of NeedsRendering key will be ignored during conversion XFA form to Standard form. It is false by default.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Form.getRemovePermission">
       
        <p>If this property is true the "Perms" dictionary will be removed from the pdf document after conversion dynamic documents to standard. The "Perms" dictionary can contain a rules that disturb displaying selection of mandatory fields in Adobe Acrobat reader. It is false by default.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Form.setRemovePermission(boolean)">
       
        <p>If this property is true the "Perms" dictionary will be removed from the pdf document after conversion dynamic documents to standard. The "Perms" dictionary can contain a rules that disturb displaying selection of mandatory fields in Adobe Acrobat reader. It is false by default.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Form.getEmulateRequierdGroups">
       
        <p>If this property is true then additional red boundary rectangles will be drawn for required Xfa exclGroup elements containers This property was introduced because absences of analogies for the exclGroup during conversion Xfa representation of forms to standard. It is false by default.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Form.setEmulateRequierdGroups(boolean)">
       
        <p>If this property is true then additional red boundary rectangles will be drawn for required Xfa exclGroup elements containers This property was introduced because absences of analogies for the exclGroup during conversion Xfa representation of forms to standard. It is false by default.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Form.getType">
       
        <p>Gets type of the form. Possible values are: Standard, Static, Dynamic.</p> @return FormType value @see FormType
      
    </member>
    <member name="M:com.aspose.pdf.Form.setType(int)">
       
        <p>Gets type of the form. Possible values are: Standard, Static, Dynamic.</p> @param value FormType value @see FormType
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Form.copyTo(Field[],int)">
       
        <p>Copies fields placed on the form into array.</p> @param array Array where fields must be placed. @param index Starting index.
      
      <param name="Field[]"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Form.iterator">
       
        <p>Gets enumeration of form fields.</p> @return Field enumerator.
      
    </member>
    <member name="M:com.aspose.pdf.Form.get(String)">
       
        <p>Searches field by field name. Returns null if field was not found.</p> @param name Field name. @return Field object.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Form.get(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Form.add(Field,int)">
       
        <p>Adds field on the form.</p> @param field Field which must be added. @param pageNumber Page index where added field will be placed.
      
      <param name="Field"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Form.add(Field)">
       
        <p>Adds field on the form.</p> @param field Field which must be added.
      
      <param name="Field"/>
    </member>
    <member name="M:com.aspose.pdf.Form.delete(Field)">
       
        <p>Delete field from the form.</p> @param field Field which must be deleted.
      
      <param name="Field"/>
    </member>
    <member name="M:com.aspose.pdf.Form.delete(String)">
       
        <p>Deletes field from the form by its name.</p> @param fieldName Name of the filed which must be deleted.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Form.flatten">
       
        <p>Removes all static form fields and place their values directly on the page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Form.add(WidgetAnnotation)">
       
        <p>Adds field on the form.</p> @param field Field which must be added. @return boolean value
      
      <param name="WidgetAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.Form.clear">
       
        <p>Deletes all fields from form. Not supported.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Form.contains(WidgetAnnotation)">
       
        <p>Determines if field is presented on form..</p> @param field Field to search. @return boolean value
      
      <param name="WidgetAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.Form.copyTo(WidgetAnnotation[],int)">
       
        <p>Copies form's fields to array.</p> @param array Array to copy. @param arrayIndex Index of array's item where copying begins.
      
      <param name="WidgetAnnotation[]"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Form.isReadOnly">
       
        <p>Determines if collection is readonly. Always returns false.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Form.remove(WidgetAnnotation)">
       
        <p>Deletes field from the form.</p> @param field Field to delete. @return True if field was deleted. False if field was not found on form.
      
      <param name="WidgetAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.Form.get_Item(String)">
       
        <p>Gets field of the form by field name. Throws excpetion if the field was not found.</p> @param name Name of the field. @return Retreived field.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Form.get_Item(int)">
       
        <p>Gets field of the form by field index.</p> @param index Index of the field. @return Retreived field.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Form.add(Field,String,int)">
       
        <p>Adds new field to the form; If this field is already placed on other or this form, the copy of field is created.</p> @param field Field name. @param partialName Name of field on the form. @param pageNumber Page number where field will be added. @return Added field returned. If copy of the field was created it will be returned.
      
      <param name="Field"/>
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Form.addFieldAppearance(Field,int,Rectangle)">
       
        <p>Adds additional appearance of the field to specified page of the document in the specified location.</p> @param field Field which appearance should be added on form. @param pageNumber Number of the page where field must be placed. @param rect Rectangle where field will be placed.
      
      <param name="Field"/>
      <param name="int"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Form.addFieldToAcroForm(Field)">
       
        <p>Adds additional appearance of the field to specified page of the document.</p> @param field Field object
      
      <param name="Field"/>
    </member>
    <member name="M:com.aspose.pdf.Form.hasXfa">
      Returns true if hasXfa @return boolean value
    </member>
    <member name="M:com.aspose.pdf.Form.assignXfa(XmlDocument)">
       
        <p>Sets XFA of the form to specified value.</p> @param xml Xml document which concains new XFA data.
      
      <param name="XmlDocument"/>
    </member>
    <member name="M:com.aspose.pdf.Form.getFields">
       
        <p>Gets list of all fields in lowest level of hierarhical form.</p> @return Array with found fields.
      
    </member>
    <member name="M:com.aspose.pdf.Form.getFieldsInRect(Rectangle)">
       
        <p>Returns fields inside of specified rectangle.</p> @param rect Rectangle where fields should be found. @return Array with found fields.
      
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Form.setCalculatedFields(java.util.List&lt;Field&gt;)">Allows to set order of field calculation. @param value java.util.List{@code&lt;Field&gt;} object. 
      <param name="java.util.List&lt;Field&gt;"/>
    </member>
    <member name="M:com.aspose.pdf.Form.getSignaturesExist">
       
        <p>If set, the document contains at least one signature field.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Form.setSignaturesExist(boolean)">
       
        <p>If set, the document contains at least one signature field.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Form.getSignaturesAppendOnly">
       
        <p>If set, the document contains signatures that may be invalidated if the file is saved (written) in a way that alters its previous contents, as opposed to an incremental update.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Form.setSignaturesAppendOnly(boolean)">
       
        <p>If set, the document contains signatures that may be invalidated if the file is saved (written) in a way that alters its previous contents, as opposed to an incremental update.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Form.#ctor(IDocument)">
      Constructor @param document IDocument object
      <param name="IDocument"/>
    </member>
    <member name="T:com.aspose.pdf.Form.FlattenSettings">
       
        <p>Class which describes settings for Form flattening procedure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Form.FlattenSettings.getUpdateAppearances">
       
        <p>If set, all field appearances will be regenerated before flattening. This option may help if field is incorrectly flattened. This option may decrease performance. By default set to false.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Form.FlattenSettings.setUpdateAppearances(boolean)">
       
        <p>If set, all field appearances will be regenerated before flattening. This option may help if field is incorrectly flattened. This option may decrease performance. By default set to false.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Form.FlattenSettings.getCallEvents">
       
        <p>If set, formatting and other JavaScript events will be called. True by default.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Form.FlattenSettings.setCallEvents(boolean)">
       
        <p>If set, formatting and other JavaScript events will be called. True by default.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Form.FlattenSettings.isHideButtons">
       
        <p>If set, buttons will be removed from flattened document. False by default.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Form.FlattenSettings.setHideButtons(boolean)">
       
        <p>If set, buttons will be removed from flattened document. False by default.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Form.FlattenSettings.getApplyRedactions">
       
        <p>If true, redaction specified Redaction annotation will be applied</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Form.FlattenSettings.setApplyRedactions(boolean)">
       
        <p>If true, redaction specified Redaction annotation will be applied</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="T:com.aspose.pdf.Form.SignDependentElementsRenderingModes">
       
        <p>Forms can contain signing information and can be signed or unsigned. Sometimes view of forms in viewer must depend on whether form is signed or not. This enum enumerates possible rendering modes during conversion of form type in regard to sign.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Form.SignDependentElementsRenderingModes.RenderFormAsUnsigned">
       
        <p>Render form as unsigned.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Form.SignDependentElementsRenderingModes.RenderFormAsSigned">
       
        <p>Render form as signed.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.FormattedFragment">
       
        <p>Represents abstract formatted fragment.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.FormType">
       
        <p>Enumeration of posible types of Acro Form.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.FormType.Standard">
       
        <p>Standard AcroForm.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.FormType.Static">
       
        <p>Static XFA form.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.FormType.Dynamic">
       
        <p>Dynamic XFA form.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.FreeTextAnnotation">
       
        <p>Represents a free text annotation that displays text directly on the page. Unlike an ordinary text annotation, a free text annotation has no open or closed state; instead of being displayed in a pop-up window, the text is always visible.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.getStartingStyle">
       
        <p>Gets or sets line ending style for line ending point. OThis property is obsolete, please use EndingStyle.</p> @return LineEnding element
      
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.setStartingStyle(int)">
       
        <p>Gets or sets line ending style for line ending point. OThis property is obsolete, please use EndingStyle.</p> @param value LineEnding element
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.getEndingStyle">
       
        <p>Gets line ending style for line ending point.</p> @return LineEnding value @see LineEnding
      
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.setEndingStyle(int)">
       
        <p>Sets line ending style for line ending point.</p> @param value LineEnding value @see LineEnding
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.getJustification">
       
        <p>Gets a code specifying the form of quadding (justification) to be used in displaying the annotation's text.</p> @return int value @see Justification
      
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.setJustification(int)">
       
        <p>Sets a code specifying the form of quadding (justification) to be used in displaying the annotation's text.</p> @param value int value @see Justification
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor object to process the annotation.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.getDefaultAppearance">
       
        <p>Gets the default appearance string to be used in formatting the text.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.setDefaultAppearance(String)">
       
        <p>Sets the default appearance string to be used in formatting the text.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.getDefaultAppearanceObject">
       
        <p>Object which represents default appearance of FreeText annotation.</p> @return DefaultAppearance object
      
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.getIntent">
       
        <p>Gets the intent of the free text annotation.</p> @return int value @see FreeTextIntent
      
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.setIntent(int)">
       
        <p>Sets the intent of the free text annotation.</p> @param value int value @see FreeTextIntent
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.getDefaultStyle">
       
        <p>Gets a default style string.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.setDefaultStyle(String)">
       
        <p>Sets a default style string.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.getTextStyle">
       
        <p>Gets or sets style of the text in appearance. when text style is changed, text appearance is updated.</p> @return TextStyle value
      
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.setTextStyle(TextStyle)">
       
        <p>Sets style of the text in appearance. when text style is changed, text appearance is updated.</p> @param value TextStyle object
      
      <param name="TextStyle"/>
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.getRotate">
       
        <p>Angle of annotation rotation.</p> @return Rotation element @see Rotation
      
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.setRotate(int)">
       
        <p>Angle of annotation rotation.</p> @param value Rotation element @see Rotation
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.getAnnotationType">
       
        <p>Gets type of annotation.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.getCallout">
       
        <p>Array of point specifying callout line.</p> @return array of Point
      
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.setCallout(Point[])">
       
        <p>Array of point specifying callout line.</p> @param value array of Point
      
      <param name="Point[]"/>
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.getTextRectangle">
       
        <p>Rectangle describing the numerical differences between two rectangles: the Rect entry of the annotation and a rectangle contained within that rectangle. The inner rectangle is where the annotation�s text should be displayed.</p> @return Rectangle instance
      
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.setTextRectangle(Rectangle)">
       
        <p>Rectangle describing the numerical differences between two rectangles: the Rect entry of the annotation and a rectangle contained within that rectangle. The inner rectangle is where the annotation�s text should be displayed.</p> @param value Rectangle instance
      
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.#ctor(IDocument,DefaultAppearance)">
       
        <p>Constructor to use with Generator.</p> @param document Document where annotation will be created. @param appearance Default Appearance
      
      <param name="IDocument"/>
      <param name="DefaultAppearance"/>
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.#ctor(Page,Rectangle,DefaultAppearance)">
       
        <p>Creates new FreeText annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page. @param appearance The default appearance string to be used in formatting the text.
      
      <param name="Page"/>
      <param name="Rectangle"/>
      <param name="DefaultAppearance"/>
    </member>
    <member name="T:com.aspose.pdf.FreeTextIntent">
       
        <p>Enumerates the intents of the free text annotation.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.FreeTextIntent.Undefined">
       
        <p>Not defined state.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.FreeTextIntent.FreeTextCallout">
       
        <p>Means that the annotation is intended to function as a callout.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.FreeTextIntent.FreeTextTypeWriter">
       
        <p>Means that the annotation is intended to function as a click-to-type or typewriter object.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.GoToAction">
       
        <p>Represents a go-to action that changes the view to a specified destination (page, location, and magnification factor).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.GoToAction.getDestination">
       
        <p>Gets the destination to jump to.</p> @return IAppointment value
      
    </member>
    <member name="M:com.aspose.pdf.GoToAction.setDestination(IAppointment)">
       
        <p>Sets the destination to jump to.</p> @param value IAppointment value
      
      <param name="IAppointment"/>
    </member>
    <member name="M:com.aspose.pdf.GoToAction.#ctor(int)">
       
        <p>Constructor for GoToAction class.</p> @param page int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.GoToAction.#ctor(Page)">
       
        <p>Constructor for GoToAction class.</p> @param page Page destination object to jump to.
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.GoToAction.#ctor(Page,int,double)">
       
        <p>Constructor for GoToAction class.</p> @param page Destination page. @param type Destination type. @param values Action parameters.
      
      <param name="Page"/>
      <param name="int"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.GoToAction.#ctor(ExplicitDestination)">
       
        <p>Constructor.</p> @param destination Explicit destination.
      
      <param name="ExplicitDestination"/>
    </member>
    <member name="M:com.aspose.pdf.GoToAction.#ctor">
       
        <p>Constructor.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.GoToAction.#ctor(Document,String)">
       
        <p>Action which linked with Named Destination.</p> @param doc Document where action will be created. @param name Name of the destination.
      
      <param name="Document"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.GoToRemoteAction">
       
        <p>Represents a remote go-to action that is similar to an ordinary go-to action but jumps to a destination in another PDF file instead of the current file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.GoToRemoteAction.getFile">
       
        <p>Gets the specification of the file in which the destination is located.</p> @return FileSpecification object
      
    </member>
    <member name="M:com.aspose.pdf.GoToRemoteAction.setFile(FileSpecification)">
       
        <p>Sets the specification of the file in which the destination is located.</p> @param value FileSpecification value
      
      <param name="FileSpecification"/>
    </member>
    <member name="M:com.aspose.pdf.GoToRemoteAction.getNewWindow">
       
        <p>Gets a flag specifying whether to open the destination document in a new window.</p> @return ExtendedBoolean element @see ExtendedBoolean
      
    </member>
    <member name="M:com.aspose.pdf.GoToRemoteAction.setNewWindow(int)">
       
        <p>Sets a flag specifying whether to open the destination document in a new window.</p> @param value ExtendedBoolean element @see ExtendedBoolean
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.GoToRemoteAction.getDestination">
       
        <p>Gets the destination to jump to.</p> @return destination to jump
      
    </member>
    <member name="M:com.aspose.pdf.GoToRemoteAction.setDestination(IAppointment)">
       
        <p>Sets the destination to jump to.</p> @param value destination to jump
      
      <param name="IAppointment"/>
    </member>
    <member name="M:com.aspose.pdf.GoToRemoteAction.#ctor(String,int)">
       
        <p>Initializes GoToRemoteAction object.</p> @param remotePdf Destination PDF document. @param remotePageNumber Destination page number.
      
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.GoToRemoteAction.#ctor(String,ExplicitDestination)">
       
        <p>Initializes GoToRemoteAction object.</p> @param remotePdf Destination PDF document. @param destination Destination in the PDF document.
      
      <param name="String"/>
      <param name="ExplicitDestination"/>
    </member>
    <member name="T:com.aspose.pdf.GoToURIAction">
       
        <p>Represents a URI action causes a URI to be resolved.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.GoToURIAction.getURI">
       
        <p>Gets the uniform resource identifier to resolve.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.GoToURIAction.setURI(String)">
       
        <p>Sets the uniform resource identifier to resolve.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.GoToURIAction.#ctor">
       
        <p>Constructor.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.GoToURIAction.#ctor(String)">
       
        <p>Constructor.</p> @param uri String object
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.GraphInfo">
       
        <p>Represents graphics info.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.GraphInfo.getLineWidth">
       
        <p>Gets a float value that indicates the line width of the graph.</p> @return value that indicates the line width.
      
    </member>
    <member name="M:com.aspose.pdf.GraphInfo.setLineWidth(float)">
       
        <p>Sets a float value that indicates the line width of the graph.</p> @param value value that indicates the line width.
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.GraphInfo.getColor">
       
        <p>Gets a {@code Color} object that indicates the color of the graph.</p> @return object that indicates the color
      
    </member>
    <member name="M:com.aspose.pdf.GraphInfo.setColor(Color)">
       
        <p>Sets a {@code Color} object that indicates the color of the graph.</p> @param value object that indicates the color
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.GraphInfo.getDashArray">
       
        <p>Gets a dash array.</p> @return dash array
      
    </member>
    <member name="M:com.aspose.pdf.GraphInfo.setDashArray(int[])">
       
        <p>Sets a dash array.</p> @param value dash array
      
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.GraphInfo.getDashPhase">
       
        <p>Gets a dash phase.</p> @return dash phase.
      
    </member>
    <member name="M:com.aspose.pdf.GraphInfo.setDashPhase(int)">
       
        <p>Sets a dash phase.</p> @param value dash phase.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.GraphInfo.getFillColor">
       
        <p>Gets a {@code Color} object that indicates the fill color of the graph.</p> @return object that indicates the fill color
      
    </member>
    <member name="M:com.aspose.pdf.GraphInfo.setFillColor(Color)">
       
        <p>Sets a {@code Color} object that indicates the fill color of the graph.</p> @param value object that indicates the fill color
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.GraphInfo.isDoubled">
       
        <p>Gets is border doubled.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.GraphInfo.setDoubled(boolean)">
       
        <p>Sets is border doubled.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.GraphInfo.getSkewAngleX">
       
        <p>Gets a float value that indicates the skew angle of the x-coordinate when transforming a coordinate system.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.GraphInfo.setSkewAngleX(double)">
       
        <p>Sets a float value that indicates the skew angle of the x-coordinate when transforming a coordinate system.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.GraphInfo.getSkewAngleY">
       
        <p>Gets a float value that indicates the skew angle of the y-coordinate when transforming a coordinate system.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.GraphInfo.setSkewAngleY(double)">
       
        <p>Sets a float value that indicates the skew angle of the y-coordinate when transforming a coordinate system.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.GraphInfo.getScalingRateX">
       
        <p>Gets a float value that indicates the scaling rate of the x-coordinate when transforming a coordinate system.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.GraphInfo.setScalingRateX(double)">
       
        <p>Sets a float value that indicates the scaling rate of the x-coordinate when transforming a coordinate system.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.GraphInfo.getScalingRateY">
       
        <p>Gets a float value that indicates the scaling rate of the y-coordinate when transforming a coordinate system.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.GraphInfo.setScalingRateY(double)">
       
        <p>Sets a float value that indicates the scaling rate of the y-coordinate when transforming a coordinate system.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.GraphInfo.getRotationAngle">
       
        <p>Gets a float value that indicates the rotation angle of the coordinate system when transforming a coordinate system.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.GraphInfo.setRotationAngle(double)">
       
        <p>Sets a float value that indicates the rotation angle of the coordinate system when transforming a coordinate system.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.GraphInfo.deepClone">
       
        <p>Clone the graphics info.</p> @return The cloned object
      
    </member>
    <member name="T:com.aspose.pdf.Group">
       
        <p>A group attributes class specifying the attributes of the page’s page group for use in the transparent imaging model.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Group.getColorSpace">Gets ColorSpace &lt;p&gt; @return ColorSpace value. @see ColorSpace</member>
    <member name="M:com.aspose.pdf.Group.setColorSpace(int)">
       
        <p>The group color space.</p> @param value ColorSpace value. @see ColorSpace
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Group.isTransparency">
      for Internal usage only 
        <p>returns The group transparency flag.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Group.isKnockout">
      for Internal usage only 
        <p>If this flag is false, later objects within the group are composited with earlier ones with which they overlap; if true, they are composited with the group’s initial backdrop and overwrite (“knock out”) any earlier overlapping objects.</p> @return ExtendedBoolean element @see ExtendedBoolean
      
    </member>
    <member name="M:com.aspose.pdf.Group.setKnockout(int)">
       
        <p>If this flag is false, later objects within the group are composited with earlier ones with which they overlap; if true, they are composited with the group’s initial backdrop and overwrite (“knock out”) any earlier overlapping objects.</p> @param value ExtendedBoolean element @see ExtendedBoolean
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Group.#ctor(Page)">
       
        <p>The constructor.</p> @param page Pdf page object.
      
      <param name="Page"/>
    </member>
    <member name="T:com.aspose.pdf.groupprocessor.cmap.CMapReader"/>
    <member name="M:com.aspose.pdf.groupprocessor.cmap.CMapReader.transformFromCIDToUnicode(msStringBuilder[])">
      <param name="msStringBuilder[]"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.cmap.CMapReader.#ctor(byte[])">
      <param name="byte[]"/>
    </member>
    <member name="T:com.aspose.pdf.groupprocessor.cmap.ToUnicodeReader"/>
    <member name="M:com.aspose.pdf.groupprocessor.cmap.ToUnicodeReader.transformFromCIDToUnicode(msStringBuilder[])">
      <param name="msStringBuilder[]"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.cmap.ToUnicodeReader.#ctor(byte[],boolean)">
      <param name="byte[]"/>
      <param name="boolean"/>
    </member>
    <member name="T:com.aspose.pdf.groupprocessor.creators.PdfTypeObjectCreator">
       
        <p>Represents an creator of IPdfTypeExtractor object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.creators.PdfTypeObjectCreator.createExtractor(String,int,boolean)">
       
        <p>Creates IPdfTypeExtractor object.</p> @return object of IPdfTypeExtractor @param pdfDocumentPath Path to a pdf document. @param bufferSize Maximum size of content in bytes that can be kept in memory. @param allowAsyncInitialization Allows async initialization of resources.
      
      <param name="String"/>
      <param name="int"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.creators.PdfTypeObjectCreator.createExtractor(InputStream,int,boolean)">
       
        <p>Creates IPdfTypeExtractor object.</p> @return object of IPdfTypeExtractor @param pdfDocumentStream Stream containing pdf document. @param bufferSize Maximum size of content in bytes that can be kept in memory. @param allowAsyncInitialization Allows async initialization of resources.
      
      <param name="InputStream"/>
      <param name="int"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.creators.PdfTypeObjectCreator.createExtractor(String,String,int,boolean)">
       
        <p>Creates IPdfTypeExtractor object.</p> @return object of IPdfTypeExtractor @param pdfDocumentPath Path to a pdf document. @param password Document password. @param bufferSize Maximum size of content in bytes that can be kept in memory. @param allowAsyncInitialization Allows async initialization of resources.
      
      <param name="String"/>
      <param name="String"/>
      <param name="int"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.creators.PdfTypeObjectCreator.createExtractor(InputStream,String,int,boolean)">
       
        <p>Creates IPdfTypeExtractor object.</p> @return object of IPdfTypeExtractor @param pdfDocumentStream Stream containing pdf document. @param password Document password. @param bufferSize Maximum size of content in bytes that can be kept in memory. @param allowAsyncInitialization Allows async initialization of resources.
      
      <param name="InputStream"/>
      <param name="String"/>
      <param name="int"/>
      <param name="boolean"/>
    </member>
    <member name="T:com.aspose.pdf.groupprocessor.ExtractorFactory">
       
        <p>Represents factory for creating IPdfTypeExtractor objects.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.groupprocessor.ExtractorFactory.Pdf">
       
        <p>Conains creator of IPdfTypeExtractor object.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.groupprocessor.filters.PdfFilter"/>
    <member name="M:com.aspose.pdf.groupprocessor.filters.PdfFilter.getFilter"/>
    <member name="M:com.aspose.pdf.groupprocessor.filters.PdfFilter.setFilter(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.filters.PdfFilter.getParams"/>
    <member name="M:com.aspose.pdf.groupprocessor.filters.PdfFilter.setParams(Dictionary&lt;String, String&gt;)">
      <param name="Dictionary&lt;String, String&gt;"/>
    </member>
    <member name="T:com.aspose.pdf.groupprocessor.filters.StreamDecoder"/>
    <member name="M:com.aspose.pdf.groupprocessor.filters.StreamDecoder.decode(byte[],Queue&lt;PdfFilter&gt;)">
      <param name="byte[]"/>
      <param name="Queue&lt;PdfFilter&gt;"/>
    </member>
    <member name="T:com.aspose.pdf.groupprocessor.Helper"/>
    <member name="M:com.aspose.pdf.groupprocessor.Helper.isSpace(byte)">
      <param name="byte"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.Helper.isSpace(char)">
      <param name="char"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.Helper.isEndParameter(byte)">
      <param name="byte"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.Helper.isDigit(byte)">
      <param name="byte"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.Helper.getPdfNameFromExtractedName(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.Helper.deepCopy(T)">
      <param name="T"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.Helper.subString(byte[],int,int)">
      <param name="byte[]"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.Helper.subBytes(byte[],int,int)">
      <param name="byte[]"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.Helper.extractParameter(byte[],int)">
      <param name="byte[]"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.Helper.extractParameterAsBytes(byte[],int)">
      <param name="byte[]"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.Helper.extractCharacterFromByteArray(byte[],int)">
      <param name="byte[]"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.Helper.fromHexDigitToNumber(byte)">
      <param name="byte"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.Helper.fromHexDigitToNumber(char)">
      <param name="char"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.Helper.extractVersion(String,String[],long[],boolean[])">
      <param name="String"/>
      <param name="String[]"/>
      <param name="long[]"/>
      <param name="boolean[]"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.Helper.isCorrectUtf8Text(String)">
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.groupprocessor.interfaces.IDocumentMetadataExtraxtor"/>
    <member name="T:com.aspose.pdf.groupprocessor.interfaces.IDocumentPageTextExtractor">
       
        <p>Interface for document page text extractor.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.groupprocessor.interfaces.IDocumentTextExtractor">
       
        <p>Interface for document text extractor.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.groupprocessor.interfaces.IPdfTypeExtractor">
       
        <p>Represents interface to interacting with extractor.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.groupprocessor.internal.Constants"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.Constants.Quotesingle"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.Constants.RightSingleQuotationMark"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.Constants.EndOfObjReference"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.Constants.ASCIIZero"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.Constants.ResultNone"/>
    <member name="T:com.aspose.pdf.groupprocessor.internal.Constants.Filters"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.Constants.Filters.ASCII_HEX_DECODE"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.Constants.Filters.ASCII_85_DECODE"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.Constants.Filters.LZW_DECODE"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.Constants.Filters.FLATE_DECODE"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.Constants.Filters.RUN_LENGTH_DECODE"/>
    <member name="T:com.aspose.pdf.groupprocessor.internal.EncodingManager"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.EncodingManager.getAdobeGlyphListDictionary"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.EncodingManager.getWinAnsi"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.EncodingManager.getMacRoman"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.EncodingManager.getStandard"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.EncodingManager.clear"/>
    <member name="T:com.aspose.pdf.groupprocessor.internal.PdfDocElements">
      For internal usage only
    </member>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElements.Obj"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElements.Endobj"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElements.Trailer"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElements.Root"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElements.Kids"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElements.Pages"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElements.Contents"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElements.Stream"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElements.EndStream"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElements.Length"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElements.Filter"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElements.DecodeParms"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElements.Resources"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElements.Font"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElements.Encoding"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElements.Differences"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElements.Catalog"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElements.Version"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElements.PDFHeader"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElements.Info"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElements.Metadata"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElements.ToUnicode"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElements.Subtype"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElements.Linearized"/>
    <member name="T:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.toByteArray(byte)">
      <param name="byte"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.getObj"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.getEndobj"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.getTrailer"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.getRoot"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.getKids"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.getPages"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.getContents"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.getStream"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.getEndStream"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.getLength"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.getFilter"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.getResources"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.getFont"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.getEncoding"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.getDifferences"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.getCatalog"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.getBaseEncoding"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.getTrue"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.getFalse"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.getNull"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.getDecodeParms"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.getVersion"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.getPDFHeader"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.getInfo"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.getMetadata"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.getToUnicode"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.getSubtype"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.getLinearized"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.ObjLength"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.EndobjLength"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.TrailerLength"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.RootLength"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.KidsLength"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.PagesLength"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.ContentsLength"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.StreamLength"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.EndStreamLength"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.LengthLength"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.FilterLength"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.ResourcesLength"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.FontLength"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.EncodingLength"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.DifferencesLength"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.CatalogLength"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.BaseEncodingLength"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.TrueLength"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.FalseLength"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.NullLength"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.DecodeParmsLength"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.VersionLength"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.PDFHeaderLength"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.InfoLength"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.MetadataLength"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.ToUnicodeLength"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.SubtypeLength"/>
    <member name="F:com.aspose.pdf.groupprocessor.internal.PdfDocElementsInBytes.LinearizedLength"/>
    <member name="T:com.aspose.pdf.groupprocessor.internal.TwoChars"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.TwoChars.getValue"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.TwoChars.hashCode"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.TwoChars.equals(Object)">
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.internal.TwoChars.getFirstChar"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.TwoChars.setFirstChar(char)">
      <param name="char"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.internal.TwoChars.getSecondChar"/>
    <member name="M:com.aspose.pdf.groupprocessor.internal.TwoChars.setSecondChar(char)">
      <param name="char"/>
    </member>
    <member name="T:com.aspose.pdf.groupprocessor.PdfArrayInBuffer">
      For internal usage only
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.PdfArrayInBuffer.get_Item_PdfArrayInBuffer_New(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.PdfArrayInBuffer.get_Item(long)">
      <param name="long"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.PdfArrayInBuffer.indexOf(long,long,byte)">
      <param name="long"/>
      <param name="long"/>
      <param name="byte"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.PdfArrayInBuffer.indexOf(long,byte)">
      <param name="long"/>
      <param name="byte"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.PdfArrayInBuffer.lastIndexOf(byte)">
      <param name="byte"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.PdfArrayInBuffer.lastIndexOf(long,byte)">
      <param name="long"/>
      <param name="byte"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.PdfArrayInBuffer.findNextObject(long,ObjectKey[])">
      <param name="long"/>
      <param name="ObjectKey[]"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.PdfArrayInBuffer.findNextEndobject(long)">
      <param name="long"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.PdfArrayInBuffer.extractObjectKeyOnTheRightSide(long,ObjectKey[])">
      <param name="long"/>
      <param name="ObjectKey[]"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.PdfArrayInBuffer.subBytes(long,long)">
      <param name="long"/>
      <param name="long"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.PdfArrayInBuffer.subString(long,long)">
      <param name="long"/>
      <param name="long"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.PdfArrayInBuffer.endParameterFinderInMemory(long[])">
      <param name="long[]"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.PdfArrayInBuffer.tryToExtractObjectKeyOnTheRightSideInMemory(long,ObjectKey[],long[])">
      <param name="long"/>
      <param name="ObjectKey[]"/>
      <param name="long[]"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.PdfArrayInBuffer.forwardSpaceEaterInMemory(long[])">
      <param name="long[]"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.PdfArrayInBuffer.isEqual(byte[],byte[])">
      <param name="byte[]"/>
      <param name="byte[]"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.PdfArrayInBuffer.close">
       
        <p>Closes all resources used by this instance.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.PdfArrayInBuffer.dispose">
       
        <p>Closes all resources used by this instance.</p> This method is obsolete, use close() instead.
      
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.PdfArrayInBuffer.#ctor(FileStream,int,Dictionary&lt;ObjectKey, ByteRange&gt;,long)">
      <param name="FileStream"/>
      <param name="int"/>
      <param name="Dictionary&lt;ObjectKey, ByteRange&gt;"/>
      <param name="long"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.PdfArrayInBuffer.#ctor(byte[],Dictionary&lt;ObjectKey, ByteRange&gt;)">
      <param name="byte[]"/>
      <param name="Dictionary&lt;ObjectKey, ByteRange&gt;"/>
    </member>
    <member name="T:com.aspose.pdf.groupprocessor.TextExtractor">
       
        <p>Represents instance to interact with extractor.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.TextExtractor.initialize(String,int,boolean)">
       
        <p>Initializes TextExtractor instance.</p> @param pdfDocumentPath Path to a pdf document. @param bufferSize Maximum size of content in bytes that can be kept in memory. @param allowAsyncInitialization Allows async initialization of resources.
      
      <param name="String"/>
      <param name="int"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.TextExtractor.initialize(Stream,int,boolean)">
       
        <p>Initializes TextExtractor instance.</p> @param pdfDocumentStream Stream containing pdf document. @param bufferSize Maximum size of content in bytes that can be kept in memory. @param allowAsyncInitialization Allows async initialization of resources.
      
      <param name="Stream"/>
      <param name="int"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.TextExtractor.initialize(String,String,int,boolean)">
       
        <p>Initializes TextExtractor instance.</p> @param pdfDocumentPath Path to a pdf document. @param password Document password. @param bufferSize Maximum size of content in bytes that can be kept in memory. @param allowAsyncInitialization Allows async initialization of resources.
      
      <param name="String"/>
      <param name="String"/>
      <param name="int"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.TextExtractor.initialize(Stream,String,int,boolean)">
       
        <p>Initializes TextExtractor instance.</p> @param pdfDocumentStream Stream containing pdf document. @param password Document password. @param bufferSize Maximum size of content in bytes that can be kept in memory. @param allowAsyncInitialization Allows async initialization of resources.
      
      <param name="Stream"/>
      <param name="String"/>
      <param name="int"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.TextExtractor.initializeAlternative(String)">
       
        <p>Initializes TextExtractor instance.</p> @param pdfDocumentPath Path to a pdf document.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.TextExtractor.initializeAlternative(Stream)">
       
        <p>Initializes TextExtractor instance.</p> @param pdfDocumentStream Stream containing pdf document.
      
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.TextExtractor.initializeAlternative(String,String)">
       
        <p>Initializes TextExtractor instance.</p> @param pdfDocumentPath Path to a pdf document.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.TextExtractor.initializeAlternative(Stream,String)">
       
        <p>Initializes TextExtractor instance.</p> @param pdfDocumentStream Stream containing pdf document.
      
      <param name="Stream"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.TextExtractor.buildProperties(ByteRange,PdfTreeNode)">
       
        <p>Builds tree of nodes those contain all pdf parameters with their values.</p> @param range Byte range where to parse parameters. @param parentNode Initial (root) node for building tree. @return long value, the last index of the parsed range.
      
      <param name="ByteRange"/>
      <param name="PdfTreeNode"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.TextExtractor.buildProperties(ByteRange,PdfTreeNode,boolean)">
       
        <p>Builds tree of nodes those contain all pdf parameters with their values.</p> @param range Byte range where to parse parameters. @param parentNode Initial (root) node for building tree. @param extractJustValue For recursive calling. Just shows that next recursive function should find parameter value but not parameter itself. @return Last index of the parsed range.
      
      <param name="ByteRange"/>
      <param name="PdfTreeNode"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.TextExtractor.extractAllText">
       
        <p>Extracts text from the document</p> @return Array of strings representing document text
      
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.TextExtractor.extractAllTextInternal"/>
    <member name="M:com.aspose.pdf.groupprocessor.TextExtractor.extractPageText(int)">
       
        <p>Extracts text from the page</p> @param pageNumber 1-based number of the page @return Text
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.TextExtractor.getPageCount">
      Gets count of pages in the document. @return page count
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.TextExtractor.close">
       
        <p>Closes all resources used by this instance.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.TextExtractor.dispose">
      Dispose object This method is obsolete, use close() instead.
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.TextExtractor.getVersion">
      For Internal usage only @return string object
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.TextExtractor.isFastExtractionUsed">
      Returns TRUE if the fast extraction was used @return boolean value
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.TextExtractor.setVentureLicense(VentureLicense)">
      <param name="VentureLicense"/>
    </member>
    <member name="M:com.aspose.pdf.groupprocessor.TextExtractor.getVentureLicense"/>
    <member name="M:com.aspose.pdf.groupprocessor.TextExtractor.#ctor">
       
        <p>Creates TextExtractor instance.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.groupprocessor.TextExtractor._numberedPages"/>
    <member name="T:com.aspose.pdf.Hackers"/>
    <member name="T:com.aspose.pdf.HeaderArtifact">
      Class describes Heaader artifact. This artifacgt may be used to set heading of the page.
    </member>
    <member name="M:com.aspose.pdf.HeaderArtifact.#ctor">
      Creates Header Artifact instance.
    </member>
    <member name="T:com.aspose.pdf.HeaderFooter">
       
        <p>Class represents header or footer pdf page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.HeaderFooter.isClipExtraContent">
       
        <p>Gets or sets is clip extra content.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.HeaderFooter.setClipExtraContent(boolean)">
       
        <p>Gets or sets is clip extra content.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.HeaderFooter.getParagraphs">
       
        <p>Gets or sets the end note paragraphs.</p> @return Paragraphs instance
      
    </member>
    <member name="M:com.aspose.pdf.HeaderFooter.setParagraphs(Paragraphs)">
       
        <p>Gets or sets the end note paragraphs.</p> @param value Paragraphs instance
      
      <param name="Paragraphs"/>
    </member>
    <member name="M:com.aspose.pdf.HeaderFooter.getMargin">
       
        <p>Gets the margin info.</p> @return MarginInfo value
      
    </member>
    <member name="M:com.aspose.pdf.HeaderFooter.setMargin(MarginInfo)">
       
        <p>Sets the margin info.</p> @param value MarginInfo value
      
      <param name="MarginInfo"/>
    </member>
    <member name="M:com.aspose.pdf.HeaderFooter.deepClone">
       
        <p>Clones a new object.</p> @return The new object.
      
    </member>
    <member name="M:com.aspose.pdf.HeaderFooter.#ctor">
       
        <p>Default ctor</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Heading">
       
        <p>Represents heading.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Heading.getTocPage">
       
        <p>Gets the page that contains this heading.</p> @return The page.
      
    </member>
    <member name="M:com.aspose.pdf.Heading.setTocPage(Page)">
       
        <p>Sets the page that contains this heading.</p> @param value The page.
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.Heading.getTop">
       
        <p>Gets the top Y of this headings(for internal use).</p> @return The top Y value
      
    </member>
    <member name="M:com.aspose.pdf.Heading.setTop(double)">
       
        <p>sets the top Y of this headings(for internal use).</p> @param value The top Y value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Heading.getStartNumber">
       
        <p>Gets the heading start number.</p> @return Value: The startNumber.
      
    </member>
    <member name="M:com.aspose.pdf.Heading.setStartNumber(int)">
       
        <p>Gets the heading start number.</p> Value: The startNumber. @param value The startNumber.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Heading.isAutoSequence">
       
        <p>Gets the heading should be numered automatically.</p> @return The IsAutoSequens.
      
    </member>
    <member name="M:com.aspose.pdf.Heading.setAutoSequence(boolean)">
       
        <p>sets the heading should be numered automatically.</p> @param value The IsAutoSequens.
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Heading.isInList">
       
        <p>Gets the heading should be in toc list.</p> @return The IsInList.
      
    </member>
    <member name="M:com.aspose.pdf.Heading.setInList(boolean)">
       
        <p>sets the heading should be in toc list.</p> @param value The IsInList.
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Heading.getDestinationPage">
       
        <p>Gets the destination page.</p> @return The destination page.
      
    </member>
    <member name="M:com.aspose.pdf.Heading.setDestinationPage(Page)">
       
        <p>sets the destination page.</p> @param value The destination page.
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.Heading.getLevel">
       
        <p>Gets the level.</p> @return The heading level.
      
    </member>
    <member name="M:com.aspose.pdf.Heading.setLevel(int)">
       
        <p>sets the level.</p> @param value The heading level.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Heading.getStyle">
       
        <p>Gets or sets style.</p> @return The heading style.
      
    </member>
    <member name="M:com.aspose.pdf.Heading.setStyle(int)">
       
        <p>sets or sets style.</p> @param value The heading style. @see NumberingStyle
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Heading.getUserLabel">
       
        <p>Gets or sets user label.</p> @return TextSegment object
      
    </member>
    <member name="M:com.aspose.pdf.Heading.setUserLabel(TextSegment)">
       
        <p>Gets or sets user label.</p> @param value TextSegment object
      
      <param name="TextSegment"/>
    </member>
    <member name="M:com.aspose.pdf.Heading.deepClone">
       
        <p>Clone the heading.</p> @return The cloned object
      
    </member>
    <member name="M:com.aspose.pdf.Heading.cloneWithSegments">
       
        <p>Clone the heading with all segments.</p> @return The cloned object
      
    </member>
    <member name="M:com.aspose.pdf.Heading.#ctor">
       
        <p>For internal usage only</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Heading.#ctor(int)">
       
        <p>Initializes a new instance of the Cell class.</p> @param level The headings level.
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.HideAction">
       
        <p>Represents a hide action that hides or shows one or more annotations on the screen by setting or clearing their Hidden flags.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.HideAction.isHidden">
       
        <p>Gets or sets status of the annotation(s) to hide/display.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.HideAction.setHidden(boolean)">
       
        <p>Gets or sets status of the annotation(s) to hide/display.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.HideAction.#ctor(Annotation)">
       
        <p>Initializes a new instance of the {@code HideAction} class for the specified annotation.</p> @param annotation An annotation to be hidden.
      
      <param name="Annotation"/>
    </member>
    <member name="M:com.aspose.pdf.HideAction.#ctor(Annotation,boolean)">
       
        <p>Initializes a new instance of the {@code HideAction} class for the specified annotation and invisibility flag.</p> @param annotation An annotation to be hidden or shown. @param isHidden A flag indicating whether to hide the annotation (true) or show it (false).
      
      <param name="Annotation"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.HideAction.#ctor(String)">
       
        <p>Initializes a new instance of the {@code HideAction} class for the specified field name.</p> @param fieldName A text string giving the fully qualified field name of an interactive form field.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.HideAction.#ctor(String,boolean)">
       
        <p>Initializes a new instance of the {@code HideAction} class for the specified field name and invisibility flag.</p> @param fieldName A text string giving the fully qualified field name of an interactive form field. @param isHidden A flag indicating whether to hide the field (true) or show it (false).
      
      <param name="String"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.HideAction.#ctor(Annotation[])">
       
        <p>Initializes a new instance of the {@code HideAction} class for the specified annotations.</p> @param annotations An array of annotations to be hidden.
      
      <param name="Annotation[]"/>
    </member>
    <member name="M:com.aspose.pdf.HideAction.#ctor(Annotation[],boolean)">
       
        <p>Initializes a new instance of the {@code HideAction} class for the specified annotations and for invisibility flag.</p> @param annotations An array of annotations to be hidden or shown. @param isHidden A flag indicating whether to hide the annotations (true) or show it (false).
      
      <param name="Annotation[]"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.HideAction.#ctor(String[])">
       
        <p>Initializes a new instance of the {@code HideAction} class for the specified field names.</p> @param names An array of strings giving the fully qualified field names of an interactive form fields.
      
      <param name="String[]"/>
    </member>
    <member name="M:com.aspose.pdf.HideAction.#ctor(String[],boolean)">
       
        <p>Initializes a new instance of the {@code HideAction} class for the specified field names and for invisibility flag.</p> @param names An array of strings giving the fully qualified field names of an interactive form fields. @param isHidden A flag indicating whether to hide the fields (true) or show it (false).
      
      <param name="String[]"/>
      <param name="boolean"/>
    </member>
    <member name="T:com.aspose.pdf.HighlightAnnotation">
       
        <p>Represents a highlight annotation that highlights a range of text in the document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.HighlightAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor object to process the annotation.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.HighlightAnnotation.getAnnotationType">
       
        <p>Gets type of annotation.</p> @return AnnotationType element @see AnnotationType
      
    </member>
    <member name="M:com.aspose.pdf.HighlightAnnotation.#ctor(Page,Rectangle)">
       
        <p>Creates new Highlight annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.HighlightingMode">
       
        <p>Enumerates the annotation's highlighting mode, the visual effect to be used when the mouse button is pressed or held down inside its active area.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HighlightingMode.None">
       
        <p>No highlighting.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HighlightingMode.Invert">
       
        <p>Invert the contents of the annotation rectangle.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HighlightingMode.Outline">
       
        <p>Invert the annotation's border.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HighlightingMode.Push">
       
        <p>Display the annotation's down appearance, if any. If no down appearance is defined, offset the contents of the annotation rectangle to appear as if it were being pushed below the surface of the page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HighlightingMode.Toggle">
       
        <p>Same as Push (which is preferred).</p> 
      
    </member>
    <member name="T:com.aspose.pdf.HorizontalAlignment">
       
        <p>Describes horizontal alignment.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HorizontalAlignment.None">
       
        <p>No alignment.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HorizontalAlignment.Left">
       
        <p>Align to left.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HorizontalAlignment.Center">
       
        <p>Center alignment.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HorizontalAlignment.Right">
       
        <p>Align to right.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HorizontalAlignment.Justify">
       
        <p>Justify alignment. Text will be aligned on both left and right margins.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HorizontalAlignment.FullJustify">
       
        <p>Similar to 'Justify' alignment, except that the very last line will only be left-aligned in 'Justify' mode, while in 'FullJustify' mode all lines will be left- and right-aligned.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.HtmlDocumentType">
       
        <p>Represents enumeration of the Html document types.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlDocumentType.Xhtml">
       
        <p>The XHtml Document Type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlDocumentType.Html5">
       
        <p>The HTML5 Document Type.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.HtmlFragment">
       
        <p>Represents html fragment.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.HtmlFragment.getRectangle">
       
        <p>Gets rectangle of the HtmlFragment</p> @return java.awt.geom.Rectangle2D.Float instance
      
    </member>
    <member name="M:com.aspose.pdf.HtmlFragment.isParagraphHasMargin">
       
        <p>Gets or sets is paragraph has default margin otherwise margin is 0</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.HtmlFragment.setParagraphHasMargin(boolean)">
       
        <p>Gets or sets is paragraph has default margin otherwise margin is 0</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlFragment.isBreakWords">
       
        <p>Gets or sets words break</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.HtmlFragment.setBreakWords(boolean)">
       
        <p>Gets or sets words break</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlFragment.getTextState">
       
        <p>Gets or sets font</p> @return TextState object
      
    </member>
    <member name="M:com.aspose.pdf.HtmlFragment.setTextState(TextState)">
       
        <p>Gets or sets font</p> @param value TextState object
      
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlFragment.getHtmlLoadOptions">
       
        <p>Gets HtmlLoadOptions that will be used for loading (and rendering) of HTML into this instance of class. Please use it when it's necessary use specific setting for import of HTML for this or that instance (f.e when this or that instance should use specific BasePath for imported HTML or should use specific loader of external resources) If parameter is default (null), then standard HTML loading options will be used.</p> @return HtmlLoadOptions value
      
    </member>
    <member name="M:com.aspose.pdf.HtmlFragment.setHtmlLoadOptions(HtmlLoadOptions)">
       
        <p>Sets HtmlLoadOptions that will be used for loading (and rendering) of HTML into this instance of class. Please use it when it's necessary use specific setting for import of HTML for this or that instance (f.e when this or that instance should use specific BasePath for imported HTML or should use specific loader of external resources) If parameter is default (null), then standard HTML loading options will be used.</p> @param value HtmlLoadOptions value
      
      <param name="HtmlLoadOptions"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlFragment.deepClone">
      Clones html fragment. @return Cloned html fragment object.
    </member>
    <member name="M:com.aspose.pdf.HtmlFragment.#ctor(String)">
       
        <p>Initializes a new instance of the HtmlFragment class.</p> @param text The fragment text
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.HtmlLoadOptions">
       
        <p>Represents options for loading/importing html file into pdf document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.HtmlLoadOptions.isRenderToSinglePage">
       
        <p>Gets or sets rendering all document to single page</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.HtmlLoadOptions.setRenderToSinglePage(boolean)">
       
        <p>Gets or sets rendering all document to single page</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlLoadOptions.isEmbedFonts">
       
        <p>Gets or sets fonts embedding to result document</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.HtmlLoadOptions.setEmbedFonts(boolean)">
       
        <p>Gets or sets fonts embedding to result document</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlLoadOptions.getHtmlMediaType">
       
        <p>Gets or sets possible media types used during rendering.</p> @return HtmlMediaType element
      
    </member>
    <member name="M:com.aspose.pdf.HtmlLoadOptions.setHtmlMediaType(int)">
       
        <p>Gets or sets possible media types used during rendering.</p> @param value HtmlMediaType element @see HtmlMediaType
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlLoadOptions.getInputEncoding">
       
        <p>Gets the attribute specifying the encoding used for this document at the time of the parsing. If this attribute is null the encoding will determine from document character set atribute.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.HtmlLoadOptions.setInputEncoding(String)">
       
        <p>Sets the attribute specifying the encoding used for this document at the time of the parsing. If this attribute is null the encoding will determine from document character set atribute.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlLoadOptions.getBasePath">
       
        <p>The base path/url for the html file.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.HtmlLoadOptions.getPageInfo">
       
        <p>Gets document page info</p> @return page info
      
    </member>
    <member name="M:com.aspose.pdf.HtmlLoadOptions.setPageInfo(PageInfo)">
       
        <p>Sets document page info</p> @param value page info
      
      <param name="PageInfo"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlLoadOptions.getCustomLoaderOfExternalResources">
       
        <p>Sometimes it's necessary to avoid usage of internal loader of external resources(like images or CSSes) and supply custom method that will get requested resources from somewhere. For example, during usage of Aspose.PDF in cloud direct access to referenced files impossible: in such case some customer code put into special method should be used, and delegate that refers that method should be assigned to this attribute.</p> @return ResourceLoadingStrategy instance
      
    </member>
    <member name="M:com.aspose.pdf.HtmlLoadOptions.setCustomLoaderOfExternalResources(ResourceLoadingStrategy)">
       
        <p>Sometimes it's necessary to avoid usage of internal loader of external resources(like images or CSSes) and supply custom method that will get requested resources from somewhere. For example, during usage of Aspose.PDF in cloud direct access to referenced files impossible: in such case some customer code put into special method should be used, and delegate that refers that method should be assigned to this attribute.</p> @param customLoaderOfExternalResources ResourceLoadingStrategy instance
      
      <param name="ResourceLoadingStrategy"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlLoadOptions.#ctor">
       
        <p>Creates load options for converting html into pdf document with empty base path.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.HtmlLoadOptions.#ctor(String)">
       
        <p>Creates load options for converting html into pdf document with defined base path.</p> @param basePath The base path/url for the html file.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.HtmlMediaType">
       
        <p>Specifies possible media types used during rendering.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlMediaType.Print">
       
        <p>Print.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlMediaType.Screen">
       
        <p>Screen.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.HtmlSaveOptions">
       
        <p>Save options for export to Html format</p> 
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getCustomProgressHandler">&lt;p&gt; This handler can be used to handle conversion progress events f.e. it can be used to show progress bar or messages about current amount of processed pages, example of handler's code that shows progress on console is : &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; public static void ConvertWithShowingProgress() { (new com.aspose.pdf.License()).setLicense("Aspose.Total.lic"); Document doc = new Document("Booklet.pdf"); HtmlSaveOptions saveOptions = new HtmlSaveOptions(); saveOptions.CustomProgressHandler = new com.aspose.pdf.UnifiedSaveOptions.ConversionProgressEventHandler() { public void invoke( UnifiedSaveOptions.ProgressEventHandlerInfo eventInfo) { showProgressOnConsole(eventInfo); } }; doc.save("Booklet.doc", saveOptions); } public static void showProgressOnConsole(HtmlSaveOptions.ProgressEventHandlerInfo eventInfo) { switch (eventInfo.EventType) { case HtmlSaveOptions.ProgressEventType.TotalProgress: System.out.println(String.format("%s - Conversion progress : %d % .", (new Date()).toString(), eventInfo.Value)); break; case HtmlSaveOptions.ProgressEventType.SourcePageAnalized: System.out.println(String.format("%s - Source page %d of %d analyzed.", (new Date()).toString(), eventInfo.Value, eventInfo.MaxValue)); break; case HtmlSaveOptions.ProgressEventType.ResultPageCreated: System.out.println(String.format("%s - Result page's %d of %d layout created.", (new Date()).toString(), eventInfo.Value, eventInfo.MaxValue)); break; case HtmlSaveOptions.ProgressEventType.ResultPageSaved: System.out.println(String.format("%s - Result page %d of %d exported.", (new Date()).toString(), eventInfo.Value, eventInfo.MaxValue)); break; default: break; } } &lt;/pre&gt; @return ConversionProgressEventHandler instance</member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setCustomProgressHandler(ConversionProgressEventHandler)">&lt;p&gt; This handler can be used to handle conversion progress events f.e. it can be used to show progress bar or messages about current amount of processed pages, example of handler's code that shows progress on console is : &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; public static void ConvertWithShowingProgress() { (new com.aspose.pdf.License()).setLicense("Aspose.Total.lic"); Document doc = new Document("Booklet.pdf"); HtmlSaveOptions saveOptions = new HtmlSaveOptions(); saveOptions.CustomProgressHandler = new com.aspose.pdf.UnifiedSaveOptions.ConversionProgressEventHandler() { public void invoke( UnifiedSaveOptions.ProgressEventHandlerInfo eventInfo) { showProgressOnConsole(eventInfo); } }; doc.save("Booklet.doc", saveOptions); } public static void showProgressOnConsole(HtmlSaveOptions.ProgressEventHandlerInfo eventInfo) { switch (eventInfo.EventType) { case HtmlSaveOptions.ProgressEventType.TotalProgress: System.out.println(String.format("%s - Conversion progress : %d % .", (new Date()).toString(), eventInfo.Value)); break; case HtmlSaveOptions.ProgressEventType.SourcePageAnalized: System.out.println(String.format("%s - Source page %d of %d analyzed.", (new Date()).toString(), eventInfo.Value, eventInfo.MaxValue)); break; case HtmlSaveOptions.ProgressEventType.ResultPageCreated: System.out.println(String.format("%s - Result page's %d of %d layout created.", (new Date()).toString(), eventInfo.Value, eventInfo.MaxValue)); break; case HtmlSaveOptions.ProgressEventType.ResultPageSaved: System.out.println(String.format("%s - Result page %d of %d exported.", (new Date()).toString(), eventInfo.Value, eventInfo.MaxValue)); break; default: break; } } &lt;/pre&gt; @param customProgressHandler ConversionProgressEventHandler instance 
      <param name="ConversionProgressEventHandler"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.isSaveFullFont">
       
        <p>Indicates that full font will be saved, supports only True Type Fonts. By default SaveFullFont = false and the converter saves the subset of the initial font needed to display the text of the document.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setSaveFullFont(boolean)">
       
        <p>Indicates that full font will be saved, supports only True Type Fonts. By default SaveFullFont = false and the converter saves the subset of the initial font needed to display the text of the document.</p> @param saveFullFont boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getAntialiasingProcessing">
       
        <p>This parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML</p> @return AntialiasingProcessingType element @see AntialiasingProcessingType
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setAntialiasingProcessing(int)">
       
        <p>This parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML</p> @param antialiasingProcessing AntialiasingProcessingType element @see AntialiasingProcessingType
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.isSaveTransparentTexts">
       
        <p>Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setSaveTransparentTexts(boolean)">
       
        <p>Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML</p> @param saveTransparentTexts boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.isSaveShadowedTextsAsTransparentTexts">
       
        <p>Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard)</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setSaveShadowedTextsAsTransparentTexts(boolean)">
       
        <p>Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard)</p> @param saveShadowedTextsAsTransparentTexts boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getFontSavingMode">
       
        <p>Defines font saving mode that will be used during saving of PDF to desirable format</p> @return FontSavingModes element @see FontSavingModes
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setFontSavingMode(int)">
       
        <p>Defines font saving mode that will be used during saving of PDF to desirable format</p> @param fontSavingMode FontSavingModes element @see FontSavingModes
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getPageBorderIfAny">
       
        <p>This attribute represents set of settings used for drawing border (if any) in result HTML document around area that represent source PDF page. In essence it concerns of showing of page's paper edges, not page border referenced in PDF page itself.</p> @return BorderInfo instance
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setPageBorderIfAny(BorderInfo)">
       
        <p>This attribute represents set of settings used for drawing border (if any) in result HTML document around area that represent source PDF page. In essence it concerns of showing of page's paper edges, not page border referenced in PDF page itself.</p> @param pageBorderIfAny BorderInfo instance
      
      <param name="BorderInfo"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getPageMarginIfAny">
       
        <p>This attribute represents set of extra page margin (if any) in result HTML document around area that represent source PDF page.</p> @return MarginInfo instance
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setPageMarginIfAny(MarginInfo)">
       
        <p>This attribute represents set of extra page margin (if any) in result HTML document around area that represent source PDF page.</p> @param pageMarginIfAny MarginInfo instance
      
      <param name="MarginInfo"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getLettersPositioningMethod">
       
        <p>Sets mode of positioning of letters in words in result HTML</p> @return LettersPositioningMethods element @see LettersPositioningMethods
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setLettersPositioningMethod(int)">
       
        <p>Sets mode of positioning of letters in words in result HTML</p> @param lettersPositioningMethod LettersPositioningMethods element @see LettersPositioningMethods
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getExcludeFontNameList">
       
        <p>List of PDF embedded font names that not be embedded in HTML.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setExcludeFontNameList(String[])">
       
        <p>List of PDF embedded font names that not be embedded in HTML.</p> @param excludeFontNameList array of String elements
      
      <param name="String[]"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getCustomResourceSavingStrategy">
       
        <p>This field can contain saving strategy that must be used (if present) during conversion for customized handling of created referenced resource files (like images and fonts) related to nodes of saved HTML. That strategy must process resources and return string that represents desirable URL of saved resource in generated HTML.</p> @return ResourceSavingStrategy instance
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setCustomResourceSavingStrategy(ResourceSavingStrategy)">
       
        <p>This field can contain saving strategy that must be used (if present) during conversion for customized handling of created referenced resource files (like images and fonts) related to nodes of saved HTML. That strategy must process resources and return string that represents desirable URL of saved resource in generated HTML.</p> @param customResourceSavingStrategy ResourceSavingStrategy instance
      
      <param name="ResourceSavingStrategy"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getCustomCssSavingStrategy">
       
        <p>This field can contain saving strategy that must be used (if present) during conversion of Pdf to Html for handling of saving of CSSes related to created HTML document as whole or to it's pages(if several HTMLpages are generated) If You want handle CSS file in some specific way, that just please create relevant method and Assign delegate created from it to this property.</p> @return CssSavingStrategy instance
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setCustomCssSavingStrategy(CssSavingStrategy)">
       
        <p>This field can contain saving strategy that must be used (if present) during conversion of Pdf to Html for handling of saving of CSSes related to created HTML document as whole or to it's pages(if several HTMLpages are generated) If You want handle CSS file in some specific way, that just please create relevant method and Assign delegate created from it to this property.</p> @param customCssSavingStrategy CssSavingStrategy instance
      
      <param name="CssSavingStrategy"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getCustomHtmlSavingStrategy">
       
        <p>Result of conversion can contain one or several HTML-pages You can assign to this property delegate created from custom method that implements processing of one HTML-page(to be accurately - markup-HTML, without external linked files if any) that was created during conversion. In such case processing (like saving of paage's HTML in stream or disk) can be done in that custom code . In such case all the necessary actions for saving of HTML page must be undertaken in code of supplied method, because saving of result in code of converter will be not in use . If processing for this or that case for some reason must be done by converter's code itself, not in custom code, please set in custom code flag 'CustomProcessingCancelled' of 'htmlSavingInfo' parameter's variable : it will signal to converter that all the necessary steps for processing of that resource must be done in converter itself in same way as if there was no any external custom code for procesing .</p> @return HtmlPageMarkupSavingStrategy instance
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setCustomHtmlSavingStrategy(HtmlPageMarkupSavingStrategy)">
       
        <p>Result of conversion can contain one or several HTML-pages You can assign to this property delegate created from custom method that implements processing of one HTML-page(to be accurately - markup-HTML, without external linked files if any) that was created during conversion. In such case processing (like saving of paage's HTML in stream or disk) can be done in that custom code . In such case all the necessary actions for saving of HTML page must be undertaken in code of supplied method, because saving of result in code of converter will be not in use . If processing for this or that case for some reason must be done by converter's code itself, not in custom code, please set in custom code flag 'CustomProcessingCancelled' of 'htmlSavingInfo' parameter's variable : it will signal to converter that all the necessary steps for processing of that resource must be done in converter itself in same way as if there was no any external custom code for procesing .</p> @param customHtmlSavingStrategy HtmlPageMarkupSavingStrategy instance
      
      <param name="HtmlPageMarkupSavingStrategy"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getCustomStrategyOfCssUrlCreation">
       
        <p>This field can contain custom method that returns URL (Or URL template if multipage generation is on - see details below) of subject CSS as it should be put in generated result HTML. F.e. if You want converter put some specific URL instead of standard CSS file name into generated CSS, then You should just create and put into this property method that generates desirable URL. If flag 'SplitCssIntoPages' set, then this custom strategy (if any) must return not exact URL of CSS but rather template string that (after substitution of placeholder with page number with String.Format() function inside converter) can be resolved into URL for this or that page's CSS' URL. Examples of expected return string in such case are: 'SomeTargetLocation-page_{0}.css','../PartHandlers/GetCss.aspx?DocumentId=45654&amp;CssPage={0 } ' )</p> @return CssUrlMakingStrategy instance
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setCustomStrategyOfCssUrlCreation(CssUrlMakingStrategy)">
       
        <p>This field can contain custom method that returns URL (Or URL template if multipage generation is on - see details below) of subject CSS as it should be put in generated result HTML. F.e. if You want converter put some specific URL instead of standard CSS file name into generated CSS, then You should just create and put into this property method that generates desirable URL. If flag 'SplitCssIntoPages' set, then this custom strategy (if any) must return not exact URL of CSS but rather template string that (after substitution of placeholder with page number with String.Format() function inside converter) can be resolved into URL for this or that page's CSS' URL. Examples of expected return string in such case are: 'SomeTargetLocation-page_{0}.css','../PartHandlers/GetCss.aspx?DocumentId=45654&amp;CssPage={0 } ' )</p> @param customStrategyOfCssUrlCreation CssUrlMakingStrategy instance
      
      <param name="CssUrlMakingStrategy"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getSpecialFolderForSvgImages">
       
        <p>Gets or sets path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setSpecialFolderForSvgImages(String)">
       
        <p>Gets or sets path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file.</p> @param specialFolderForSvgImages String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getSpecialFolderForAllImages">
       
        <p>Gets or sets path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setSpecialFolderForAllImages(String)">
       
        <p>Gets or sets path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file.</p> @param specialFolderForAllImages String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getCssClassNamesPrefix">
       
        <p>When PDFtoHTML converter generates result CSSs, CSS class names (something like ".stl_01 {}" ... ".stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix For example, if You want that all class names start with 'my_prefix_' (i.e. were something like 'my_prefix_1' ... 'my_prefix_NNN' ) , then just assign 'my_prefix_' to this property before conversion. If this property will stay untouched(i.e. null will be leaved as value ), then converter will generate class names itself (it will be something like ".stl_01 {}" ... ".stl_NN {}")</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setCssClassNamesPrefix(String)">
       
        <p>When PDFtoHTML converter generates result CSSs, CSS class names (something like ".stl_01 {}" ... ".stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix For example, if You want that all class names start with 'my_prefix_' (i.e. were something like 'my_prefix_1' ... 'my_prefix_NNN' ) , then just assign 'my_prefix_' to this property before conversion. If this property will stay untouched(i.e. null will be leaved as value ), then converter will generate class names itself (it will be something like ".stl_01 {}" ... ".stl_NN {}")</p> @param cssClassNamesPrefix String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getPartsEmbeddingMode">
       
        <p>It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities</p> @return PartsEmbeddingModes element @see PartsEmbeddingModes
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setPartsEmbeddingMode(int)">
       
        <p>It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities</p> @param partsEmbeddingMode PartsEmbeddingModes element @see PartsEmbeddingModes
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getHtmlMarkupGenerationMode">
       
        <p>Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments.</p> @return HtmlMarkupGenerationModes element @see HtmlMarkupGenerationModes
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setHtmlMarkupGenerationMode(int)">
       
        <p>Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments.</p> @param htmlMarkupGenerationMode HtmlMarkupGenerationModes element @see HtmlMarkupGenerationModes
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getRasterImagesSavingMode">
       
        <p>Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML</p> @return RasterImagesSavingModes element @see RasterImagesSavingModes
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setRasterImagesSavingMode(int)">
       
        <p>Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML</p> @param rasterImagesSavingMode RasterImagesSavingModes element @see RasterImagesSavingModes
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.isRemoveEmptyAreasOnTopAndBottom">
       
        <p>Defines whether in created HTML will be removed top and bottom empty area without any content (if any).</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setRemoveEmptyAreasOnTopAndBottom(boolean)">
       
        <p>Defines whether in created HTML will be removed top and bottom empty area without any content (if any).</p> @param removeEmptyAreasOnTopAndBottom boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getFontEncodingStrategy">
       
        <p>Defines encoding special rule to tune PDF decoding for current document</p> @return FontEncodingRules element @see FontEncodingRules
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setFontEncodingStrategy(byte)">
       
        <p>Defines encoding special rule to tune PDF decoding for current document</p> @param fontEncodingStrategy FontEncodingRules element @see FontEncodingRules
      
      <param name="byte"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.isPagesFlowTypeDependsOnViewersScreenSize">
       
        <p>If attribute 'SplitOnPages=false', than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. Suppose width of screen on viewer side is big enough to put 2 or more pages one near other in horizontal direction. If this flag set to true, then this opportunity will be used (as many pages will be shown in horizontal direction one near another as it possible, then next horizontal group of pages will be shown under first one ). Otherwise pages will flow in such way: next page goes always under previous one.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setPagesFlowTypeDependsOnViewersScreenSize(boolean)">
       
        <p>If attribute 'SplitOnPages=false', than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. Suppose width of screen on viewer side is big enough to put 2 or more pages one near other in horizontal direction. If this flag set to true, then this opportunity will be used (as many pages will be shown in horizontal direction one near another as it possible, then next horizontal group of pages will be shown under first one ). Otherwise pages will flow in such way: next page goes always under previous one.</p> @param pagesFlowTypeDependsOnViewersScreenSize boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.isTrySaveTextUnderliningAndStrikeoutingInCss">
       
        <p>PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text's underlining and put this info into CSS instead of drawing of underlining graphically</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setTrySaveTextUnderliningAndStrikeoutingInCss(boolean)">
       
        <p>PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text's underlining and put this info into CSS instead of drawing of underlining graphically</p> @param trySaveTextUnderliningAndStrikeoutingInCss boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getDocumentType">
       
        <p>Gets the {@code HtmlDocumentTypeInternal}.</p> @return The {@code HtmlDocumentTypeInternal}.
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setDocumentType(int)">
      Sets the {@code HtmlDocumentType}. @param value The {@code HtmlDocumentType}. @see HtmlDocumentType
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getCompressSvgGraphicsIfAny">
       
        <p>Gets the flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving</p> Value: The {@code HtmlDocumentType}. @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setCompressSvgGraphicsIfAny(boolean)">
       
        <p>Sets the flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving</p> Value: The {@code HtmlDocumentType}. @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getSplitCssIntoPages">
       
        <p>When multipage-mode selected(i.e 'SplitIntoPages' is 'true'), then this attribute defines whether should be created separate CSS-file for each result HTML page. By default this attribute is false, so, will be created one big common CSS for all created pages. Summary size of all CSSes generated in this mode(one CSS per page) usually much more than size of one big CSS file, because in former case CSS classes are duplicates in such case in several CSS files for each page. So, this setting is worse to be used only when You are interested in future processing of each HTML page independently, and therefore size of CSS of each one page taken apart is the most critical issue.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setSplitCssIntoPages(boolean)">
       
        <p>When multipage-mode selected(i.e 'SplitIntoPages' is 'true'), then this attribute defines whether should be created separate CSS-file for each result HTML page. By default this attribute is false, so, will be created one big common CSS for all created pages. Summary size of all CSSes generated in this mode(one CSS per page) usually much more than size of one big CSS file, because in former case CSS classes are duplicates in such case in several CSS files for each page. So, this setting is worse to be used only when You are interested in future processing of each HTML page independently, and therefore size of CSS of each one page taken apart is the most critical issue.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getSplitIntoPages">
       
        <p>Gets the flag that indicates whether each page of source document will be converted into it's own target HTML document, i.e whether result HTML will be splitted into several HTML-pages.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setSplitIntoPages(boolean)">
       
        <p>Sets the flag that indicates whether each page of source document will be converted into it's own target HTML document, i.e whether result HTML will be splitted into several HTML-pages.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getExplicitListOfSavedPages">
       
        <p>With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. If this list is null (as it is by default), all pages will be converted. If any page number of this list will go out of range of present pages(1-[amountOfPagesInDocument]) exception will be thrown.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setExplicitListOfSavedPages(int[])">
       
        <p>With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. If this list is null (as it is by default), all pages will be converted. If any page number of this list will go out of range of present pages(1-[amountOfPagesInDocument]) exception will be thrown.</p> 
      
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getFixedLayout">
       
        <p>Gets a value indicating whether that HTML is created as fixed layout.</p> @return value: {@code true} if [fixed layout]; otherwise, {@code false}.
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setFixedLayout(boolean)">
       
        <p>Sets a value indicating whether that HTML is created as fixed layout.</p> @param value : {@code true} if [fixed layout]; otherwise, {@code false}.
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getImageResolution">
       
        <p>Gets or sets resolution for image rendering.</p> @return Value: Resolution
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setImageResolution(int)">
       
        <p>Gets or sets resolution for image rendering.</p> @param value Value: Resolution
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getDefaultFontName">
       
        <p>Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used.</p> @return String value: Font name
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setDefaultFontName(String)">
       
        <p>Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used.</p> @param value Font name
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getBatchSize">
       
        <p>Defines batch size if batched conversion is applicable to source and destination formats pair.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setBatchSize(int)">
       
        <p>Defines batch size if batched conversion is applicable to source and destination formats pair.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getFontSources">&lt;p&gt; Font sources of pre-saved fonts. &lt;/p&gt; @return FontSourceCollection object &lt;hr&gt; &lt;p&gt; Fonts may be saved preliminarily for cache purpose and then passed into Html conversion process. For example it may be useful in document splitting scenario and processing document pages in multiple threads with single set of fonts. &lt;/p&gt;</member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getAdditionalMarginWidthInPoints">
       
        <p>If attribute 'SplitOnPages=false', than whole HTML representing all input PDF pages wont be not split into different HTML pages, but will be put into one big result HTML file. But each source PDF page will be represented with it's own rectangle area in HTML (if necessary that areas can be bordered to show page paper edges with special attribute 'PageBorderIfAny'. This parameter defines width of margin that will be forcibly left around that output HTML-areas that represent pages of source PDF document.In essence it defines guaranteed interval between HTML-representations of PDF "paper" pages such mode of conversion.</p> @return int value @deprecated AdditionalMarginWidthInPoints is deprecated, please use PageMarginIfAny instead.
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setAdditionalMarginWidthInPoints(int)">
       
        <p>If attribute 'SplitOnPages=false', than whole HTML representing all input PDF pages wont be not split into different HTML pages, but will be put into one big result HTML file. But each source PDF page will be represented with it's own rectangle area in HTML (if necessary that areas can be bordered to show page paper edges with special attribute 'PageBorderIfAny'. This parameter defines width of margin that will be forcibly left around that output HTML-areas that represent pages of source PDF document.In essence it defines guaranteed interval between HTML-representations of PDF "paper" pages such mode of conversion.</p> @param value int value @deprecated AdditionalMarginWidthInPoints is deprecated, please use PageMarginIfAny instead.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getUseZOrder">
       
        <p>If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setUseZOrder(boolean)">
       
        <p>If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getConvertMarkedContentToLayers">
       
        <p>If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with "data-pdflayer" attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setConvertMarkedContentToLayers(boolean)">
       
        <p>If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with "data-pdflayer" attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getMinimalLineWidth">
       
        <p>This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers.</p> @return float value
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setMinimalLineWidth(float)">
       
        <p>This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers.</p> @param value float value
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getPreventGlyphsGrouping">
       
        <p>This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setPreventGlyphsGrouping(boolean)">
       
        <p>This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getSimpleTextboxModeGrouping">
       
        <p>This attribute specifies a sequential grouping of glyphs and words into strings For example tags and words has different order in converted HTML and you want them to match. This parameter will be applied to document only when the value of FixedLayout attribute is true.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setSimpleTextboxModeGrouping(boolean)">
       
        <p>This attribute specifies a sequential grouping of glyphs and words into strings For example tags and words has different order in converted HTML and you want them to match. This parameter will be applied to document only when the value of FixedLayout attribute is true.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setRenderTextAsImage(boolean)">
      If attribute RenderTextAsImage set to true, the text from the source becomes an image in HTML. May be useful to make text unselectable or HTML text is not rendered properly. @param value boolean value
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.isRenderTextAsImage">
      If attribute RenderTextAsImage set to true, the text from the source becomes an image in HTML. May be useful to make text unselectable or HTML text is not rendered properly. @return boolean value
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.#ctor">
       
        <p>Initializes a new instance of the HtmlSaveOptions class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.#ctor(int)">
       
        <p>Initializes a new instance of the {@code HtmlSaveOptions} class.</p> @param documentType The {@code HtmlDocumentTypeInternal}.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.#ctor(boolean)">
       
        <p>Initializes a new instance of the {@code HtmlSaveOptions} class.</p> @param fixedLayout boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.#ctor(int,boolean)">
       
        <p>Initializes a new instance of the {@code HtmlSaveOptions} class.</p> @param documentType The {@code HtmlDocumentTypeInternal}. @param fixedLayout if set to {@code true} HTML is created as fixed layout. @see HtmlDocumentType
      
      <param name="int"/>
      <param name="boolean"/>
    </member>
    <member name="T:com.aspose.pdf.HtmlSaveOptions.FontSavingModes">
       
        <p>Enumerates modes that can be used for saving of fonts referenced in saved PDF</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.FontSavingModes.AlwaysSaveAsWOFF">
       
        <p>All referenced fonts will be saved and referenced as WOFF-fonts</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.FontSavingModes.AlwaysSaveAsTTF">
       
        <p>All referenced fonts will be saved and referenced as TTF-fonts</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.FontSavingModes.AlwaysSaveAsEOT">
       
        <p>All referenced fonts will be saved and referenced as EOT-fonts</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.FontSavingModes.SaveInAllFormats">
       
        <p>All referenced fonts will be saved (and referenced in CSS) as 3 independent files : EOT, TTH,WOFF. It increases size of output data but makes output sutable for overhelming majority of web brawsers</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.FontSavingModes.DontSave">
       
        <p>All referenced fonts will not be saved.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.HtmlSaveOptions.AntialiasingProcessingType">
       
        <p>This enum describes possible antialiasing measures during conversion</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.AntialiasingProcessingType.NoAdditionalProcessing">
       
        <p>no special antialiasing processing in use. This is an optimal option for overhelming majority of documents and it does not require additional time during conversion</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.AntialiasingProcessingType.TryCorrectResultHtml">
       
        <p>In such case converter tries to detect places with ajacent background graphical elements and correct result HTML in relevant way. This option allows enhance result of export for documents that contain backgrounds built from several ajacent graphical elements (for such kind of documents PDF renderers , f.e. Acrobat Reader, usually try smooth boundaries of elements during rendering. With this option converter imitates that behaviour of PDF-renderers. This option allows enhance layout of result of export for some specific documents (that use such compound backgrounds), but it requires additional time for processng (usually about 10-15% of additional time). So usage of this mode in general case is not recommended.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.HtmlSaveOptions.CssSavingInfo">
       
        <p>This class represents set of data that related to custom saving of CSS during conversion of PDF to HTML format</p> 
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.CssSavingInfo.getCssNumber">
       
        <p>Set by converter. During conversion several CSS-files are created . This properties shows ordinal of saved CSS-file during conversion. It can be used in logic of custom code to decide how to process or where to save CSS content</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.CssSavingInfo.setCssNumber(int)">
       
        <p>Set by converter. During conversion several CSS-files are created . This properties shows ordinal of saved CSS-file during conversion. It can be used in logic of custom code to decide how to process or where to save CSS content</p> @param cssNumber int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.CssSavingInfo.getSupposedURL">
       
        <p>Set by converter. Supposed file name that goes from converter to code of custom method Can be used in custom code to decide how to process or where to save content</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.CssSavingInfo.setSupposedURL(String)">
       
        <p>Set by converter. Supposed file name that goes from converter to code of custom method Can be used in custom code to decide how to process or where to save content</p> @param supposedURL String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.CssSavingInfo.getContentStream">
       
        <p>Set by converter. Represents binary content of saved CSS</p> @return InputStream instance
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.CssSavingInfo.setContentStream(InputStream)">
       
        <p>Set by converter. Represents binary content of saved CSS</p> @param contentStream InputStream instance
      
      <param name="InputStream"/>
    </member>
    <member name="T:com.aspose.pdf.HtmlSaveOptions.HtmlPageMarkupSavingInfo">
       
        <p>If SplitToPages property of HtmlSaveOptions, then several HTML-files (one HTML file per converted page) are created during conversion of PDF to HTML. This class represents set of data that related to custom saving of one HTML-page's markup during conversion of PDF to HTML</p> 
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.HtmlPageMarkupSavingInfo.getSupposedFileName">
       
        <p>Set by converter. Supposed file name that goes from converter to code of custom method Can be used in custom code to decide how to process or where to save content</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.HtmlPageMarkupSavingInfo.setSupposedFileName(String)">
       
        <p>Set by converter. Supposed file name that goes from converter to code of custom method Can be used in custom code to decide how to process or where to save content</p> @param supposedFileName String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.HtmlPageMarkupSavingInfo.getContentStream">
       
        <p>Set by converter. Represents saved HTML as stream</p> @return InputStream instance
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.HtmlPageMarkupSavingInfo.setContentStream(InputStream)">
       
        <p>Set by converter. Represents saved HTML as stream</p> @param contentStream InputStream instance
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.HtmlPageMarkupSavingInfo.getPdfHostPageNumber">
       
        <p>Set by converter. If SplitToPages property set, then several HTML-files(one HTML file per converted page) are created during conversion created . This property tells to custom code from what page of original PDF was created saved HTML-markup. If original page number for some reason is inknown or SplitOnPages=false,then this property allways contains '0' that signals that converter cannot supply exact original PDF's page number for supplied HTML-markup file.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.HtmlPageMarkupSavingInfo.setPdfHostPageNumber(int)">
       
        <p>Set by converter. If SplitToPages property set, then several HTML-files(one HTML file per converted page) are created during conversion created . This property tells to custom code from what page of original PDF was created saved HTML-markup. If original page number for some reason is inknown or SplitOnPages=false,then this property allways contains '0' that signals that converter cannot supply exact original PDF's page number for supplied HTML-markup file.</p> @param pdfHostPageNumber int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.HtmlPageMarkupSavingInfo.getHtmlHostPageNumber">
       
        <p>Set by converter. If set SplitToPages property, then several HTML-files(one HTML file per converted page) are created during conversion created . This property contains ordinal of saved HTML page's file. The property can be used in logic of custom code to decide how to process or where to save HTML page and If splitting on pages turned off this value always contains '1' since in such case only one big HTML page is generated for whole source document.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.HtmlPageMarkupSavingInfo.setHtmlHostPageNumber(int)">
       
        <p>Set by converter. If set SplitToPages property, then several HTML-files(one HTML file per converted page) are created during conversion created . This property contains ordinal of saved HTML page's file. The property can be used in logic of custom code to decide how to process or where to save HTML page and If splitting on pages turned off this value always contains '1' since in such case only one big HTML page is generated for whole source document.</p> @param htmlHostPageNumber int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.HtmlPageMarkupSavingInfo.isCustomProcessingCancelled">
       
        <p>Should be set in custom code when necessary. This flag must be set to "true" in custom code if for some reasons supplied html-markup should be processed not with custom code but with converter's code itself in standard for converter way. So, setting if this flag in custom code means that custom code did not process referenced file and converter must handle it itself</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.HtmlPageMarkupSavingInfo.setCustomProcessingCancelled(boolean)">
       
        <p>Should be set in custom code when necessary. This flag must be set to "true" in custom code if for some reasons supplied html-markup should be processed not with custom code but with converter's code itself in standard for converter way. So, setting if this flag in custom code means that custom code did not process referenced file and converter must handle it itself</p> @param customProcessingCancelled boolean value
      
      <param name="boolean"/>
    </member>
    <member name="T:com.aspose.pdf.HtmlSaveOptions.CssUrlRequestInfo">
       
        <p>Represents set of data that related to request from converter to custom code aimed to get desirable URL (or URL template)of subject CSS</p> 
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.CssUrlRequestInfo.isCustomProcessingCancelled">
       
        <p>Should be set by custom code if it cannot or should not define URL that will be used in generated HTML for referencing of that CSS. If it's 'true', then CSS file will be saved in standard way in standard place.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.CssUrlRequestInfo.setCustomProcessingCancelled(boolean)">
       
        <p>Should be set by custom code if it cannot or should not define URL that will be used in generated HTML for referencing of that CSS. If it's 'true', then CSS file will be saved in standard way in standard place.</p> @param customProcessingCancelled boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.CssUrlRequestInfo.#ctor">
       
        <p>Creates instance of CssUrlRequestInfo</p> 
      
    </member>
    <member name="T:com.aspose.pdf.HtmlSaveOptions.HtmlImageSavingInfo">
       
        <p>This class represents set of data that related to external resource image file's saving during PDF to HTML conversion.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.HtmlImageSavingInfo.getImageType">
       
        <p>Represents type of saved image referenced in HTML. Set by converter and can be used in custom code to decide what should be done</p> @return HtmlImageType element @see HtmlImageType
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.HtmlImageSavingInfo.setImageType(int)">
       
        <p>Represents type of saved image referenced in HTML. Set by converter and can be used in custom code to decide what should be done</p> @param imageType HtmlImageType element @see HtmlImageType
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.HtmlImageSavingInfo.getParentType">
       
        <p>Saved image can pertain to HTML itself or can be extracted. from SVG embedded to HTML. This property can tell to custom code what's that type of parent of processed image. It set by converter and can be used in custom code to decide what should be done with that image (f.e. custom code can decide where to save image or how it must be referenced in parent's content).</p> @return ImageParentTypes element @see ImageParentTypes
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.HtmlImageSavingInfo.setParentType(int)">
       
        <p>Saved image can pertain to HTML itself or can be extracted. from SVG embedded to HTML. This property can tell to custom code what's that type of parent of processed image. It set by converter and can be used in custom code to decide what should be done with that image (f.e. custom code can decide where to save image or how it must be referenced in parent's content).</p> @param parentType ImageParentTypes element @see ImageParentTypes
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.HtmlImageSavingInfo.getPdfHostPageNumber">
       
        <p>Tells to custom code to what page of original PDF document pertains saved image Since it's possible that will be saved not all pages of original document, this value tells us about host page number in original PDF. If original page number for some reason is unknown, it always return '1'</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.HtmlImageSavingInfo.setPdfHostPageNumber(int)">
       
        <p>Tells to custom code to what page of original PDF document pertains saved image Since it's possible that will be saved not all pages of original document, this value tells us about host page number in original PDF. If original page number for some reason is unknown, it always return '1'</p> @param pdfHostPageNumber int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.HtmlImageSavingInfo.getHtmlHostPageNumber">
       
        <p>Tells to custom code to what page of generated set of HTML page-files pertains saved image. If splitting on pages turned off this value always contains '1' since in such case Only one HTML page is generated.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.HtmlImageSavingInfo.setHtmlHostPageNumber(int)">
       
        <p>Tells to custom code to what page of generated set of HTML page-files pertains saved image. If splitting on pages turned off this value always contains '1' since in such case Only one HTML page is generated.</p> @param htmlHostPageNumber int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.HtmlImageSavingInfo.#ctor">
       
        <p>creates new instance of HtmlImageSavingInfo</p> 
      
    </member>
    <member name="T:com.aspose.pdf.HtmlSaveOptions.ResourceSavingStrategy">
       
        <p>To this property You can assign delegate created from custom method that implements processing of external resource(Font or Image) that was extracted from PDF and must be saved as external resource during conversion of PDF to HTML. In such case processing (like saving in stream or disk) can be done in that custom code and that custom code must return path(or any another string without quotemarks) that will be afterwards incorporated into generated HTML instead of original supposed path to that image resource. In such case All the necessary actions for saving of image must be undertaken in code of supplied method, because saving of result in code of converter will be not in use . If processing for this or that file for some reason must be done by converter's code itself, not in custom code, please set in custom code flag 'CustomProcessingCancelled' of 'resourceSavingInfo' parameter's variable It signals to converter that all the necessary steps for processing of that resource must be done in converter itself as if there was no any external custom code .</p> 
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.ResourceSavingStrategy.invoke(SaveOptions.ResourceSavingInfo)">
      Invoked method @param resourceSavingInfo SaveOptions.ResourceSavingInfo object @return String object
      <param name="SaveOptions.ResourceSavingInfo"/>
    </member>
    <member name="T:com.aspose.pdf.HtmlSaveOptions.HtmlPageMarkupSavingStrategy">
       
        <p>Result of conversion can contain one or several HTML-pages ( that also can reference external files like images or fonts) You can assign to this property delegate created from custom method that implements processing of got HTML-page(HTML itself) that was created during conversion. In such case processing (like saving in stream or disk) can be done in that custom code . In such case All the necessary actions for saving of HTML page's markup must be undertaken in code of supplied method, because saving of result in code of converter will be not in use. If processing for this or that case for some reason must be done by converter's code itself, not in custom code, please set in custom code flag 'CustomProcessingCancelled' of 'htmlSavingInfo' parameter's variable : it signals to converter that all the necessary steps for processing of that resource must be done in converter itself in same way as if there was no any external custom saving code .</p> 
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.HtmlPageMarkupSavingStrategy.invoke(HtmlSaveOptions.HtmlPageMarkupSavingInfo)">
      Invoked method @param htmlSavingInfo SaveOptions.ResourceSavingInfo object
      <param name="HtmlSaveOptions.HtmlPageMarkupSavingInfo"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.HtmlPageMarkupSavingStrategy.beginInvoke(HtmlSaveOptions.HtmlPageMarkupSavingInfo,AsyncCallback,Object)">
      Internal beginInvoke method @param htmlSavingInfo SaveOptions.ResourceSavingInfo object @param callback AsyncCallback object @param state state object @return IAsyncResult object
      <param name="HtmlSaveOptions.HtmlPageMarkupSavingInfo"/>
      <param name="AsyncCallback"/>
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.HtmlPageMarkupSavingStrategy.endInvoke(IAsyncResult)">
      Internal endInvoke method @param result IAsyncResult object
      <param name="IAsyncResult"/>
    </member>
    <member name="T:com.aspose.pdf.HtmlSaveOptions.CssSavingStrategy">
       
        <p>You can assign to this property custom strategy that implements processing or/and saving of one CSS's part that was created during conversion of PDF to HTML . In such case processing (like saving to stream or disk) must be done in that custom code</p> 
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.CssSavingStrategy.invoke(HtmlSaveOptions.CssSavingInfo)">
      <param name="HtmlSaveOptions.CssSavingInfo"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.CssSavingStrategy.beginInvoke(HtmlSaveOptions.CssSavingInfo,AsyncCallback,Object)">
      <param name="HtmlSaveOptions.CssSavingInfo"/>
      <param name="AsyncCallback"/>
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.CssSavingStrategy.endInvoke(IAsyncResult)">
      <param name="IAsyncResult"/>
    </member>
    <member name="T:com.aspose.pdf.HtmlSaveOptions.CssUrlMakingStrategy">
       
        <p>You can assign to this property delegate created from custom method that implements creation of URL of CSS referenced in generated HTML document. F.e. if You want to make CSS referenced in HTML f.e. as "otherPage.ASPX?CssID=zjjkklj" Then such custom strategy must return "otherPage.ASPX?CssID=zjjkklj"</p> 
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.CssUrlMakingStrategy.invoke(HtmlSaveOptions.CssUrlRequestInfo)">
      <param name="HtmlSaveOptions.CssUrlRequestInfo"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.CssUrlMakingStrategy.beginInvoke(HtmlSaveOptions.CssUrlRequestInfo,AsyncCallback,Object)">
      <param name="HtmlSaveOptions.CssUrlRequestInfo"/>
      <param name="AsyncCallback"/>
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.CssUrlMakingStrategy.endInvoke(IAsyncResult)">
      @param result IAsyncResult object @return String object
      <param name="IAsyncResult"/>
    </member>
    <member name="T:com.aspose.pdf.HtmlSaveOptions.HtmlImageType">
       
        <p>enumerates possible types of image files that can be saved as external resources during Pdf to Html conversion</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.HtmlImageType.Jpeg">
       
        <p>Jpeg format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.HtmlImageType.Png">
       
        <p>Png format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.HtmlImageType.Bmp">
       
        <p>Bmp format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.HtmlImageType.Gif">
       
        <p>Gif format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.HtmlImageType.Tiff">
       
        <p>Tiff format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.HtmlImageType.Svg">
       
        <p>Svg format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.HtmlImageType.ZippedSvg">
       
        <p>Zipped Svg format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.HtmlImageType.Unknown">
       
        <p>Unknown - means that converter cannot detect type of content itself</p> 
      
    </member>
    <member name="T:com.aspose.pdf.HtmlSaveOptions.ImageParentTypes">
       
        <p>Enumerates possible types of image's parents Image can pertain to HTML page or to SVG parent image</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.ImageParentTypes.HtmlPage">
       
        <p>Image pertains to HTML page itself</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.ImageParentTypes.SvgImage">
       
        <p>Image was embedded in SVG image</p> 
      
    </member>
    <member name="T:com.aspose.pdf.HtmlSaveOptions.RasterImagesSavingModes">
       
        <p>Converted PDF can contain raster images(.png, *.jpeg etc.) This enum defines methods of how raster images can be handled during conversion of PDF to HTML</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.RasterImagesSavingModes.AsPngImagesEmbeddedIntoSvg">
       
        <p>for each distinct raster file will be generated wrapper SVG image, and raster image will be embedded as Base64 encoded strings into that SVG image</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.RasterImagesSavingModes.AsExternalPngFilesReferencedViaSvg">
       
        <p>distinct raster images will be put apart as PNG files but will be referenced through wrapping SVG images, i.e. will be generated one PNG file and one SVG for each raster image, and each of such SVGs will contain links to relevant PNG file</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.RasterImagesSavingModes.AsEmbeddedPartsOfPngPageBackground">
       
        <p>Will be generated one big PNG background file for each result page. Raster images will be embedded into that file and rendered as regions of that image. No external PNG files for each image will be generated, only one PNG file per page will be present in conversion result set of files.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.HtmlSaveOptions.HtmlMarkupGenerationModes">
       
        <p>Sometimes specific reqirments to created HTML are present. This enum defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.HtmlMarkupGenerationModes.WriteAllHtml">
       
        <p>Default mode any specific requirments are absent. Will be generated output that will contain all parts of HTML without any special additional processing.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.HtmlMarkupGenerationModes.WriteOnlyBodyContent">
       
        <p>will be stripped away all HTML content that is outside HTML's body, i.e. will be left only content that is inside {@code
          <body/>} tags
        </p> 
      
    </member>
    <member name="T:com.aspose.pdf.HtmlSaveOptions.PartsEmbeddingModes">
       
        <p>This enum enumerates possible modes of embedding of files referenced in HTML It allows to control whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.PartsEmbeddingModes.EmbedAllIntoHtml">
       
        <p>Enforces embed all referenced files(Css,Images,Fonts) into generated HTML markup (i.e. into HTML itself) This approach generates one HTML file, but total size of output becames bigger(because Base64 encoding of binaries is in use) and not all browsers (especially legacy) successfully process binaries embedded into HTML. But it allows get HTML that contains whole result, without any additional files.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.PartsEmbeddingModes.EmbedCssOnly">
       
        <p>Enforces put apart all referenced files except CSS (Images and Fonts) I.e. CSS will be embedded into result HTML , and all other referenced files(Images and Fonts) will be processed as external parts It generates HTML that is sutable for wide set of browsers</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.PartsEmbeddingModes.NoEmbedding">
       
        <p>Enforces put apart referenced files(Css,Images,Fonts) This approach generates set of files, but total size of output becames smaller(because no Base64 encoding of binaries is in use) Also such approach generates HTML that is sutable for wide set of browsers</p> 
      
    </member>
    <member name="T:com.aspose.pdf.HtmlSaveOptions.FontEncodingRules">
       
        <p>This enumeration defines rules which tune encoding logic</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.FontEncodingRules.Default">
       
        <p>Leave encoding logic "as is" - in accordance with PDF specification</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.FontEncodingRules.DecreaseToUnicodePriorityLevel">
       
        <p>ToUnicode is a special mechanism which helps to decode input codes to unicode symbols. According to specification it must be used first of all mechanisms to get unicode symbols for specific input code. But some documents has non-standard fonts and to convert these documents correctly it may be necessary to decrease ToUnicode priority and use another mechanisms to decode input codes.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Hyperlink">
      Represents abstract hyperlink.
    </member>
    <member name="M:com.aspose.pdf.Hyperlink.setLinkElement(LinkElement)">
      <param name="LinkElement"/>
    </member>
    <member name="T:com.aspose.pdf.IAnnotationVisitor">
       
        <p>Defines Visitor for visiting different document annotations.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.IAppointment">
       
        <p>Represents general interface for actions and destinations.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.IAppointment.toString">
       
        <p>Returns string representation</p> @return String representation
      
    </member>
    <member name="T:com.aspose.pdf.IColorSpaceConversionStrategy">
       
        <p>Interface for color space conversion strategies.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.IconCaptionPosition">
       
        <p>Describes position of icon.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.IconCaptionPosition.NoIcon">
       
        <p>Icon is not displayed.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.IconCaptionPosition.NoCaption">
       
        <p>Caption is not displayed.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.IconCaptionPosition.CaptionBelowIcon">
       
        <p>Caption is below icon.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.IconCaptionPosition.CaptionAboveIcon">
       
        <p>Caption is above icon.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.IconCaptionPosition.CaptionToTheRight">
       
        <p>Caption to the right.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.IconCaptionPosition.CaptionToTheLeft">
       
        <p>Caption to the left.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.IconCaptionPosition.CaptionOverlaid">
       
        <p>Caption over laid.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.IconFit">
       
        <p>Describes how the widget annotation's icon shall be displayed within its annotation rectangle.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.IconFit.getScalingReason">
       
        <p>Gets scaling reason.</p> @return ScalingReason value @see ScalingReason
      
    </member>
    <member name="M:com.aspose.pdf.IconFit.setScalingReason(int)">
       
        <p>Sets scaling reason.</p> @param value ScalingReason value @see ScalingReason
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.IconFit.getScalingMode">
       
        <p>The type of scaling that shall be used.</p> @return ScalingMode value @see ScalingMode
      
    </member>
    <member name="M:com.aspose.pdf.IconFit.setScalingMode(int)">
       
        <p>The type of scaling that shall be used.</p> @param value ScalingMode value @see ScalingMode
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.IconFit.getLeftoverLeft">
       
        <p>Gets space to allocate at the left of the icon.</p> @return space to allocate at the left of the icon.
      
    </member>
    <member name="M:com.aspose.pdf.IconFit.setLeftoverLeft(double)">
       
        <p>Sets space to allocate at the left of the icon.</p> @param value space to allocate at the left of the icon.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.IconFit.getLeftoverBottom">
       
        <p>Gets space to allocate at the bottom of the icon.</p> @return space to allocate at the bottom
      
    </member>
    <member name="M:com.aspose.pdf.IconFit.setLeftoverBottom(double)">
       
        <p>Sets space to allocate at the bottom of the icon.</p> @param value space to allocate at the bottom
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.IconFit.isSpreadOnBorder">
       
        <p>If true, indicates that the button appearance shall be scaled to fit fully within the bounds of the annotation without taking into consideration the line width of the border.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.IconFit.setSpreadOnBorder(boolean)">
       
        <p>If true, indicates that the button appearance shall be scaled to fit fully within the bounds of the annotation without taking into consideration the line width of the border.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.IconFit.nameToScalingReason(String)">
       
        <p>Converts name of scaling reason into ScalingReason object.</p> @return Scaling reason object. @param reason Name of scaling reason.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.IconFit.scalingReasonToName(int)">
       
        <p>Converts scaling reason obejct to name.</p> @return Name of scaling reasong. @param reason Scaling reason object to be converted.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.IconFit.nameToScalingMode(String)">
       
        <p>Converts scaling mode name into ScalingMode object.</p> @return Scaling mode object. @param mode Scaling mode name.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.IconFit.scalingModeToName(int)">
       
        <p>Converts scaling mode object into name.</p> @return Scaling mode name. @param mode Scaling mode object.
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.Id">&lt;p&gt; Represents file identifier structure. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Document doc = new Document("example.pdf"); String original = doc.getId().getOriginal(); String modified = doc.getId().getModified(); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.Id.getOriginal">
       
        <p>Permanent identifier based on the contents of the document at the time it was originally created.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.Id.getModified">
       
        <p>Changing identifier based on the document's contents at the time it was last updated.</p> @return String value
      
    </member>
    <member name="T:com.aspose.pdf.IDocument">
       
        <p>interface representing PDF document</p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.saveIncrementally(Stream)">
      Saves incrementally the PDF Document to the specified stream. @param output OutputStream object
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.convertWithSkippingErrors(Document.CallBackGetHocr)">
      Convert document to searchable document and skip errors of hochr that can not be converted. @param callback The call back procedure for hocr recognize. @return boolean value
      <param name="Document.CallBackGetHocr"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.isManualDisposeEnabled">
      By default method save close internal streams and release memory resources. We can do some operations and continue work with the document after method save if this ManualDispose parameter is enabled. @return boolean value. (Default value == false)
    </member>
    <member name="M:com.aspose.pdf.IDocument.setManualDisposeEnabled(boolean)">
      By default method save closes internal streams and release memory resources. We can do some operations and continue work with the document after method save is called if this ManualDispose parameter is enabled. But it is strongly recommended to call the dispose method when the Document instance is no longer needed. @param manualDisposeEnabled boolean value. (Default value == false)
      <param name="boolean"/>
    </member>
    <member name="T:com.aspose.pdf.IFontOptions">
       
        <p>Useful properties to tune Font behavior</p> 
      
    </member>
    <member name="T:com.aspose.pdf.IIndexBitmapConverter">
       
        <p>This interface declared for customization algorithms of quantization. Users can implement their own realization of this algorithms (for example algorithms based on unmanaged code).</p> 
      
    </member>
    <member name="T:com.aspose.pdf.IIndexBitmapConverterInternal">
       
        <p>This interface declared for customization algorithms of quantization. Users can implement their own realization of this algorithms (for example algorithms based on unmanaged code).</p> 
      
    </member>
    <member name="T:com.aspose.pdf.ILicenseProvider"/>
    <member name="T:com.aspose.pdf.Image">
      Represents image.
    </member>
    <member name="M:com.aspose.pdf.Image.getFile">
       
        <p>Gets the image file.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.Image.setFile(String)">
       
        <p>Sets the image file.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Image.getFixWidth">
       
        <p>Gets the image width.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Image.setFixWidth(double)">
       
        <p>Sets the image width.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Image.getFixHeight">
       
        <p>Gets the image height.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Image.setFixHeight(double)">
       
        <p>Sets the image height.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Image.getFileType">
       
        <p>Gets the image file type.</p> @return int value @see ImageFileType
      
    </member>
    <member name="M:com.aspose.pdf.Image.setFileType(int)">
       
        <p>Sets the image file type.</p> @param value int value @see ImageFileType
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Image.getImageScale">
       
        <p>Gets the image scale.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Image.setImageScale(double)">
       
        <p>Sets the image scale.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Image.getImageStream">
       
        <p>Gets the image stream.</p> @return InputStream object
      
    </member>
    <member name="M:com.aspose.pdf.Image.setImageStream(InputStream)">
       
        <p>Sets the image stream.</p> @param value InputStream value
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.Image.isApplyResolution">
       
        <p>Gets or sets a boolean value that indicates whether the image use resolution during generation</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Image.setApplyResolution(boolean)">
       
        <p>Gets or sets a boolean value that indicates whether the image use resolution during generation</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Image.isBlackWhite">
       
        <p>Gets a boolean value that indicates whether the image is forced to be black-and-white. If TIFF image of CCITT subformat is used, this property must be set to true.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Image.setBlackWhite(boolean)">
       
        <p>Sets a boolean value that indicates whether the image is forced to be black-and-white. If TIFF image of CCITT subformat is used, this property must be set to true.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Image.getTitle">
       
        <p>Gets a string value that indicates the title of the image.</p> @return TextFragment value
      
    </member>
    <member name="M:com.aspose.pdf.Image.setTitle(TextFragment)">
       
        <p>Sets a string value that indicates the title of the image.</p> @param value TextFragment value
      
      <param name="TextFragment"/>
    </member>
    <member name="M:com.aspose.pdf.Image.convertToJpeg(InputStream)">
      Try to convert to stream with bmp/png/gif/tiff image to stream with JPG format image. @param value InputStream instance @return InputStream instance
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.Image.deepClone">
       
        <p>Clone the image.</p> @return The cloned object
      
    </member>
    <member name="M:com.aspose.pdf.Image.setBufferedImage(BufferedImage)">
       
        <p>Sets the java awt image.</p> @param value BufferedImage object
      
      <param name="BufferedImage"/>
    </member>
    <member name="M:com.aspose.pdf.Image.getBufferedImage">
       
        <p>Gets the java awt image.</p> @return BufferedImage object
      
    </member>
    <member name="M:com.aspose.pdf.Image.setBlackWhiteForGrayScale(boolean)">
      Try to detect and use 1bpp encoding for grayscale images. Default value == FALSE @param blackWhiteForGrayScale boolean value
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Image.isBlackWhiteForGrayScale">
      Try to detect and use 1bpp encoding for grayscale images Default value == FALSE @return boolean value
    </member>
    <member name="M:com.aspose.pdf.Image.#ctor">
      default constructor
    </member>
    <member name="T:com.aspose.pdf.ImageDeleteAction">
       
        <p>Action which performed with image object when image is removed from collection. If image object is removed</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ImageDeleteAction.KeepContents">
       
        <p>Image will be removed from the collection. If page contents contains references to the image they will not be removed. Document may became invalid.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ImageDeleteAction.None">
       
        <p>Image will be removed from the collection and from page contents, but image object will not be deleted. File size will not be decreased.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ImageDeleteAction.ForceDelete">
       
        <p>Image will be removed from the collection and image object will be removed from the document. If other references on the same object exist the document may be corrupted.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ImageDeleteAction.Check">
       
        <p>Image will be removed from the collection and image object will be removed only if no other references to the image from other pages. This may require more time in comparison with ForceDelete option.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.ImageFileType">
       
        <p>Enumerates the image file types.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ImageFileType.Unknown">
       
        <p>Unknown type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ImageFileType.Svg">
       
        <p>svg image file type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ImageFileType.Dicom">
       
        <p>Dicom image file type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ImageFileType.Base64">
       
        <p>Base64 image file type.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.ImageFilterType">
       
        <p>Enumeration representing image filter type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ImageFilterType.Jpeg2000">
      Jpeg2000 filter
    </member>
    <member name="F:com.aspose.pdf.ImageFilterType.Jpeg">
      Jpeg filter
    </member>
    <member name="F:com.aspose.pdf.ImageFilterType.Flate">
      Flate filter
    </member>
    <member name="F:com.aspose.pdf.ImageFilterType.CCITTFax">
      CCITTFax filter
    </member>
    <member name="T:com.aspose.pdf.ImageFormat">
       
        <p>This enum represents image formats.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ImageFormat.Bmp">
       
        <p>BMP format.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ImageFormat.Jpeg">
       
        <p>JPEG format.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ImageFormat.Gif">
       
        <p>GIF format.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ImageFormat.Png">
       
        <p>PNG format.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ImageFormat.Tiff">
       
        <p>TIFF format.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ImageFormat.Emf">
       
        <p>EMF format.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.ImagePlacement">&lt;p&gt; Represents characteristics of an image placed to Pdf document page. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to find images on the first PDF document page and get images as bitmaps with visible dimensions. // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create ImagePlacementAbsorber object to perform image placement search ImagePlacementAbsorber abs = new ImagePlacementAbsorber(); // Accept the absorber for first page doc.getPages().get_Item(1).accept(abs); // Retrieve images with visible dimensions for (ImagePlacement imagePlacement : {@code (Iterable&lt;ImagePlacement&gt;)}abs.getImagePlacements()) { BufferedImage scaledImage; ByteArrayOutputStream imageStream = new ByteArrayOutputStream()) // Retrieve image from resources imagePlacement.getImage().save(imageStream, ImageFormatInternal.Png); BufferedImage resourceImage = (BufferedImage) ImageIO.read(imageStream); // Create new bitmap with actual dimensions scaledImage = new BufferedImage(resourceImage, (int)imagePlacement.getRectangle().getWidth(), (int)imagePlacement.getRectangle().getHeight()); } &lt;/pre&gt; &lt;hr&gt; &lt;p&gt; When an image is placed to a page it may have dimensions other than physical dimensions defined in {@code Resources}. The object {@code ImagePlacement} is intended to provide such information like dimensions, resolution and so on. &lt;/p&gt;</member>
    <member name="M:com.aspose.pdf.ImagePlacement.getMatrix">
       
        <p>Current transformation matrix for this image.</p> @return Matrix object
      
    </member>
    <member name="M:com.aspose.pdf.ImagePlacement.getRectangle">
       
        <p>Gets rectangle of the Image.</p> @return Rectangle object
      
    </member>
    <member name="M:com.aspose.pdf.ImagePlacement.getOperator">
       
        <p>Operator used for displaying the image.</p> @return Operator instance
      
    </member>
    <member name="M:com.aspose.pdf.ImagePlacement.hide">
       
        <p>Delete image from the page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ImagePlacement.getRotation">
       
        <p>Gets rotation angle of the Image.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.ImagePlacement.getResolution">
       
        <p>Gets resolution of the Image.</p> @return Resolution object
      
    </member>
    <member name="M:com.aspose.pdf.ImagePlacement.getImage">
       
        <p>Gets related XImage resource object.</p> @return XImage object
      
    </member>
    <member name="M:com.aspose.pdf.ImagePlacement.getPage">
       
        <p>Gets the page containing the image.</p> @return Page object
      
    </member>
    <member name="M:com.aspose.pdf.ImagePlacement.getCompositingParameters">
       
        <p>Gets compositing parameters of graphics state active for the image placed to the page.</p> @return CompositingParameters object
      
    </member>
    <member name="M:com.aspose.pdf.ImagePlacement.replace(InputStream)">
       
        <p>Replace image in collection with another image.</p> @param image Stream containing image data.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.ImagePlacement.save(OutputStream)">
       
        <p>Saves image with corresponding transformations: scaling, rotation and resolution.</p> @param outputStream Stream where image will be saved
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.ImagePlacement.save(OutputStream,ImageType)">
       
        <p>Saves image with corresponding transformations: scaling, rotation and resolution.</p> @param outputStream Stream where image will be saved @param format Format which will be used for image enconding. {@code ImageFormat}
      
      <param name="OutputStream"/>
      <param name="ImageType"/>
    </member>
    <member name="T:com.aspose.pdf.ImagePlacementAbsorber">&lt;p&gt; Represents an absorber object of image placement objects. Performs search of image usages and provides access to search results via {@code ImagePlacementAbsorber.ImagePlacements} collection. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to find images on the first PDF document page and get the image placement properties. // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create ImagePlacementAbsorber object to perform image placement search ImagePlacementAbsorber abs = new ImagePlacementAbsorber(); // Accept the absorber for first page doc.getPages().get_Item(1).accept(abs); // Display image placement properties for all placements for (ImagePlacement imagePlacement : {@code (Iterable&lt;ImagePlacement&gt;)}abs.getImagePlacements()) { System.out.println("image width:" + imagePlacement.getRectangle().getWidth()); System.out.println("image height:" + imagePlacement.getRectangle().getHeight()); System.out.println("image LLX:" + imagePlacement.getRectangle(0).getX()); System.out.println("image LLY:" + imagePlacement.getRectangle.getY()); System.out.println("image horizontal resolution:" + imagePlacement.getResolution().getX()); System.out.println("image vertical resolution:" + imagePlacement.getResolution().getY()); } &lt;/pre&gt; &lt;hr&gt; &lt;p&gt; The {@code ImagePlacementAbsorber} object is basically used in images search scenario. When the search is completed the occurrences are represented with {@code ImagePlacement} objects that the {@code ImagePlacementAbsorber.ImagePlacements} collection contains. The {@code ImagePlacement} object provides access to the image placement properties: dimensions, resolution etc. &lt;/p&gt;</member>
    <member name="M:com.aspose.pdf.ImagePlacementAbsorber.isReadOnlyMode">
       
        <p>Gets/sets read only mode for parsing operations collection. It may help against out of memory exceptions.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.ImagePlacementAbsorber.setReadOnlyMode(boolean)">
       
        <p>Gets/sets read only mode for parsing operations collection. It may help against out of memory exceptions.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.ImagePlacementAbsorber.getImagePlacements">
       
        <p>Gets collection of image placement occurrences that are presented with {@code ImagePlacement} objects.</p> @return ImagePlacementCollection object
      
    </member>
    <member name="M:com.aspose.pdf.ImagePlacementAbsorber.visit(Page)">
       
        <p>Performs search on the specified page.</p> @param page Pdf pocument page object.
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.ImagePlacementAbsorber.visit(IDocument)">
       
        <p>Performs search on the specified document.</p> @param pdf Pdf pocument object.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.ImagePlacementAbsorber.#ctor">
       
        <p>Initializes new instance of the {@code ImagePlacementAbsorber} object.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.ImagePlacementCollection">
       
        <p>Represents an image placements collection</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ImagePlacementCollection.size">
       
        <p>Gets the number of {@code ImagePlacement} object elements actually contained in the collection.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.ImagePlacementCollection.getSyncRoot">
       
        <p>Gets an object that can be used to synchronize access to the collection.</p> @return Object for synchronization
      
    </member>
    <member name="M:com.aspose.pdf.ImagePlacementCollection.isSynchronized">
       
        <p>Gets a value indicating whether access to the collection is synchronized (thread safe).</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.ImagePlacementCollection.isReadOnly">
       
        <p>Gets a value indicating whether the collection is read-only.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.ImagePlacementCollection.add(ImagePlacement)">
       
        <p>Adds the text fragment element at the specified index.</p> @param fragment fragment Text fragment element to add. ImagePlacement instance
      
      <param name="ImagePlacement"/>
    </member>
    <member name="M:com.aspose.pdf.ImagePlacementCollection.iterator">
       
        <p>Returns an enumerator for the entire collection.</p> @return Enumerator object.
      
    </member>
    <member name="M:com.aspose.pdf.ImagePlacementCollection.copyTo(ImagePlacement[],int)">
       
        <p>Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array</p> @param array Array of objects which will be copied. @param index Starting index from which copying will be started.
      
      <param name="ImagePlacement[]"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.ImagePlacementCollection.clear">
       
        <p>Clears all items from the collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ImagePlacementCollection.contains(ImagePlacement)">
       
        <p>Determines whether the collection contains a specific value.</p> @param item The object to locate in the collection @return true if item is found in the collection; otherwise, false.
      
      <param name="ImagePlacement"/>
    </member>
    <member name="M:com.aspose.pdf.ImagePlacementCollection.remove(ImagePlacement)">
       
        <p>Deletes specified item from collection</p> @param item Item to delete @return true if item was deleted; otherwise, false.
      
      <param name="ImagePlacement"/>
    </member>
    <member name="M:com.aspose.pdf.ImagePlacementCollection.get_Item(int)">
       
        <p>Gets the text fragment element at the specified index.</p> @param index Index of image placement. @return ImagePlacement object.
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.ImageStamp">
       
        <p>Reresents graphic stamp.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ImageStamp.getImage">
       
        <p>Gets image stream used for stamping.</p> @return InputStream object
      
    </member>
    <member name="M:com.aspose.pdf.ImageStamp.getWidth">
       
        <p>Gets image width. Setting this property allos to scal image horizontally.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.ImageStamp.setWidth(double)">
       
        <p>Sets image width. Setting this property allos to scal image horizontally.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.ImageStamp.getHeight">
       
        <p>Gets image height. Setting this image allows to scale image vertically.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.ImageStamp.setHeight(double)">
       
        <p>Sets image height. Setting this image allows to scale image vertically.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.ImageStamp.getQuality">
       
        <p>Gets quality of image stamp in percent. Valid values are 0..100%.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.ImageStamp.setQuality(int)">
       
        <p>Sets quality of image stamp in percent. Valid values are 0..100%.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.ImageStamp.put(Page)">
       
        <p>Adds graphic stamp on the page.</p> @param page Page for stamping.
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.ImageStamp.close">
      Closes this instance
    </member>
    <member name="M:com.aspose.pdf.ImageStamp.#ctor(InputStream)">
       
        <p>Initializes a new instance of the {@code ImageStamp} class.</p> @param image Stream which contains image data.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.ImageStamp.#ctor(String)">
       
        <p>Creates image stamp by image in the specified file.</p> @param fileName Name of the file which contains image.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.ImageType">
      Represents image format types.
    </member>
    <member name="M:com.aspose.pdf.ImageType.getBmp">
      Image format for Bmp image @return ImageType object
    </member>
    <member name="M:com.aspose.pdf.ImageType.getEmf">
      Image format for Emf image @return ImageType object
    </member>
    <member name="M:com.aspose.pdf.ImageType.getExif">
      Image format for Exif image @return ImageType object
    </member>
    <member name="M:com.aspose.pdf.ImageType.getGif">
      Image format for Gif image @return ImageType object
    </member>
    <member name="M:com.aspose.pdf.ImageType.getJpeg">
      Image format for Jpeg image @return ImageType object
    </member>
    <member name="M:com.aspose.pdf.ImageType.getIcon">
      Image format for Icon image @return ImageType object
    </member>
    <member name="M:com.aspose.pdf.ImageType.getMemoryBmp">
      Image format for Bmp image @return ImageType object
    </member>
    <member name="M:com.aspose.pdf.ImageType.getPng">
      Image format for Png image @return ImageType object
    </member>
    <member name="M:com.aspose.pdf.ImageType.getTiff">
      Image format for Tiff image @return ImageType object
    </member>
    <member name="M:com.aspose.pdf.ImageType.getWmf">
      Image format for Wmf image @return ImageType object
    </member>
    <member name="M:com.aspose.pdf.ImageType.toString(ImageType)">
      ImageType name @param imgFormat ImageType object @return string object
      <param name="ImageType"/>
    </member>
    <member name="M:com.aspose.pdf.ImageType.toString">
      ImageType name for this object @return String object
    </member>
    <member name="M:com.aspose.pdf.ImageType.isBitmapType(ImageType)">
      Return true if isBitmapType @param imgFormat Image type object @return boolean value
      <param name="ImageType"/>
    </member>
    <member name="M:com.aspose.pdf.ImageType.isMetafileType(ImageType)">
      Return true if isMetafileType @param imgFormat Image type object @return boolean value
      <param name="ImageType"/>
    </member>
    <member name="M:com.aspose.pdf.ImageType.isUnknownType(ImageType)">
      Return true if isUnknownType @param imgFormat Image type object @return boolean value
      <param name="ImageType"/>
    </member>
    <member name="M:com.aspose.pdf.ImageType.getNames">
      Array of Paper format names @return String[] object
    </member>
    <member name="T:com.aspose.pdf.ImportDataAction">
       
        <p>Upon invocation of an import-data action, Forms Data Format (FDF) data shall be imported into the document’s interactive form from a specified file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ImportDataAction.getData">
       
        <p>The FDF file from which to import the data.</p> @return FileSpecification instance
      
    </member>
    <member name="M:com.aspose.pdf.ImportDataAction.setData(FileSpecification)">
       
        <p>The FDF file from which to import the data.</p> @param value FileSpecification instance
      
      <param name="FileSpecification"/>
    </member>
    <member name="T:com.aspose.pdf.ImportFormat">
       
        <p>Specifies import format.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ImportFormat.Cgm">
       
        <p>Computer Graphics Metafile format.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.ImportOptions">
       
        <p>ImportOptions type hold level of abstraction on individual import options.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ImportOptions.getImportFormat">
       
        <p>Import format.</p> @return ImportFormat element @see ImportFormat
      
    </member>
    <member name="T:com.aspose.pdf.InkAnnotation">
       
        <p>Represents a freehand "scribble" composed of one or more disjoint paths.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.InkAnnotation.getCapStyle">
       
        <p>get style of ink annotation line endings.</p> @return CapStyle element @see CapStyle
      
    </member>
    <member name="M:com.aspose.pdf.InkAnnotation.setCapStyle(int)">
       
        <p>Set style of ink annotation line endings.</p> @param value CapStyle element @see CapStyle
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.InkAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor object to process the annotation.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.InkAnnotation.getInkList">&lt;p&gt; Gets list of gestures that are independent lines which are represented by Point[] arrays. &lt;/p&gt; @return {@code List&lt;Point[]&gt;} object</member>
    <member name="M:com.aspose.pdf.InkAnnotation.setInkList(List&lt;Point[]&gt;)">&lt;p&gt; Sets list of gestures that are independent lines which are represented by Point[] arrays. &lt;/p&gt; @param value {@code List&lt;Point[]&gt;} object 
      <param name="List&lt;Point[]&gt;"/>
    </member>
    <member name="M:com.aspose.pdf.InkAnnotation.getAnnotationType">
       
        <p>Gets type of annotation.</p> @return AnnotationType element @see AnnotationType
      
    </member>
    <member name="M:com.aspose.pdf.InkAnnotation.#ctor(IDocument,List&lt;Point[]&gt;)">
      Constructor for Ink annotation for Generator. @param document Document where ink annotation will be created. @param inkList An array of Point[] arrays, each representing a stroked path.
      <param name="IDocument"/>
      <param name="List&lt;Point[]&gt;"/>
    </member>
    <member name="M:com.aspose.pdf.InkAnnotation.#ctor(Page,Rectangle,List&lt;Point[]&gt;)">
       
        <p>Creates new Ink annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page. @param inkList An array of Point[] arrays, each representing a stroked path.
      
      <param name="Page"/>
      <param name="Rectangle"/>
      <param name="List&lt;Point[]&gt;"/>
    </member>
    <member name="T:com.aspose.pdf.InternalPageGenerator"/>
    <member name="M:com.aspose.pdf.InternalPageGenerator.getParagraphs"/>
    <member name="M:com.aspose.pdf.InternalPageGenerator.#ctor(PageGenerator)">
      <param name="PageGenerator"/>
    </member>
    <member name="T:com.aspose.pdf.InvalidFormTypeOperationException">
       
        <p>The exception that is thrown when an operation with form type is not valid.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.InvalidFormTypeOperationException.#ctor">
       
        <p>Initializes a new instance of the {@code InvalidFormTypeOperationException} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.InvalidFormTypeOperationException.#ctor(String)">
       
        <p>Initializes a new instance of the {@code InvalidFormTypeOperationException} class.</p> @param message The message.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.InvalidFormTypeOperationException.#ctor(String,Exception)">
       
        <p>Initializes a new instance of the {@code InvalidFormTypeOperationException} class with a specified error message and a reference to the inner exception that is the cause of this exception.</p> @param message The error message that explains the reason for the exception. @param innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.
      
      <param name="String"/>
      <param name="Exception"/>
    </member>
    <member name="M:com.aspose.pdf.InvalidFormTypeOperationException.#ctor(Exception)">
       
        <p>Initializes a new instance of the {@code InvalidFormTypeOperationException} class with a specified error message and a reference to the inner exception that is the cause of this exception.</p> @param innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.
      
      <param name="Exception"/>
    </member>
    <member name="T:com.aspose.pdf.IOperatorSelector">
       
        <p>Defines Visitor for visiting different pdf operators.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.IPageSetOptions">
       
        <p>Defines conversion options related to a set of pages to convert.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.IPageSetOptions.getExplicitListOfSavedPages">
       
        <p>Specifies the array of numbers of pages to convert.</p> @return int array
      
    </member>
    <member name="M:com.aspose.pdf.IPageSetOptions.setExplicitListOfSavedPages(int[])">
       
        <p>Specifies the array of numbers of pages to convert.</p> @param value int array
      
      <param name="int[]"/>
    </member>
    <member name="T:com.aspose.pdf.IPipelineOptions">
       
        <p>Defines conversion options related to pipeline configuration.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.IPipelineOptions.getBatchSize">
       
        <p>Specifies the size of a portion of pages to pass from node to node.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.IPipelineOptions.setBatchSize(int)">
       
        <p>Specifies the size of a portion of pages to pass from node to node.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.IResourceLoadingCallback">
       
        <p>Resource loading callback.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.ITableElement">
       
        <p>This interface represents an element of existing table extracted by TableAbsorber.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.JavascriptAction">
       
        <p>Class representing javascript action.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.JavascriptAction.getScript">
       
        <p>Gets javascript code.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.JavascriptAction.setScript(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.JavascriptAction.#ctor(String)">
       
        <p>Creates PDF dictionary which describes action.</p>  
        <p>Constructor.</p> @param javaScript JavaScript code.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.JavaScriptCollection">
       
        <p>This class represents collection of JavaScript.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.JavaScriptCollection.getKeys">&lt;p&gt; List of keys in JavaScript collection. &lt;/p&gt; @return {@code List&lt;String&gt; collection }</member>
    <member name="M:com.aspose.pdf.JavaScriptCollection.get_Item(String)">
       
        <p>Gets JavaScript from collection by its key.</p> @return String object Javascript collection. @param key String object Key value.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.JavaScriptCollection.set_Item(String,String)">
       
        <p>Sets JavaScript from collection by its key.</p> @param key String object Javascript collection. @param value String object Key value.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.JavaScriptCollection.remove(String)">
       
        <p>Removes JavaScript by its name.</p> @param key String object Key value. @return boolean value True - if javascript removed; otherwise, false.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.Justification">
       
        <p>Enumerates the forms of quadding (justification) to be used in displaying the annotation's text.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Justification.Left">
       
        <p>Left justification.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Justification.Center">
       
        <p>Center justification.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Justification.Right">
       
        <p>Right justification.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.LatexFragment">
       
        <p>Represents TeX fragment.</p> @deprecated Please use TeXFragment instead
      
    </member>
    <member name="M:com.aspose.pdf.LatexFragment.#ctor(String)">
       
        <p>Initializes a new instance of the HtmlFragment class.</p> @param text The fragment text
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.LatexFragment.#ctor(String,boolean)">
       
        <p>Initializes a new instance of the HtmlFragment class.</p> @param text The fragment text @param removeIndents Determines whether not to make indents while typesetting LaTeX fragment
      
      <param name="String"/>
      <param name="boolean"/>
    </member>
    <member name="T:com.aspose.pdf.LatexLoadOptions">
       
        <p>Represents options for loading/importing TeX file into PDF document.</p> @deprecated Use TeXLoadOptions instead.
      
    </member>
    <member name="T:com.aspose.pdf.LaTeXSaveOptions">
       
        <p>Save options for export to TeX format.</p> @deprecated Use TeXSaveOptions instead
      
    </member>
    <member name="T:com.aspose.pdf.LaunchAction">
       
        <p>Represents a launch action that launches an application or opens or prints a document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LaunchAction.getFile">
       
        <p>Gets the application to be launched or the document to be opened or printed.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.LaunchAction.setFile(String)">
       
        <p>Sets the application to be launched or the document to be opened or printed.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.LaunchAction.getNewWindow">
       
        <p>Gets a flag specifying whether to open the destination document in a new window (affect PDF documents only).</p> @return ExtendedBoolean element @see ExtendedBoolean
      
    </member>
    <member name="M:com.aspose.pdf.LaunchAction.setNewWindow(int)">
       
        <p>Sets a flag specifying whether to open the destination document in a new window (affect PDF documents only). ExtendedBoolean</p> @param value ExtendedBoolean element @see ExtendedBoolean
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.LaunchAction.#ctor(String)">
       
        <p>Creates a launch action.</p> @param file The file to be launched.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.LaunchAction.#ctor(IDocument,String)">
       
        <p>Creates a launch action.</p> @param document Document where action will be created. @param file The file to be launched.
      
      <param name="IDocument"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.LaunchActionOperation">
       
        <p>Enumerates the operations to perform with document during launch action executing.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LaunchActionOperation.Undefined">
       
        <p>Undefined state.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LaunchActionOperation.Open">
       
        <p>Open a document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LaunchActionOperation.Print">
       
        <p>Print a document.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Layer">
       
        <p>Represents page layer.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Layer.getName">
       
        <p>Gets the layer name.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.Layer.getId">
       
        <p>Gets the layer id.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.Layer.getContents">&lt;p&gt; Gets the layer content. &lt;/p&gt; @return {@code List&lt;Operator&gt;} object</member>
    <member name="M:com.aspose.pdf.Layer.#ctor(String,String)">
       
        <p>Initializes a new instance of the {@code Layer} class.</p> @param id The layer id @param name The layer name
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.LettersPositioningMethods">
       
        <p>It enumerates possible modes of positioning of letters in words in result HTML</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LettersPositioningMethods.UseEmUnitsAndCompensationOfRoundingErrorsInCss">
       
        <p>It's default method. It uses EM-units and special algorithm of compensation of rounding errors It's preferable for usage in IE10.0 and more fresh versions and gives better scaling of captions when scaling is necessary</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LettersPositioningMethods.UsePixelUnitsInCssLetterSpacingForIE">
       
        <p>It allows to get sometimes more precise results in old IE browser versions</p> 
      
    </member>
    <member name="T:com.aspose.pdf.LevelFormat">
      Represents format of the table of contents.
    </member>
    <member name="M:com.aspose.pdf.LevelFormat.getLineDash">
       
        <p>Gets or sets TOC line dash.</p> @return TabLeaderType element @see TabLeaderType
      
    </member>
    <member name="M:com.aspose.pdf.LevelFormat.setLineDash(int)">
       
        <p>Gets or sets TOC line dash.</p> @param value TabLeaderType element @see TabLeaderType
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.LevelFormat.getMargin">
       
        <p>Gets a list level margin</p> @return MarginInfo value
      
    </member>
    <member name="M:com.aspose.pdf.LevelFormat.setMargin(MarginInfo)">
       
        <p>Sets a list level margin</p> @param value MarginInfo value
      
      <param name="MarginInfo"/>
    </member>
    <member name="M:com.aspose.pdf.LevelFormat.getSubsequentLinesIndent">
       
        <p>Gets a subsequent lines indent</p> @return subsequent lines indent
      
    </member>
    <member name="M:com.aspose.pdf.LevelFormat.setSubsequentLinesIndent(float)">
       
        <p>Sets a subsequent lines indent</p> @param value subsequent lines indent
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.LevelFormat.getTextState">
      Gets a list level text state @return TextState object
    </member>
    <member name="M:com.aspose.pdf.LevelFormat.setTextState(TextState)">
      Sets a list level text state @param value TextState object
      <param name="TextState"/>
    </member>
    <member name="T:com.aspose.pdf.License">
      Provides methods to license the component. 
        <p>In this example, an attempt will be made to find a license file named MyLicense.lic in the folder that contains the component, in the folder that contains the calling assembly, in the folder of the entry assembly and then in the embedded resources of the calling assembly.</p>  
        <p>License license = new License();
          <br/> license.setLicense("MyLicense.lic");
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.License.isInternalFIPSSecurity">
      By default we using default jdk security. Default value == false. In some cases customized java environment can't support required algorithms, so we can suggest to use internal build-in FIPS security. @return boolean value
    </member>
    <member name="M:com.aspose.pdf.License.setInternalFIPSSecurity(boolean)">By default we are using default jre security. Default value == false. In some cases customized java environment can't support required algorithms, so we can suggest to use internal build-in FIPS security. &lt;p&gt; Notice also: According to JVM SecureRandom algorithm on some operating systems /dev/random waits for a certain amount of “noise” to be generated on the host machine before returning a result. The library used for random number generation in Oracle’s JVM relies on /dev/random by default for UNIX platforms. Although /dev/random is more secure, it’s recommended to use /dev/urandom if the default JVM configuration have delays, or add devices that generate entropy for /dev/random. &lt;p&gt; The following java option can helps to avoid delays and override the securerandom.source setting. -Djava.security.egd=file:/dev/./urandom @param internalFIPSSecurity boolean value 
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.License.setLicense(String)">
       
        <p>Licenses the component.</p>  
        <p>Tries to find the license in the following locations:</p>  
        <p>1. Explicit path.</p>  
        <p>2. The folder of the component jar file.</p>  
        <p>In this example, an attempt will be made to find a license file named MyLicense.lic in the folder that contains the component, in the folder that contains the calling assembly, in the folder of the entry assembly and then in the embedded resources of the calling assembly.</p>  
        <p>License license = new License();
          <br/> license.setLicense("MyLicense.lic");
        </p> @param licenseName Can be a full or short file name or name of an embedded resource Use an empty string to switch to evaluation mode @throws Exception Throws Exception
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.License.setLicense(InputStream)">
       
        <p>Licenses the component.</p>  
        <p>A stream that contains the license.</p>  
        <p>Use this method to load a license from a stream.</p>  
        <p>License license = new License();
          <br/> license.setLicense(myStream);
        </p> @param stream license Stream @throws Exception Throws Exception
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.License.#ctor">
       
        <p>Initializes a new instance of this class.</p>  
        <p>In this example, an attempt will be made to find a license file named MyLicense.lic in the folder that contains the component, in the folder that contains the calling assembly, in the folder of the entry assembly and then in the embedded resources of the calling assembly.</p>  
        <p>License license = new License();
          <br/> license.setLicense("MyLicense.lic");
        </p> 
      
    </member>
    <member name="T:com.aspose.pdf.LightingSchemeType">
       
        <p>Enum LightingSchemeType: set of lighting scheme types.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LightingSchemeType.Artwork">
       
        <p>The "Artwork" lighting scheme.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LightingSchemeType.None">
       
        <p>The "None" lighting scheme.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LightingSchemeType.White">
       
        <p>The "White" lighting scheme.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LightingSchemeType.Day">
       
        <p>The "Day" lighting scheme.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LightingSchemeType.Night">
       
        <p>The "Night" lighting scheme.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LightingSchemeType.Hard">
       
        <p>The "Hard" lighting scheme.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LightingSchemeType.Primary">
       
        <p>The "Primary" lighting scheme.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LightingSchemeType.Blue">
       
        <p>The "Blue" lighting scheme.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LightingSchemeType.Red">
       
        <p>The "Red" lighting scheme.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LightingSchemeType.Cube">
       
        <p>The "Cube" lighting scheme.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LightingSchemeType.CAD">
       
        <p>The "Cad" lighting scheme.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LightingSchemeType.Headlamp">
       
        <p>The "Headlamp" lighting scheme.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.LightweightOperatorCollection">
       
        <p>Lightweight operator collection. Intended to be used in scenarios when underlying contents stream is not attached, where just operator collection is required as a result.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LightweightOperatorCollection.get_Item(int)">&lt;p&gt; Gets operator by its index. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Example demonstrates how to get operator of page contents by index. Document doc = new Document("input.pdf"); OperatorCollection oc = doc.getPages().get_Item(1).getContents(); Operator first = oc.get_Item(1); &lt;/pre&gt; @param index Index of operator. Numbering is starts from 1. @return Operator from requested index 
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.LightweightOperatorCollection.set_Item(int,Operator)">Sets operator by its index. &lt;hr&gt; &lt;pre&gt; Example demonstrates how to get operator of page contents by index. Document doc = new Document("input.pdf"); OperatorCollection oc = doc.getPages().get_Item(1).getContents(); Operator first = oc.get_Item(1); &lt;/pre&gt; @param index Index of operator. Numbering is starts from 1. @param value Operator from requested index 
      <param name="int"/>
      <param name="Operator"/>
    </member>
    <member name="M:com.aspose.pdf.LightweightOperatorCollection.iterator">Return iterator @return {@code IGenericEnumerator&lt;Operator&gt;} object</member>
    <member name="M:com.aspose.pdf.LightweightOperatorCollection.size">
      Operators count @return int value
    </member>
    <member name="M:com.aspose.pdf.LightweightOperatorCollection.isFastTextExtractionMode">
       
        <p>Indicates whether collection is limited to fast text extraction</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.LightweightOperatorCollection.suppressUpdate">
       
        <p>Suppresses update contents data. The contents stream is not updated until ResumeUpdate is called.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LightweightOperatorCollection.resumeUpdate">
       
        <p>Resumes document update. Updates contents stream in case there are any pending changes.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LightweightOperatorCollection.insert(int,Operator)">
      Insert operator @param index int value @param op Operator object
      <param name="int"/>
      <param name="Operator"/>
    </member>
    <member name="M:com.aspose.pdf.LightweightOperatorCollection.add(Operator)">
      Add operator @param op Operator object
      <param name="Operator"/>
    </member>
    <member name="M:com.aspose.pdf.LightweightOperatorCollection.addRange(LightweightOperatorCollection)">
      Add LightweightOperatorCollection @param oc LightweightOperatorCollection instance
      <param name="LightweightOperatorCollection"/>
    </member>
    <member name="M:com.aspose.pdf.LightweightOperatorCollection.getUnrestricted(int)">
      For internal usage getUnrestricted operator @param index int value @return Operator object
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.LightweightOperatorCollection.updateData">
      internal
    </member>
    <member name="M:com.aspose.pdf.LightweightOperatorCollection.deleteUnrestricted(int)">
      internal delete Unrestrictedelement @param index int value
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.LightweightOperatorCollection.cancelUpdate">
       
        <p>Cancels last update. This method may be called when the change should not raise contents update.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LightweightOperatorCollection.toList">
       
        <p>Returns operators list.</p> @return operators list.
      
    </member>
    <member name="M:com.aspose.pdf.LightweightOperatorCollection.remove(Operator)">
      @param item Operator instance @return boolean value
      <param name="Operator"/>
    </member>
    <member name="M:com.aspose.pdf.LightweightOperatorCollection.contains(Operator)">
      @param item Operator instance @return boolean value
      <param name="Operator"/>
    </member>
    <member name="M:com.aspose.pdf.LightweightOperatorCollection.clear">
      
    </member>
    <member name="M:com.aspose.pdf.LightweightOperatorCollection.isReadOnly">
       
        <p>Gets a value indicating whether the collection is read-only.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LightweightOperatorCollection.#ctor">
      Initialize object
    </member>
    <member name="M:com.aspose.pdf.LightweightOperatorCollection.#ctor(ITrailerable,List&lt;Operator&gt;)">
      For internal usage only! @param trailerable Internal object @param operators Internal object
      <param name="ITrailerable"/>
      <param name="List&lt;Operator&gt;"/>
    </member>
    <member name="M:com.aspose.pdf.LightweightOperatorCollection.#ctor(OperatorCollection)">
      Initialize object @param operatorCollection OperatorCollection object
      <param name="OperatorCollection"/>
    </member>
    <member name="T:com.aspose.pdf.LineAnnotation">
       
        <p>Class representing line annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.getStarting">
       
        <p>Gets starting point of line.</p> @return Point value
      
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.setStarting(Point)">
       
        <p>Sets starting point of line.</p> @param value Point value
      
      <param name="Point"/>
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.getStartingStyle">
       
        <p>Gets line ending style for line starting point.</p> @return LineEnding element @see LineEnding
      
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.setStartingStyle(int)">
       
        <p>Sets line ending style for line starting point.</p> @param value LineEnding element @see LineEnding
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.getEnding">
       
        <p>Gets line ending point.</p> @return Point value
      
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.setEnding(Point)">
       
        <p>Sets line ending point.</p> @param value Point value
      
      <param name="Point"/>
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.getEndingStyle">
       
        <p>Gets ending style for end point of line.</p> @return LineEnding element @see LineEnding
      
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.setEndingStyle(int)">
       
        <p>Sets ending style for end point of line.</p> @param value LineEnding element @see LineEnding
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.getInteriorColor">
       
        <p>Gets interior color of the annotation.</p> @return Color object
      
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.setInteriorColor(Color)">
       
        <p>Sets interior color of the annotation.</p> @param value Color object
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.getLeaderLine">
       
        <p>Gets leader line length.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.setLeaderLine(double)">
       
        <p>Sets leader line length.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.getLeaderLineExtension">
       
        <p>Gets length of leader line extension.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.setLeaderLineExtension(double)">
       
        <p>Sets length of leader line extension.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.getShowCaption">
       
        <p>Gets boolean flag which determinies is contents must be shown as caption.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.setShowCaption(boolean)">
       
        <p>Sets boolean flag which determinies is contents must be shown as caption.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.getLeaderLineOffset">
       
        <p>Gets leader line offset.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.setLeaderLineOffset(double)">
       
        <p>Sets leader line offset.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.getCaptionOffset">
       
        <p>Gets caption text offset from its normal position.</p> @return Point object
      
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.setCaptionOffset(Point)">
       
        <p>Sets caption text offset from its normal position.</p> @param value Point object
      
      <param name="Point"/>
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.getCaptionPosition">
       
        <p>Gets annotation caption position.</p> @return CaptionPosition element @see CaptionPosition
      
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.setCaptionPosition(int)">
       
        <p>Sets annotation caption position.</p> @param value CaptionPosition element @see CaptionPosition
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.getMeasure">
       
        <p>Measure units specifed for this annotation.</p> @return Measure object
      
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.setMeasure(Measure)">
       
        <p>Measure units specifed for this annotation.</p> @param value Measure object
      
      <param name="Measure"/>
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor to annotation processing.</p> @param visitor Visitor object
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.getIntent">
       
        <p>Gets the intent of the line annotation.</p> @return LineIntent element @see LineIntent
      
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.setIntent(int)">
       
        <p>Sets the intent of the line annotation.</p> @param value LineIntent element @see LineIntent
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.getAnnotationType">
       
        <p>Gets type of annotation.</p> @return AnnotationType element @see AnnotationType
      
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.#ctor(IDocument,Point,Point)">
       
        <p>Constructor for using with Generator.</p> @param document Document where annotation will be created. @param start Starting point. @param end Ending point.
      
      <param name="IDocument"/>
      <param name="Point"/>
      <param name="Point"/>
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.#ctor(Page,Rectangle,Point,Point)">
       
        <p>Creates new Line annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page. @param start A point, specifying the starting coordinate of the line. @param end A point, specifying the ending coordinate of the line.
      
      <param name="Page"/>
      <param name="Rectangle"/>
      <param name="Point"/>
      <param name="Point"/>
    </member>
    <member name="T:com.aspose.pdf.LineEnding">
       
        <p>Enumerates the line ending styles to be used in drawing the line.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LineEnding.None">
       
        <p>No line ending.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LineEnding.Square">
       
        <p>A square filled with the annotation's interior color, if any.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LineEnding.Circle">
       
        <p>A circle filled with the annotation's interior color, if any.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LineEnding.Diamond">
       
        <p>A diamond shape filled with the annotation's interior color, if any.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LineEnding.OpenArrow">
       
        <p>Two short lines meeting in an acute angle to form an open arrowhead.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LineEnding.ClosedArrow">
       
        <p>Two short lines meeting in an acute angle as in the OpenArrow style and connected by a third line to form a triangular closed arrowhead filled with the annotation's interior color, if any.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LineEnding.Butt">
       
        <p>A short line at the endpoint perpendicular to the line itself.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LineEnding.ROpenArrow">
       
        <p>Two short lines in the reverse direction from OpenArrow.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LineEnding.RClosedArrow">
       
        <p>A triangular closed arrowhead in the reverse direction from ClosedArrow.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LineEnding.Slash">
       
        <p>A short line at the endpoint approximately 30 degrees clockwise from perpendicular to the line itself.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.LineEndingConverter">
      Represents LineEndingConverter class
    </member>
    <member name="M:com.aspose.pdf.LineEndingConverter.toString(int)">
      Get String name for LineEnding element @param value LineEnding element @return String object @see LineEnding
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.LineEndingConverter.toEnum(String)">
      Get LineEnding element for string equivalent @param value String element @return LineEnding object @see LineEnding
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.LineEndingsDrawer">
       
        <p>Draws line endings for annotations. Internal class for internal usage only.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LineEndingsDrawer.draw">
       
        <p>Draws line endings.</p> @return The list of commands that draw line endings.
      
    </member>
    <member name="T:com.aspose.pdf.LineIntent">
       
        <p>Enumerates the intents of the line annotation.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LineIntent.Undefined">
       
        <p>Undefined state.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LineIntent.LineArrow">
       
        <p>Means that the annotation is intended to function as an arrow.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LineIntent.LineDimension">
       
        <p>Means that the annotation is intended to function as a dimension line.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.LinkAnnotation">
       
        <p>Represents either a hypertext link to a destination elsewhere in the document or an action to be performed.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LinkAnnotation.getAction">
       
        <p>Get an action to be performed when the link annotation is activated.</p> @return PdfAction value
      
    </member>
    <member name="M:com.aspose.pdf.LinkAnnotation.setAction(PdfAction)">
       
        <p>Set an action to be performed when the link annotation is activated.</p> @param value PdfAction object
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.LinkAnnotation.getDestination">
       
        <p>Get a destination to be displayed when the annotation is activated.</p> @return IAppointment value
      
    </member>
    <member name="M:com.aspose.pdf.LinkAnnotation.setDestination(IAppointment)">
       
        <p>Set a destination to be displayed when the annotation is activated.</p> @param value IAppointment object
      
      <param name="IAppointment"/>
    </member>
    <member name="M:com.aspose.pdf.LinkAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor object to process the annotation.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.LinkAnnotation.getHighlighting">
       
        <p>Get the visual effect to be used when the mouse button is pressed or held down inside its active area.</p> @return HighlightingMode element @see HighlightingMode
      
    </member>
    <member name="M:com.aspose.pdf.LinkAnnotation.setHighlighting(int)">
       
        <p>Set the visual effect to be used when the mouse button is pressed or held down inside its active area.</p> @param value HighlightingMode element @see HighlightingMode
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.LinkAnnotation.getAnnotationType">
       
        <p>Gets type of annotation.</p> @return AnnotationType element @see AnnotationType
      
    </member>
    <member name="M:com.aspose.pdf.LinkAnnotation.#ctor(Page,Rectangle)">
       
        <p>Creates new Link annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.ListBoxField">
       
        <p>Class represents ListBox field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ListBoxField.getTopIndex">
       
        <p>Gets index of the top visible element of the list.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.ListBoxField.setTopIndex(int)">
       
        <p>Sets index of the top visible element of the list.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.ListBoxField.setSelected(int)">
       
        <p>Gets index of the selected item. Items are numbered from 1.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.ListBoxField.setSelectedItems(int[])">
       
        <p>Sets array of the selected items in the multiselect list. For single-select list returns array with single item.</p> @param value array of int values
      
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.ListBoxField.#ctor">
       
        <p>Constructor for ListBoxField to be used in Generator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ListBoxField.#ctor(Page,Rectangle)">
       
        <p>Creates new ListBox field.</p> @param page Page where list box will be placed. @param rect Rectangle where list box will be placed on the page.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.ListBoxField.#ctor(IDocument,Rectangle)">
       
        <p>Constructor for ListBox field.</p> @param doc Document to which this field will belong. @param rect Rectangle where list box will be placed.
      
      <param name="IDocument"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.LoadFormat">
       
        <p>Specifies load format.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LoadFormat.CGM">
       
        <p>means loading of document in CGM format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LoadFormat.HTML">
       
        <p>means loading of document in HTML format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LoadFormat.EPUB">
       
        <p>means loading of document in EPUB format(special format of e-books)</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LoadFormat.XML">
       
        <p>means loading of document in XML format(special XML that represent logical structure of PDF document)</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LoadFormat.XSLFO">
       
        <p>means loading of document in XSLFO format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LoadFormat.PCL">
       
        <p>means loading of document in PCL format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LoadFormat.XPS">
       
        <p>means loading of document in XPS format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LoadFormat.TEX">
       
        <p>means loading of document in TEX format - format of Latex text editor</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LoadFormat.SVG">
       
        <p>means loading of document in SVG format - format of Latex text editor</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LoadFormat.MHT">
       
        <p>means loading of document in MHT format(that is packed HTML format)</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LoadFormat.PS">
       
        <p>means loading of document in PS format(format of PostScript document)</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LoadFormat.MD">
       
        <p>means loading document is in MD format (markdown).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LoadFormat.TXT">
       
        <p>means loading document is in TXT format.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LoadFormat.APS">
       
        <p>means loading document in APS format.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LoadFormat.PDFXML">
       
        <p>Internal PDF document structure in XML format.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.LoadOptions">
       
        <p>LoadOptions type holds level of abstraction on individual load options</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LoadOptions.getWarningHandler">
       
        <p>Callback to handle any warnings generated. The WarningHandler returns ReturnAction enum item specifying either Continue or Abort. Continue is the default action and the Load operation continues, however the user may also return Abort in which case the Load operation should cease.</p> @return IWarningCallback value
      
    </member>
    <member name="M:com.aspose.pdf.LoadOptions.setWarningHandler(WarningCallback)">
       
        <p>Callback to handle any warnings generated. The WarningHandler returns ReturnAction enum item specifying either Continue or Abort. Continue is the default action and the Load operation continues, however the user may also return Abort in which case the Load operation should cease.</p> @param value IWarningCallback value
      
      <param name="WarningCallback"/>
    </member>
    <member name="M:com.aspose.pdf.LoadOptions.getLoadFormat">
       
        <p>Represents file format which {@code LoadOptions} describes.</p> @return LoadFormat element @see LoadFormat
      
    </member>
    <member name="T:com.aspose.pdf.LoadOptions.MarginsAreaUsageModes">
       
        <p>Represents mode of usage of margins area during conversion (like HTML, EPUB etc), defines treatement of instructions of imported format related to usage of margins.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LoadOptions.MarginsAreaUsageModes.PutContentOnMarginAreaIfNecessary">
       
        <p>In this mode converter obeyes format of imported document (f.e. CSS of imported HTML) in usage of margins area.So, if format of imported document requires usage of margins area for rendering , converter will allow that</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LoadOptions.MarginsAreaUsageModes.NeverPutContentOnMarginArea">
       
        <p>This mode strictly forbids usage of margins area, so, converter will never use area of margins for rendering, even if CSS or format of source document allows or requirs that</p> 
      
    </member>
    <member name="T:com.aspose.pdf.LoadOptions.PageSizeAdjustmentModes">
       
        <p>ATTENTION! The feature implemented but did not put yet to public API since blocker issue in OSHARED layer revealed for sample document. Represents mode of usage of page size during conversion. Formats (like HTML, EPUB etc), usually have float design, so, it allows to fit required pagesize. But sometimes content has specifies horizontal positions or size that does not allow put content into required page size. In such case we can define what should be done in this case (i.e when size of content does not fit required initial page size of result PDF document).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LoadOptions.PageSizeAdjustmentModes.NoAjustmentAllwaysUsePredefinedSize">
       
        <p>In this mode result pages will have required pagesize defined in LoadOptions, no matter whether content after conversion goes out of page boundaries or no.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LoadOptions.PageSizeAdjustmentModes.EnlargeRequiredViewportWidthAndDoConversionAgain">
       
        <p>This mode defines such behaviour: after getting of conversion result , and detecting of fact that some content has been truncated, width of portview is enlarged to fit content and conversion is repeated. This mode allows getting of less pages in result in such case but requires repeated rendering(and therefore more processing time).</p> 
      
    </member>
    <member name="T:com.aspose.pdf.LoadOptions.ResourceLoadingResult">
       
        <p>Result of custom loading of resource</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LoadOptions.ResourceLoadingResult.getData">
       
        <p>Bynary data that loaded with custom loader - it must be set after loading</p> @return array of byte values
      
    </member>
    <member name="M:com.aspose.pdf.LoadOptions.ResourceLoadingResult.getEncodingIfKnown">
       
        <p>Sometimes encoding of resource is known after or during loading. In such case custom code can provide converter with that knowledge via this parameter. You can leave null in this parameter if encoding is unknown or does not matter.</p> @return Charset instance
      
    </member>
    <member name="M:com.aspose.pdf.LoadOptions.ResourceLoadingResult.setEncodingIfKnown(Charset)">
       
        <p>Sometimes encoding of resource is known after or during loading. In such case custom code can provide converter with that knowledge via this parameter. You can leave null in this parameter if encoding is unknown or does not matter.</p> @param encodingIfKnown Charset instance
      
      <param name="Charset"/>
    </member>
    <member name="M:com.aspose.pdf.LoadOptions.ResourceLoadingResult.getExceptionOfLoadingIfAny">
       
        <p>Sometimes it's impossible to load requested resource for some reason. Unavailability of resource often does not lead to crash of conversions and result document can be created anyway(but maybe in a bit worse quality, without images etc.). If exception occurred during loading, just catch it and put in this parameter - sometimes that information is useful for converter for rendering of result.</p> @return Exception
      
    </member>
    <member name="M:com.aspose.pdf.LoadOptions.ResourceLoadingResult.getMIMETypeIfKnown">
       
        <p>Sometimes knowledge about MIME type of loaded resource is usefull for converter You can provide MIME type(if it'd known after loading) in this parameter. Please leave parameter equal to null when MIME type unknown or it's not necessary to supply it.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.LoadOptions.ResourceLoadingResult.setMIMETypeIfKnown(String)">
       
        <p>Sometimes knowledge about MIME type of loaded resource is usefull for converter You can provide MIME type(if it'd known after loading) in this parameter. Please leave parameter equal to null when MIME type unknown or it's not necessary to supply it.</p> @param MIMETypeIfKnown String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.LoadOptions.ResourceLoadingResult.isLoadingCancelled">
       
        <p>Sometimes for some reasons loading should not occure custom code. In such case please set this flag as True. In such case converter will try use internal default resource loader to get that result(as it behave in situation when custom strategy not supplied).</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.LoadOptions.ResourceLoadingResult.setLoadingCancelled(boolean)">
       
        <p>Sometimes for some reasons loading should not occure custom code. In such case please set this flag as True. In such case converter will try use internal default resource loader to get that result(as it behave in situation when custom strategy not supplied).</p> @param loadingCancelled boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.LoadOptions.ResourceLoadingResult.#ctor(byte[])">
       
        <p>Creates instance of loading result</p> @param data reult of custom loading must be allways provided, it can be zero-length array if it's impossible to get any result
      
      <param name="byte[]"/>
    </member>
    <member name="T:com.aspose.pdf.LoadOptions.ResourceLoadingStrategy">
       
        <p>Sometimes it's necessary to avoid usage of internal loader of external resources(like images or CSSes) and supply custom method, that will get requested resources from somewhere. For example during usage of Aspose.PDf in cloud direct access to referenced files impossible, and some custome code put into special method should be used. This delegate defines signature of such custom method.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.LocaleOptions">
       
        <p>LocaleOptions type specifies locale configuration for Aspose.PDF.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LocaleOptions.setLocale(Locale)">
      Set default locale related for Aspose.PDF. @param local Locale instance
      <param name="Locale"/>
    </member>
    <member name="M:com.aspose.pdf.LocaleOptions.getLocale">
      Get currently actual default locale for Aspose.PDF @return Locale instance
    </member>
    <member name="M:com.aspose.pdf.LocaleOptions.clear">
      Clears default locale for Aspose.PDF. Will be used locale default for java .
    </member>
    <member name="T:com.aspose.pdf.LocalHyperlink">
       
        <p>Represents local hyperlink object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LocalHyperlink.getTarget">
       
        <p>Gets the target paragraph.</p> @return BaseParagraph value
      
    </member>
    <member name="M:com.aspose.pdf.LocalHyperlink.setTarget(BaseParagraph)">
       
        <p>Sets the target paragraph.</p> @param value BaseParagraph value
      
      <param name="BaseParagraph"/>
    </member>
    <member name="M:com.aspose.pdf.LocalHyperlink.getTargetPageNumber">
       
        <p>Gets the target page number.</p> @return target page number.
      
    </member>
    <member name="M:com.aspose.pdf.LocalHyperlink.setTargetPageNumber(int)">
       
        <p>Sets the target page number.</p> @param value target page number.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.LocalHyperlink.#ctor">
       
        <p>Initializes a new instance of the {@code LocalHyperlink} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LocalHyperlink.#ctor(BaseParagraph)">
       
        <p>Initializes a new instance of the {@code LocalHyperlink} class.</p> @param target Target paragraph.
      
      <param name="BaseParagraph"/>
    </member>
    <member name="T:com.aspose.pdf.MarginInfo">
       
        <p>This class represents a margin for different objects.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.MarginInfo.getLeft">
       
        <p>Gets a float value that indicates the left margin.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.MarginInfo.setLeft(double)">
       
        <p>Sets a float value that indicates the left margin.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.MarginInfo.getRight">
       
        <p>Gets a float value that indicates the right margin.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.MarginInfo.setRight(double)">
       
        <p>Sets a float value that indicates the right margin.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.MarginInfo.getTop">
       
        <p>Gets a float value that indicates the top margin.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.MarginInfo.setTop(double)">
       
        <p>Sets a float value that indicates the top margin.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.MarginInfo.getBottom">
       
        <p>Gets a float value that indicates the bottom margin.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.MarginInfo.setBottom(double)">
       
        <p>Sets a float value that indicates the bottom margin.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.MarginInfo.deepClone">
       
        <p>Clones a new {@code MarginInfo} object.</p> @return The new object.
      
    </member>
    <member name="M:com.aspose.pdf.MarginInfo.#ctor">
       
        <p>Initializes a new instance of the {@code MarginInfo} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.MarginInfo.#ctor(double,double,double,double)">
       
        <p>Constructor of Rectangle.</p> @param left Left margin. @param bottom Bottom margin @param right Right margin. @param top Top margin.
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.MarkupAnnotation">
       
        <p>Abstract class representing markup annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.MarkupAnnotation.getTitle">
       
        <p>Gets a text that shall be displayed in title bar of annotation.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.MarkupAnnotation.setTitle(String)">
       
        <p>Sets a text that shall be displayed in title bar of annotation.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.MarkupAnnotation.getRichText">
       
        <p>Gets a rich text string to be displayed in the pop-up window when the annotation is opened.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.MarkupAnnotation.setRichText(String)">
       
        <p>Sets a rich text string to be displayed in the pop-up window when the annotation is opened.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.MarkupAnnotation.getCreationDate">
       
        <p>Gets date and time when annotation was created.</p> @return Date object
      
    </member>
    <member name="M:com.aspose.pdf.MarkupAnnotation.getSubject">
       
        <p>Gets text representing desciption of the object.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.MarkupAnnotation.setSubject(String)">
       
        <p>Sets text representing desciption of the object.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.MarkupAnnotation.getPopup">
       
        <p>Pop-up annotation for entering or editing the text associated with this annotation.</p> @return PopupAnnotation value
      
    </member>
    <member name="M:com.aspose.pdf.MarkupAnnotation.setPopup(PopupAnnotation)">
       
        <p>Pop-up annotation for entering or editing the text associated with this annotation.</p> @param value PopupAnnotation value
      
      <param name="PopupAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.MarkupAnnotation.getOpacity">
       
        <p>Gets the constant opacity value to be used in painting the annotation.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.MarkupAnnotation.setOpacity(double)">
       
        <p>Sets the constant opacity value to be used in painting the annotation.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.MarkupAnnotation.getInReplyTo">
       
        <p>A reference to the annotation that this annotation is "in reply to". Both annotations must be on the same page of the document.</p> @return Annotation value
      
    </member>
    <member name="M:com.aspose.pdf.MarkupAnnotation.setInReplyTo(Annotation)">
       
        <p>A reference to the annotation that this annotation is "in reply to". Both annotations must be on the same page of the document.</p> @param value Annotation value
      
      <param name="Annotation"/>
    </member>
    <member name="M:com.aspose.pdf.MarkupAnnotation.getReplyType">
       
        <p>A string specifying the relationship (the "reply type") between this annotation and one specified by InReplyTo.</p> @return ReplyType value @see ReplyType
      
    </member>
    <member name="M:com.aspose.pdf.MarkupAnnotation.setReplyType(int)">
       
        <p>A string specifying the relationship (the "reply type") between this annotation and one specified by InReplyTo.</p> @param value ReplyType value @see ReplyType
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.MarkupAnnotation.#ctor(IDocument)">
       
        <p>Constructor for markup annotation.</p> @param document Document where annotation will be created.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.MarkupAnnotation.#ctor">
      Constructor
    </member>
    <member name="T:com.aspose.pdf.MarkupParagraph">
       
        <p>Represents a paragraph.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.MarkupParagraph.getPoints">
       
        <p>Points of polygon that describes paragraph. Starting point is lower left corner of the paragraph. And next points are in anti-clockwise sequence.</p> @return array of Point instances
      
    </member>
    <member name="M:com.aspose.pdf.MarkupParagraph.getSecondaryPoints">
       
        <p>Points of secondary polygon describes paragraph continuation. It will not be null if the paragraph is continued in the next column or page. Starting point is lower left corner of the paragraph. And next points are in anti-clockwise sequence.</p> @return list of Point[]
      
    </member>
    <member name="M:com.aspose.pdf.MarkupParagraph.getContinuationPageNumbers">
       
        <p>List of page numbers on which the paragraph is continued. It will match with page where the paragraph started if it is continuing in the next column on the same page.</p> @return list of Integer
      
    </member>
    <member name="M:com.aspose.pdf.MarkupParagraph.getFragments">&lt;p&gt; Collection of not empty {@code TextFragment} objects of the paragraph. &lt;/p&gt;&lt;hr&gt; The {@code TextFragment} object provides access to the search occurrence text, text properties, and allows to edit text and change the text state (font, font size, color etc). @return list of TextFragment instances</member>
    <member name="M:com.aspose.pdf.MarkupParagraph.getLines">&lt;p&gt; Lines of paragraph. Each line represented by list of text fragments. &lt;/p&gt;&lt;hr&gt; The {@code TextFragment} object provides access to the search occurrence text, text properties, and allows to edit text and change the text state (font, font size, color etc). @return list of TextFragment instances</member>
    <member name="M:com.aspose.pdf.MarkupParagraph.getText">
       
        <p>Gets {@code string} text object that the {@code MarkupParagraph} object represents.</p> @return String value
      
    </member>
    <member name="T:com.aspose.pdf.MarkupSection">
       
        <p>Represents a markup section - the rectangular region of a page that contains text and can be visually divided from another text blocks.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.MarkupSection.getRectangle">
       
        <p>Section rectangle</p> @return Rectangle instance
      
    </member>
    <member name="M:com.aspose.pdf.MarkupSection.getFragments">&lt;p&gt; Collection of not empty {@code TextFragment} objects that are inside the section. &lt;/p&gt;&lt;hr&gt; The {@code TextFragment} object provides access to the search occurrence text, text properties, and allows to edit text and change the text state (font, font size, color etc). @return list of TextFragment instances</member>
    <member name="M:com.aspose.pdf.MarkupSection.getParagraphs">
       
        <p>Collection of {@code MarkupParagraph} objects that are inside the section.</p> @return list of MarkupParagraph instances
      
    </member>
    <member name="T:com.aspose.pdf.Matrix">
       
        <p>Class represents transformation matrix.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Matrix.getData">
       
        <p>Gets data of Matrix as array.</p> @return array of double values
      
    </member>
    <member name="M:com.aspose.pdf.Matrix.getA">
       
        <p>Get A member of the transformation matrix.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Matrix.setA(double)">
       
        <p>Set A member of the transformation matrix.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.getB">
       
        <p>Get B member of the transformation matrix.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Matrix.setB(double)">
       
        <p>Set B member of the transformation matrix.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.getC">
       
        <p>Get C member of the transformation matrix.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Matrix.setC(double)">
       
        <p>Set C member of the transformation matrix.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.getD">
       
        <p>Get D member of the transformation matrix.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Matrix.setD(double)">
       
        <p>Set D member of the transformation matrix.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.getE">
       
        <p>Get E member of the transformation matrix.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Matrix.setE(double)">
       
        <p>Set E member of the transformation matrix.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.getF">
       
        <p>Get F member of the transformation matrix.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Matrix.setF(double)">
       
        <p>Set F member of the transformation matrix.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.getElements">
       
        <p>Elements of the matrix.</p> @return float[] array
      
    </member>
    <member name="M:com.aspose.pdf.Matrix.toString">
       
        <p>Returns text representation of the matrix.</p> @return String representation for the matrix
      
    </member>
    <member name="M:com.aspose.pdf.Matrix.equals(Object)">
       
        <p>Compares matrix agains other object.</p> @param obj Object to compare. @return Returns true is other object is Matrix and all matrix member are equal to correspondim members of the matrix
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.getMatrix(ITrailerable)">
       
        <p>Translates matrix into PDF array obect.</p> @param trailer Trailerable object @return Result of converting
      
      <param name="ITrailerable"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.rotation(double)">&lt;p&gt; Creates matrix for given rotation angle. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Matrix m = Matrix.Rotation(Math.PI / 2); &lt;/pre&gt; @param alpha Rotation angle in radians. @return Transformation matrix. 
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.rotation(int)">
       
        <p>Creates matrix for given rotation.</p> @return Matrix instance with rotation. @param rotation Rotation. Valid values are: None, on90, on180, on270
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.skew(double,double)">
      Creates matrix for given rotation angle. 
        <pre>Matrix m = Matrix.skew(Math.PI / 2, Math.PI / 2);</pre> @param alpha Skew x angle in radians. @param beta Skew y angle in radians. @return Transformation matrix.
      
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.scale(double,double)">&lt;p&gt; Creates matrix for given scale. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Matrix m = Matrix.scale(x, y); &lt;/pre&gt; @param x Scale x. @param y Scale y. @return Transformation matrix. 
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.getAngle(int)">&lt;p&gt; Transaltes rotation into angle (degrees) &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; double angle = Matrix.getAngle(Rotation.on90); Matrix m = Matrix.rotation(angle); &lt;/pre&gt; @param rotation Rotation value. @return Angle value. 
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.multiply(Matrix)">&lt;p&gt; Multiplies the matrix by other matrix. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Matrix a = new Matrix(new double[] { 1, 0, 0, 1, 10, 20 }); Matrix b = new Matrix(new double[] { 0, -1, 1, 0, 0, 0 } ); Matrix c= a.multiply(b); &lt;/pre&gt; @param other Multiplier matrix. @return Result of multiplication. 
      <param name="Matrix"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.add(Matrix)">
       
        <p>Adds matrix to other matrix.</p> @param other Matrix to be added. @return Result of matrix add.
      
      <param name="Matrix"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.transform(Point)">&lt;p&gt; Transforms point using this matrix. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Matrix m = new Matrix(new double[] { 1, 0, 0, 1, 10, 20 } ); Point p = new Point(5, 5); Point p1 = m.transform(p); &lt;/pre&gt; @param p Point which will be transformed. @return Transformation result. 
      <param name="Point"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.transform(com.aspose.pdf.Rectangle)">&lt;p&gt; Transformes rectangle. If angle is not 90 * N degrees then bounding rectangle is returned. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Matrix m = new Matrix(new double[] { 1, 0, 0, 1, 10, 20 } ); Rectangle r = new Rectangle(0, 0, 100, 100); Rectangle r1 = m.transform(r1); &lt;/pre&gt; @param rect Rectangle to be transformed. @return Transformed rectangle. 
      <param name="com.aspose.pdf.Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.reverse">&lt;p&gt; Calculates reverse matrix. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Matrix m = Matrix.rotation(Math.PI / 2); Matrix m1 = m.reverse(); &lt;/pre&gt; @return Reverse matrix.</member>
    <member name="M:com.aspose.pdf.Matrix.hashCode">
       
        <p>Hash-code for object.</p> @return Hash-code.
      
    </member>
    <member name="M:com.aspose.pdf.Matrix.isInt16(double)">
      For Internal usage only @param value double value @return boolean value
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.isInt16Values">
      For Internal usage only @return boolean value
    </member>
    <member name="M:com.aspose.pdf.Matrix.#ctor">&lt;p&gt; Constructor creates stanrard 1 to 1 matrix: [ A B C D E F ] = [ 1, 0, 0, 1, 0, 0] &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Matrix m = new Matrix(); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.Matrix.#ctor(double[])">&lt;p&gt; Constructor accepts a matrix with following array representation: [ A B C D E F ] &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; double[] c = new double[] { 1, 0, 0, 1, 10, 20 }; Matrix m = new Matrix(c); &lt;/pre&gt; @param matrixArray Matrix data array. 
      <param name="double[]"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.#ctor(float[])">&lt;p&gt; Constructor accepts a matrix with following array representation: [ A B C D E F ] &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; double[] c = new double[] { 1, 0, 0, 1, 10, 20 }; Matrix m = new Matrix(c); &lt;/pre&gt; @param matrixArray Matrix data array. 
      <param name="float[]"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.#ctor(Matrix)">
       
        <p>Constructor accepts a matrix to create a copy</p> @param matrix Matrix object.
      
      <param name="Matrix"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.#ctor(double,double,double,double,double,double)">&lt;p&gt; Initializes transformation matrix with specified coefficients. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Matrix m = new Matrix(1, 0, 0, 1, 3, 3); &lt;/pre&gt; @param a A matrix value. @param b B matrix value. @param c C matrix value. @param d D matrix value. @param e E matrix value. @param f F matrix value. 
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.Matrix3D">
       
        <p>Class represents transformation matrix.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Matrix3D.getA">
       
        <p>A member of the transformation matrix.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Matrix3D.setA(double)">
       
        <p>A member of the transformation matrix.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix3D.getB">
       
        <p>B member of the transformation matrix.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Matrix3D.setB(double)">
       
        <p>B member of the transformation matrix.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix3D.getC">
       
        <p>C member of the transformation matrix.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Matrix3D.setC(double)">
       
        <p>C member of the transformation matrix.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix3D.getD">
       
        <p>D member of the transformation matrix.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Matrix3D.setD(double)">
       
        <p>D member of the transformation matrix.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix3D.getE">
       
        <p>E member of the transformation matrix.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Matrix3D.setE(double)">
       
        <p>E member of the transformation matrix.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix3D.getF">
       
        <p>F member of the transformation matrix.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Matrix3D.setF(double)">
       
        <p>F member of the transformation matrix.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix3D.getG">
       
        <p>G member of the transformation matrix.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Matrix3D.setG(double)">
       
        <p>G member of the transformation matrix.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix3D.getH">
       
        <p>H member of the transformation matrix.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Matrix3D.setH(double)">
       
        <p>H member of the transformation matrix.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix3D.getI">
       
        <p>I member of the transformation matrix.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Matrix3D.setI(double)">
       
        <p>I member of the transformation matrix.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix3D.getTx">
       
        <p>Tx member of the transformation matrix.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Matrix3D.setTx(double)">
       
        <p>Tx member of the transformation matrix.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix3D.getTy">
       
        <p>Ty member of the transformation matrix.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Matrix3D.setTy(double)">
       
        <p>Ty member of the transformation matrix.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix3D.getTz">
       
        <p>Tz member of the transformation matrix.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Matrix3D.setTz(double)">
       
        <p>Tz member of the transformation matrix.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix3D.toString">
       
        <p>Returns text representation of the matrix.</p> @return String representation for the matrix
      
    </member>
    <member name="M:com.aspose.pdf.Matrix3D.equals(Object)">
       
        <p>Compares matrix against other object.</p> @return Returns true is other object is Matrix3D and all matrix members are equal to corresponding members of the matrix @param obj Object to compare.
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix3D.getAngle(int)">&lt;p&gt; Creates matrix for given rotation angle. &lt;/p&gt; &lt;p&gt; Creates matrix for given rotation angle. &lt;/p&gt; &lt;p&gt; Creates matrix for given scale. &lt;/p&gt; &lt;p&gt; Translates rotation into angle (degrees) &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Matrix m = Matrix.Rotation(Math.PI / 2); &lt;/pre&gt; &lt;hr&gt; &lt;pre&gt; Matrix m = Matrix.skew(Math.PI / 2, Math.PI / 2); &lt;/pre&gt; &lt;hr&gt; &lt;pre&gt; Matrix m = Matrix.scale(x, y); &lt;/pre&gt; &lt;hr&gt; &lt;pre&gt; double angle = Matrix.getAngle(Rotation.on90); Matrix m = Matrix.rotation(angle); &lt;/pre&gt; @return Angle value. @param rotation Rotation value. 
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix3D.add(Matrix3D)">&lt;p&gt; Multiplies the matrix by other matrix. &lt;/p&gt; &lt;p&gt; Adds matrix to other matrix. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Matrix a = new Matrix(new double[] { 1, 0, 0, 1, 10, 20 }); Matrix b = new Matrix(new double[] { 0, -1, 1, 0, 0, 0 } ); Matrix c= a.Multiply(b); &lt;/pre&gt; @return Result of matrix add. @param other Matrix to be added. 
      <param name="Matrix3D"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix3D.hashCode">&lt;p&gt; Calculates reverse matrix. &lt;/p&gt; &lt;p&gt; Hash-code for object. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Matrix m = Matrix.Rotation(Math.PI / 2); Matrix m1 = m.reverse(); &lt;/pre&gt; @return Hash-code.</member>
    <member name="M:com.aspose.pdf.Matrix3D.#ctor">&lt;p&gt; Constructor creates standard 1 to 1 matrix: [ A B C D E F G H I Tx Ty Tz] = [ 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0 , 0] &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Matrix3D m = new Matrix3D(); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.Matrix3D.#ctor(double[])">&lt;p&gt; Constructor accepts a matrix with following array representation: [ A B C D E F G H I Tx Ty Tz] &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; double[] c = new double[] { 1, 0, 0, 1, 10, 20, 1, 0, 0, 17, 40, 13 }; Matrix3D m = new Matrix3D(c); &lt;/pre&gt; @param matrix3DArray Matrix data array. 
      <param name="double[]"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix3D.#ctor(Matrix3D)">
       
        <p>Constructor accepts a matrix to create a copy</p> @param matrix Matrix3D object.
      
      <param name="Matrix3D"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix3D.#ctor(double,double,double,double,double,double,double,double,double,double,double,double)">&lt;p&gt; Transforms point using this matrix. &lt;/p&gt; &lt;p&gt; Transforms rectangle. If angle is not 90 * N degrees then bounding rectangle is returned. &lt;/p&gt; &lt;p&gt; Initializes transformation matrix with specified coefficients. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Matrix m = new Matrix(new double[] { 1, 0, 0, 1, 10, 20 } ); Point p = new Point(5, 5); Point p1 = m.transform(p); &lt;/pre&gt; &lt;hr&gt; &lt;pre&gt; Matrix m = new Matrix(new double[] { 1, 0, 0, 1, 10, 20 } ); Rectangle r = new Rectangle(0, 0, 100, 100); Rectangle r1 = m.transform(r1); &lt;/pre&gt; &lt;hr&gt; &lt;pre&gt; Matrix m = new Matrix(1, 0, 0, 1, 3, 3); &lt;/pre&gt; @param a A matrix value. @param b B matrix value. @param c C matrix value. @param d D matrix value. @param e E matrix value. @param f F matrix value. @param g G matrix value. @param h H matrix value. @param i I matrix value. @param tx TX matrix value. @param ty TX matrix value. @param tz TY matrix value. 
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.MdLoadOptions">
       
        <p>Load options for Markdown format conversion.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.MdLoadOptions.#ctor">
       
        <p>Creates load options for converting markdown into pdf document.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Measure">
       
        <p>Class which describes Measure coordinate system.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Measure.getScaleRatio">
       
        <p>A text string expressing the scale ratio of the drawing.</p> @return string object
      
    </member>
    <member name="M:com.aspose.pdf.Measure.setScaleRatio(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Measure.getXFormat">
       
        <p>A number format array for measurement of change along the xaxis and, if Y is not present, along the y axis as well</p> @return NumberFormatList value
      
    </member>
    <member name="M:com.aspose.pdf.Measure.setXFormat(NumberFormatList)">
       
        <p>A number format array for measurement of change along the xaxis and, if Y is not present, along the y axis as well</p> @param value NumberFormatList value
      
      <param name="NumberFormatList"/>
    </member>
    <member name="M:com.aspose.pdf.Measure.getYFormat">
       
        <p>A number format array for measurement of change along the y axis.</p> @return NumberFormatList value
      
    </member>
    <member name="M:com.aspose.pdf.Measure.setYFormat(NumberFormatList)">
       
        <p>A number format array for measurement of change along the y axis.</p> @param value NumberFormatList value
      
      <param name="NumberFormatList"/>
    </member>
    <member name="M:com.aspose.pdf.Measure.getDistanceFormat">
       
        <p>A number format array for measurement of distance in any direction.</p> @return NumberFormatList value
      
    </member>
    <member name="M:com.aspose.pdf.Measure.setDistanceFormat(NumberFormatList)">
       
        <p>A number format array for measurement of distance in any direction.</p> @param value NumberFormatList value
      
      <param name="NumberFormatList"/>
    </member>
    <member name="M:com.aspose.pdf.Measure.getAreaFormat">
       
        <p>A number format array for measurement of area.</p> @return NumberFormatList value
      
    </member>
    <member name="M:com.aspose.pdf.Measure.setAreaFormat(NumberFormatList)">
       
        <p>A number format array for measurement of area.</p> @param value NumberFormatList object
      
      <param name="NumberFormatList"/>
    </member>
    <member name="M:com.aspose.pdf.Measure.getAngleFormat">
       
        <p>A number format array for measurement of angles.</p> @return NumberFormatList value
      
    </member>
    <member name="M:com.aspose.pdf.Measure.setAngleFormat(NumberFormatList)">
       
        <p>A number format array for measurement of angles.</p> @param value NumberFormatList value
      
      <param name="NumberFormatList"/>
    </member>
    <member name="M:com.aspose.pdf.Measure.getSlopeFormat">
       
        <p>A number format array for measurement of the slope of a line.</p> @return NumberFormatList value
      
    </member>
    <member name="M:com.aspose.pdf.Measure.setSlopeFormat(NumberFormatList)">
       
        <p>A number format array for measurement of the slope of a line.</p> @param value NumberFormatList value
      
      <param name="NumberFormatList"/>
    </member>
    <member name="M:com.aspose.pdf.Measure.getOrigin">
       
        <p>Point that shall specify the origin of the measurement coordinate system in default user space coordinates.</p> @return Point object
      
    </member>
    <member name="M:com.aspose.pdf.Measure.setOrigin(Point)">
       
        <p>Point that shall specify the origin of the measurement coordinate system in default user space coordinates.</p> @param value Point object
      
      <param name="Point"/>
    </member>
    <member name="M:com.aspose.pdf.Measure.getXYFactor">
       
        <p>A factor that shall be used to convert the largest units along the y axis to the largest units along the x axis.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Measure.setXYFactor(double)">
       
        <p>A factor that shall be used to convert the largest units along the y axis to the largest units along the x axis.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Measure.#ctor(Annotation)">
       
        <p>Creates Measure object for measure annotations.</p> @param annotation Annotation for which measure will be bound.
      
      <param name="Annotation"/>
    </member>
    <member name="T:com.aspose.pdf.Measure.NumberFormat">
       
        <p>Number format for measure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Measure.NumberFormat.getUnitLabel">
       
        <p>A text string specifying a label for displaying the units.</p> @return String object
      
    </member>
    <member name="M:com.aspose.pdf.Measure.NumberFormat.setUnitLabel(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Measure.NumberFormat.getConvresionFactor">
       
        <p>The conversion factor used to multiply a value in partial units of the previous number format array element to obtain a value in the units of this number format.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Measure.NumberFormat.setConvresionFactor(double)">
       
        <p>The conversion factor used to multiply a value in partial units of the previous number format array element to obtain a value in the units of this number format.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Measure.NumberFormat.getFractionDisplayment">
       
        <p>In what manner fractional values are displayed.</p> @return FractionStyle value @see FractionStyle
      
    </member>
    <member name="M:com.aspose.pdf.Measure.NumberFormat.setFractionDisplayment(int)">
       
        <p>In what manner fractional values are displayed.</p> @param value FractionStyle value @see FractionStyle
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Measure.NumberFormat.getPrecision">
       
        <p>If FractionDisplayment is ShowAsDecimal, this value is precision of fractional value; It shall me multiple of 10. Default is 100.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.Measure.NumberFormat.setPrecision(int)">
       
        <p>If FractionDisplayment is ShowAsDecimal, this value is precision of fractional value; It shall me multiple of 10. Default is 100.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Measure.NumberFormat.getDenominator">
       
        <p>If FractionDisplayment is ShowAsFraction, this value is denominator of the fraction. Default value is 16.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.Measure.NumberFormat.setDenominator(int)">
       
        <p>If FractionDisplayment is ShowAsFraction, this value is denominator of the fraction. Default value is 16.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Measure.NumberFormat.isForceDenominator">
       
        <p>If FractionDisplayment is ShowAsFraction, this value determines meay or not the fraction be reduced. If value is true fraction may not be reduced.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Measure.NumberFormat.setForceDenominator(boolean)">
       
        <p>If FractionDisplayment is ShowAsFraction, this value determines meay or not the fraction be reduced. If value is true fraction may not be reduced.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Measure.NumberFormat.getThousandsSeparator">
       
        <p>Text that shall be used between orders of thousands in display of numerical values. An empty string indicates that no text shall be added. Default is comma.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.Measure.NumberFormat.setThousandsSeparator(String)">
       
        <p>Text that shall be used between orders of thousands in display of numerical values. An empty string indicates that no text shall be added. Default is comma.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Measure.NumberFormat.getFractionSeparator">
       
        <p>Text that shall be used as the decimal position in displaying numerical values. An empty string indicates that the default shall be used. Default is period character.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.Measure.NumberFormat.setFractionSeparator(String)">
       
        <p>Text that shall be used as the decimal position in displaying numerical values. An empty string indicates that the default shall be used. Default is period character.</p> @param value String object
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Measure.NumberFormat.getBeforeText">
       
        <p>Text that shall be concatenated to the left of the label.</p> @return String object
      
    </member>
    <member name="M:com.aspose.pdf.Measure.NumberFormat.setBeforeText(String)">
       
        <p>Text that shall be concatenated to the left of the label.</p> @param value String object
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Measure.NumberFormat.getAfterText">
       
        <p>Text that shall be concatenated after the label</p> @return String object
      
    </member>
    <member name="M:com.aspose.pdf.Measure.NumberFormat.setAfterText(String)">
       
        <p>Text that shall be concatenated after the label</p> @param value String object
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Measure.NumberFormat.#ctor(Measure)">
       
        <p>Constructor for NumberFormat class.</p> @param measure Measure object which contains this number format.
      
      <param name="Measure"/>
    </member>
    <member name="T:com.aspose.pdf.Measure.NumberFormat.FractionStyle">
       
        <p>Value which indicates in which manner fraction values are displayed.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Measure.NumberFormat.FractionStyle.ShowAsDecimal">
       
        <p>Show fractional values as decimal fraction.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Measure.NumberFormat.FractionStyle.ShowAsFraction">
       
        <p>Show fractional value as fraction.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Measure.NumberFormat.FractionStyle.Round">
       
        <p>Round fractional values to the nearest whole integer.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Measure.NumberFormat.FractionStyle.Truncate">
       
        <p>Truncate to achieve whole units.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Measure.NumberFormatList">
       
        <p>Represents list of number formats.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Measure.NumberFormatList.add(NumberFormat)">
       
        <p>Adds number format to list.</p> @param value Value to be added into list.
      
      <param name="NumberFormat"/>
    </member>
    <member name="M:com.aspose.pdf.Measure.NumberFormatList.insert(int,NumberFormat)">
       
        <p>Inserts number format into list.</p> @param index Index where new element will be added. @param value Value to be inserted.
      
      <param name="int"/>
      <param name="NumberFormat"/>
    </member>
    <member name="M:com.aspose.pdf.Measure.NumberFormatList.removeAt(int)">
       
        <p>Removes number format from list.</p> @param index Index of item to be removed.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Measure.NumberFormatList.get_Item(int)">
       
        <p>Gets number format in list by its index.</p> @return Retreived measure item. @param index Index of the item to be retreived.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Measure.NumberFormatList.set_Item(int,NumberFormat)">
       
        <p>Sets number format in list by its index.</p> @param index Index of the item to be retreived. @param value measure item.
      
      <param name="int"/>
      <param name="NumberFormat"/>
    </member>
    <member name="M:com.aspose.pdf.Measure.NumberFormatList.getCount">
       
        <p>Count if items in the list.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.Measure.NumberFormatList.#ctor(Measure)">
       
        <p>Constructor for NumberFormatList.</p> @param measure Parent measure object.
      
      <param name="Measure"/>
    </member>
    <member name="T:com.aspose.pdf.MediaClip">
       
        <p>Class describes media clip object of rendition.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.MediaClipData">
       
        <p>Class describes media clip data.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.MediaClipData.getData">
       
        <p>Return file specification which contains actual media data .</p> @return FileSpecification instance
      
    </member>
    <member name="T:com.aspose.pdf.MediaClipSection">
       
        <p>This class descibes Media clip section.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.MediaRendition">
       
        <p>Class describes media rendition.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.MediaRendition.getMediaClip">
       
        <p>Gets or sets media clip obkects associated with rendition.</p> @return MediaClip instance
      
    </member>
    <member name="T:com.aspose.pdf.MemoryCleaner">
      Represents MemoryCleaner class
    </member>
    <member name="M:com.aspose.pdf.MemoryCleaner.clearKeepingFontSettings">
      Clears Heap memory from static Aspose.PDF instances (static and threadLocal) and deletes all temp files.
    </member>
    <member name="M:com.aspose.pdf.MemoryCleaner.clear">
      Clears Heap memory from static Aspose.PDF instances (static and threadLocal) and deletes all temp files.
    </member>
    <member name="M:com.aspose.pdf.MemoryCleaner.clearStaticInstances">
      Clears Heap memory from static Aspose.PDF instances.
    </member>
    <member name="M:com.aspose.pdf.MemoryCleaner.clearAllTempFiles">
      Clears temp files, created by Aspose.PDF in system temp directory.
    </member>
    <member name="M:com.aspose.pdf.MemoryCleaner.clearFontRegistry">
      Clears FontRegistry information from the Heap memory.
    </member>
    <member name="M:com.aspose.pdf.MemoryCleaner.clearLicense">
      Clears license information from the Heap memory.
    </member>
    <member name="M:com.aspose.pdf.MemoryCleaner.clearCurrentThreadLocals">
      Safely clears Heap memory from ThreadLocal instances for current thread
    </member>
    <member name="T:com.aspose.pdf.MemoryExtender">
      Represents MemoryExtender class Using large files on a system with limited heap memory, can be enabled to use disk space as a temporary swap memory.
    </member>
    <member name="M:com.aspose.pdf.MemoryExtender.isSwapEnabled">
      Is enabled to use disk space as a temporary swap memory. Default value is FALSE @return boolean value
    </member>
    <member name="M:com.aspose.pdf.MemoryExtender.isOptimizedMemoryStreamByDefault">
      Is enabled to use OptimizedMemoryStream as default memory storage. Required for work with large documents over 2 Gb. Default value is FALSE @return boolean value
    </member>
    <member name="M:com.aspose.pdf.MemoryExtender.isOptimizedMemoryStreamByDefault(boolean)">
      Is enabled to use OptimizedMemoryStream as default memory storage. Required for work with large documents over 2 Gb. Default value is FALSE @param value boolean value
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.MemoryExtender.setSwapEnabled(boolean)">
      Set flag whether disk space is enabled to use as a temporary swap memory. @param value boolean value
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.MemoryExtender.isSkipHeavyContentEnabled">
      Is enabled to skip objects with high memory consumption in rendering with lack of heap memory. Default value is FALSE @return boolean value
    </member>
    <member name="M:com.aspose.pdf.MemoryExtender.setSkipHeavyContentEnabled(boolean)">
      Set flag to enable to skip objects with high memory consumption in rendering with lack of heap memory. @param value boolean value
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.MemoryExtender.getElementRenderingTimeout">
      The maximum time for rendering single element used in page to image conversion. Default value 10000 milliseconds. Used only when isSkipHeavyContentEnabled() == true @return int value Number of milliseconds
    </member>
    <member name="M:com.aspose.pdf.MemoryExtender.setElementRenderingTimeout(int)">
      The maximum time for rendering single element used in page to image conversion. Default value 10000 milliseconds Used only when isSkipHeavyContentEnabled() == true @param value int value Number of milliseconds
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.MemoryExtender.getCallBackPageImage">
      Get the custom cache analyzer. @return CallBackPageImage object
    </member>
    <member name="M:com.aspose.pdf.MemoryExtender.setCallBackPageImage(CallBackPageImage)">
      Apply the new custom cache analyzer. @param callBackPageImage_ CallBackPageImage object
      <param name="CallBackPageImage"/>
    </member>
    <member name="M:com.aspose.pdf.MemoryExtender.isEnabledMultiPageImageCache">
      Get the status for EnabledMultiPageImageCache field @return boolean value
    </member>
    <member name="M:com.aspose.pdf.MemoryExtender.setEnableMultiPageCache(boolean)">
      Set the new status for EnabledMultiPageImageCache field @param enableMultiPageImageCache_ boolean value
      <param name="boolean"/>
    </member>
    <member name="T:com.aspose.pdf.MemoryExtender.CallBackPageImage">
      / * Set the flag whether the temporary folder will be used to host temporary font data. / * True by default. / * Used heap memory if value = false; / * @param value boolean value /
    </member>
    <member name="T:com.aspose.pdf.MemoryFontSource">
       
        <p>Represents single font file source.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.MemoryFontSource.getFontBytes">
       
        <p>Font file byte array.</p> @return byte[] array
      
    </member>
    <member name="M:com.aspose.pdf.MemoryFontSource.equals(Object)">
       
        <p>Check if font file source objects are equal.</p> @return True if both objects are font file sources targeted to the same file. @param obj Font file source object which will be compared.
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.MemoryFontSource.hashCode">Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by {@link java.util.HashMap}. &lt;p&gt; The general contract of {@code hashCode} is: &lt;ul&gt; &lt;li&gt;Whenever it is invoked on the same object more than once during an execution of a Java application, the {@code hashCode} method must consistently return the same integer, provided no information used in {@code equals} comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. &lt;li&gt;If two objects are equal according to the {@code equals(Object)} method, then calling the {@code hashCode} method on each of the two objects must produce the same integer result. &lt;li&gt;It is &lt;em&gt;not&lt;/em&gt; required that if two objects are unequal according to the {@link java.lang.Object#equals(java.lang.Object)} method, then calling the {@code hashCode} method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. &lt;/ul&gt; &lt;p&gt; As much as is reasonably practical, the hashCode method defined by class {@code Object} does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java&lt;span style="font-size:70%"&gt;&lt;sup&gt;TM&lt;/sup&gt;&lt;/span&gt; programming language.) @return a hash code value for this object. @see java.lang.Object#equals(java.lang.Object) @see java.lang.System#identityHashCode</member>
    <member name="M:com.aspose.pdf.MemoryFontSource.close">
       
        <p>Closes all resources used by this document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.MemoryFontSource.dispose">
       
        <p>Releases internal resources.</p> This method is obsolete, use close() instead.
      
    </member>
    <member name="M:com.aspose.pdf.MemoryFontSource.#ctor(byte[])">
       
        <p>Initializes a new instance of {@code MemoryFontSource} class.</p> @param fontBytes Font file byte array.
      
      <param name="byte[]"/>
    </member>
    <member name="T:com.aspose.pdf.Metadata">
       
        <p>Provides access to XMP metadata stream.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Metadata.registerNamespaceUri(String,String)">
       
        <p>Registers namespace URI.</p> @param prefix The value of prefix. @param namespaceUri The value of namespace URI.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Metadata.registerNamespaceUri(String,String,String)">
       
        <p>Registers namespace URI.</p> @param prefix The value of prefix. @param namespaceUri The value of namespace URI. @param schemaDescription The value of schema description.
      
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Metadata.getNamespaceUriByPrefix(String)">
       
        <p>Returns namespace URI by prefix.</p> @param prefix The value of prefix. @return The value of namespace URI.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Metadata.getPrefixByNamespaceUri(String)">
       
        <p>Returns prefix by namespace URI.</p> @param namespaceUri Namespace URI. @return The value of prefix.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Metadata.addItem(String,XmpValue)">
       
        <p>Adds value to metadata.</p> @param key The key to add. @param value Value which will be added.
      
      <param name="String"/>
      <param name="XmpValue"/>
    </member>
    <member name="M:com.aspose.pdf.Metadata.addItem(String,Object)">
       
        <p>Adds value to metadata.</p> @param key The key to add. @param value Value which will be added.
      
      <param name="String"/>
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.Metadata.addItem(String,XmpPdfAExtensionObject)">
       
        <p>Adds pdf extension to metadata.</p> @param prefix The prefix of extension. @param value Value which will be added.
      
      <param name="String"/>
      <param name="XmpPdfAExtensionObject"/>
    </member>
    <member name="M:com.aspose.pdf.Metadata.clear">
       
        <p>Clears metadata.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Metadata.contains(String)">
       
        <p>Checks does key is contained in metadata.</p> @param key The key of entry to find. @return True if key is contained in the metadata.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Metadata.iterator">
       
        <p>Returns dictionary enumerator.</p> @return Enumerator.
      
    </member>
    <member name="M:com.aspose.pdf.Metadata.isFixedSize">
       
        <p>Checks if colleciton has fixed size.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Metadata.isReadOnly">
       
        <p>Checks if collection is read-only.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Metadata.getKeys">
       
        <p>Gets collection of metadata keys.</p> @return ICollection object
      
    </member>
    <member name="M:com.aspose.pdf.Metadata.removeItemByKey(String)">
       
        <p>Removes entry from metadata.</p> @param key The key of entry to remove. @return True - if key removed; otherwise, false.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Metadata.getValues">
       
        <p>Gets values in the metadata.</p> @return ICollection object
      
    </member>
    <member name="M:com.aspose.pdf.Metadata.getExtensionFields_Internal">
      For Internal usage only. 
        <p>Gets the dictionary of extension fields.</p> @return internal object
      
    </member>
    <member name="M:com.aspose.pdf.Metadata.getExtensionFields">&lt;p&gt; Gets the dictionary of extension fields. &lt;/p&gt; @return {@code Hashtable&lt;String, XmpPdfAExtensionSchema&gt;} object</member>
    <member name="M:com.aspose.pdf.Metadata.get_Item(String)">
       
        <p>Gets data from metadata.</p> @param key The key name. @return Metadata object.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Metadata.set_Item(String,XmpValue)">
       
        <p>Sets data from metadata.</p> @param key key name @param value The value object
      
      <param name="String"/>
      <param name="XmpValue"/>
    </member>
    <member name="M:com.aspose.pdf.Metadata.size">
       
        <p>Gets count of elements in the collection.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.Metadata.isSynchronized">
       
        <p>Checks if collection is synchronized.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Metadata.getSyncRoot">
       
        <p>Gets collection synchronization object.</p> @return Object for synchronization
      
    </member>
    <member name="M:com.aspose.pdf.Metadata.iteratorIE">
       
        <p>Gets enumerator of the collection.</p> @return IEnumerator object @see IEnumerator
      
    </member>
    <member name="M:com.aspose.pdf.Metadata.iterator_Rename_Namesake"/>
    <member name="M:com.aspose.pdf.Metadata.copyTo(Array,int)">
       
        <p>Copies elements of the collection into array.</p> @param array Destination array. @param index Starting index.
      
      <param name="Array"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Metadata.containsKey(String)">
       
        <p>Determines does this dictionary contasins specified key.</p> @param key Key to search in the dictionary. @return true if key is found.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Metadata.tryGetValue(String,Object[])">
       
        <p>Tries to find key in the dictionary and retreives value if found.</p> @param key Key to search in the dictionary. @param value Retreived value. @return true if key was found.
      
      <param name="String"/>
      <param name="Object[]"/>
    </member>
    <member name="M:com.aspose.pdf.Metadata.tryGetValue(String,XmpValue[])">
       
        <p>Tries to find key in the dictionary and retreives value if found.</p> @param key Key to search in the dictionary. @param value Retreived value. @return true if key was found.
      
      <param name="String"/>
      <param name="XmpValue[]"/>
    </member>
    <member name="T:com.aspose.pdf.Metered">&lt;p&gt; Provides methods to set metered key. &lt;/p&gt; &lt;hr&gt; In this example, an attempt will be made to set metered public and private key &lt;pre&gt; The component jar file: Metered matered = new Metered(); matered.setMeteredKey("PublicKey", "PrivateKey"); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.Metered.setMeteredKey(String,String)">
       
        <p>Sets metered public and private key</p> @param publicKey public key @param privateKey private key
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Metered.getConsumptionQuantity">
       
        <p>Gets consumption file size</p> @return consumption quantity @exception Exception if Metered API problem.
      
    </member>
    <member name="M:com.aspose.pdf.Metered.getConsumptionCredit">
       
        <p>Gets consumption credit</p> @return consumption quantity @exception Exception if Metered API problem.
      
    </member>
    <member name="M:com.aspose.pdf.Metered.#ctor">
       
        <p>Initializes a new instance of this class.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.MhtLoadOptions">
       
        <p>Represents options for loading/importing of .mht-file into pdf document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.MhtLoadOptions.getPageInfo">
      / * if it's necessary to save parts into some folder for testing /
    </member>
    <member name="M:com.aspose.pdf.MhtLoadOptions.#ctor">
       
        <p>Creates load options for converting html into pdf document with empty base path.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.MobiXmlSaveOptions">
       
        <p>Save options for export to Xml format</p> 
      
    </member>
    <member name="M:com.aspose.pdf.MobiXmlSaveOptions.#ctor">
       
        <p>Constructor</p> 
      
    </member>
    <member name="T:com.aspose.pdf.MovieAnnotation">
       
        <p>Represents a movie annotation that contains animated graphics and sound to be presented on the computer screen and through the speakers. When the annotation is activated, the movie is played.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.MovieAnnotation.getTitle">
       
        <p>Gets the title of the movie annotation.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.MovieAnnotation.setTitle(String)">
       
        <p>Sets the title of the movie annotation.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.MovieAnnotation.getFile">
       
        <p>Gets a file specification identifying a self-describing movie file.</p> @return FileSpecification value
      
    </member>
    <member name="M:com.aspose.pdf.MovieAnnotation.setFile(FileSpecification)">
       
        <p>Sets a file specification identifying a self-describing movie file.</p> @param value FileSpecification object
      
      <param name="FileSpecification"/>
    </member>
    <member name="M:com.aspose.pdf.MovieAnnotation.getPoster">
       
        <p>Gets or sets a flag or stream specifying whether and how a poster image representing the movie shall be displayed. If true, the poster image shall be retrieved from the movie file; if it is false, no poster shall be displayed.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.MovieAnnotation.setPoster(boolean)">
       
        <p>Gets or sets a flag or stream specifying whether and how a poster image representing the movie shall be displayed. If true, the poster image shall be retrieved from the movie file; if it is false, no poster shall be displayed.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.MovieAnnotation.getAspect">
       
        <p>Gets or sets the width and height of the movie�s bounding box, in pixels.</p> @return Point instance
      
    </member>
    <member name="M:com.aspose.pdf.MovieAnnotation.setAspect(Point)">
       
        <p>Gets or sets the width and height of the movie�s bounding box, in pixels.</p> @param value Point instance
      
      <param name="Point"/>
    </member>
    <member name="M:com.aspose.pdf.MovieAnnotation.getRotate">
       
        <p>Gets or sets the number of degrees by which the movie shall be rotated clockwise relative to the page. The value shall be a multiple of 90.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.MovieAnnotation.setRotate(int)">
       
        <p>Gets or sets the number of degrees by which the movie shall be rotated clockwise relative to the page. The value shall be a multiple of 90.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.MovieAnnotation.getAnnotationType">
       
        <p>Gets type of annotation.</p> @return AnnotationType element as int value @see AnnotationType
      
    </member>
    <member name="M:com.aspose.pdf.MovieAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor object to process the annotation.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.MovieAnnotation.#ctor(IDocument,String)">
       
        <p>Constructor for using with Generator.</p> @param document Document where movie annotation will be created. @param movieFile Name of movie file.
      
      <param name="IDocument"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.MovieAnnotation.#ctor(Page,Rectangle,String)">
       
        <p>Creates new Sound annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page. @param movieFile A movie file to be played when the annotation is activated.
      
      <param name="Page"/>
      <param name="Rectangle"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.NamedAction">
       
        <p>Represents named actions that PDF viewer applications are expected to support.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.NamedAction.getName">
       
        <p>Gets the action to be performed.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.NamedAction.setName(String)">
       
        <p>Sets the action to be performed.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.NamedAction.#ctor(int)">
       
        <p>Constructor for Named Action class.</p> @param action Action for which this object is created. @see PredefinedAction
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.NamedDestination">
       
        <p>Instead of being defined directly with the explicit syntax, a destination may be referred to indirectly by means of a name object or a byte string.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.NamedDestination.getName">
       
        <p>Represent getName method</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.NamedDestination.toString">
       
        <p>Converts destination to string value.</p> @return String value.
      
    </member>
    <member name="M:com.aspose.pdf.NamedDestination.#ctor(Document,String)">
       
        <p>Create named destination.</p> @param doc Document where named destination should be created. @param name Name to which destination refers.
      
      <param name="Document"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.nameddestinations.INamedDestinationCollection">
       
        <p>Collection of Named Destinations.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.nameddestinations.NamedDestinationCollection">
       
        <p>Class represents the collection of all destinations (a name tree mapping name strings to destinations (see 12.3.2.3, "Named Destinations") and (see 7.7.4, "Name Dictionary")) in the pdf document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.nameddestinations.NamedDestinationCollection.get_Item(String)">
       
        <p>Gets or sets appointment by its name.</p> @return Appoitnemt @param name Name of the appointment.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.nameddestinations.NamedDestinationCollection.set_Item(String,IAppointment)">
       
        <p>Gets or sets appointment by its name.</p> @param name Name of the appointment. @param value Appoitnemt instance
      
      <param name="String"/>
      <param name="IAppointment"/>
    </member>
    <member name="M:com.aspose.pdf.nameddestinations.NamedDestinationCollection.size">
       
        <p>Count of named destinations.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.nameddestinations.NamedDestinationCollection.remove(String)">
       
        <p>Delete named destination.</p> @param name Name of the destination to delete.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.nameddestinations.NamedDestinationCollection.add(String,IAppointment)">
       
        <p>Add new named destination.</p> @param name Destination name. @param appointment Appointment to add.
      
      <param name="String"/>
      <param name="IAppointment"/>
    </member>
    <member name="M:com.aspose.pdf.nameddestinations.NamedDestinationCollection.getNames">
       
        <p>List of names of the destinations.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.nameddestinations.NamedDestinationCollection.isEmpty">
      @return boolean value
    </member>
    <member name="T:com.aspose.pdf.Note">
       
        <p>This class represents generator paragraph note.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Note.getParagraphs">
       
        <p>Gets a collection that indicates all paragraphs in the FootNote.</p> @return Paragraphs.
      
    </member>
    <member name="M:com.aspose.pdf.Note.setParagraphs(Paragraphs)">
       
        <p>Sets a collection that indicates all paragraphs in the FootNote.</p> @param value Paragraphs.
      
      <param name="Paragraphs"/>
    </member>
    <member name="M:com.aspose.pdf.Note.getText">
       
        <p>Gets a note text.</p> @return string object
      
    </member>
    <member name="M:com.aspose.pdf.Note.setText(String)">
       
        <p>Sets a note text.</p> @param value string object
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Note.getTextState">
       
        <p>Gets or sets a note text state.</p> @return The TextState instance.
      
    </member>
    <member name="M:com.aspose.pdf.Note.setTextState(TextState)">
       
        <p>Gets or sets a note text state.</p> @param value The TextState instance.
      
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.Note.#ctor">
       
        <p>Initializes a new instance of the {@code Note} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Note.#ctor(String)">
       
        <p>Initializes a new instance of the {@code Note} class.</p> @param content The note content.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.NumberingStyle">
      Enumeration of supported page numbering style for PageLabel class.
    </member>
    <member name="F:com.aspose.pdf.NumberingStyle.NumeralsArabic">
      Arabic decimal numbers.
    </member>
    <member name="F:com.aspose.pdf.NumberingStyle.NumeralsRomanUppercase">
      Uppercase roman numbers (I, II, III...).
    </member>
    <member name="F:com.aspose.pdf.NumberingStyle.NumeralsRomanLowercase">
      Lowercase roman numbers (i, ii, iii...).
    </member>
    <member name="F:com.aspose.pdf.NumberingStyle.LettersUppercase">
      Uppercase latin letters (A, B, C...).
    </member>
    <member name="F:com.aspose.pdf.NumberingStyle.LettersLowercase">
      Lowercase latin letters (a, b, c...).
    </member>
    <member name="F:com.aspose.pdf.NumberingStyle.None">
      No numbering.
    </member>
    <member name="T:com.aspose.pdf.NumberTree">
      Class representing Number tree structure of PDF file. 7.9.7Number Trees
    </member>
    <member name="M:com.aspose.pdf.NumberTree.remove(int)">
      Remove key from number tree. @param key int value @return boolean value
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.NumberTree.get(int)">
      Gets item by key. @param key int value @return IPdfPrimitive object
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.NumberTree.getKeys">Gets all keys in the tree. @return {@code List&lt;Integer&gt; object}</member>
    <member name="T:com.aspose.pdf.OcspSettings">
       
        <p>Represents the ocsp settings using during signing process.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OcspSettings.getServerUrl">
       
        <p>Gets the ocsp server url.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.OcspSettings.setServerUrl(String)">
       
        <p>Sets the ocsp server url.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.OcspSettings.#ctor(String)">
       
        <p>Initializes a new instance of the {@code OcspSettings} class.</p> @param serverUrl The ocsp server url.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.Operator">
       
        <p>Abstract class representing operator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.getIndex">
       
        <p>Get Operator index in page operators list.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.Operator.setIndex(int)">
       
        <p>Set Operator index in page operators list.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.getCommandName">
       
        <p>Gets operator name.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.Operator.getParameters">
       
        <p>Gets array of operator parameters.</p> @return ArrayList of CommandParameter value
      
    </member>
    <member name="M:com.aspose.pdf.Operator.getCommand">
       
        <p>Gets command</p> @return ICommand object
      
    </member>
    <member name="M:com.aspose.pdf.Operator.reset">
      For internal usage only
    </member>
    <member name="M:com.aspose.pdf.Operator.accept(IOperatorSelector)">
       
        <p>Accepts visitor IOperatorSelector which provides operators processing.</p> @param visitor Visitor object
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.toString">
       
        <p>Translates command and parameters into string representation.</p> @return Operator text
      
    </member>
    <member name="M:com.aspose.pdf.Operator.toString(IPdfPrimitive)">
       
        <p>Returns text representation of Pdf primitive (string, array, dictionary etc.) according to PDF specification.</p> @param primitive Primitive @return Text represetation of the primitive
      
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.isTextShowOperator(Operator)">
       
        <p>Determines if the operator is operator which responsible for text output (Tj, TJ, etc)</p> @param op Operator object @return True if this is text output operator
      
      <param name="Operator"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.#ctor(int,ICommand)">
      For internal usage only! 
        <p>Constructor of Operators. Creates operator by command object and operator index.</p> @param index Index of operator in operators list @param command Command object of operator
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="T:com.aspose.pdf.OperatorCollection">
       
        <p>Class represents collection of operators</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.isReadOnly">
       
        <p>Gets a value indicating whether the collection is read-only.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.isCommandsParsed">
       
        <p>Gets commands parsed</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.updateNormalizedData">
       
        <p>Update object stream with fixing absent GSave/GRestore operators.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.updateData">
       
        <p>Update object stream.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.size">
       
        <p>Gets count of operators in the collection.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.isFastTextExtractionMode">
       
        <p>Indicates wheather collection is limited to fast text extraction</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.iterator">
       
        <p>Returns enumerator for collection</p> @return Collection enumerator
      
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.accept(IOperatorSelector)">
       
        <p>Accepts IOperatorSelector visitor object to process operators.</p> @param visitor Visitor object
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.add(Operator)">&lt;p&gt; Adds new operator into collection. &lt;/p&gt; &lt;hr&gt; &lt;p&gt; Example demonstrates how to add operators to the end of page.contents. &lt;p&gt; Document doc = new Document("input.pdf"); doc.getPages().get(1).getContents().add(new com.aspose.pdf.operators.q()); doc.getPages().get(1).getContents().add(new com.aspose.pdf.operators.Q()); &lt;/p&gt; @param op Operator which must be added 
      <param name="Operator"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.delete(int)">&lt;p&gt; Deletes operator from collection. &lt;/p&gt; &lt;hr&gt; &lt;p&gt; Example demonstrates how to delete operator by its index. &lt;p&gt; Document doc = new Document("input.pdf"); OperatorCollection oc = doc.getPages(1).getContents(); oc.delete(3); &lt;/p&gt; @param index Index of operator which must be deleted. Operators numbering starts from 1. 
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.deleteUnrestricted(int)">
       
        <p>internal unrestricted version of Delete(index)</p> @param index int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.insert(int,Operator)">&lt;p&gt; Inserts operator into collection. &lt;/p&gt; &lt;hr&gt; &lt;p&gt; Example demonstrates how to insert operator to the page contents. &lt;p&gt; Document doc = new Document("input.pdf"); OperatorCollection oc = doc.getPages(1).getContents(); oc.insert(1, new com.aspose.pdf.operators.q()); oc.add(new com.aspose.pdf.operators.Q()); &lt;/p&gt; @param index Index where new operator must be added @param op Operator which will be inserted 
      <param name="int"/>
      <param name="Operator"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.replace(Iterable&lt;Operator&gt;)">
       
        <p>Replace operators in collection with other operators.</p> @param operators Operators list which will replace operators currently contained in the collection. Each operator from the list must have correct index in range [1..N] where N is count of operators in the collection
      
      <param name="Iterable&lt;Operator&gt;"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.replace(Operator[])">
       
        <p>Replace operators in collection with other operators.</p> @param operators Operator[] array which will replace operators currently contained in the collection. Each operator from the list must have correct index in range [1..N] where N is count of operators in the collection
      
      <param name="Operator[]"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.add(Operator[])">&lt;p&gt; Add operators at the end of the contents operators. &lt;/p&gt; &lt;hr&gt; &lt;p&gt; Example demonstrates how to add operator to the end of page contents. &lt;/p&gt; &lt;p&gt; Document doc = new Document("input.pdf"); OperatorCollection oc = doc.getPages().get(1).getContents(); oc.add(new Operator[] { new com.aspose.pdf.operators.q(), new com.aspose.pdf.operators.Q() } ); &lt;/p&gt; @param ops Array of operators to be added. Each operator can have any index (by default -1) because they come to the end of the contents operators i.e. indices are assigned automatically. 
      <param name="Operator[]"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.insert(int,Operator[])">&lt;p&gt; Insert operators at the the given position. &lt;/p&gt; &lt;hr&gt; &lt;p&gt; Example demonstrates how to insert operator to the page contents. &lt;/p&gt; &lt;p&gt; Document doc = new Document("input.pdf"); OperatorCollection oc = doc.getPages().get(1).getContents(); oc.insert(1, new Operator[] { new com.aspose.pdf.operators.q(), new com.aspose.pdf.operators.Q() } ); &lt;/p&gt; @param at Index from which operators are being started to insert. @param ops Array of operators to be inserted. Each operator can have any index (by default -1) because their indices adjusted automatically starting from {@code at}. 
      <param name="int"/>
      <param name="Operator[]"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.get_Item(int)">&lt;p&gt; Gets operator by its index. &lt;/p&gt; &lt;hr&gt; Example demonstrates how to get operator of page contents by index. &lt;pre&gt; Document doc = new Document("input.pdf"); OperatorCollection oc = doc.getPages().get(1).getContents(); Operator first = oc.get_Item(1); &lt;/pre&gt; @param index Index of operator. Numbering is starts from 1. @return Operator from requested index 
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.set_Item(int,Operator)">
       
        <p>Sets operator by its index.</p> @param index int value @param value Operator object
      
      <param name="int"/>
      <param name="Operator"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.getUnrestricted(int)">
      Internal unrestricted version of indexer @param index int value @return Operator object
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.delete(Operator[])">&lt;p&gt; Deletes operators from collection. &lt;/p&gt; &lt;hr&gt; &lt;p&gt; Example demonstrates how to remove operator from page contents. &lt;/p&gt; &lt;p&gt; Document doc = new Document("input.pdf"); OperatorCollection oc = doc.getPages().get(1).getContents(); oc.delete(new Operator[] { oc[1] } ); &lt;/p&gt; @param ops Array of operators to delete 
      <param name="Operator[]"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.delete(Iterable&lt;Operator&gt;)">&lt;p&gt; Deletes operators from collection. &lt;/p&gt; &lt;hr&gt; Example demonstrates how to remove operator from page contents. &lt;p&gt; Document doc = new Document("input.pdf"); OperatorCollection oc = doc.getPages().get(1).getContents(); ArrayList&amp;lt;Operator&amp;gt; opList = new ArrayList&amp;lt;Operator&amp;gt;(); opList.add(oc[1]); oc.delete(opList); &lt;/p&gt; @param list The list of operators to delete 
      <param name="Iterable&lt;Operator&gt;"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.insert(int,Iterable&lt;Operator&gt;)">&lt;p&gt; Insert operators at the the given position. &lt;/p&gt; &lt;hr&gt; Example demonstrates how to insert operators to page contents. &lt;p&gt; Document doc = new Document("input.pdf"); OperatorCollection oc = doc.getPages().get(1).getContents(); ArrayList&amp;lt;Operator&amp;gt; opList = new List&amp;lt;Operator&amp;gt;(); opList.add(new com.aspose.pdf.operators.q()); opList.add(new com.aspose.pdf.operators.Q()); oc.insert(1, opList); &lt;/p&gt; @param at Index from which operators are being started to insert. @param ops Array of operators to be inserted. 
      <param name="int"/>
      <param name="Iterable&lt;Operator&gt;"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.clear">&lt;p&gt; Removes all operators from list. &lt;/p&gt; &lt;hr&gt; &lt;p&gt; Example demonstrates how to clear page contents. &lt;/p&gt; &lt;p&gt; Document doc = new Document("input.pdf"); doc.getPages().get(1).clear(); &lt;/p&gt;</member>
    <member name="M:com.aspose.pdf.OperatorCollection.toString">
       
        <p>Returns text representation of the operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.add(Iterable&lt;Operator&gt;)">&lt;p&gt; Adds to collection all operators from other collection. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Example demonstrates how to add operator collection to the page contents. Document doc = new Document("input.pdf"); OperatorCollection oc = doc.getPages(1).getContents(); ArrayList opList = new ArrayList(); opList.add(new com.aspose.pdf.operators.q()); opList.add(new com.aspose.pdf.operators.Q()); oc.add(opList); &lt;/pre&gt; @param ops collection which contains operators which will be added. 
      <param name="Iterable&lt;Operator&gt;"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.isBracketed">
       
        <p>Gets bracketed status of operator sequence i.e. is this operators are inside of q - Q blocks</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.suppressUpdate">
       
        <p>Suppresses update contents data The contents stream is not updated until ResumeUpdate is called</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.resumeUpdate">
       
        <p>Resumes document update. Updates contents stream in case there are any pending changes.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.cancelUpdate">
       
        <p>Cancels last update. This method may be called when the change should not raise contents update.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.toList">
       
        <p>Returns operator list.</p> @return operator list.
      
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.remove(Operator)">
       
        <p>Remove operator from the collection.</p> @param op Operator to be removed. @return True if operator was found and removed. False if operator did not belong to the collection.
      
      <param name="Operator"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.contains(Operator)">
       
        <p>Returns true if the collection contains given operator.</p> @param op Operator instance @return boolean value True - if operator found; otherwise, false.
      
      <param name="Operator"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.#ctor(IPdfPrimitive)">
      For internal usage only! 
        <p>Constructor of OperatorCollection. Constructs operators from primitive contains operators list.</p> @param contents IPdfPrimitive object
      
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.operators.BasicSetColorAndPatternOperator">
       
        <p>Base operator for all Set Color operators.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.BasicSetColorAndPatternOperator.getPatternName">
       
        <p>Gets Pattern Name.</p> @return String value
      
    </member>
    <member name="T:com.aspose.pdf.operators.BasicSetColorOperator">
       
        <p>Base class for set color operators.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.BasicSetColorOperator.getR">
       
        <p>Gets red component of color</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.BasicSetColorOperator.getG">
       
        <p>Gets green component of color</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.BasicSetColorOperator.getB">
       
        <p>Gets red component of color</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.BasicSetColorOperator.getC">
       
        <p>Gets cyan component of CMYK color.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.BasicSetColorOperator.getM">
       
        <p>Gets magenta component of CMYK color.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.BasicSetColorOperator.getY">
       
        <p>Gets yellow component of CMYK color.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.BasicSetColorOperator.getK">
       
        <p>Gets black component of CMYK color.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.BasicSetColorOperator.getGrey">
       
        <p>Gets black component of gray color.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.BasicSetColorOperator.getColorArray">
       
        <p>Gets array of color components.</p> @return double array
      
    </member>
    <member name="T:com.aspose.pdf.operators.BDC">
       
        <p>class representing BDC operator (Begin marked-content sequence)</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.BDC.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.BDC.getTag">
       
        <p>Gets marked content tag</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.operators.BDC.setTag(String)">
       
        <p>Sets marked content tag</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.operators.BDC.getPropertiesDictionary">
       
        <p>Gets properties dictionary</p> @return IPdfDictionary value
      
    </member>
    <member name="M:com.aspose.pdf.operators.BDC.setPropertiesDictionary(IPdfDictionary)">
       
        <p>Sets properties dictionary</p> @param value IPdfDictionary value
      
      <param name="IPdfDictionary"/>
    </member>
    <member name="M:com.aspose.pdf.operators.BDC.getPropertiesName">
       
        <p>Gets properties name</p> @return IPdfName value
      
    </member>
    <member name="M:com.aspose.pdf.operators.BDC.setPropertiesName(IPdfName)">
       
        <p>Sets properties name</p> @param value IPdfName value
      
      <param name="IPdfName"/>
    </member>
    <member name="M:com.aspose.pdf.operators.BDC.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.BDC.#ctor(String)">
      Initializes operator. @param tag String Tag value
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.operators.BDC.#ctor(int,ICommand)">
       
        <p>Constructor for operator class. Initializes operator.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.BDC.#ctor(String,IPdfDictionary)">
      <param name="String"/>
      <param name="IPdfDictionary"/>
    </member>
    <member name="M:com.aspose.pdf.operators.BDC.#ctor(String,IPdfName)">
      <param name="String"/>
      <param name="IPdfName"/>
    </member>
    <member name="T:com.aspose.pdf.operators.BI">
       
        <p>Class representing BI operator (Begin inline image obect).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.BI.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.BI.toCommand"/>
    <member name="M:com.aspose.pdf.operators.BI.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.BI.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="T:com.aspose.pdf.operators.BlockTextOperator">
       
        <p>Abstract base class for text block operators i.e. Begin and End text operators (BT/ET)</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.BlockTextOperator.#ctor">
       
        <p>Constructor for new operator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.BlockTextOperator.#ctor(TextProperties)">
       
        <p>Constructor for BlockTextOperator which accepts TextProperties.</p> @param textProperties Text properties.
      
      <param name="TextProperties"/>
    </member>
    <member name="T:com.aspose.pdf.operators.BMC">
       
        <p>Class representing BMC operator (Begin marked-content sequence).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.BMC.getTag">
       
        <p>Gets marked content tag</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.operators.BMC.setTag(String)">
       
        <p>Sets marked content tag</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.operators.BMC.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.BMC.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.BMC.toCommand"/>
    <member name="M:com.aspose.pdf.operators.BMC.fromCommand(ICommand)">
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.BMC.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.BMC.#ctor(String)">
       
        <p>Constructor for writing program.</p> @param tag Marked content tag.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.operators.BT">
       
        <p>Class representing BT operator (Begin of text block).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.BT.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.BT.toString">
       
        <p>Produces text code of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.BT.toCommand"/>
    <member name="M:com.aspose.pdf.operators.BT.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.BT.#ctor">
       
        <p>Constructor for writing program.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.operators.BX">
       
        <p>Class representing BX operator (begin compatibility section).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.BX.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.BX.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.BX.getCommandName">
       
        <p>Returns text representation of command name.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.operators.BX.toCommand"/>
    <member name="M:com.aspose.pdf.operators.BX.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.BX.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="T:com.aspose.pdf.operators.Clip">
       
        <p>Class representing W operator (set clipping path using non-zero winding rule).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.Clip.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.Clip.toString">
       
        <p>Returns text representation of operators.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.Clip.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.Clip.#ctor">
       
        <p>Constructor for writing program.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.operators.ClosePath">
       
        <p>Class representing h operator (close path).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.ClosePath.getCommandName"/>
    <member name="M:com.aspose.pdf.operators.ClosePath.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.ClosePath.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.ClosePath.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="T:com.aspose.pdf.operators.ClosePathEOFillStroke">
       
        <p>Class representing b* operator (close, fill and stroke path using even-odd rule).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.ClosePathEOFillStroke.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.ClosePathEOFillStroke.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.ClosePathEOFillStroke.getCommandName">
       
        <p>Returns text representation of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.ClosePathEOFillStroke.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.ClosePathEOFillStroke.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="T:com.aspose.pdf.operators.ClosePathFillStroke">
       
        <p>Class representing b operator (close, fill and stroke path with nonzer winding rule).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.ClosePathFillStroke.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.ClosePathFillStroke.toString">
       
        <p>Returns string representation of operator.</p> @return String representation
      
    </member>
    <member name="M:com.aspose.pdf.operators.ClosePathFillStroke.getCommandName">
       
        <p>Returns string representation of operator.</p> @return String representation
      
    </member>
    <member name="M:com.aspose.pdf.operators.ClosePathFillStroke.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.ClosePathFillStroke.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="T:com.aspose.pdf.operators.ClosePathStroke">
       
        <p>Class representing s operator (Close and stroke path).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.ClosePathStroke.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.ClosePathStroke.toString">
       
        <p>Returns text representation of the operator.</p> @return Text representation of the operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.ClosePathStroke.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.ClosePathStroke.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.operators.ConcatenateMatrix">
       
        <p>Class representing cm operator (concatenate matrix to current transformation matrix).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.ConcatenateMatrix.getMatrix">
       
        <p>Matrix argument of the operator.</p> @return Matrix object
      
    </member>
    <member name="M:com.aspose.pdf.operators.ConcatenateMatrix.setMatrix(Matrix)">
       
        <p>Matrix argument of the operator.</p> @param value Matrix object
      
      <param name="Matrix"/>
    </member>
    <member name="M:com.aspose.pdf.operators.ConcatenateMatrix.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.ConcatenateMatrix.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of representation
      
    </member>
    <member name="M:com.aspose.pdf.operators.ConcatenateMatrix.fromCommand(ICommand)">
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.ConcatenateMatrix.toCommand"/>
    <member name="M:com.aspose.pdf.operators.ConcatenateMatrix.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.ConcatenateMatrix.#ctor(double,double,double,double,double,double)">
       
        <p>Constructor for operator class.</p> @param a A coefficient @param b B coefficient @param c C coefficient @param d D coefficient @param e E coefficient @param f F coefficient
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.ConcatenateMatrix.#ctor(Matrix)">
       
        <p>Initializes operator by matrix.</p> @param m Transfomation matrix.
      
      <param name="Matrix"/>
    </member>
    <member name="T:com.aspose.pdf.operators.CurveTo">
       
        <p>Class representing c operator (append curve to path).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.CurveTo.getPoints">
       
        <p>Points of the curve.</p> @return Points[] object
      
    </member>
    <member name="M:com.aspose.pdf.operators.CurveTo.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.CurveTo.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.CurveTo.fromCommand(ICommand)">
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.CurveTo.toCommand"/>
    <member name="M:com.aspose.pdf.operators.CurveTo.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.CurveTo.#ctor(double,double,double,double,double,double)">
       
        <p>Initializes curve operator.</p> @param x1 Abscissa of first point. @param y1 Ordinate of first point. @param x2 Abscissa of second point. @param y2 Ordinate of second point. @param x3 Abscissa of third point. @param y3 Ordinate of third point.
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.operators.CurveTo1">
       
        <p>Class representing v operator (append curve to path, initial point replicated).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.CurveTo1.getPoints">
       
        <p>Points of the curve.</p> @return array of Point instances
      
    </member>
    <member name="M:com.aspose.pdf.operators.CurveTo1.accept(IOperatorSelector)">
       
        <p>Accepts operator selector.</p> @param visitor Visitor object
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.CurveTo1.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.CurveTo1.#ctor(double,double,double,double)">
       
        <p>Initializes curve operator.</p> @param x2 Abscissa of second point. @param y2 Ordinate of second point. @param x3 Abscissa of third point. @param y3 Ordinate of third point.
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.operators.CurveTo2">
       
        <p>Class representing y operator (append curve to path, final point replicated).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.CurveTo2.getPoints">
       
        <p>Points of the curve.</p> @return array of Point instances
      
    </member>
    <member name="M:com.aspose.pdf.operators.CurveTo2.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.CurveTo2.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.CurveTo2.#ctor(double,double,double,double)">
       
        <p>Initializes curve operator.</p> @param x1 Abscissa of second point. @param y1 Ordinate of second point. @param x3 Abscissa of third point. @param y3 Ordinate of third point.
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.operators.Do">
       
        <p>Class representing Do operator (Invoke XObject).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.Do.getName">
       
        <p>Get name of XObject argument of the operator.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.operators.Do.setName(String)">
       
        <p>Set name of XObject argument of the operator.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.operators.Do.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.Do.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.Do.getCommandName">
       
        <p>Gets command name</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.operators.Do.toCommand"/>
    <member name="M:com.aspose.pdf.operators.Do.fromCommand(ICommand)">
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.Do.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.Do.#ctor(String)">
       
        <p>Constructs new Do operator.</p> @param name Name of invoked XObject.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.operators.Do.#ctor">
       
        <p>Constructs new Do operator. Used for retrieving all Do operators, i.e. without checking their argument names.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.operators.DP">
       
        <p>Class represeting DP operator (designamte marked content point).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.DP.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.DP.getTag">
       
        <p>Gets marked content tag</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.operators.DP.setTag(String)">
       
        <p>Sets marked content tag</p> @param value String object
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.operators.DP.getPropertiesDictionary">
       
        <p>Gets properties dictionary</p> @return IPdfDictionary value
      
    </member>
    <member name="M:com.aspose.pdf.operators.DP.setPropertiesDictionary(IPdfDictionary)">
       
        <p>Sets properties dictionary</p> @param value IPdfDictionary value
      
      <param name="IPdfDictionary"/>
    </member>
    <member name="M:com.aspose.pdf.operators.DP.getPropertiesName">
       
        <p>Gets properties name</p> @return IPdfName value
      
    </member>
    <member name="M:com.aspose.pdf.operators.DP.setPropertiesName(IPdfName)">
       
        <p>Sets properties name</p> @param value IPdfName value
      
      <param name="IPdfName"/>
    </member>
    <member name="M:com.aspose.pdf.operators.DP.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.DP.toCommand"/>
    <member name="M:com.aspose.pdf.operators.DP.fromCommand(ICommand)">
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.DP.#ctor(String)">
      Initializes operator. @param tag String Tag value
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.operators.DP.#ctor(int,ICommand)">
       
        <p>Constructor for operator class. Initializes operator.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.DP.#ctor(String,IPdfDictionary)">
      <param name="String"/>
      <param name="IPdfDictionary"/>
    </member>
    <member name="T:com.aspose.pdf.operators.EI">
       
        <p>Class representing EI operator (End inline image object).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.EI.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.EI.toString">
       
        <p>Translates command and parameters into string representation.</p> @return Operator text
      
    </member>
    <member name="M:com.aspose.pdf.operators.EI.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.EI.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="T:com.aspose.pdf.operators.EMC">
       
        <p>Clsss representing EMC oeprator (End of marked-content sequence).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.EMC.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.EMC.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of the operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.EMC.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.EMC.#ctor">
       
        <p>Constructor for writing program.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.operators.EndPath">
       
        <p>Class representing n operator (end path without filling or stroking).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.EndPath.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.EndPath.toString">
       
        <p>Text representation of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.EndPath.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.EndPath.#ctor">
       
        <p>Constructor for writing program.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.operators.EOClip">
       
        <p>Class representing W* operator (set clipping path using even-odd rule).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.EOClip.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.EOClip.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.EOClip.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="T:com.aspose.pdf.operators.EOFill">
       
        <p>Class representing f* operator (fill path using even-odd rule).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.EOFill.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.EOFill.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.EOFill.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.operators.EOFillStroke">
       
        <p>Class representing B* operator (fill and stroke path usign even-odd rule).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.EOFillStroke.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.EOFillStroke.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.EOFillStroke.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="T:com.aspose.pdf.operators.ET">
       
        <p>Class representing operator ET (End of text block).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.ET.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.ET.toString">
       
        <p>Produces text code of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.ET.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.ET.#ctor">
       
        <p>Constructor for writing program.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.operators.EX">
       
        <p>Class representing EX operator (End of compatibility section).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.EX.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.EX.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.EX.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="T:com.aspose.pdf.operators.Fill">
       
        <p>Class representing f operator (fill path with nonzero winding number rule).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.Fill.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.Fill.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.Fill.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.Fill.#ctor">
       
        <p>Initilizes new f operator.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.operators.FillStroke">
       
        <p>Class representing B operator (fill and stroke path using nonzero winding rule)</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.FillStroke.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.FillStroke.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.FillStroke.getCommandName">
       
        <p>Returns text representation of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.FillStroke.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.FillStroke.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="T:com.aspose.pdf.operators.GlyphPosition">
       
        <p>Class describes text and position to use with operator TJ (set glyph with position)</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.GlyphPosition.getText">
       
        <p>Text of operator.</p> @return String object
      
    </member>
    <member name="M:com.aspose.pdf.operators.GlyphPosition.getPosition">
       
        <p>Position off the text in the operator.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.GlyphPosition.#ctor(String,double)">
      initialize GlyphPosition class @param text Text value. @param position double Position value.
      <param name="String"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.GlyphPosition.#ctor(String)">
       
        <p>Constructor for Glyph Position.</p> @param text String Text value.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.operators.GRestore">
       
        <p>Class representing Q operator (restore graphics state).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.GRestore.toString">
       
        <p>Returns text of the operator.</p> @return Text representation of the operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.GRestore.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.GRestore.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.GRestore.#ctor">
       
        <p>Constructor for Q operator.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.operators.GS">
       
        <p>Class representing gs operator (set parameters from graphic state parameter dictionary).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.GS.getName">
       
        <p>Gets name of graphic state resource.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.operators.GS.setName(String)">
       
        <p>Sets name of graphic state resource.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.operators.GS.toString">
       
        <p>Returns string represnetation of operator.</p> @return String representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.GS.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.GS.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.GS.#ctor(String)">
       
        <p>Initializes gs operator.</p> @param name Name of graphic state.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.operators.GSave">
       
        <p>Class representing q operator (save graphics state).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.GSave.toString">
       
        <p>Returns text of the operator.</p> @return Text representation of the operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.GSave.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.GSave.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.GSave.#ctor">
       
        <p>Constructor for q operator.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.operators.ID">
       
        <p>Class representing ID operator (Begin inline image data).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.ID.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.ID.getCommandName"/>
    <member name="M:com.aspose.pdf.operators.ID.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="T:com.aspose.pdf.operators.LineTo">
       
        <p>Class representing l operator (add line to the path).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.LineTo.getX">
       
        <p>X coordinate of line point.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.LineTo.setX(double)">
       
        <p>X coordinate of line point.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.LineTo.getY">
       
        <p>Y coordinate of line point.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.LineTo.setY(double)">
       
        <p>Y coordinate of line point.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.LineTo.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.LineTo.toString">
       
        <p>Returns text representation of the operator.</p> @return Text representation of the operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.LineTo.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.LineTo.#ctor(double,double)">
       
        <p>Initializes line operator.</p> @param x X coordinate. @param y Y coordinate.
      
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.operators.MoveTextPosition">
       
        <p>Class representing Td operator (move text position).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.MoveTextPosition.getX">
       
        <p>X coordinate of text position.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.MoveTextPosition.setX(double)">
       
        <p>X coordinate of text position.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.MoveTextPosition.getY">
       
        <p>Y coordinate of text position.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.MoveTextPosition.setY(double)">
       
        <p>Y coordinate of text position.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.MoveTextPosition.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.MoveTextPosition.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.MoveTextPosition.#ctor(int,ICommand)">
       
        <p>Initializes operator.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.MoveTextPosition.#ctor(double,double)">
       
        <p>Initializes operator.</p> @param x X coordinate of text position. @param y Y coordinate of text position.
      
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.operators.MoveTextPositionSetLeading">
       
        <p>Class representing TD operator (move position and set leading).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.MoveTextPositionSetLeading.getX">
       
        <p>X coordinate of text position.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.MoveTextPositionSetLeading.setX(double)">
       
        <p>X coordinate of text position.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.MoveTextPositionSetLeading.getY">
       
        <p>Y coordinate of text position.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.MoveTextPositionSetLeading.setY(double)">
       
        <p>Y coordinate of text position.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.MoveTextPositionSetLeading.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.MoveTextPositionSetLeading.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.MoveTextPositionSetLeading.#ctor(double,double)">
       
        <p>Initializes operator.</p> @param x X coordinate of text position. @param y Y coordinate of text position.
      
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.operators.MoveTo">
       
        <p>Class representing {@code operators.m} (move to and begin new subpath).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.MoveTo.getX">
       
        <p>X coordinate</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.MoveTo.setX(double)">
       
        <p>X coordinate</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.MoveTo.getY">
       
        <p>Y coordinate</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.MoveTo.setY(double)">
       
        <p>Y coordinate</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.MoveTo.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.MoveTo.toString">
       
        <p>Returns text representation of the operator.</p> @return Text representation of the operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.MoveTo.#ctor(int,ICommand)">
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.MoveTo.#ctor(double,double)">
       
        <p>Inintalizes new {@code Operator.m} (move to) operator.</p> @param x The x-coordinate. @param y The y-coordinate.
      
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.operators.MoveToNextLine">
       
        <p>Class representing T* operator (Move to start of the next line).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.MoveToNextLine.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.MoveToNextLine.toString">
       
        <p>Returns text of the operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.MoveToNextLine.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.MoveToNextLine.#ctor">
       
        <p>Constructor for writing program.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.operators.MoveToNextLineShowText">
       
        <p>Class representing ' operator (move to next line and show text).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.MoveToNextLineShowText.getText">
       
        <p>Gets operator text.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.operators.MoveToNextLineShowText.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.MoveToNextLineShowText.#ctor">
       
        <p>Initializesoperator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.MoveToNextLineShowText.#ctor(String)">
       
        <p>Initializes operator.</p> @param text The text.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.operators.MoveToNextLineShowText.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="T:com.aspose.pdf.operators.MP">
       
        <p>Class representing MP operator (define marked-content point).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.MP.getTag">
       
        <p>Gets marked content tag</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.operators.MP.setTag(String)">
       
        <p>Sets marked content tag</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.operators.MP.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.MP.#ctor(String)">
       
        <p>Initializes operator.</p> @param tag Marked content tag.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.operators.MP.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="T:com.aspose.pdf.operators.ObsoleteFill">
       
        <p>Class representing F operator (fill path using nonzero winding rule).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.ObsoleteFill.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.ObsoleteFill.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.ObsoleteFill.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="T:com.aspose.pdf.operators.Re">
       
        <p>Class representing re operator (add rectangle to the path).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.Re.getX">
       
        <p>X coordinate of most left side of rectangle.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.Re.setX(double)">
       
        <p>X coordinate of most left side of rectangle.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.Re.getY">
       
        <p>Y coordinate of bottom side of rectangle.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.Re.setY(double)">
       
        <p>Y coordinate of bottom side of rectangle.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.Re.getWidth">
       
        <p>Gets width of the rectangle.</p> @return width of the rectangle.
      
    </member>
    <member name="M:com.aspose.pdf.operators.Re.setWidth(double)">
       
        <p>Sets width of the rectangle.</p> @param value width of the rectangle.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.Re.getHeight">
       
        <p>Height of the rectangle.</p> @return Height of the rectangle.
      
    </member>
    <member name="M:com.aspose.pdf.operators.Re.setHeight(double)">
       
        <p>Height of the rectangle.</p> @param value Height of the rectangle.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.Re.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.Re.toString">
       
        <p>Returns text representation of the operator.</p> @return Text representation of the operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.Re.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.Re.#ctor">
       
        <p>Constructor for extracting goals.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.Re.#ctor(double,double,double,double)">
       
        <p>Constructor for writing program.</p> @param x The x-coordinate of the bottom-left corner of the rectangle. @param y The y-coordinate of the bottom-left corner of the rectangle. @param width The width of the rectangle. @param height The height of the rectangle.
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.operators.SelectFont">
       
        <p>Class representing Tf operator (set text font and size).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SelectFont.getName">
       
        <p>Gets name of font.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.operators.SelectFont.getSize">
       
        <p>Gets size of text.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.SelectFont.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SelectFont.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.SelectFont.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SelectFont.#ctor(String,double)">
       
        <p>Constructor for writin program.</p> @param resName The name of font resource, e.g. F1, F2 etc. @param size Size of the font.
      
      <param name="String"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.operators.SetAdvancedColor">
       
        <p>Class representing scn operator (set color for non-stroking operations).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetAdvancedColor.getColor">
      Not supported yet. 
        <p>Returns color specified by operator.</p> @return Color set by operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetAdvancedColor.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetAdvancedColor.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetAdvancedColor.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetAdvancedColor.#ctor(double,String)">
       
        <p>Constructor for scn operator.</p> @param g Color value. @param patternName Pattern name.
      
      <param name="double"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetAdvancedColor.#ctor(double)">
       
        <p>Constructor for scn operator</p> @param g Color value.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetAdvancedColor.#ctor(double,double,double,String)">
       
        <p>Constructor for scn operator.</p> @param r Red component of the color. @param g Green component of the color. @param b Blue component of the color. @param patternName Pattern name.
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetAdvancedColor.#ctor(double,double,double,double,String)">
       
        <p>Constructor for scn operator.</p> @param c Cyan component of the color. @param m Magenta component of the color. @param y Yellow component of the color. @param k Black component of the color. @param patternName String object Pattern name.
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.operators.SetAdvancedColorStroke">
       
        <p>Class representing SCN operator (set color for stroking operations).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetAdvancedColorStroke.getColor">
      Not supported yet. 
        <p>Returns color specified by operator.</p> @return Color specified by operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetAdvancedColorStroke.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetAdvancedColorStroke.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetAdvancedColorStroke.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetAdvancedColorStroke.#ctor(double)">
       
        <p>Constructor for scn operator</p> @param g double value Gray color value.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetAdvancedColorStroke.#ctor(double,String)">
       
        <p>Constructor for scn operator.</p> @param g Gray color value. @param patternName String value Name of the pattern.
      
      <param name="double"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetAdvancedColorStroke.#ctor(double,double,double,String)">
       
        <p>Constructor for scn operator.</p> @param r Red component of the color/ @param g Green component of the color. @param b Blue component of the color. @param patternName String object
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetAdvancedColorStroke.#ctor(double,double,double,double,String)">
       
        <p>Constructor for scn operator.</p> @param c Cyan component of the color. @param m Magenta component of the color. @param y Yellow component of the color. @param k Black component of the color @param patternName Name of the pattern.
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.operators.SetCharacterSpacing">
       
        <p>Class representing Tc operator (set character spacing).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetCharacterSpacing.getCharSpacing">
       
        <p>Gets the character spacing.</p> @return character spacing.
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetCharacterSpacing.setCharSpacing(double)">
       
        <p>Sets the character spacing.</p> @param value character spacing.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetCharacterSpacing.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetCharacterSpacing.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetCharacterSpacing.#ctor(double)">
       
        <p>Initializes operator.</p> @param charSpacing Character spacing.
      
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.operators.SetCharWidth">
       
        <p>Class representing d0 operator (set glyph width).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetCharWidth.getWx">
       
        <p>Horizontal displacement of glyph coordinate.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetCharWidth.getWy">
       
        <p>Vertical displacement of glyph coordinate.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetCharWidth.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetCharWidth.toCommand"/>
    <member name="M:com.aspose.pdf.operators.SetCharWidth.fromCommand(ICommand)">
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetCharWidth.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of representation
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetCharWidth.#ctor(double,double)">
       
        <p>Constructor.</p> @param wx Horizontal displacement of glyph. @param wy Vertical displacement of glyph.
      
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetCharWidth.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="T:com.aspose.pdf.operators.SetCharWidthBoundingBox">
       
        <p>Class representing d1 operator (set glyph and bounding box).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetCharWidthBoundingBox.getWx">
       
        <p>Horizontal displacement of glyph.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetCharWidthBoundingBox.getWy">
       
        <p>Vertical displacement of glyph.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetCharWidthBoundingBox.getLlx">
       
        <p>Lower-left horizontal coordinate of bounding rectangle.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetCharWidthBoundingBox.getLly">
       
        <p>Lower-left vertical coordinate of bounding rectangle.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetCharWidthBoundingBox.getUrx">
       
        <p>Upper-right horizontal coordinate of bounding rectangle.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetCharWidthBoundingBox.getUry">
       
        <p>Upper-right vertical coordinate of bounding rectangle.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetCharWidthBoundingBox.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetCharWidthBoundingBox.fromCommand(ICommand)">
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetCharWidthBoundingBox.toCommand"/>
    <member name="M:com.aspose.pdf.operators.SetCharWidthBoundingBox.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of representation
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetCharWidthBoundingBox.#ctor(double,double,double,double,double,double)">
       
        <p>Initializes operator.</p> @param wx double value @param wy double value @param llx double value @param lly double value @param urx double value @param ury double value
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetCharWidthBoundingBox.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="T:com.aspose.pdf.operators.SetCMYKColor">
       
        <p>Class representing k operator (set CMYK color for non-stroking operations).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetCMYKColor.getColor">
       
        <p>Returns color.</p> @return Color specified by operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetCMYKColor.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetCMYKColor.getRGBColor(double[],double[])">
      <param name="double[]"/>
      <param name="double[]"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetCMYKColor.#ctor(double,double,double,double)">
       
        <p>Initializes operator.</p> @param c The level of cyan from 0.0 to 1.0 @param m The level of magenta from 0.0 to 1.0 @param y The level of yellow from 0.0 to 1.0 @param k The level of black from 0.0 to 1.0
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetCMYKColor.#ctor(int,ICommand)">
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="T:com.aspose.pdf.operators.SetCMYKColorStroke">
       
        <p>Class representing K operator (set CMYK color for stroking operations).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetCMYKColorStroke.getColor">
       
        <p>Returns the RGB color</p> @return Color specified by operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetCMYKColorStroke.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetCMYKColorStroke.getRGBColor(double[],double[])">
      <param name="double[]"/>
      <param name="double[]"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetCMYKColorStroke.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetCMYKColorStroke.#ctor(double,double,double,double)">
       
        <p>Initializes operator.</p> @param c The level of cyan from 0.0 to 1.0 @param m The level of magenta from 0.0 to 1.0 @param y The level of yellow from 0.0 to 1.0 @param k The level of black from 0.0 to 1.0
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.operators.SetColor">
       
        <p>Represents class for sc operator (set color for non-stroking operations).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetColor.getColor">
      Not supported yet. 
        <p>Returns color specified by the operator.</p> @return Operator color.
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetColor.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetColor.toString">
       
        <p>Returns string representation of color.</p> @return String representation of color.
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetColor.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetColor.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetColor.#ctor(double)">
       
        <p>Set color for stroking operators for DeviceGrey, CalGrey and Indexed color spaces.</p> @param g Color value.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetColor.#ctor(double,double,double)">
       
        <p>Set color for stroking operator for DeviceRGB, CalRGB, and Lab color spaces</p> @param r Red component. @param g Green component. @param b Blue component.
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetColor.#ctor(double,double,double,double)">
       
        <p>Set color for non-stroking operator for CMYK color space</p> @param c Cyan component. @param m Magenta component. @param y Yellow component. @param k Black component.
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetColor.#ctor(double[])">
       
        <p>Constructor which allows to specify color components.</p> @param color Array of color components.
      
      <param name="double[]"/>
    </member>
    <member name="T:com.aspose.pdf.operators.SetColorOperator">
       
        <p>Class representing set color operation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetColorOperator.getColor">
       
        <p>Retirns color specified by the operator.</p> @return Color specified by operator.
      
    </member>
    <member name="T:com.aspose.pdf.operators.SetColorRenderingIntent">
       
        <p>Class representing ri operator (set color rendering intent).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetColorRenderingIntent.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetColorRenderingIntent.getIntentName">
       
        <p>Gets or sets color rendering intent name.</p> @return String object
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetColorRenderingIntent.setIntentName(String)">
       
        <p>Gets or sets color rendering intent name.</p> @param value String object
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetColorRenderingIntent.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetColorRenderingIntent.#ctor(String)">
       
        <p>Set Color Rendering Intent operator constructor.</p> @param intentName Color Rendering Intent.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetColorRenderingIntent.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="T:com.aspose.pdf.operators.SetColorSpace">
       
        <p>Class representing cs operator (set colorspace for non-stroking operations)</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetColorSpace.getName">
       
        <p>Gets color space name.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetColorSpace.setName(String)">
       
        <p>Sets color space name.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetColorSpace.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetColorSpace.getCommandName">
       
        <p>Gets command name.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetColorSpace.fromCommand(ICommand)">
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetColorSpace.toCommand"/>
    <member name="M:com.aspose.pdf.operators.SetColorSpace.#ctor(String)">
       
        <p>Initializes operator.</p> @param name Color space name.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetColorSpace.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="T:com.aspose.pdf.operators.SetColorSpaceStroke">
       
        <p>Class representing CS operator (set color for stroking operations).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetColorSpaceStroke.getName">
       
        <p>Gets color space name.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetColorSpaceStroke.setName(String)">
       
        <p>Sets color space name.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetColorSpaceStroke.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetColorSpaceStroke.fromCommand(ICommand)">
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetColorSpaceStroke.toCommand"/>
    <member name="M:com.aspose.pdf.operators.SetColorSpaceStroke.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetColorSpaceStroke.#ctor(String)">
       
        <p>Initializes operator.</p> @param name Color space name.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.operators.SetColorStroke">
       
        <p>Class representing SC operator set color for stroking color operators.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetColorStroke.getColor">
      Not supported yet. 
        <p>Returns color specified by operator.</p> @return Color specified by operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetColorStroke.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetColorStroke.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetColorStroke.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetColorStroke.#ctor(double)">
       
        <p>Set color for stroking operators for DeviceGrey, CalGrey and Indexed color spaces.</p> @param g Color value.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetColorStroke.#ctor(double,double,double)">
       
        <p>Set color for stroking operator for DeviceRGB, CalRGB, and Lab color spaces</p> @param r Red component. @param g Green component. @param b Blue component.
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetColorStroke.#ctor(double[])">
       
        <p>Constructor which allows to set color components.</p> @param color Array of color components.
      
      <param name="double[]"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetColorStroke.#ctor(double,double,double,double)">
       
        <p>Set color for stroking operator for CMYK color space</p> @param c cyan component. @param m Magenta component. @param y Yellow component. @param k Black component.
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.operators.SetDash">
       
        <p>Class representing d operator (set line dash pattern).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetDash.getPattern">
       
        <p>Dash pattern. Array's elements shall be numbers that specify the lengths of alternating dashes and gaps. In case of one element array dash and gap lengths are equal.</p> @return int array
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetDash.setPattern(int[])">
       
        <p>Dash pattern. Array's elements shall be numbers that specify the lengths of alternating dashes and gaps. In case of one element array dash and gap lengths are equal.</p> @param value int array
      
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetDash.getPhase">
       
        <p>Dash phase. Before beginning to stroke a path, the dash array shall be cycled through, adding up the lengths of dashes and gaps. When the accumulated length equals the value specified by the dash phase, stroking of the path shall begin, and the dash array shall be used cyclically from that point onward.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetDash.setPhase(int)">
       
        <p>Dash phase. Before beginning to stroke a path, the dash array shall be cycled through, adding up the lengths of dashes and gaps. When the accumulated length equals the value specified by the dash phase, stroking of the path shall begin, and the dash array shall be used cyclically from that point onward.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetDash.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetDash.toString">
       
        <p>Gets operator string representation.</p> @return [x1 x2] y d, where x1 - dash length, x2 - gap length, y - phase.
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetDash.fromCommand(ICommand)">
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetDash.toCommand"/>
    <member name="M:com.aspose.pdf.operators.SetDash.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetDash.#ctor(int[],int)">
       
        <p>Creates set dash pattern operator.</p> @param pattern Array which defines dash pattern. @param phase Dash phase.
      
      <param name="int[]"/>
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.operators.SetFlat">
       
        <p>Class representing i operator (set flatness toleracne).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetFlat.getFlatness">
       
        <p>Gets the flatness.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetFlat.setFlatness(double)">
       
        <p>Sets the flatness.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetFlat.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetFlat.#ctor(double)">
       
        <p>Initializes operator.</p> @param flatness The value of flatness.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetFlat.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="T:com.aspose.pdf.operators.SetGlyphsPositionShowText">
       
        <p>Class representing TJ operator (show text with glyph positioning).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetGlyphsPositionShowText.getGlyphPositions">
       
        <p>Returns positions of glyphs.</p> @return collection of GlyphPosition instances
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetGlyphsPositionShowText.getText">
       
        <p>Gets text from operator argument (glyph positioning is ignored).</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetGlyphsPositionShowText.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetGlyphsPositionShowText.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetGlyphsPositionShowText.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetGlyphsPositionShowText.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetGlyphsPositionShowText.#ctor(IGenericEnumerable&lt;GlyphPosition&gt;)">
       
        <p>Constructor for TJ operator.</p> @param glyphPositions List of Glyph Positions.
      
      <param name="IGenericEnumerable&lt;GlyphPosition&gt;"/>
    </member>
    <member name="T:com.aspose.pdf.operators.SetGray">
       
        <p>Set gray level for non-stroking operations.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetGray.getColor">
       
        <p>Returns color specified by operator.</p> @return Color specified by operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetGray.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetGray.toString">
       
        <p>Returns string represnetation of operator.</p> @return String representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetGray.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetGray.#ctor(double)">
       
        <p>Constructor for writing program.</p> @param gray The level of gray value.
      
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.operators.SetGrayStroke">
       
        <p>Class representing gray level for stroking operations.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetGrayStroke.getColor">
       
        <p>Returns color specified by operator.</p> @return Color specified by operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetGrayStroke.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetGrayStroke.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetGrayStroke.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetGrayStroke.#ctor(double)">
       
        <p>Initializes operator with the specified color.</p> @param gray The level of gray value.
      
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.operators.SetHorizontalTextScaling">
       
        <p>Class representing Tz operator (set horizontal text scaling).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetHorizontalTextScaling.getHorizontalScaling">
       
        <p>Gets the horizontal scaling.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetHorizontalTextScaling.setHorizontalScaling(double)">
       
        <p>Sets the horizontal scaling.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetHorizontalTextScaling.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetHorizontalTextScaling.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetHorizontalTextScaling.#ctor(double)">
       
        <p>Initializes operator.</p> @param horizintalScaling Horizontal scaling.
      
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.operators.SetLineCap">
       
        <p>Class representing J operator (set line cap style).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetLineCap.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetLineCap.#ctor(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetLineCap.#ctor(int,ICommand)">
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="T:com.aspose.pdf.operators.SetLineJoin">
       
        <p>Class representing j operator (set line join style).</p> @see LineJoin
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetLineJoin.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetLineJoin.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetLineJoin.#ctor(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetLineJoin.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="T:com.aspose.pdf.operators.SetLineWidth">
       
        <p>Class representing w operator (set line width).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetLineWidth.getWidth">
       
        <p>Gets width of the line.</p> @return width of the line.
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetLineWidth.setWidth(double)">
       
        <p>Sets width of the line.</p> @param value width of the line.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetLineWidth.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetLineWidth.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetLineWidth.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetLineWidth.#ctor(double)">
       
        <p>Initializes operator with width value.</p> @param width Value of width.
      
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.operators.SetMiterLimit">
       
        <p>Class representing M operator (set miter limit).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetMiterLimit.getMiterLimit">
       
        <p>Gets the miter limit.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetMiterLimit.setMiterLimit(double)">
       
        <p>Sets the miter limit.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetMiterLimit.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetMiterLimit.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetMiterLimit.#ctor(double)">
       
        <p>Initializes operator.</p> @param miterLimit Mitel limit.
      
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.operators.SetRGBColor">
       
        <p>Class representing rg operator (set RGB color for non-stroking operators).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetRGBColor.getColor">
       
        <p>Returns color specified by operator.</p> @return Color specified by operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetRGBColor.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetRGBColor.toString">
       
        <p>Returns text representation of the operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetRGBColor.getCMYKColor(double[],double[])">
      <param name="double[]"/>
      <param name="double[]"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetRGBColor.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetRGBColor.#ctor(double,double,double)">
       
        <p>Constructor for writing program.</p> @param r The level of red from 0.0 to 1.0 @param g The level of green from 0.0 to 1.0 @param b The level of blue from 0.0 to 1.0
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetRGBColor.#ctor(java.awt.Color)">
       
        <p>Initializes operator with color.</p> @param color Specified color.
      
      <param name="java.awt.Color"/>
    </member>
    <member name="T:com.aspose.pdf.operators.SetRGBColorStroke">
       
        <p>Class representing RG operator (set RGB color for stroking operators).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetRGBColorStroke.getColor">
       
        <p>Returns color specified by operator.</p> @return Color specified by operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetRGBColorStroke.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetRGBColorStroke.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetRGBColorStroke.getCMYKColor(double[],double[])">
      <param name="double[]"/>
      <param name="double[]"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetRGBColorStroke.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetRGBColorStroke.#ctor(double,double,double)">
       
        <p>Constructor for writing program.</p> @param r The level of red from 0.0 to 1.0 @param g The level of green from 0.0 to 1.0 @param b The level of blue from 0.0 to 1.0
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetRGBColorStroke.#ctor(java.awt.Color)">
       
        <p>Initializes operator with color.</p> @param color java.awt.Color object
      
      <param name="java.awt.Color"/>
    </member>
    <member name="T:com.aspose.pdf.operators.SetSpacingMoveToNextLineShowText">
       
        <p>Class representing " operator (set word and character spacing, move to the next line and show text).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetSpacingMoveToNextLineShowText.getAw">
       
        <p>Gets word spacing.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetSpacingMoveToNextLineShowText.getAc">
       
        <p>Get character spacing.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetSpacingMoveToNextLineShowText.getText">
       
        <p>Gets text of operator.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetSpacingMoveToNextLineShowText.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetSpacingMoveToNextLineShowText.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetSpacingMoveToNextLineShowText.#ctor(double,double,String)">
       
        <p>Initializes operator.</p> @param aw double value Word spacing. @param ac double value Character spacing. @param text string Text value.
      
      <param name="double"/>
      <param name="double"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetSpacingMoveToNextLineShowText.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.operators.SetTextLeading">
       
        <p>Class represenging TL operator (set text leading).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetTextLeading.getLeading">
       
        <p>Gets the text leading.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetTextLeading.setLeading(double)">
       
        <p>Sets the text leading.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetTextLeading.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetTextLeading.toString">
       
        <p>Produces text code of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetTextLeading.#ctor(int,ICommand)">
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetTextLeading.#ctor(double)">
       
        <p>Constructor for text leadign operator.</p> @param leading Text leading.
      
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.operators.SetTextMatrix">
       
        <p>Class representig Tm operator (set text matrix).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetTextMatrix.getMatrix">
       
        <p>Matrix argument of the operator.</p> @return Matrix object
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetTextMatrix.setMatrix(Matrix)">
       
        <p>Matrix argument of the operator.</p> @param value Matrix object
      
      <param name="Matrix"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetTextMatrix.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetTextMatrix.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetTextMatrix.#ctor(int,ICommand)">
       
        <p>Initializes operator.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetTextMatrix.#ctor(double,double,double,double,double,double)">
       
        <p>Initializes operator.</p> @param a A coefficient @param b B coefficient @param c C coefficient @param d D coefficient @param e E coefficient @param f F coefficient
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetTextMatrix.#ctor(Matrix)">
       
        <p>Initializes operator by matrix.</p> @param m Transfomation matrix.
      
      <param name="Matrix"/>
    </member>
    <member name="T:com.aspose.pdf.operators.SetTextRenderingMode">
       
        <p>Class representing Tr operator (set text rendering mode).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetTextRenderingMode.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetTextRenderingMode.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetTextRenderingMode.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="T:com.aspose.pdf.operators.SetTextRise">
       
        <p>Class representing Ts operator (set text rise).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetTextRise.getTextRise">
       
        <p>Gets the text rise.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetTextRise.setTextRise(double)">
       
        <p>Sets the text rise.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetTextRise.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetTextRise.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetTextRise.#ctor(double)">
       
        <p>Initializes operator.</p> @param textRise Text rise.
      
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.operators.SetWordSpacing">
       
        <p>Class representing Tw operator (set word spacing).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetWordSpacing.getWordSpacing">
       
        <p>Gets the word spacing.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.operators.SetWordSpacing.setWordSpacing(double)">
       
        <p>Sets the word spacing.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetWordSpacing.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetWordSpacing.#ctor(int,ICommand)">
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.SetWordSpacing.#ctor(double)">
       
        <p>Initializes operator.</p> @param wordSpacing Word spacing.
      
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.operators.ShFill">
       
        <p>Class representing sh operator (paint area with shading pattern).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.ShFill.getName">
       
        <p>Gets the shading name.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.operators.ShFill.setName(String)">
       
        <p>Sets the shading name.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.operators.ShFill.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.ShFill.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.ShFill.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.ShFill.#ctor(String)">
       
        <p>Initializes operator.</p> @param shadingName String Shading name.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.operators.ShowText">
       
        <p>Class representing Tj operator (show text).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.ShowText.getText">
       
        <p>Gets text of operator.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.operators.ShowText.setText(String)">
       
        <p>Set text of operator.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.operators.ShowText.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.ShowText.toString">
       
        <p>Produces text code of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.ShowText.#ctor(int,ICommand)">
       
        <p>Initializes operator.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.ShowText.#ctor(int,String)">
       
        <p>Initializes Tj opearor.</p> @param index Index of operator in operators list. @param text argument of the operator.
      
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.operators.ShowText.#ctor(String)">
       
        <p>Initializes Tj operator.</p> @param text argument of the operator.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.operators.ShowText.#ctor(String,com.aspose.pdf.Font)">
      <param name="String"/>
      <param name="com.aspose.pdf.Font"/>
    </member>
    <member name="M:com.aspose.pdf.operators.ShowText.#ctor">
       
        <p>Initializes of Tj operator.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.operators.Stroke">
       
        <p>Class representing S operator (stroke path).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.Stroke.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.Stroke.toString">
       
        <p>Returns text representation of the operator.</p> @return Text representation of the operator.
      
    </member>
    <member name="M:com.aspose.pdf.operators.Stroke.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.Stroke.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.operators.TextOperator">
       
        <p>Abstract base class for text-related operators (TJ, Tj, Tm, BT, ET, etc).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.TextOperator.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.operators.TextOperator.#ctor">
       
        <p>Constructor for new operator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.TextOperator.#ctor(TextProperties)">
       
        <p>Text operator which accepts text properties.</p> @param textProperties Text properties.
      
      <param name="TextProperties"/>
    </member>
    <member name="T:com.aspose.pdf.operators.TextPlaceOperator">
       
        <p>Abstract base class for operators which changes text position (Tm, Td, etc).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.TextPlaceOperator.#ctor">
       
        <p>Constructor for new TextPlaceOperator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.TextPlaceOperator.#ctor(TextProperties)">
       
        <p>Constructor for TextPlaceOperator which accepts TextProperties.</p> @param textProperties TextProperties value
      
      <param name="TextProperties"/>
    </member>
    <member name="T:com.aspose.pdf.operators.TextShowOperator">
       
        <p>Abstract base class for all operators which used to out text (Tj, TJ, etc).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.TextShowOperator.getText">
       
        <p>Gets text which operator out on the page.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.operators.TextShowOperator.setText(String)">
       
        <p>Sets text which operator out on the page.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.operators.TextShowOperator.#ctor(int,ICommand)">
       
        <p>Constructor for operator class.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.operators.TextShowOperator.#ctor">
       
        <p>Constructor for new TextShowOperator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.TextShowOperator.#ctor(TextProperties)">
       
        <p>Constructor for TextShowOperator which allows to pass TextProperties.</p> @param textProperties Text properties.
      
      <param name="TextProperties"/>
    </member>
    <member name="T:com.aspose.pdf.operators.TextStateOperator">
       
        <p>Abstract base class for operators which changes current text state (Tc, Tf, TL, etc).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.TextStateOperator.#ctor">
       
        <p>Constructor for new TextStateOperator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.operators.TextStateOperator.#ctor(TextProperties)">
       
        <p>Constructor for TextStateoperator which allows to pass TextProperties.</p> @param textProperties Text properties.
      
      <param name="TextProperties"/>
    </member>
    <member name="T:com.aspose.pdf.OperatorSelector">
       
        <p>This class is used for selecting operators using Visitor template idea.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.getSelected">
       
        <p>The list of selected objects.</p> @return List of Operator instances
      
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.SetLineJoin)">
       
        <p>Visit/select j operator.</p> @param j Set line join style operator.
      
      <param name="com.aspose.pdf.operators.SetLineJoin"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.EX)">
       
        <p>Visit/select EX operator.</p> @param EX End compatibility section operator.
      
      <param name="com.aspose.pdf.operators.EX"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.ET)">
       
        <p>Visit/select ET operator.</p> @param ET End text object operator.
      
      <param name="com.aspose.pdf.operators.ET"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.EMC)">
       
        <p>Visit/select EMC operator.</p> @param EMC End marked-content sequence operator.
      
      <param name="com.aspose.pdf.operators.EMC"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.EI)">
       
        <p>Visit/select EI operator.</p> @param EI End inline image object operator.
      
      <param name="com.aspose.pdf.operators.EI"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.DP)">
       
        <p>Visit/select DP operator.</p> @param DP Define marked-content point operator (with property list).
      
      <param name="com.aspose.pdf.operators.DP"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.Do)">
       
        <p>Visit/select Do operator.</p> @param Do Invoke named XObject operator.
      
      <param name="com.aspose.pdf.operators.Do"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.SetCharWidthBoundingBox)">
       
        <p>Visit/select d1 operator.</p> @param d1 Set glyph width and bounding box in Type 3 font operator.
      
      <param name="com.aspose.pdf.operators.SetCharWidthBoundingBox"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.SetCharWidth)">
       
        <p>Visit/select d0 operator.</p> @param d0 Set glyph width in Type 3 font operator.
      
      <param name="com.aspose.pdf.operators.SetCharWidth"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.SetDash)">
       
        <p>Visit/select d operator.</p> @param d Set line dash pattern operator.
      
      <param name="com.aspose.pdf.operators.SetDash"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.SetColorSpaceStroke)">
       
        <p>Visit/select CS operator.</p> @param CS Set color space operator (for stroking operations).
      
      <param name="com.aspose.pdf.operators.SetColorSpaceStroke"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.SetColorSpace)">
       
        <p>Visit/select cs operator.</p> @param cs Set color space operator (for nonstroking operations).
      
      <param name="com.aspose.pdf.operators.SetColorSpace"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.ConcatenateMatrix)">
       
        <p>Visit/select cm operator.</p> @param cm Concatenate matrix to current transformation matrix operator.
      
      <param name="com.aspose.pdf.operators.ConcatenateMatrix"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.CurveTo)">
       
        <p>Visit/select c operator.</p> @param c Append curved segment to path operator (three control points).
      
      <param name="com.aspose.pdf.operators.CurveTo"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.BX)">
       
        <p>Visit/select BX operator.</p> @param BX Begin compatibility section operator.
      
      <param name="com.aspose.pdf.operators.BX"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.BT)">
       
        <p>Visit/select BT operator.</p> @param BT Begin text object operator.
      
      <param name="com.aspose.pdf.operators.BT"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.BMC)">
       
        <p>Visit/select BMC operator.</p> @param BMC Begin marked-content sequence operator.
      
      <param name="com.aspose.pdf.operators.BMC"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.BI)">
       
        <p>Visit/select BI operator.</p> @param BI Begin inline image object operator.
      
      <param name="com.aspose.pdf.operators.BI"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.BDC)">
       
        <p>Visit/select BDC operator.</p> @param BDC Begin marked-content sequence operator (with property list).
      
      <param name="com.aspose.pdf.operators.BDC"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.FillStroke)">
       
        <p>Visit/select B operator.</p> @param B Fill and stroke path operator (nonzero winding number rule).
      
      <param name="com.aspose.pdf.operators.FillStroke"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.ClosePathFillStroke)">
       
        <p>Visit/select b operator.</p> @param b Close, fill, and stroke path operator (nonzero winding number rule).
      
      <param name="com.aspose.pdf.operators.ClosePathFillStroke"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.EOFillStroke)">
       
        <p>Visit/select B* operator.</p> @param B_ Fill and stroke path operator (even-odd rule).
      
      <param name="com.aspose.pdf.operators.EOFillStroke"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.ClosePathEOFillStroke)">
       
        <p>Visit/select b* operator.</p> @param b_ Close, fill, and stroke path operator (even-odd rule).
      
      <param name="com.aspose.pdf.operators.ClosePathEOFillStroke"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.MoveToNextLineShowText)">
       
        <p>Visit/select ' operator.</p> @param value Move to next line and show text operator.
      
      <param name="com.aspose.pdf.operators.MoveToNextLineShowText"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.SetSpacingMoveToNextLineShowText)">
       
        <p>Visit/select '' operator.</p> @param value Set word and character spacing, move to next line, and show text operator.
      
      <param name="com.aspose.pdf.operators.SetSpacingMoveToNextLineShowText"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.EOFill)">
       
        <p>Visit/select operator f*.</p> @param f_ Fill path operator (even-odd rule).
      
      <param name="com.aspose.pdf.operators.EOFill"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.Fill)">
       
        <p>Visit/select f operator.</p> @param f Fill path operator (nonzero winding number rule).
      
      <param name="com.aspose.pdf.operators.Fill"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.ObsoleteFill)">
       
        <p>Visit/select F operator.</p> @param F Fill path operator (nonzero winding number rule).
      
      <param name="com.aspose.pdf.operators.ObsoleteFill"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.SetGray)">
       
        <p>Visit/select g operator.</p> @param g Set gray level operator (for nonstroking operations).
      
      <param name="com.aspose.pdf.operators.SetGray"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.SetGrayStroke)">
       
        <p>Visit/select G operator.</p> @param G Set gray level operator (for stroking operations).
      
      <param name="com.aspose.pdf.operators.SetGrayStroke"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.GS)">
       
        <p>Visit/select gs operator.</p> @param gs Set graphics state operator.
      
      <param name="com.aspose.pdf.operators.GS"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.ClosePath)">
       
        <p>Visit/select h operator.</p> @param h Close subpath operator.
      
      <param name="com.aspose.pdf.operators.ClosePath"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.SetFlat)">
       
        <p>Visit/select i operator.</p> @param i Set flatness tolerance operator.
      
      <param name="com.aspose.pdf.operators.SetFlat"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.ID)">
       
        <p>Visit/select ID operator.</p> @param ID Begin inline image data operator.
      
      <param name="com.aspose.pdf.operators.ID"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.SetLineCap)">
       
        <p>Visit/select J operator.</p> @param J Set line cap style operator.
      
      <param name="com.aspose.pdf.operators.SetLineCap"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.SetCMYKColor)">
       
        <p>Visit/select k operator.</p> @param k Set CMYK color operator (for nonstroking operations).
      
      <param name="com.aspose.pdf.operators.SetCMYKColor"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.SetCMYKColorStroke)">
       
        <p>Visit/select K operator.</p> @param K Set CMYK color operator (for stroking operations).
      
      <param name="com.aspose.pdf.operators.SetCMYKColorStroke"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.LineTo)">
       
        <p>Visit/select l operator.</p> @param l Append straight line segment to path operator.
      
      <param name="com.aspose.pdf.operators.LineTo"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.MoveTo)">
       
        <p>Visit/select m operator.</p> @param m Begin new subpath operator.
      
      <param name="com.aspose.pdf.operators.MoveTo"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.SetMiterLimit)">
       
        <p>Visit/select M operator.</p> @param M Set miter limit operator.
      
      <param name="com.aspose.pdf.operators.SetMiterLimit"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.MP)">
       
        <p>Visit/select MP operator.</p> @param MP Define marked-content point operator.
      
      <param name="com.aspose.pdf.operators.MP"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.EndPath)">
       
        <p>Visit/select n operator.</p> @param n End path operator (without filling or stroking).
      
      <param name="com.aspose.pdf.operators.EndPath"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.GSave)">
       
        <p>Visit/select q operator.</p> @param q Save graphics state operator.
      
      <param name="com.aspose.pdf.operators.GSave"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.GRestore)">
       
        <p>Visit/select Q operator.</p> @param Q Restore graphics state operator.
      
      <param name="com.aspose.pdf.operators.GRestore"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.Re)">
       
        <p>Visit/select re operator.</p> @param re Append rectangle to path operator.
      
      <param name="com.aspose.pdf.operators.Re"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.SetRGBColor)">
       
        <p>Visit/select rg operator.</p> @param rg Set RGB color operator (for nonstroking operations).
      
      <param name="com.aspose.pdf.operators.SetRGBColor"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.SetRGBColorStroke)">
       
        <p>Visit/select RG operator.</p> @param RG Set RGB color operator (for stroking operations).
      
      <param name="com.aspose.pdf.operators.SetRGBColorStroke"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.SetColorRenderingIntent)">
       
        <p>Visit/select ri operator.</p> @param ri Set color rendering intent operator.
      
      <param name="com.aspose.pdf.operators.SetColorRenderingIntent"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.ClosePathStroke)">
       
        <p>Visit/select s operator.</p> @param s Close and stroke path operator.
      
      <param name="com.aspose.pdf.operators.ClosePathStroke"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.Stroke)">
       
        <p>Visit/select S operator.</p> @param S Stroke path operator.
      
      <param name="com.aspose.pdf.operators.Stroke"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.SetColor)">
       
        <p>Visit/select sc operator.</p> @param sc Set color operator (for nonstroking operations).
      
      <param name="com.aspose.pdf.operators.SetColor"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.SetColorStroke)">
       
        <p>Visit/select SC operator.</p> @param SC Set color operator (for stroking operations).
      
      <param name="com.aspose.pdf.operators.SetColorStroke"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.SetAdvancedColor)">
       
        <p>Visit/select scn operator.</p> @param scn Set color operator (for nonstroking operations, ICCBased and special colour spaces).
      
      <param name="com.aspose.pdf.operators.SetAdvancedColor"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.SetAdvancedColorStroke)">
       
        <p>Visit/select SCN operator.</p> @param SCN Set color operator (for stroking operations, ICCBasedand special colour spaces).
      
      <param name="com.aspose.pdf.operators.SetAdvancedColorStroke"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.ShFill)">
       
        <p>Visit/select sh operator.</p> @param sh Paint area defined by shading pattern operator.
      
      <param name="com.aspose.pdf.operators.ShFill"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.MoveToNextLine)">
       
        <p>Visit/select T* operator.</p> @param T_ Move to start of next text line operator.
      
      <param name="com.aspose.pdf.operators.MoveToNextLine"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.SetCharacterSpacing)">
       
        <p>Visit/select Tc operator.</p> @param Tc Set character spacing operator.
      
      <param name="com.aspose.pdf.operators.SetCharacterSpacing"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.MoveTextPosition)">
       
        <p>Visit/select Td operator.</p> @param Td Move text position operator.
      
      <param name="com.aspose.pdf.operators.MoveTextPosition"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.MoveTextPositionSetLeading)">
       
        <p>Visit/select TD operator.</p> @param TD Move text position and set leading operator.
      
      <param name="com.aspose.pdf.operators.MoveTextPositionSetLeading"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.SelectFont)">
       
        <p>Visit/select Tf operator.</p> @param Tf Set text font and size operator.
      
      <param name="com.aspose.pdf.operators.SelectFont"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.ShowText)">
       
        <p>Visit/select Tj operator.</p> @param Tj Show text operator.
      
      <param name="com.aspose.pdf.operators.ShowText"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.SetGlyphsPositionShowText)">
       
        <p>Visit/select TJ operator.</p> @param TJ Show text operator (allowing individual glyph positioning).
      
      <param name="com.aspose.pdf.operators.SetGlyphsPositionShowText"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.SetTextLeading)">
       
        <p>Visit/select TL operator.</p> @param TL Set text leading operator.
      
      <param name="com.aspose.pdf.operators.SetTextLeading"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.SetTextMatrix)">
       
        <p>Visit/select Tm operator.</p> @param Tm Set text matrix and text line matrix operator.
      
      <param name="com.aspose.pdf.operators.SetTextMatrix"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.SetTextRenderingMode)">
       
        <p>Visit/select Tr operator.</p> @param Tr Set text rendering mode operator.
      
      <param name="com.aspose.pdf.operators.SetTextRenderingMode"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.SetTextRise)">
       
        <p>Visit/select Ts operator.</p> @param Ts Set text rise operator.
      
      <param name="com.aspose.pdf.operators.SetTextRise"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.SetWordSpacing)">
       
        <p>Visit/select Tw operator.</p> @param Tw Set word spacing operator.
      
      <param name="com.aspose.pdf.operators.SetWordSpacing"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.SetHorizontalTextScaling)">
       
        <p>Visit/select Tz operator.</p> @param Tz Set horizontal text scaling operator.
      
      <param name="com.aspose.pdf.operators.SetHorizontalTextScaling"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.CurveTo1)">
       
        <p>Visit/select v operator.</p> @param v Append curved segment to path operator (initial point replicated).
      
      <param name="com.aspose.pdf.operators.CurveTo1"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.EOClip)">
       
        <p>Visit/select W* operator.</p> @param W_ Set clipping path operator (even-odd rule).
      
      <param name="com.aspose.pdf.operators.EOClip"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.SetLineWidth)">
       
        <p>Visit/select w operator.</p> @param w Set line width operator.
      
      <param name="com.aspose.pdf.operators.SetLineWidth"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.Clip)">
       
        <p>Visit/select W operator.</p> @param W Set clipping path operator (nonzero winding number rule).
      
      <param name="com.aspose.pdf.operators.Clip"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.CurveTo2)">
       
        <p>Visit/select y operator.</p> @param y Append curved segment to path operator (final point replicated).
      
      <param name="com.aspose.pdf.operators.CurveTo2"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(com.aspose.pdf.operators.TextOperator)">
       
        <p>Visit/select any text operator operator.</p> @param textOperator General text operator which is used to select the set of corresponding pdf operators.
      
      <param name="com.aspose.pdf.operators.TextOperator"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.#ctor">
       
        <p>Initializes new instance of the {@code Selector} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.#ctor(Operator)">
       
        <p>Initializes new {@code OperatorSelector}.</p> @param op The operator to visit/select.
      
      <param name="Operator"/>
    </member>
    <member name="T:com.aspose.pdf.Opi">
       
        <p>Represents The Open Prepress Interface (OPI) is a mechanism for creating low-resolution placeholders, or proxies, for such high-resolution images.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Opi.getVersion">
       
        <p>Gets the version of OPI to which this dictionary refers.</p> @return String object
      
    </member>
    <member name="M:com.aspose.pdf.Opi.getFileSpecification">
       
        <p>Gets the external file containing the low- resolution proxy image.</p> @return String object
      
    </member>
    <member name="M:com.aspose.pdf.Opi.getPosition">
       
        <p>Gets an array of eight numbers of the form specifying the location on the page of the cropped image.</p> @return double array
      
    </member>
    <member name="M:com.aspose.pdf.Opi.#ctor(XForm)">
       
        <p>The constructor.</p> @param xform Xform object.
      
      <param name="XForm"/>
    </member>
    <member name="T:com.aspose.pdf.optimization.ImageCompressionOptions">
       
        <p>Class contains set options for image compression.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.optimization.ImageCompressionOptions.isCompressImages">
       
        <p>If this flag is set to true images will be compressed in the document. compression level is specfied with ImageQuality property.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.optimization.ImageCompressionOptions.setCompressImages(boolean)">
       
        <p>If this flag is set to true images will be compressed in the document. compression level is specfied with ImageQuality property.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.optimization.ImageCompressionOptions.getResizeImages">
       
        <p>If this flag set to true and CompressImages is true images will be resized if image resoultion is greater then specified MaxResolution parameter.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.optimization.ImageCompressionOptions.setResizeImages(boolean)">
       
        <p>If this flag set to true and CompressImages is true images will be resized if image resoultion is greater then specified MaxResolution parameter.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.optimization.ImageCompressionOptions.getImageQuality">
       
        <p>Specifies level of image compression when CompressIamges flag is used.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.optimization.ImageCompressionOptions.setImageQuality(int)">
       
        <p>Specifies level of image compression when CompressIamges flag is used.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.optimization.ImageCompressionOptions.getMaxResolution">
       
        <p>Specifies maximum resolution of images. If image has higher resolition it will be scaled</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.optimization.ImageCompressionOptions.setMaxResolution(int)">
       
        <p>Specifies maximum resolution of images. If image has higher resolition it will be scaled</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.optimization.ImageCompressionOptions.getVersion">
       
        <p>Version of compression algorithm. Possible values are: 1. standard compression, 2. fast (improved compression which is faster then standard but may be applicable not for all images), 3. mixed (standard compression is applied to images which can not be compressed by faster algorithm, this may give best compression but more slow then "fast" algorithm. Version "Fast" is not applicable for resizing images (standard method will be used). Default is "Standard".</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.optimization.ImageCompressionOptions.setVersion(int)">
       
        <p>Version of compression algorithm. Possible values are: 1. standard compression, 2. fast (improved compression which is faster then standard but may be applicable not for all images), 3. mixed (standard compression is applied to images which can not be compressed by faster algorithm, this may give best compression but more slow then "fast" algorithm. Version "Fast" is not applicable for resizing images (standard method will be used). Default is "Standard".</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.optimization.ImageCompressionOptions.getEncoding">
       
        <p>Gets or sets encoding used to store images.</p> @return ImageEncoding element
      
    </member>
    <member name="M:com.aspose.pdf.optimization.ImageCompressionOptions.setEncoding(int)">
       
        <p>Gets or sets encoding used to store images.</p> @param value ImageEncoding element
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.optimization.ImageCompressionVersion">
       
        <p>Describes versions of image compression algorithm.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.optimization.ImageCompressionVersion.Standard">
       
        <p>Standard algorithm. Default value.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.optimization.ImageCompressionVersion.Fast">
       
        <p>Improved algorithm faster then standard but applicable not for all cases.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.optimization.ImageCompressionVersion.Mixed">
       
        <p>Use fast algorithm when possible and standard for other cases. May be slower then "Fast" but may produce better compression.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.optimization.ImageEncoding">
       
        <p>Image encoding types.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.optimization.ImageEncoding.Unchanged">
       
        <p>Don't change encoding.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.optimization.ImageEncoding.Jpeg">
       
        <p>JPEG (DCT) encoding.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.optimization.ImageEncoding.Flate">
       
        <p>Flate encoding.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.optimization.ImageEncoding.Jpeg2000">
       
        <p>JPEG2000 (JPX) encoding.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.optimization.OptimizationOptions">
       
        <p>Class which describes document optimization algorithm. Instance of this class may be used as parameter of OptimizeResources() method.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.optimization.OptimizationOptions.getLinkDuplcateStreams">
       
        <p>If this flag is set to true, Resource streams will be analyzed. If duplicate streams are found (i.e. if stream contents is equal), then those streams will be stored as one object. This allows to decrease document size in some cases (for example, when same document was concatenated multiple times).</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.optimization.OptimizationOptions.setLinkDuplcateStreams(boolean)">
       
        <p>If this flag is set to true, Resource streams will be analyzed. If duplicate streams are found (i.e. if stream contents is equal), then those streams will be stored as one object. This allows to decrease document size in some cases (for example, when same document was concatenated multiple times).</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.optimization.OptimizationOptions.getAllowReusePageContent">
       
        <p>If true page contents will be reused when document is optimized for equal pages.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.optimization.OptimizationOptions.setAllowReusePageContent(boolean)">
       
        <p>If true page contents will be reused when document is optimized for equal pages.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.optimization.OptimizationOptions.getRemoveUnusedStreams">
       
        <p>If this flag set to true, every resource is checked on it's usage. If resource is never used, then resources is removed. This may decrease document size for example when pages were extracted from document.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.optimization.OptimizationOptions.setRemoveUnusedStreams(boolean)">
       
        <p>If this flag set to true, every resource is checked on it's usage. If resource is never used, then resources is removed. This may decrease document size for example when pages were extracted from document.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.optimization.OptimizationOptions.getRemoveUnusedObjects">
       
        <p>If this flag is set to true, all document objects will be checked and unused objects (i.e. objects which does not have any reference) are removed from document.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.optimization.OptimizationOptions.setRemoveUnusedObjects(boolean)">
       
        <p>If this flag is set to true, all document objects will be checked and unused objects (i.e. objects which does not have any reference) are removed from document.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.optimization.OptimizationOptions.getImageCompressionOptions">
       
        <p>Set of options which describe will images in the document be compressed and parameters of the compression.</p> @return ImageCompressionOptions instance
      
    </member>
    <member name="M:com.aspose.pdf.optimization.OptimizationOptions.getCompressImages">
       
        <p>If this flag is set to true images will be compressed in the document. compression level is specfied with ImageQuality property.</p> @return boolean value @deprecated Please use ImageCompressionOptions.CompressImages instead.
      
    </member>
    <member name="M:com.aspose.pdf.optimization.OptimizationOptions.setCompressImages(boolean)">
       
        <p>If this flag is set to true images will be compressed in the document. compression level is specfied with ImageQuality property.</p> @param value boolean value @deprecated Please use ImageCompressionOptions.CompressImages instead.
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.optimization.OptimizationOptions.getResizeImages">
       
        <p>If this flag set to true and CompressImages is true images will be resized if image resoultion is greater then specified MaxResolution parameter.</p> @return boolean value @deprecated Please use ImageCompressionOptions.ResizeImages instead.
      
    </member>
    <member name="M:com.aspose.pdf.optimization.OptimizationOptions.setResizeImages(boolean)">
       
        <p>If this flag set to true and CompressImages is true images will be resized if image resoultion is greater then specified MaxResolution parameter.</p> @param value boolean value @deprecated Please use ImageCompressionOptions.ResizeImages instead.
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.optimization.OptimizationOptions.getImageQuality">
       
        <p>Specifies level of image compression when CompressIamges flag is used.</p> @return int value @deprecated Please use ImageCompressionOptions.ImageQuality instead.
      
    </member>
    <member name="M:com.aspose.pdf.optimization.OptimizationOptions.setImageQuality(int)">
       
        <p>Specifies level of image compression when CompressIamges flag is used.</p> @param value int value @deprecated Please use ImageCompressionOptions.ImageQuality instead.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.optimization.OptimizationOptions.getMaxResoultion">
       
        <p>Specifies maximum resolution of images. If image has higher resolition it will be scaled</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.optimization.OptimizationOptions.setMaxResoultion(int)">
       
        <p>Specifies maximum resolution of images. If image has higher resolition it will be scaled</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.optimization.OptimizationOptions.getUnembedFonts">
       
        <p>Make fonts not embedded if set to true.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.optimization.OptimizationOptions.setUnembedFonts(boolean)">
       
        <p>Make fonts not embedded if set to true.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.optimization.OptimizationOptions.getSubsetFonts">
       
        <p>Fonts will be converted into subsets if set to true.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.optimization.OptimizationOptions.setSubsetFonts(boolean)">
       
        <p>Fonts will be converted into subsets if set to true.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.optimization.OptimizationOptions.getRemovePrivateInfo">
       
        <p>Remove private information (page piece info).</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.optimization.OptimizationOptions.setRemovePrivateInfo(boolean)">
       
        <p>Remove private information (page piece info).</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.optimization.OptimizationOptions.getImageEncoding">
       
        <p>Image encodre which will be used.</p> @return ImageEncoding element
      
    </member>
    <member name="M:com.aspose.pdf.optimization.OptimizationOptions.setImageEncoding(int)">
       
        <p>Image encodre which will be used.</p> @param value ImageEncoding element
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.optimization.OptimizationOptions.all">
       
        <p>Creates optimization strategy will all options activated. Please note that activated only options which does not change any functionality of the document. I.e. image compressing and fonts unembedding will not enabled (and can be embedded manually).</p> @return OptimizationOptions object.
      
    </member>
    <member name="T:com.aspose.pdf.OptimizedMemoryStream">
       
        <p>Defines a MemoryStream that can contains more standard capacity</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OptimizedMemoryStream.canRead">
       
        <p>When overridden in a derived class, gets a value indicating whether the current stream supports reading.</p> @return true if the stream supports reading; otherwise, false. Value:
      
    </member>
    <member name="M:com.aspose.pdf.OptimizedMemoryStream.canSeek">
       
        <p>When overridden in a derived class, gets a value indicating whether the current stream supports seeking.</p> @return true if the stream supports seeking; otherwise, false. Value:
      
    </member>
    <member name="M:com.aspose.pdf.OptimizedMemoryStream.canWrite">
       
        <p>When overridden in a derived class, gets a value indicating whether the current stream supports writing.</p> @return true if the stream supports writing; otherwise, false. Value:
      
    </member>
    <member name="M:com.aspose.pdf.OptimizedMemoryStream.getBufferSize">
       
        <p>Gets or sets the size of the underlying buffers.</p>Value: The buffers size. @return int value
      
    </member>
    <member name="M:com.aspose.pdf.OptimizedMemoryStream.setBufferSize(int)">
       
        <p>Gets or sets the size of the underlying buffers.</p>Value: The buffers size. @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.OptimizedMemoryStream.getLength">
       
        <p>When overridden in a derived class, gets the length in bytes of the stream.</p> @return A long value representing the length of the stream in bytes. Value:
      
    </member>
    <member name="M:com.aspose.pdf.OptimizedMemoryStream.getPosition">
       
        <p>When overridden in a derived class, gets or sets the position within the current stream.</p> @return The current position within the stream. Value:
      
    </member>
    <member name="M:com.aspose.pdf.OptimizedMemoryStream.setPosition(long)">
       
        <p>When overridden in a derived class, gets or sets the position within the current stream.</p> The current position within the stream. Value:
      
      <param name="long"/>
    </member>
    <member name="M:com.aspose.pdf.OptimizedMemoryStream.getFreeOnDispose">
       
        <p>Gets or sets a value indicating whether to free the underlying buffers on dispose.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.OptimizedMemoryStream.setFreeOnDispose(boolean)">
       
        <p>Gets or sets a value indicating whether to free the underlying buffers on dispose.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.OptimizedMemoryStream.read(byte[],int,int)">
       
        <p>When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</p> @return The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached. @param buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values @param offset The zero-based byte offset in at which to begin storing the data read from the current stream. @param count The maximum number of bytes to be read from the current stream.
      
      <param name="byte[]"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.OptimizedMemoryStream.readByte">
       
        <p>Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.</p> @return byte or -1 if at the end of the stream.
      
    </member>
    <member name="M:com.aspose.pdf.OptimizedMemoryStream.seek(long,int)">
       
        <p>When overridden in a derived class, sets the position within the current stream.</p> @return The new position within the current stream. @param offset A byte offset relative to the {@code origin} parameter. @param origin A value of type {@link SeekOrigin} indicating the reference point used to obtain the new position.
      
      <param name="long"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.OptimizedMemoryStream.flush">
       
        <p>The function overrided.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OptimizedMemoryStream.setLength(long)">
       
        <p>When overridden in a derived class, sets the length of the current stream.</p> @param value The desired length of the current stream in bytes.
      
      <param name="long"/>
    </member>
    <member name="M:com.aspose.pdf.OptimizedMemoryStream.toArray">
       
        <p>Converts the current stream to a byte array.</p> @return An array of bytes
      
    </member>
    <member name="M:com.aspose.pdf.OptimizedMemoryStream.write(byte[],int,int)">
       
        <p>When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</p> @param buffer An array of bytes. This method copies {@code count} bytes from {@code buffer} to the current stream. @param offset The zero-based byte offset in {@code buffer} at which to begin copying bytes to the current stream. @param count The number of bytes to be written to the current stream.
      
      <param name="byte[]"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.OptimizedMemoryStream.writeByte(byte)">
       
        <p>Writes a byte to the current position in the stream and advances the position within the stream by one byte.</p> @param value The byte to write to the stream.
      
      <param name="byte"/>
    </member>
    <member name="M:com.aspose.pdf.OptimizedMemoryStream.writeTo(Stream)">
       
        <p>Writes to the specified stream.</p> @param stream The stream.
      
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.OptimizedMemoryStream.#ctor">
       
        <p>Initializes a new instance of the {@link OptimizedMemoryStream} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OptimizedMemoryStream.#ctor(int,byte[])">
       
        <p>Initializes a new instance of the {@link OptimizedMemoryStream} class based on the specified byte array.</p> @param bufferSize Size of the underlying buffers. @param buffer The array of unsigned bytes from which to create the current stream.
      
      <param name="int"/>
      <param name="byte[]"/>
    </member>
    <member name="M:com.aspose.pdf.OptimizedMemoryStream.#ctor(int)">
       
        <p>Initializes a new instance of the {@link OptimizedMemoryStream} class.</p> @param bufferSize Size of the underlying buffers.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.OptimizedMemoryStream.#ctor(byte[])">
       
        <p>Initializes a new instance of the {@link OptimizedMemoryStream} class based on the specified byte array.</p> @param buffer The array of unsigned bytes from which to create the current stream.
      
      <param name="byte[]"/>
    </member>
    <member name="F:com.aspose.pdf.OptimizedMemoryStream.DefaultBufferSize">
       
        <p>Default buffer size value in bytes.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.OptimizedMemoryStream.SeekOrigin">
      Specifies the position in a stream to use for seeking.
    </member>
    <member name="M:com.aspose.pdf.OptimizedMemoryStream.SeekOrigin.#ctor"/>
    <member name="F:com.aspose.pdf.OptimizedMemoryStream.SeekOrigin.Begin">
      Specifies the beginning of a stream.
    </member>
    <member name="F:com.aspose.pdf.OptimizedMemoryStream.SeekOrigin.Current">
      Specifies the current position within a stream.
    </member>
    <member name="F:com.aspose.pdf.OptimizedMemoryStream.SeekOrigin.End">
      Specifies the end of a stream.
    </member>
    <member name="T:com.aspose.pdf.Option">
       
        <p>Class represents option of choice field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Option.getValue">
       
        <p>Gets option export value.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.Option.setValue(String)">
       
        <p>Sets option export value.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Option.getName">
       
        <p>Gets name of option.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.Option.setName(String)">
       
        <p>Sets name of option.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Option.getSelected">
       
        <p>Gets selected status of option. Returns true if option is selected.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Option.setSelected(boolean)">
       
        <p>Sets selected status of option. Returns true if option is selected.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Option.getIndex">
       
        <p>Gets index of the option.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.Option.hasExportValue">
      Return true if has Export Value @return boolean value
    </member>
    <member name="T:com.aspose.pdf.OptionCollection">
       
        <p>Class representing collection of options of the choice field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OptionCollection.isSynchronized">
       
        <p>Returns true of object is synchronized.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.OptionCollection.isReadOnly">
       
        <p>Gets a value indicating if collection is readonly.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.OptionCollection.getSyncRoot">
       
        <p>Synchronization object of the collection.</p> @return Object element
      
    </member>
    <member name="M:com.aspose.pdf.OptionCollection.size">
       
        <p>Gets number of options.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.OptionCollection.iterator_Rename_Namesake">
       
        <p>Returns enumerator for options in collection.</p> @return Options enumerator.
      
    </member>
    <member name="M:com.aspose.pdf.OptionCollection.iterator">
       
        <p>Returns enumerator for options in collection.</p> @return Options enumerator.
      
    </member>
    <member name="M:com.aspose.pdf.OptionCollection.get(int)">
       
        <p>Gets option by index.</p> @param index Option index. Index should be in range [1..n] where n is options count. @return Retreived option.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.OptionCollection.get(String)">
       
        <p>Gets option from colleciton by option name.</p> @param name Option name. @return Retreived option.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.OptionCollection.get_Item(int)">
       
        <p>Gets option by index.</p> @param index Index of the option. @return Option on the specified index.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.OptionCollection.get_Item(String)">
       
        <p>Gets option by its name.</p> @param name Name of the option. @return Found option.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.OptionCollection.deleteOption(String)">
       
        <p>Deletes option by its name.</p> @param name Name of the option to delete.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.OptionCollection.add(Option)">
       
        <p>Adds item in collection, throws .</p>  
        <p>Not implemented yet.</p> @param item Option instance
      
      <param name="Option"/>
    </member>
    <member name="M:com.aspose.pdf.OptionCollection.clear">
       
        <p>Removes all items from collection, throws .</p>  
        <p>Not implemented yet.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OptionCollection.contains(Option)">
       
        <p>Checks if item exists in collection, throws .</p>  
        <p>Not implemented yet.</p> @param item Option instance @return boolean value
      
      <param name="Option"/>
    </member>
    <member name="M:com.aspose.pdf.OptionCollection.remove(Option)">
       
        <p>Removes item from collection, throws .</p>  
        <p>Not implemented yet.</p> @param item Option instance @return boolean value
      
      <param name="Option"/>
    </member>
    <member name="T:com.aspose.pdf.OutlineCollection">
       
        <p>Represents document outline hierarchy.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OutlineCollection.hasNext"/>
    <member name="M:com.aspose.pdf.OutlineCollection.next"/>
    <member name="M:com.aspose.pdf.OutlineCollection.getVisibleCount">
       
        <p>Count is the sum of the number of visible descendent outline items at all levels. Note: please don't confuse with Count which is number if items in collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OutlineCollection.size">
       
        <p>Gets the total number of outline items (bookmarks) at all levels of the document outline.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.OutlineCollection.getFirst">
       
        <p>Gets an outline item representing the first top-level item in the outline.</p> @return OutlineItemCollection object
      
    </member>
    <member name="M:com.aspose.pdf.OutlineCollection.getLast">
       
        <p>Gets an outline item representing the last top-level item in the outline.</p> @return OutlineItemCollection object
      
    </member>
    <member name="M:com.aspose.pdf.OutlineCollection.isSynchronized">
       
        <p>Gets a value indicating whether access to this collection is synchronized (thread safe).</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.OutlineCollection.getSyncRoot">
       
        <p>Gets an object that can be used to synchronize access to this collection.</p> @return Object for synchronization
      
    </member>
    <member name="M:com.aspose.pdf.OutlineCollection.isReadOnly">
       
        <p>Gets a value indicating whether the collection is read-only.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.OutlineCollection.add(OutlineItemCollection)">
       
        <p>Adds outline item to collection.</p> @param outline The outline item to be added.
      
      <param name="OutlineItemCollection"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineCollection.delete">
       
        <p>Deletes all outline items from the document outline.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OutlineCollection.delete(String)">
       
        <p>Deletes the outline item with specified title from the document outline.</p> @param name The title of outline item to be deleted
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineCollection.copyTo(OutlineItemCollection[],int)">
       
        <p>Copies the outline items to an System.Array, starting at a particular System.Array index.</p> @param array The one-dimensional System.Array that is the destination. Must have zero-based indexing. @param index The zero-based index in array at which copying begins.
      
      <param name="OutlineItemCollection[]"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineCollection.iterator">
       
        <p>Returns an enumerator that iterates through the collection.</p> @return An System.Collections.IEnumerator object that can be used to iterate through the collection.
      
    </member>
    <member name="M:com.aspose.pdf.OutlineCollection.clear">
       
        <p>Clears all items from the collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OutlineCollection.contains(OutlineItemCollection)">
      Not supported yet. 
        <p>Checks does collection contains given item.</p> @param item The object to locate in the collection @return boolean value True - if item found; otherwise, false.
      
      <param name="OutlineItemCollection"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineCollection.remove(OutlineItemCollection)">
      Not supported yet. 
        <p>Always throws exception</p> @param item The object to locate in the collection @exception NotImplementedException NotImplementedException @return boolean value True - if item removed; otherwise, false.
      
      <param name="OutlineItemCollection"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineCollection.remove(int)">
       
        <p>Remove item by index.</p> @param index Index of the item to be removed.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineCollection.get_Item(int)">
       
        <p>Gets outline item from collection by index.</p> @param index Index of requested item. @return OutlineItemCollection object
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.OutlineItemCollection">
       
        <p>Represents outline entry in outline hierarchy of PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.getEngineDict">
      Internal only @return IPdfDictionary object
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.getEngineObj">
       
        <p>Internal only</p> @return IPdfObject object
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.getTitle">
       
        <p>Gets the title for this outline item.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.setTitle(String)">
       
        <p>Sets the title for this outline item.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.getDestination">
       
        <p>Gets the destination for this outline item.</p> @return IAppointment value
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.setDestination(IAppointment)">
       
        <p>Sets the destination for this outline item.</p> @param value IAppointment value
      
      <param name="IAppointment"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.getAction">
       
        <p>Gets the action for this outline item.</p> @return PdfAction value
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.setAction(PdfAction)">
       
        <p>Sets the action for this outline item.</p> @param value PdfAction value
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.getColor">
       
        <p>Gets the color for the title text of this outline item.</p> @return Color value
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.setColor(java.awt.Color)">
       
        <p>Sets the color for the title text of this outline item.</p> @param value Color object
      
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.getItalic">
       
        <p>Gets italic flag for the title text of this outline item</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.setItalic(boolean)">
       
        <p>Sets italic flag for the title text of this outline item</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.getBold">
       
        <p>Gets bold flag for the title text of this outline item</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.setBold(boolean)">
       
        <p>Sets bold flag for the title text of this outline item</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.getFirst">
       
        <p>Gets the outline item representing the first top-level item in the outline hierarchy.</p> @return OutlineItemCollection value
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.getLast">
       
        <p>Gets the outline item representing the last top-level item in the outline hierarchy.</p> @return OutlineItemCollection value
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.getPrev">
       
        <p>Gets the outline item representing previous item relatively this item in the outline hierarchy.</p> @return OutlineItemCollection value
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.getNext">
       
        <p>Gets the outline item representing next item relatively this item in the outline hierarchy.</p> @return OutlineItemCollection value
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.hasNext">
       
        <p>Check if outline item representing next item relatively this item in the outline hierarchy.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.next"/>
    <member name="M:com.aspose.pdf.OutlineItemCollection.getParent">
       
        <p>Gets the parent object of this outline item in the outline hierarchy.</p> @return Object value
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.getVisibleCount">
       
        <p>Gets the total number of outline items at all levels in the document outline hierarchy.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.isSynchronized">
       
        <p>Gets the value indicating whether access to this collection is synchronized (thread safe).</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.getSyncRoot">
       
        <p>Gets the object that can be used to synchronize access to this collection.</p> @return Object value
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.isReadOnly">
       
        <p>Gets a value indicating whether the collection is read-only.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.getOpen">
       
        <p>Get open status (true/false) for outline item.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.setOpen(boolean)">
       
        <p>Sets open status (true/false) for outline item.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.delete">
       
        <p>Deletes this outline item from the document outline hierarchy.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.delete(String)">
       
        <p>Deletes outline entry with specified name from the document outline hierarchy.</p> @param name Title of outline entry will be deleted.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.copyTo(OutlineItemCollection[],int)">
       
        <p>Copies the outline entries to an System.Array, starting at a particular System.Array index.</p> @param array The one-dimensional System.Array that is the destination. Must have zero-based indexing. @param index The zero-based index in array at which copying begins.
      
      <param name="OutlineItemCollection[]"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.iterator">
       
        <p>Returns an enumerator that iterates through the collection.</p> @return An System.Collections.IEnumerator object that can be used to iterate through the collection.
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.add(OutlineItemCollection)">
       
        <p>Adds outline item to collection.</p> @param outline The outline item to be added.
      
      <param name="OutlineItemCollection"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.insert(int,OutlineItemCollection)">
       
        <p>Inserts the outline item into collection at the specified place.</p> @param index The index specifying place for inserting. @param outline The outline item should be inserted.
      
      <param name="int"/>
      <param name="OutlineItemCollection"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.clear">
       
        <p>Clears all items from the collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.contains(OutlineItemCollection)">
      Not supported yet. 
        <p>Always throws NotImplementedException</p> @param item The object to locate in the collection @return boolean value True - if item found; otherwise, false.
      
      <param name="OutlineItemCollection"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.remove(OutlineItemCollection)">
      Not supported yet. 
        <p>Always throws NotImplementedException</p> @param item OutlineItemCollection instance @return boolean value True - if item removed; otherwise, false.
      
      <param name="OutlineItemCollection"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.remove(int)">
       
        <p>Remove item by index.</p> @param index Index of item to be deleted.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.size">
       
        <p>Count of collection items. Please dont confuse with VisibleCount: VisibleCount gets number of visible outline item on all levels.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.get_Item(int)">
       
        <p>Gets outline item from the collection using index.</p> @param index Index within the collection. @return OutlineItemCollection object.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.getLevel">
       
        <p>Gets hierarchy level of outline item.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.#ctor(IPdfObject)">
       
        <p>Initializes new instance of this class using internal engine outline entry object.</p> @param outline Internal engine object of outline entry.
      
      <param name="IPdfObject"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.#ctor(OutlineCollection)">
       
        <p>Initializes outline item instance using root hierarchy object.</p> @param outlines Outlune collection.
      
      <param name="OutlineCollection"/>
    </member>
    <member name="T:com.aspose.pdf.Outlines">
       
        <p>Class describes collection of outlines.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Outlines.size">
       
        <p>Gets count.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.Outlines.isReadOnly">
       
        <p>Gets a value indicating whether the collection is read-only.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Outlines.getVisibleCount">
       
        <p>Gets the total number of outline items at all levels in the document outline hierarchy.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.Outlines.add(OutlineItemCollection)">
       
        <p>Adds outline item to collection.</p> @param item The outline item to be added.
      
      <param name="OutlineItemCollection"/>
    </member>
    <member name="M:com.aspose.pdf.Outlines.clear">
       
        <p>Clears all items from the collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Outlines.contains(OutlineItemCollection)">
       
        <p>Always throws NotImplementedException.</p> @exception NotImplementedException NotImplementedException @param item The object to locate in the collection @return boolean value True - if item found; otherwise, false.
      
      <param name="OutlineItemCollection"/>
    </member>
    <member name="M:com.aspose.pdf.Outlines.copyTo(OutlineItemCollection[],int)">
       
        <p>Copies the outline entries to an System.Array, starting at a particular System.Array index.</p> @param array The one-dimensional System.Array that is the destination. Must have zero-based indexing. @param arrayIndex The zero-based index in array at which copying begins.
      
      <param name="OutlineItemCollection[]"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Outlines.iterator">
       
        <p>Returns an enumerator that iterates through the collection.</p> @return An System.Collections.IEnumerator object that can be used to iterate through the collection.
      
    </member>
    <member name="M:com.aspose.pdf.Outlines.remove(OutlineItemCollection)">
       
        <p>Remove outline collection item.</p> @param item Item to delete. @return boolean value True - if item removed; otherwise, false.
      
      <param name="OutlineItemCollection"/>
    </member>
    <member name="M:com.aspose.pdf.Outlines.iterator_Rename_Namesake"/>
    <member name="T:com.aspose.pdf.Page">
       
        <p>Class representing page of PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Page.getBackgroundImage">
       
        <p>Gets or sets background image for page (for generator only).</p> @return Image instance
      
    </member>
    <member name="M:com.aspose.pdf.Page.setBackgroundImage(com.aspose.pdf.Image)">
       
        <p>Gets or sets background image for page (for generator only).</p> @param value Image instance
      
      <param name="com.aspose.pdf.Image"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getTocInfo">
       
        <p>Gets table of contents info.</p> @return The table of contents info - default null. If it set this page will contain table of contents.
      
    </member>
    <member name="M:com.aspose.pdf.Page.setTocInfo(TocInfo)">
       
        <p>Sets table of contents info.</p> @param value The table of contents info - default null. If it set this page will contain table of contents.
      
      <param name="TocInfo"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getHeader">
       
        <p>Gets page header.</p> @return The page header.
      
    </member>
    <member name="M:com.aspose.pdf.Page.setHeader(HeaderFooter)">
       
        <p>Sets page header.</p> @param value The page header.
      
      <param name="HeaderFooter"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getLayers">
       
        <p>Gets layers collection.</p> @return Value: The layers collection.
      
    </member>
    <member name="M:com.aspose.pdf.Page.setLayers(java.util.ArrayList&lt;Layer&gt;)">
       
        <p>Sets layers collection.</p> @param value : The layers collection.
      
      <param name="java.util.ArrayList&lt;Layer&gt;"/>
    </member>
    <member name="M:com.aspose.pdf.Page.setLayersInternal(List&lt;Layer&gt;)">
       
        <p>Sets layers collection.</p> @param value : The layers collection.
      
      <param name="List&lt;Layer&gt;"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getFooter">
       
        <p>Gets page Footer.</p> @return The page Footer.
      
    </member>
    <member name="M:com.aspose.pdf.Page.setFooter(HeaderFooter)">
       
        <p>Sets page Footer.</p> @param value The page Footer.
      
      <param name="HeaderFooter"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getParagraphs">
       
        <p>Gets the paragraphs.</p> @return The paragraphs.
      
    </member>
    <member name="M:com.aspose.pdf.Page.setParagraphs(Paragraphs)">
       
        <p>Sets the paragraphs.</p> @param value Paragraphs value
      
      <param name="Paragraphs"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getPageInfo">
       
        <p>Gets the page info.(for generator only)</p> @return The page info.
      
    </member>
    <member name="M:com.aspose.pdf.Page.setPageInfo(PageInfo)">
       
        <p>Sets the page info.(for generator only)</p> @param value The page info.
      
      <param name="PageInfo"/>
    </member>
    <member name="M:com.aspose.pdf.Page.convertToPNGMemoryStream">
       
        <p>Convert page to PNG for DSR, OMR, OCR image stream.</p> @return Image stream in byte[] array.
      
    </member>
    <member name="M:com.aspose.pdf.Page.getOnBeforePageGenerate">Event for customize header and footer. @return {@code PdfEvent&lt;BeforePageGenerate&gt; instance}</member>
    <member name="M:com.aspose.pdf.Page.getEnginePage">
      For Internal usage only @return internal instance
    </member>
    <member name="M:com.aspose.pdf.Page.setEnginePage(IPage)">
      For Internal usage only @param enginePage internal instance
      <param name="IPage"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getDocument">
       
        <p>Get document</p> @return IDocument object
      
    </member>
    <member name="M:com.aspose.pdf.Page.getRect_Rename_Namesake">&lt;p&gt; Returns rectanlge of the page according to its CropBox and Meia box; &lt;/p&gt; Internal @return Rectangle value &lt;hr&gt; &lt;pre&gt; Example demonstrates how to get page rectangle: Document document = new Document("sample.pdf"); Page page = document.getPages().get(1); Rectangle pageRect = page.getRect(); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.Page.getRect">&lt;p&gt; Gets rectangle of the page. Page crop box is returned if specified, otherwise page media box is returned. &lt;/p&gt; @return Rectangle value &lt;hr&gt; &lt;pre&gt; Example demonstrates how to get page rectangle: Document document = new Document("sample.pdf"); Page page = document.getPages().get(1); Rectangle pageRect = page.getRect(); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.Page.setRect(Rectangle)">
       
        <p>Sets rectangle of the page. Page crop box is returned if specified, otherwise page media box is returned. Please note that this property don't consider page rotation. To get page rectangle considering rotation please use ActualRect.</p> @param value Rectangle object
      
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getColorType">
       
        <p>Gets color type of the pages based on information getting from operators SetColor, images and forms.</p> @return ColorType element @see ColorType
      
    </member>
    <member name="M:com.aspose.pdf.Page.getNoteLineStyle">
       
        <p>Gets the line style for notes.(for generator only)</p> @return GraphInfo value
      
    </member>
    <member name="M:com.aspose.pdf.Page.setNoteLineStyle(GraphInfo)">
       
        <p>Sets the line style for notes.(for generator only)</p> @param value : GraphInfo value
      
      <param name="GraphInfo"/>
    </member>
    <member name="M:com.aspose.pdf.Page.isBlank(double)">
       
        <p>Gets the flag whether page is blank or not.</p> @param fillThresholdFactor The fill threshold value that manages the sensitivity of detection. Should be equal or greater than 0.01. @return boolean value True - if page is blank; otherwise, false.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getPageRect(boolean)">
       
        <p>Returns rectangle of the page.</p> @param considerRotation If true then rotation of the page will be considered in rect calculation. @return Rectangle of the page.
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Page.calculateContentBBox">
       
        <p>Calculates bbox value - rectangle containing contents without visible margins.</p> @return Bbox value - rectangle containing contents without visible margins
      
    </member>
    <member name="M:com.aspose.pdf.Page.getTabOrder">
       
        <p>Gets tab order of the page. Possible values: Row, Column. Default, Manual</p> @return TabOrder value @see TabOrder
      
    </member>
    <member name="M:com.aspose.pdf.Page.setTabOrder(int)">
       
        <p>Sets tab order of the page. Possible values: Row, Column. Default, Manual</p> @param value TabOrder object @see TabOrder
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getDuration">&lt;p&gt; Gets page display duration. This is time in seconds that page shall be displayed during presentation. Returs -1 if duration is not defined. &lt;/p&gt; &lt;hr&gt; Example demonstrates how to get page duration &lt;p&gt; Document document = new Document(&amp;quot;sample.pdf&amp;quot;); Page page = document.getPages().get(1); int pageRect = page.getDuration(); &lt;/p&gt; @return double value</member>
    <member name="M:com.aspose.pdf.Page.setDuration(double)">
       
        <p>Sets page display duration. This is time in seconds that page shall be displayed during presentation.</p> @param value page display duration.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getContents">&lt;p&gt; Gets collection of operators in the content stream of the page. {@code OperatorCollection} &lt;/p&gt; @return OperatorCollection object &lt;hr&gt; &lt;pre&gt; Example is demonstrates how to scan operators stream of page. Document document = new Document("sample.pdf"); Operators contents = document.getPages().get_Item(1).getContents(); for(Operator op : {@code (Iterable&lt;Operator&gt;)}contents) { System.out.println(op); } &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.Page.getGroup">
       
        <p>Gets a group attributes class specifying the attributes of the page's page group for use in the transparent imaging model.</p> @return Group value
      
    </member>
    <member name="M:com.aspose.pdf.Page.setGroup(Group)">
       
        <p>Sets a group attributes class specifying the attributes of the page's page group for use in the transparent imaging model.</p> @param value Group value
      
      <param name="Group"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getAnnotations">
       
        <p>Gets collection of page annotations. {@code Annotations}</p> @return AnnotationCollection value
      
    </member>
    <member name="M:com.aspose.pdf.Page.getResources">&lt;p&gt; Gets page resources. Resources object contains collections of images, forms and fonts. {@code Resources} &lt;/p&gt; @return Resources value &lt;hr&gt; &lt;pre&gt; Example demonstrates scan through page images: Document document = new Document("sample.pdf"); DocumentActions actions = document.getActions(); Resources resources = document.getPages().get(1).getResources(); for(XImage image : {@code (Ierable&lt;XImage&gt;)resources}.getImages()) { System.out.println(image.getWidth() + ":" + image.getHeight()); } &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.Page.getRotate">&lt;p&gt; Gets rotation of the page. &lt;/p&gt; @return Rotation element &lt;hr&gt; &lt;pre&gt; Example demonstrates how to determine page rotation. Document document = new Document("sample.pdf"); System.out.println(document.getPages().get(1).getRotate()); &lt;/pre&gt; @see Rotation</member>
    <member name="M:com.aspose.pdf.Page.setRotate(int)">
       
        <p>Sets rotation of the page.</p> @param value Rotation element @see Rotation
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getTrimBox">&lt;p&gt; Gets trim box of the page. &lt;/p&gt; @return Rectangle value &lt;hr&gt; &lt;pre&gt; Example demonstrates how to get trim box of the page: Document document = new Document("sample.pdf"); Rectangle trimBox = document.getPages().get(1).getTrimBox(); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.Page.setTrimBox(Rectangle)">
       
        <p>Sets trim box of the page.</p> @param value Rectangle value
      
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getArtBox">&lt;p&gt; Gets art box of the page. &lt;/p&gt; @return Rectangle value &lt;hr&gt; &lt;pre&gt; Example demonstrates how to get art box of the page: Document document = new Document("sample.pdf"); Rectangle artBox = document.getPages().get(1).getArtBox(); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.Page.setArtBox(Rectangle)">
       
        <p>Sets art box of the page.</p> @param value Rectangle value
      
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getBleedBox">&lt;p&gt; Gets bleed box of the page. &lt;/p&gt; @return Rectangle value &lt;hr&gt; &lt;pre&gt; Example demonstrates how to get bleed box of the page: Document document = new Document("sample.pdf"); Rectangle bleedBox = document.getPages().get(1).getBleedBox(); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.Page.setBleedBox(Rectangle)">
       
        <p>Sets bleed box of the page.</p> @param value Rectangle value
      
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getCropBox">&lt;p&gt; Gets crop box of the page. &lt;/p&gt; @return Rectangle value &lt;hr&gt; &lt;pre&gt; Example demonstrates how to get crop box of the page: Document document = new Document("sample.pdf"); Rectangle cropBox = document.getPages().get_Item(1).getCropBox(); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.Page.setCropBox(Rectangle)">&lt;p&gt; Sets crop box of the page. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Example demonstrates how to get crop box of the page: Document document = new Document("sample.pdf"); document.getPages().get_Item(1).setCropBox(new Rectangle(0d,0d,100d,100d)); &lt;/pre&gt; @param value Rectangle object 
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getMediaBox">&lt;p&gt; Gets media box of the page. &lt;/p&gt; @return Rectangle value &lt;hr&gt; &lt;pre&gt; Example demonstrates how to get media box of the page: Document document = new Document("sample.pdf"); Rectangle mediaBox = document.getPages().get(1).getMediaBox(); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.Page.setMediaBox(Rectangle)">
       
        <p>Sets media box of the page.</p> @param value Rectangle
      
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Page.sendTo(PageDevice,OutputStream)">
       
        <p>Sends page to process with given page device.</p> @param device The device to process page. @param output Result stream which is used with device to save its output.
      
      <param name="PageDevice"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.Page.accept(AnnotationSelector)">
       
        <p>Accepts {@code AnnotationSelector} visitor object that provides functionality to work with annotations.</p> @param visitor Annotation selector sobject.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Page.rotationToInt(int)">
       
        <p>Translates rotation enumeration member into integer value.</p> @param rotation Rotation enumeratioom member. @return Corresponding integer value @see Rotation
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Page.intToRotation(int)">
       
        <p>Translates integer value into corresponding rotation enumeration member.</p> @param rotation Integer value to convert @return Rotation enumeration member @see Rotation
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Page.addStamp(Stamp)">
       
        <p>Put stamp into page. Stamp can be page number, image or simple text, e.g. some logo.</p> @param stamp Stamp to add on the page. Each stamp has its coordinates and corresponding properties regarding to the kind of stamp, i.e. image or text value.
      
      <param name="Stamp"/>
    </member>
    <member name="M:com.aspose.pdf.Page.addImage(InputStream,Rectangle)">
       
        <p>Adds image onto the page and locates it in the middle of specified rectangle saving image's proportion.</p> @param imageStream The stream of the image. @param imageRect The position of the image.
      
      <param name="InputStream"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Page.addImage(String,InputStream,Rectangle)">
       
        <p>Adds searchable image onto the page and locates it in the middle of specified rectangle saving image's proportion.</p> @param hocr The hocr of the image. @param imageStream The stream of the image. @param imageRect The position of the image.
      
      <param name="String"/>
      <param name="InputStream"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Page.addImage(InputStream,Rectangle,int,int,boolean)">
       
        <p>Adds searchable image onto the page and locates it in the middle of specified rectangle saving image's proportion.</p> @param imageStream InputStream object @param imageRect Rectangle object @param imageWidth int value @param imageHeight int value @param saveImageProportions boolean value
      
      <param name="InputStream"/>
      <param name="Rectangle"/>
      <param name="int"/>
      <param name="int"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Page.addImage(String,Rectangle)">
       
        <p>Adds image onto the page and locates it in the middle of specified rectangle saving image's proportion.</p> @param imagePath The path to image. @param rectangle The position of the image.
      
      <param name="String"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Page.addImage(InputStream,Rectangle,CompositingParameters)">
       
        <p>Adds image onto the page and locates it in the middle of specified rectangle saving image's proportion.</p> @param stream The stream of the image. @param rectangle The position of the image. @param compositingParameters The compositing parameters.
      
      <param name="InputStream"/>
      <param name="Rectangle"/>
      <param name="CompositingParameters"/>
    </member>
    <member name="M:com.aspose.pdf.Page.sendTo(PageDevice,String)">
       
        <p>Sends page to process with given page device.</p> @param device The device to process page. @param outputFileName File which is used with device to save its output.
      
      <param name="PageDevice"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Page.flatten">
       
        <p>Removes all static fields located on the page and place their values instead.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Page.accept(TextFragmentAbsorber)">
       
        <p>Accepts {@code TextFragmentAbsorber} visitor object that provides functionality to work with text objects.</p> @param visitor Text absorber object.
      
      <param name="TextFragmentAbsorber"/>
    </member>
    <member name="M:com.aspose.pdf.Page.accept(ImagePlacementAbsorber)">
       
        <p>Accepts {@code ImagePlacementAbsorber} visitor object that provides functionality to work with image placement objects.</p> @param visitor Image placement absorber object.
      
      <param name="ImagePlacementAbsorber"/>
    </member>
    <member name="M:com.aspose.pdf.Page.accept(TextAbsorber)">
       
        <p>Accepts {@code TextAbsorber} visitor object that provides functionality to work with text objects.</p> @param visitor Text absorber object.
      
      <param name="TextAbsorber"/>
    </member>
    <member name="M:com.aspose.pdf.Page.setPageSize(double,double)">
       
        <p>Sets page size for page.</p> @param width Page width. @param height Page size.
      
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Page.setTransition(IPdfDictionary)">
       
        <p>Set transition</p> @param transition IPdfDictionary object
      
      <param name="IPdfDictionary"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getNumber">
       
        <p>Get number of the page.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.Page.getRotationMatrix">
       
        <p>Gets transfomation matrix for the page.</p> @return Matrix value
      
    </member>
    <member name="M:com.aspose.pdf.Page.getContentsAppender">
       
        <p>Gets current contents appender. {@code ContentsAppender}</p> @return ContentsAppender value
      
    </member>
    <member name="M:com.aspose.pdf.Page.getBackground">
       
        <p>Gets the background color of the page.</p> @return Color value
      
    </member>
    <member name="M:com.aspose.pdf.Page.setBackground(java.awt.Color)">
       
        <p>Sets the background color of the page.</p> @param value Color object
      
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.Page.setBackground(Color)">
       
        <p>Sets the background color of the page.</p> @param value Color object
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getWatermark">
       
        <p>Gets the watermark of the page.</p> @return Watermark value
      
    </member>
    <member name="M:com.aspose.pdf.Page.setWatermark(Watermark)">
       
        <p>Sets the watermark of the page.</p> @param value Watermark object
      
      <param name="Watermark"/>
    </member>
    <member name="M:com.aspose.pdf.Page.removeObjectReferences(String)">
       
        <p>Remove references to XObject from page contents (i.e. all Do operators which use name of object).</p> @param name String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Page.removeObjectReferences(OperatorCollection,String)">
       
        <p>Remove object references</p> @param contents OperatorCollection object @param name value
      
      <param name="OperatorCollection"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Page.findReferences(String)">&lt;p&gt; Find references &lt;/p&gt; @param name String value @return {@code List&lt;Object&gt;} object 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Page.findReferences(OperatorCollection,String)">
       
        <p>Returns list of operators which uses resource with specified name.</p> @param contents OperatorCollection value @param name String value @return List of Object
      
      <param name="OperatorCollection"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Page.close">
       
        <p>Closes all resources used by this document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Page.dispose">
       
        <p>Frees up memory</p> This method is obsolete, use close() instead.
      
    </member>
    <member name="M:com.aspose.pdf.Page.fillUsedObjectsTable(Dictionary&lt;Integer, Integer&gt;,IPdfDictionary)">
      <param name="Dictionary&lt;Integer, Integer&gt;"/>
      <param name="IPdfDictionary"/>
    </member>
    <member name="M:com.aspose.pdf.Page.deleteUnusedResources(Dictionary&lt;Integer, Integer&gt;)">
      <param name="Dictionary&lt;Integer, Integer&gt;"/>
    </member>
    <member name="M:com.aspose.pdf.Page.clearContents">
      For internal usage only
    </member>
    <member name="M:com.aspose.pdf.Page.getArtifacts">
       
        <p>Gets collection of artifacts on the page.</p> @return ArtifactCollection value
      
    </member>
    <member name="M:com.aspose.pdf.Page.getActions">
       
        <p>Gets collection of page properties.</p> @return PageActionCollection value
      
    </member>
    <member name="M:com.aspose.pdf.Page.makeGrayscale">
       
        <p>Converts the page to grayscale.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Page.freeMemory">
       
        <p>Clears cached data</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Page.getNotifications">
       
        <p>Returns notifications about inside operations with page content. (Only notifications about paragraph events in text adding scenarios are supported now.)</p> @return String representing notifications about inside operations with page content.
      
    </member>
    <member name="M:com.aspose.pdf.Page.asByteArray(Resolution)">
       
        <p>Converts current page as BMP bitmap and than returns array of bytes.</p> @param resolution The resolution. @return Converted array of image bytes.
      
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.Page.asXml">
       
        <p>Converts current page as xml in utf8 encoding.</p> @return Converted xml string.
      
    </member>
    <member name="M:com.aspose.pdf.Page.getFieldsInTabOrder">
       
        <p>Gets list of Field object in Tab order on this page.</p> @return List of field objects
      
    </member>
    <member name="T:com.aspose.pdf.Page.BeforePageGenerate">
       
        <p>Procedure for customize header and footer.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Page.BeforePageGenerate.invoke(Page)">
      Invoke method @param page Page object
      <param name="Page"/>
    </member>
    <member name="T:com.aspose.pdf.PageActionCollection">
      This class describes page actions
    </member>
    <member name="M:com.aspose.pdf.PageActionCollection.getOnOpen">
       
        <p>An action that shall be performed when the page is opened.</p> @return PdfAction value
      
    </member>
    <member name="M:com.aspose.pdf.PageActionCollection.setOnOpen(PdfAction)">
       
        <p>An action that shall be performed when the page is opened.</p> @param value PdfAction value
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.PageActionCollection.getOnClose">
       
        <p>An action that shall be performed when the page is closed.</p> @return PdfAction value
      
    </member>
    <member name="M:com.aspose.pdf.PageActionCollection.setOnClose(PdfAction)">
       
        <p>An action that shall be performed when the page is closed.</p> @param value PdfAction value
      
      <param name="PdfAction"/>
    </member>
    <member name="T:com.aspose.pdf.PageCollection">
       
        <p>Collection of PDF document pages.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageCollection.size">
       
        <p>Gets count of pages in the document.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.PageCollection.isEmpty">
       
        <p>Returns TRUE if the collection is empty.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.PageCollection.isSynchronized">
       
        <p>Returns true of object is synchorinzed.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.PageCollection.getSyncRoot">
       
        <p>Gets synchronization object of the collection.</p> @return Object for synchronization
      
    </member>
    <member name="M:com.aspose.pdf.PageCollection.isReadOnly">
       
        <p>Gets value indicating of collection is readonly. Always returns false.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.PageCollection.add(Page)">
       
        <p>Adds page to collection.</p> @param entity Page which should be added. @return Added page.
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.clear">
       
        <p>Clear page collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageCollection.delete(int)">
       
        <p>Delete specified page.</p> @param index Number of page that will be deleted. Pages numbers start from 1.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.delete">
       
        <p>Deletes all pages from collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageCollection.indexOf(Page)">&lt;p&gt; Returns index of the specified page. &lt;/p&gt; @param entity Page object. Pages numbers start from 1. &lt;hr&gt; &lt;p&gt; Pages numbers start from 1. Returns 0 in case collection doesn't contain the page. &lt;/p&gt; @return Index of the page in collection. 
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.getUnrestricted(int)">
       
        <p>Returns page by its index. {@code Page}</p> @param index Index of requested page. Pages are numbered from 1. @return Requested page
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.copyTo(Page[],int)">
       
        <p>Copyies pages into document.</p> @param array Array containing Pages object to insert into document. It must be Object[] or Page[]. @param index Starting index where pages will be inserted
      
      <param name="Page[]"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.iterator">
       
        <p>Returns enumerator of pages.</p> @return Enumerator of pages
      
    </member>
    <member name="M:com.aspose.pdf.PageCollection.accept(AnnotationSelector)">
       
        <p>Accepts {@code AnnotationSelector} visitor object that provides functionality to work with annotations.</p> @param visitor AnnotationSelector Visitor
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.delete(Integer[])">
       
        <p>Delete pages specified which numbers are specified in array.</p> @param pages Array of pages to be deleted.
      
      <param name="Integer[]"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.insert(int)">
       
        <p>Insert empty apge into collection at the specified position.</p> @param pageNumber Position of the new page. @return Inserted page.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.add">
       
        <p>Adds empty page</p> @return Added page.
      
    </member>
    <member name="M:com.aspose.pdf.PageCollection.add(java.util.List&lt;Page&gt;)">
       
        <p>Adds to collection all pages from list.</p> @param pages List which contains all pages which must be added.
      
      <param name="java.util.List&lt;Page&gt;"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.add(Iterable&lt;Page&gt;)">
       
        <p>Adds to collection all pages from list.</p> @param pages List which contains all pages which must be added.
      
      <param name="Iterable&lt;Page&gt;"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.insert(int,Page)">
       
        <p>Inserts page into page collection at specified place.</p> @param pageNumber Required page index in collection. @param entity Page to be inserted. @return Inserted page.
      
      <param name="int"/>
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.get_Item(int)">
       
        <p>Gets page by index.</p> @param index Index of page. @return Retreived page.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.accept(ImagePlacementAbsorber)">
       
        <p>Accepts {@code ImagePlacementAbsorber} visitor object that provides functionality to work with image placement objects.</p> @param visitor Image placement object.
      
      <param name="ImagePlacementAbsorber"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.accept(TextFragmentAbsorber)">
       
        <p>Accepts {@code TextFragmentAbsorber} visitor object that provides functionality to work with text objects.</p> @param visitor Text fragment absorber object.
      
      <param name="TextFragmentAbsorber"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.accept(TextAbsorber)">
       
        <p>Accepts {@code TextAbsorber} visitor object that provides functionality to work with text objects.</p> @param visitor Text absorber object.
      
      <param name="TextAbsorber"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.add(Page[])">
       
        <p>Adds to collection all pages from array.</p> @param pages Array of pages which will be added.
      
      <param name="Page[]"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.insert(int,Iterable&lt;Page&gt;)">
       
        <p>Inserts pages from the collection into document.</p> @param pageNumber Starting position of the new pages. @param pages Pages collection.
      
      <param name="int"/>
      <param name="Iterable&lt;Page&gt;"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.insert(int,java.util.List&lt;Page&gt;)">
       
        <p>Inserts pages from the collection into document.</p> @param pageNumber Starting position of the new pages. @param pages Pages collection.
      
      <param name="int"/>
      <param name="java.util.List&lt;Page&gt;"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.insert(int,Page[])">
       
        <p>Inserts pages of the array into document.</p> @param pageNumber Starting number of the new pages. @param pages Array of pages which will be inserted.
      
      <param name="int"/>
      <param name="Page[]"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.flatten">
       
        <p>Removes all fields located on the pages and place their values instead.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageCollection.freeMemory">
       
        <p>Clears cached data</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageCollection.add_Rename_Namesake(Page)">
       
        <p>Adds page to collection.</p> @param entity Page which should be added.
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.contains(Page)">
       
        <p>Determines whether this instance contains the object.</p> @param item Page instance @return boolean value {@code true} if [contains] [the specified item]; otherwise, {@code false}. @exception NotSupportedException and exception
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.remove(Page)">
       
        <p>Removes the specified item, throws exception.</p> @param item Page instance @exception NotSupportedException an exception @return boolean value
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.findByPdfObject(IPdfObject)">
      <param name="IPdfObject"/>
    </member>
    <member name="T:com.aspose.pdf.PageCoordinateType">
       
        <p>Describes page coordinate type.</p> MediaBox = 0 
        <br/> CropBox = 1
      
    </member>
    <member name="F:com.aspose.pdf.PageCoordinateType.MediaBox">
       
        <p>The MediaBox is used to specify the width and height of the page. For the average user, this probably equals the actual page size. The MediaBox is the largest page box in a PDF. The other page boxes can equal the size of the MediaBox but they cannot be larger.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PageCoordinateType.CropBox">
       
        <p>The CropBox defines the region to which the page contents are to be clipped. Acrobat uses this size for screen display and printing.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.PageInfo">
       
        <p>Represents the page information for pdf generator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageInfo.deepClone">
       
        <p>Clone page info.</p> @return The cloned object
      
    </member>
    <member name="M:com.aspose.pdf.PageInfo.getAnyMargin">
       
        <p>Gets or sets page margin for any page except first.</p> @return MarginInfo instance
      
    </member>
    <member name="M:com.aspose.pdf.PageInfo.setAnyMargin(MarginInfo)">
       
        <p>Gets or sets page margin for any page except first.</p> @param value MarginInfo instance
      
      <param name="MarginInfo"/>
    </member>
    <member name="M:com.aspose.pdf.PageInfo.getDefaultTextState">
       
        <p>Gets default font.</p> @return TextState instance
      
    </member>
    <member name="M:com.aspose.pdf.PageInfo.setDefaultTextState(TextState)">
       
        <p>Sets default font.</p> @param value TextState instance
      
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.PageInfo.getHeight">
       
        <p>Gets page height.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.PageInfo.setHeight(double)">
       
        <p>Sets page height.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.PageInfo.getPureHeight">
       
        <p>Gets page pure height without margins.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.PageInfo.isLandscape">
       
        <p>Gets is page landscaped.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.PageInfo.setLandscape(boolean)">
       
        <p>Sets is page landscaped.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.PageInfo.getMargin">
       
        <p>Gets page margin.</p> @return MarginInfo value
      
    </member>
    <member name="M:com.aspose.pdf.PageInfo.setMargin(MarginInfo)">
       
        <p>Sets page margin.</p> @param value MarginInfo value
      
      <param name="MarginInfo"/>
    </member>
    <member name="M:com.aspose.pdf.PageInfo.getWidth">
       
        <p>Gets page width.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.PageInfo.setWidth(double)">
       
        <p>Sets page width.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.PageInfo.#ctor">
       
        <p>default constructor</p> 
      
    </member>
    <member name="T:com.aspose.pdf.PageLabel">
      Class representing Page Label range.
    </member>
    <member name="M:com.aspose.pdf.PageLabel.getStartingValue">
      Gets starting value of the page numbering range. @return int value
    </member>
    <member name="M:com.aspose.pdf.PageLabel.setStartingValue(int)">
      Gets starting value of the page numbering range. @param value int value
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PageLabel.getNumberingStyle">
      Gets numbering style. @return int value @see NumberingStyle
    </member>
    <member name="M:com.aspose.pdf.PageLabel.setNumberingStyle(int)">
      Sets numbering style. @param value int vlaue @see NumberingStyle
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PageLabel.getPrefix">
      Gets page number prefix. @return String value
    </member>
    <member name="M:com.aspose.pdf.PageLabel.setPrefix(String)">
      Sets or sets page number prefix. @param value String object
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.PageLabel.#ctor">
      * Constructor for page label.
    </member>
    <member name="T:com.aspose.pdf.PageLabelCollection">
      Class represeingting page label collection.
    </member>
    <member name="M:com.aspose.pdf.PageLabelCollection.getLabel(int)">
       
        <p>Gets page label by page index (page index is started from 0).</p> @return Page label for specified page index or null if page label does not exist. @param pageIndex Index of the page.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PageLabelCollection.updateLabel(int,PageLabel)">
       
        <p>Update label for given page index (page index is started from 0).</p> @param pageIndex Index of page to change lable of the page. @param pageLabel New label of the page.
      
      <param name="int"/>
      <param name="PageLabel"/>
    </member>
    <member name="M:com.aspose.pdf.PageLabelCollection.removeLabel(int)">
       
        <p>Remove label by page index (page index is started from 0).</p> @return true if operation was executed successfully. @param pageIndex Index of page where label must be deleted.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PageLabelCollection.getPages">
       
        <p>Gets page indexes in collection.</p> @return Array of integers which contains indexes of the pages.
      
    </member>
    <member name="T:com.aspose.pdf.PageLayout">
       
        <p>Descibes page layout.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PageLayout.SinglePage">
       
        <p>Single page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PageLayout.OneColumn">
       
        <p>Display the pages in one column.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PageLayout.TwoColumnLeft">
       
        <p>Display the pages in two columns, with odd-numbered pages on the left.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PageLayout.TwoColumnRight">
       
        <p>Display the pages in two columns, with odd-numbered pages on the right.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PageLayout.TwoPageLeft">
       
        <p>Display the pages two at a time, with odd-numbered pages on the left.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PageLayout.TwoPageRight">
       
        <p>Display the pages two at a time, with odd-numbered pages on the right.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PageLayout.Default">
       
        <p>Default layout.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.PageMarkup">
       
        <p>Page markup represented by collections of {@code MarkupSection} and {@code MarkupParagraph}.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageMarkup.getNumber">
       
        <p>Gets processed page number.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.PageMarkup.getRectangle">
       
        <p>Gets processed page rectangle.</p> @return Rectangle object
      
    </member>
    <member name="M:com.aspose.pdf.PageMarkup.getSections">
       
        <p>Gets collection of {@code MarkupSection} that was found on the page.</p> @return List of MarkupSection instances
      
    </member>
    <member name="M:com.aspose.pdf.PageMarkup.getParagraphs">
       
        <p>Gets collection of {@code MarkupParagraph} that was found on the page.</p> @return List of MarkupParagraph instances
      
    </member>
    <member name="M:com.aspose.pdf.PageMarkup.getTextFragments">&lt;p&gt; Gets collection of {@code TextFragment} that was found on the page. &lt;/p&gt;&lt;hr&gt; The {@code TextFragment} object provides access to the search occurrence text, text properties, and allows to edit text and change the text state (font, font size, color etc). @return List of TextFragment instances</member>
    <member name="M:com.aspose.pdf.PageMarkup.isMulticolumnParagraphsAllowed">
       
        <p>Gets or sets value that indicates whether starting text lines of a next section may be treated as continuation of the last paragraph of a previous section.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.PageMarkup.setMulticolumnParagraphsAllowed(boolean)">
       
        <p>Gets or sets value that indicates whether starting text lines of a next section may be treated as continuation of the last paragraph of a previous section.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="T:com.aspose.pdf.PageMode">
       
        <p>Class descibes used components of the document page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PageMode.UseNone">
       
        <p>Dont use any components.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PageMode.UseOutlines">
       
        <p>Document outline visible.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PageMode.UseThumbs">
       
        <p>Thumbnail images visible.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PageMode.FullScreen">
       
        <p>FullScreenFull-screen mode, with no menu bar, window controls, or any other window visible.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PageMode.UseOC">
       
        <p>Optional content group panel visible.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PageMode.UseAttachments">
       
        <p>Attachments panel visible.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.PageNumberStamp">
       
        <p>Represents page number stamp and used to number pages.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageNumberStamp.getFormat">
       
        <p>Gets String value for stamping page numbers. Value must include char '#' which is replaced with the page number in the process of stamping.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.PageNumberStamp.setFormat(String)">
       
        <p>Sets String value for stamping page numbers. Value must include char '#' which is replaced with the page number in the process of stamping.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.PageNumberStamp.getStartingNumber">
       
        <p>Gets value of the number of starting page. Other pages will be numbered starting from this value.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.PageNumberStamp.setStartingNumber(int)">
       
        <p>Sets value of the number of starting page. Other pages will be numbered starting from this value.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PageNumberStamp.put(Page)">
       
        <p>Adds page number.</p> @param page Page for stamping.
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.PageNumberStamp.getNumberingStyle">
       
        <p>Numbering style which used by this stamp.</p> @return NumberingStyle value @see NumberingStyle
      
    </member>
    <member name="M:com.aspose.pdf.PageNumberStamp.setNumberingStyle(int)">
       
        <p>Numbering style which used by this stamp.</p> @param value NumberingStyle value @see NumberingStyle
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PageNumberStamp.#ctor(String)">
       
        <p>Initializes a new instance of the {@code PageNumberStamp} class.</p> @param format String value used for stamping. See {@code Format} property for details.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.PageNumberStamp.#ctor">
       
        <p>Initializes a new instance of the {@code PageNumberStamp} class. Format is set to "#".</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageNumberStamp.#ctor(FormattedText)">
       
        <p>Creates PageNumberStamp by formatted text.</p> @param formattedText Formatted text which used to create Page Number Stamp.
      
      <param name="FormattedText"/>
    </member>
    <member name="T:com.aspose.pdf.PageSize">
       
        <p>Class representing size of page in PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageSize.getWidth">
       
        <p>Gets page width.</p> @return page width.
      
    </member>
    <member name="M:com.aspose.pdf.PageSize.setWidth(float)">
       
        <p>Sets page width.</p> @param value page width.
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.PageSize.getHeight">
       
        <p>Gets page height.</p> @return page height.
      
    </member>
    <member name="M:com.aspose.pdf.PageSize.setHeight(float)">
       
        <p>Sets page height.</p> @param value page height.
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.PageSize.isLandscape">
       
        <p>Gets page orientation. Returns true of this is landscape orientation and false if this is portrait.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.PageSize.setLandscape(boolean)">
       
        <p>Sets page orientation. Returns true of this is landscape orientation and false if this is portrait.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.PageSize.getA0">
       
        <p>A0 size (1189x840 mm).</p> @return PageSize object
      
    </member>
    <member name="M:com.aspose.pdf.PageSize.getA1">
       
        <p>A1 size (840x594 mm).</p> @return PageSize object
      
    </member>
    <member name="M:com.aspose.pdf.PageSize.getA2">
       
        <p>A2 size (594x420 mm).</p> @return PageSize object
      
    </member>
    <member name="M:com.aspose.pdf.PageSize.getA3">
       
        <p>A3 size (420x297 mm).</p> @return PageSize object
      
    </member>
    <member name="M:com.aspose.pdf.PageSize.getA4">
       
        <p>A4 size (297x210 mm).</p> @return PageSize object
      
    </member>
    <member name="M:com.aspose.pdf.PageSize.getA5">
       
        <p>A5 size (210x148 mm).</p> @return PageSize object
      
    </member>
    <member name="M:com.aspose.pdf.PageSize.getA6">
       
        <p>A6 size (148x105 mm).</p> @return PageSize object
      
    </member>
    <member name="M:com.aspose.pdf.PageSize.getB5">
       
        <p>B5 size (250x176 mm).</p> @return PageSize object
      
    </member>
    <member name="M:com.aspose.pdf.PageSize.getPageLetter">
       
        <p>Letter size (279x216 mm).</p> @return PageSize object
      
    </member>
    <member name="M:com.aspose.pdf.PageSize.getPageLegal">
       
        <p>Legal size (356x216 mm).</p> @return PageSize object
      
    </member>
    <member name="M:com.aspose.pdf.PageSize.getPageLedger">
       
        <p>Ledger size (432x279 mm).</p> @return PageSize object
      
    </member>
    <member name="M:com.aspose.pdf.PageSize.getP11x17">
       
        <p>11x17 inches format.</p> @return PageSize object
      
    </member>
    <member name="M:com.aspose.pdf.PageSize.#ctor(float,float)">
       
        <p>Constructor for PageSize.</p> @param x Width of the page. @param y Height of the page.
      
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="F:com.aspose.pdf.PageSize.LEAVE_INTACT">
      For internal usage only
    </member>
    <member name="T:com.aspose.pdf.ParagraphAbsorber">&lt;p&gt; Represents an absorber object of page structure objects such as sections and paragraphs. Performs search for sections and paragraphs of text and provides access for rectangles and polydons that describes it in text coordinate space. Also performs text segments search and provides access to search results via {@code TextFragments} collections grouped by structure elements. &lt;/p&gt;&lt;hr&gt; The example demonstrates how to find first text segment of each paragraph on the first PDF document page and highlight it. // Open document Document doc = new Document("input.pdf"); // Create ParagraphAbsorber object ParagraphAbsorber absorber = new ParagraphAbsorber(); // Accept the absorber for first page absorber.visit(doc.getPages.get_Item(1)); // Get markup object of first page PageMarkup markup = absorber.getPageMarkups().get(0); // Loop through structure elements of the page text to find first text fragment of each paragraph for (MarkupSection section : markup.getSections()) { for (MarkupParagraph paragraph : section.getParagraphs()) { TextFragment fragment = paragraph.getFragments().get_Item(0); // Update text properties fragment.getTextState().setBackgroundColor (Color.getLightBlue()); } } // Save document doc.save(GetOutputPath("output.pdf")); &lt;hr&gt; When the search is completed the {@code ParagraphAbsorber.PageMarkups} collection will contains {@code PageMarkup} objects that represents page structure by collections of {@code MarkupSection} and {@code MarkupParagraph}. The {@code TextFragment} object provides access to the search occurrence text, text properties, and allows to edit text and change the text state (font, font size, color etc).</member>
    <member name="M:com.aspose.pdf.ParagraphAbsorber.getPageMarkups">
       
        <p>Gets collection of {@code PageMarkup} that were absorbed.</p> @return List of PageMarkup instances
      
    </member>
    <member name="M:com.aspose.pdf.ParagraphAbsorber.getSectionsSearchDepth">&lt;p&gt; Gets or sets value that instructs how many times sequential searches for more fine elements of structure will be performed. Default search depth is 3. It means three searches for horizontally divided sections (headers, paragraphs etc) and three searches for vertically divided ones (columns). &lt;/p&gt;&lt;hr&gt; Increasing of this value may lead to minor decreasing performance with no visible changes in search result. Decreasing of this value may lead to incorrect determination of paragraphs in sections. We are not recommend to set value less than default if you aren't desire to get only 'rough' elements of page structure. @return int value</member>
    <member name="M:com.aspose.pdf.ParagraphAbsorber.setSectionsSearchDepth(int)">&lt;p&gt; Gets or sets value that instructs how many times sequential searches for more fine elements of structure will be performed. Default search depth is 3. It means three searches for horizontally divided sections (headers, paragraphs etc) and three searches for vertically divided ones (columns). &lt;/p&gt;&lt;hr&gt; Increasing of this value may lead to minor decreasing performance with no visible changes in search result. Decreasing of this value may lead to incorrect determination of paragraphs in sections. We are not recommend to set value less than default if you aren't desire to get only 'rough' elements of page structure. @param value int value 
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.ParagraphAbsorber.isMulticolumnParagraphsAllowed">
       
        <p>Gets or sets value that indicates whether starting text lines of a next section may be treated as continuation of the last paragraph of a previous section.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.ParagraphAbsorber.setMulticolumnParagraphsAllowed(boolean)">
       
        <p>Gets or sets value that indicates whether starting text lines of a next section may be treated as continuation of the last paragraph of a previous section.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.ParagraphAbsorber.visit(Document)">
       
        <p>Performs search for sections and paragraphs on the specified {@link Document}.</p> @param doc Pdf document object.
      
      <param name="Document"/>
    </member>
    <member name="M:com.aspose.pdf.ParagraphAbsorber.visit(Page)">
       
        <p>Performs search on the specified {@code Page}.</p> @param page Pdf document page object.
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.ParagraphAbsorber.#ctor">
       
        <p>Initializes a new instance of the {@code ParagraphAbsorber} that performs search for sections/paragraphs of the document or page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ParagraphAbsorber.#ctor(int)">&lt;p&gt; Initializes a new instance of the {@code ParagraphAbsorber} that performs search for sections/paragraphs of the document or page. &lt;/p&gt; @param sectionsSearchDepth Number of sequential searches for more fine elements of structure that will be performed. &lt;hr&gt; See {@code ParagraphAbsorber.SectionsSearchDepth} property for more hints about the parameter. &lt;hr&gt; 
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.Paragraphs">
       
        <p>This class represents paragraph collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Paragraphs.add(BaseParagraph)">
       
        <p>Add paragraph to collection.</p> @param paragraph The paragraph.
      
      <param name="BaseParagraph"/>
    </member>
    <member name="M:com.aspose.pdf.Paragraphs.getRange(int,int)">
       
        <p>Remove paragraphs range.</p> @return The paragraphs collection @param index The first paragraph index. @param count The paragraphs count.
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Paragraphs.removeRange(int,int)">
       
        <p>Remove paragraphs range.</p> @param index The first paragraph index. @param count The paragraphs count.
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Paragraphs.remove(BaseParagraph)">
      Remove paragraph from collection. @param paragraph BaseParagraph object
      <param name="BaseParagraph"/>
    </member>
    <member name="M:com.aspose.pdf.Paragraphs.insert(int,BaseParagraph)">
       
        <p>Insert paragraph to collection.</p> @param index The index for paragraph. @param paragraph The paragraph.
      
      <param name="int"/>
      <param name="BaseParagraph"/>
    </member>
    <member name="M:com.aspose.pdf.Paragraphs.getCount">
      Get paragraphs count. @return int value
    </member>
    <member name="M:com.aspose.pdf.Paragraphs.clear">
      Clear paragraphs.
    </member>
    <member name="M:com.aspose.pdf.Paragraphs.insertRange(int,List&lt;BaseParagraph&gt;)">
       
        <p>Inserts the elements of a collection into the list at the specified index.</p> @param index int value (Index) @param collection list of BaseParagraph objects (Collection)
      
      <param name="int"/>
      <param name="List&lt;BaseParagraph&gt;"/>
    </member>
    <member name="M:com.aspose.pdf.Paragraphs.get_Item(int)">
       
        <p>Gets paragraph from collection.</p> @param index The paragraph index. @return BaseParagraph object
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Paragraphs.set_Item(int,BaseParagraph)">
       
        <p>Sets paragraph to collection.</p> @param index The paragraph index. @param value BaseParagraph object
      
      <param name="int"/>
      <param name="BaseParagraph"/>
    </member>
    <member name="M:com.aspose.pdf.Paragraphs.iterator"/>
    <member name="M:com.aspose.pdf.Paragraphs.deepClone">
       
        <p>Clones a new {@code Clone} object.</p> @return The new {@code Clone} object.
      
    </member>
    <member name="T:com.aspose.pdf.PasswordBoxField">
       
        <p>Class descibes text field for entering password.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.PasswordType">
       
        <p>This enum represents known password types used for password protected pdf documents.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PasswordType.None">
       
        <p>Pdf document is not password protected.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PasswordType.User">
       
        <p>Pdf document was opened using document open password (restricted access).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PasswordType.Owner">
       
        <p>Pdf document was opened using change permissions password (full access).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PasswordType.Inaccessible">
       
        <p>Pdf document is password protected but both user and owner passwords are not empty and none of the passwords was defined or supplied password was incorrect. So it impossible to deduce the type of the password.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.PclLoadOptions">
       
        <p>Represents options for loading(import) PCL file into pdf document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PclLoadOptions.getConversionEngine">
       
        <p>Defines conversion engine that will be used for conversion</p> @return ConversionEngines element @see ConversionEngines
      
    </member>
    <member name="M:com.aspose.pdf.PclLoadOptions.setConversionEngine(int)">
       
        <p>Defines conversion engine that will be used for conversion</p> @param conversionEngine ConversionEngines element @see ConversionEngines
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PclLoadOptions.isSupressErrors">
       
        <p>Gets or sets boolean value which indicates will PCL conversion errors should be supressed.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.PclLoadOptions.setSupressErrors(boolean)">
       
        <p>Gets or sets boolean value which indicates will PCL conversion errors should be supressed.</p> @param supressErrors boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.PclLoadOptions.getExceptions">
       
        <p>List of conversion errors.</p> @return List of Exceptions
      
    </member>
    <member name="M:com.aspose.pdf.PclLoadOptions.getBatchSize">
       
        <p>Defines batch size if batched conversion is applicable to source and destination formats pair.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.PclLoadOptions.setBatchSize(int)">
       
        <p>Defines batch size if batched conversion is applicable to source and destination formats pair.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PclLoadOptions.#ctor">
       
        <p>Creates {@code PclLoadOptions} object.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.PclLoadOptions.ConversionEngines">
       
        <p>Enumerates conversion engines that can be used for conversion</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PclLoadOptions.ConversionEngines.LegacyEngine">
       
        <p>Legacy conversion engine is conversion engine thay was used for a while and is used by default.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PclLoadOptions.ConversionEngines.NewEngine">
       
        <p>New conversion engine is currently in A-testing state. We open it into public API to get some feedback. It's currently recommended to use it only when old conversion engine cannot convert document for some reasons.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.PDF3DActivation">
       
        <p>Enum PDF3DActivation: set of 3D annotation activation mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PDF3DActivation.activeWhenOpen">
       
        <p>The active when open</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PDF3DActivation.activeWhenVisible">
       
        <p>The active when visible</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PDF3DActivation.activatedUserOrScriptAction">
       
        <p>The activated by user or script action</p> 
      
    </member>
    <member name="T:com.aspose.pdf.PDF3DAnnotation">
       
        <p>Class PDF3DAnnotation. This class cannot be inherited.</p> @see Annotation
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DAnnotation.getPdf3DArtwork">
       
        <p>Gets the 3D Artwork.</p> Value: The PDF3 d artwork. @return PDF3DArtwork object
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DAnnotation.getLightingScheme">
       
        <p>Gets the lighting scheme.</p> Value: The lighting scheme. @return PDF3DLightingScheme object
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DAnnotation.getContent">
       
        <p>Gets or sets the content.</p> Value: The content. @return PDF3DContent object
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DAnnotation.setContent(PDF3DContent)">
       
        <p>Gets or sets the content.</p> Value: The content. @param value PDF3DContent object
      
      <param name="PDF3DContent"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DAnnotation.getRenderMode">
       
        <p>Gets the render mode.</p> Value: The render mode. @return PDF3DRenderMode object
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DAnnotation.setDefaultViewIndex(int)">
       
        <p>Sets the index of the default view.</p> @param index The default view index.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DAnnotation.getViewArray">
       
        <p>Gets the view array.</p> Value: The view array. @return PDF3DViewArray object
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DAnnotation.getAnnotationType">
       
        <p>Gets type of annotation.</p> Value: The type of the annotation.
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor for annotation processing.</p> @param visitor AnnotationSelector object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DAnnotation.setImagePreview(String)">
       
        <p>Sets the image preview.</p> @param filename The image preview filename.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DAnnotation.setImagePreview(InputStream)">
       
        <p>Sets the image preview.</p> @param image The image stream.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DAnnotation.clearImagePreview">
       
        <p>Clears the image preview.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DAnnotation.getImagePreview">
       
        <p>Gets the image preview.</p> @return Image preview as stream.
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DAnnotation.#ctor(Page,Rectangle,PDF3DArtwork)">
       
        <p>Initializes a new instance of the {@code PDF3DAnnotation} class.</p> @param page The page. @param rect The rectangle. @param pdf3DArtwork The 3D Artwork.
      
      <param name="Page"/>
      <param name="Rectangle"/>
      <param name="PDF3DArtwork"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DAnnotation.#ctor(Page,Rectangle,PDF3DArtwork,int)">
       
        <p>Initializes a new instance of the {@code PDF3DAnnotation} class.</p> @exception Exception 3D Stream is already added to current 3D Artwork @param page The page. @param rect The rectangle. @param pdf3DArtwork The 3D Artwork. @param activation The activation mode.
      
      <param name="Page"/>
      <param name="Rectangle"/>
      <param name="PDF3DArtwork"/>
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.PDF3DArtwork">
       
        <p>Class PDF3DArtwork.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DArtwork.getLightingScheme">
       
        <p>Gets or sets the lighting scheme.</p> @return PDF3DLightingScheme object. : The lighting scheme.
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DArtwork.setLightingScheme(PDF3DLightingScheme)">
       
        <p>Gets or sets the lighting scheme.</p> @param value PDF3DLightingScheme object. : The lighting scheme.
      
      <param name="PDF3DLightingScheme"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DArtwork.getRenderMode">
       
        <p>Gets or sets the render mode.</p> @return PDF3DRenderMode object: The render mode.
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DArtwork.setRenderMode(PDF3DRenderMode)">
       
        <p>Gets or sets the render mode.</p> @param value PDF3DRenderMode object: The render mode.
      
      <param name="PDF3DRenderMode"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DArtwork.getViewArray">
       
        <p>Gets the view array.</p> @return PDF3DViewArray object: The view array.
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DArtwork.getViewsList">
       
        <p>Get the views as list.</p> @return ReadOnlyCollection&lt;PDF3DView&gt;.
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DArtwork.getViewsArray">
       
        <p>Gets the views array.</p> @return Array of views.
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DArtwork.#ctor(Document,PDF3DContent,PDF3DLightingScheme,PDF3DRenderMode)">
       
        <p>Initializes a new instance of the {@code PDF3DArtwork} class.</p> @param doc The document. @param content The content. @param lightingScheme The lighting scheme. @param renderMode The render mode.
      
      <param name="Document"/>
      <param name="PDF3DContent"/>
      <param name="PDF3DLightingScheme"/>
      <param name="PDF3DRenderMode"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DArtwork.#ctor(Document,PDF3DContent)">
       
        <p>Initializes a new instance of the {@code PDF3DArtwork} class.</p> @param doc The document. @param content The content.
      
      <param name="Document"/>
      <param name="PDF3DContent"/>
    </member>
    <member name="T:com.aspose.pdf.PDF3DContent">
       
        <p>Class PDF3DContent.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DContent.getExtension">
       
        <p>Gets the extension .</p> @return String object: The extension.
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DContent.load(String)">
       
        <p>Loads 3D content with the specified filename.</p> @exception ArgumentException Unknown 3D content type @param filename The filename.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DContent.loadAsPRC(String)">
       
        <p>Loads 3D content with the specified filename as PRC format.</p> @param filename The filename.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DContent.loadAsU3D(String)">
       
        <p>Loads 3D content with the specified filename as U3D format.</p> @param filename The filename.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DContent.loadAsPRC(InputStream)">
       
        <p>Loads 3D content from stream as PRC format.</p> @param stream The 3D content stream.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DContent.loadAsU3D(InputStream)">
       
        <p>Loads 3D content from stream as U3D format.</p> @param stream The 3D content stream.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DContent.loadAsPRC(byte[])">
       
        <p>Loads 3D content from byte array as PRC format.</p> @param stream The stream.
      
      <param name="byte[]"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DContent.loadAsU3D(byte[])">
       
        <p>Loads 3D content from byte array as U3D format.</p> @param stream The stream.
      
      <param name="byte[]"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DContent.saveToFile(String)">
       
        <p>Saves 3D content to file.</p> @exception ArgumentException 3DArtwork content format is PRC or U3D. @param filename The file name.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DContent.getAsStream">
       
        <p>Gets 3D content as stream.</p> @return Stream.
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DContent.getAsByteArray">
       
        <p>Gets 3D content as byte array.</p> @return System.Byte[].
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DContent.#ctor">
       
        <p>Initializes a new instance of the {@code PDF3DContent} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DContent.#ctor(String)">
       
        <p>Initializes a new instance of the {@code PDF3DContent} class.</p> @exception ArgumentException Unknown 3D Artwork type @param filename The filename.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.PDF3DCrossSection">
       
        <p>Class PDF3DCrossSection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DCrossSection.getCenter">
       
        <p>Gets or sets the cross section rotation center.</p> @return Point3D object: The center.
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DCrossSection.setCenter(Point3D)">
       
        <p>Gets or sets the cross section rotation center.</p> @param value Point3D object: The center.
      
      <param name="Point3D"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DCrossSection.getCuttingPlaneOpacity">
       
        <p>Gets or sets the cutting plane opacity.</p> @exception Exception The number must be in the range [0 , 1] @return double value: The cutting plane opacity.
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DCrossSection.setCuttingPlaneOpacity(double)">
       
        <p>Gets or sets the cutting plane opacity.</p> @exception Exception The number must be in the range [0 , 1] @param value double value: The cutting plane opacity.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DCrossSection.getCuttingPlaneOrientation">
       
        <p>Gets or sets the cutting plane orientation.</p> @exception Exception Only one of the values shall be Null @return PDF3DCuttingPlaneOrientation object: The cutting plane orientation.
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DCrossSection.setCuttingPlaneOrientation(PDF3DCuttingPlaneOrientation)">
       
        <p>Gets or sets the cutting plane orientation.</p> @exception Exception Only one of the values shall be Null @param value PDF3DCuttingPlaneOrientation object: The cutting plane orientation.
      
      <param name="PDF3DCuttingPlaneOrientation"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DCrossSection.getCuttingPlaneColor">
       
        <p>Gets or sets the color of the cutting plane.</p> @return com.aspose.pdf.Color object: The color of the cutting plane.
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DCrossSection.setCuttingPlaneColor(Color)">
       
        <p>Gets or sets the color of the cutting plane.</p> @param value com.aspose.pdf.Color object: The color of the cutting plane.
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DCrossSection.getCuttingPlanesIntersectionColor">
       
        <p>Gets or sets the color of the cutting planes intersection.</p> @return com.aspose.pdf.Color object: The color of the cutting planes intersection.
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DCrossSection.setCuttingPlanesIntersectionColor(Color)">
       
        <p>Gets or sets the color of the cutting planes intersection.</p> @param value com.aspose.pdf.Color object: The color of the cutting planes intersection.
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DCrossSection.getVisibility">
       
        <p>Gets or sets a value indicating visibility of the cutting planes intersection.</p> @return : {@code true} if visible; otherwise, {@code false}.
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DCrossSection.setVisibility(boolean)">
       
        <p>Gets or sets a value indicating visibility of the cutting planes intersection.</p> @param value : {@code true} if visible; otherwise, {@code false}.
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DCrossSection.#ctor(Document)">
       
        <p>Initializes a new instance of the {@code PDF3DCrossSection} class.</p> @param doc The document.
      
      <param name="Document"/>
    </member>
    <member name="T:com.aspose.pdf.PDF3DCrossSectionArray">
       
        <p>Class PDF3DCrossSectionArray.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DCrossSectionArray.getCount">
       
        <p>Gets the cross section count.</p> @return int value: The cross section count.
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DCrossSectionArray.add(PDF3DCrossSection)">
       
        <p>Adds the specified cross section to views array .</p> @param crossSection The cross section.
      
      <param name="PDF3DCrossSection"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DCrossSectionArray.removeAt(int)">
       
        <p>Removes cross section from array at specified index.</p> @param index The index of removed cross section in array. @throws IndexOutOfRangeException Invalid index: index should be in the range [1..n] where n equals to the cross sections count.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DCrossSectionArray.removeAll">
       
        <p>Removes all cross section from array.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DCrossSectionArray.get_Item(int)">
       
        <p>Gets or sets the {@code PDF3DCrossSection} at the specified index.</p> @param index The index. @return Cross section. @throws IndexOutOfRangeException Invalid index: index should be in the range [1..n] where n equals to the cross sections count.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DCrossSectionArray.set_Item(int,PDF3DCrossSection)">
       
        <p>Gets or sets the {@code PDF3DCrossSection} at the specified index.</p> @param index The index. @param value PDF3DCrossSection object. @throws IndexOutOfRangeException Invalid index: index should be in the range [1..n] where n equals to the cross sections count.
      
      <param name="int"/>
      <param name="PDF3DCrossSection"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DCrossSectionArray.#ctor(IDocument)">
       
        <p>Initializes a new instance of the {@code PDF3DCrossSectionArray} class.</p> @param doc The document.
      
      <param name="IDocument"/>
    </member>
    <member name="T:com.aspose.pdf.PDF3DCuttingPlaneOrientation">
       
        <p>Class PDF3DCuttingPlaneOrientation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DCuttingPlaneOrientation.getAngleX">
       
        <p>Gets or sets the angle to X axis.</p> @return Double object: The angle to X axis.
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DCuttingPlaneOrientation.setAngleX(Double)">
       
        <p>Gets or sets the angle to X axis.</p> @param value Double object: The angle to X axis.
      
      <param name="Double"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DCuttingPlaneOrientation.getAngleY">
       
        <p>Gets or sets the angle to Y axis.</p> @return Double object: The angle Y axis.
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DCuttingPlaneOrientation.setAngleY(Double)">
       
        <p>Gets or sets the angle to Y axis.</p> @param value Double object: The angle Y axis.
      
      <param name="Double"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DCuttingPlaneOrientation.getAngleZ">
       
        <p>Gets or sets the angle to Z axis.</p> @return Double object: The angle to Z axis.
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DCuttingPlaneOrientation.setAngleZ(Double)">
       
        <p>Gets or sets the angle to Z axis.</p> @param value Double object: The angle to Z axis.
      
      <param name="Double"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DCuttingPlaneOrientation.toString">
       
        <p>Returns a {@code System.String} that represents this instance.</p> @return A {@code System.String} that represents this instance.
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DCuttingPlaneOrientation.#ctor">
       
        <p>Initializes a new instance of the {@code PDF3DCuttingPlaneOrientation} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DCuttingPlaneOrientation.#ctor(Double,Double,Double)">
       
        <p>Initializes a new instance of the {@code PDF3DCuttingPlaneOrientation} class.</p> @param angleX The angle x. @param angleY The angle y. @param angleZ The angle z.
      
      <param name="Double"/>
      <param name="Double"/>
      <param name="Double"/>
    </member>
    <member name="T:com.aspose.pdf.PDF3DLightingScheme">
       
        <p>Class PDF3DLightingScheme.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DLightingScheme.getType">
       
        <p>Gets the lighting scheme type.</p> @return int value of LightingSchemeType element: The lighting scheme type. @see LightingSchemeType
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DLightingScheme.#ctor(int)">
       
        <p>Initializes a new instance of the {@code PDF3DLightingScheme} class.</p> @param type The lighting scheme type.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DLightingScheme.#ctor(String)">
       
        <p>Initializes a new instance of the {@code PDF3DLightingScheme} class.</p> @param typeName Name of the lighting scheme type. @throws ArgumentException Unknown lighting scheme type argument
      
      <param name="String"/>
    </member>
    <member name="F:com.aspose.pdf.PDF3DLightingScheme.Artwork">
       
        <p>The "Artwork" lighting scheme.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PDF3DLightingScheme.None">
       
        <p>The "None" lighting scheme.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PDF3DLightingScheme.White">
       
        <p>The "White" lighting scheme.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PDF3DLightingScheme.Day">
       
        <p>The "Day" lighting scheme.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PDF3DLightingScheme.Night">
       
        <p>The "Night" lighting scheme.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PDF3DLightingScheme.Hard">
       
        <p>The "Hard" lighting scheme.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PDF3DLightingScheme.Primary">
       
        <p>The "Primary" lighting scheme.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PDF3DLightingScheme.Blue">
       
        <p>The "Blue" lighting scheme.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PDF3DLightingScheme.Red">
       
        <p>The "Red" lighting scheme.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PDF3DLightingScheme.Cube">
       
        <p>The "Cube" lighting scheme.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PDF3DLightingScheme.CAD">
       
        <p>The "Cad" lighting scheme.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PDF3DLightingScheme.Headlamp">
       
        <p>The "Headlamp" lighting scheme.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.PDF3DRenderMode">
       
        <p>Class PDF3DRenderMode.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DRenderMode.getAuxiliaryColour">
       
        <p>Gets the auxiliary colour.</p> @return Color.
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DRenderMode.setAuxiliaryColour(Color)">
       
        <p>Sets the auxiliary colour.</p> @param color The color. @return PDF3DRenderMode.
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DRenderMode.getFaceColor">
       
        <p>Gets the color of the face.</p> @return Object.
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DRenderMode.setFaceColor(Color)">
       
        <p>Sets the color of the face.</p> @param color The color. @return PDF3DRenderMode.
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DRenderMode.getOpacity">
       
        <p>Gets the opacity.</p> @return System.Double.
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DRenderMode.setOpacity(double)">
       
        <p>Sets the opacity.</p> @param opacity The opacity. @return PDF3DRenderMode.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DRenderMode.setCreaseValue(double)">
       
        <p>Sets the crease value.</p> @param creaseValue The crease value. @return PDF3DRenderMode.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DRenderMode.getCreaseValue">
       
        <p>Gets the crease value.</p> @return System.Double.
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DRenderMode.getType">
       
        <p>Gets the type.</p> @return RenderModeType Value: The type. @see RenderModeType
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DRenderMode.#ctor(int)">
       
        <p>Initializes a new instance of the {@code PDF3DRenderMode} class.</p> @param subtype The render mode type.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DRenderMode.#ctor(String)">
       
        <p>Initializes a new instance of the {@code PDF3DRenderMode} class.</p> @param typeName Name of the type. @throws ArgumentException Unknown a render mode type argument
      
      <param name="String"/>
    </member>
    <member name="F:com.aspose.pdf.PDF3DRenderMode.Solid">
       
        <p>The "Solid" render mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PDF3DRenderMode.SolidWireframe">
       
        <p>The "SolidWireFrame" render mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PDF3DRenderMode.Transparent">
       
        <p>The "Transparent" render mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PDF3DRenderMode.TransparentWareFrame">
       
        <p>The "TransparentWareFrame" render mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PDF3DRenderMode.BoundingBox">
       
        <p>The "BoundingBox" render mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PDF3DRenderMode.TransparentBoundingBox">
       
        <p>The "TransparentBoundingBox" render mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PDF3DRenderMode.TransparentBoundingBoxOutline">
       
        <p>The "TransparentBoundingBoxOutline" render mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PDF3DRenderMode.Wireframe">
       
        <p>The "WireFrame" render mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PDF3DRenderMode.ShadedWireframe">
       
        <p>The "ShadedWireFrame" render mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PDF3DRenderMode.Vertices">
       
        <p>The "Vertices" render mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PDF3DRenderMode.ShadedVertices">
       
        <p>The "ShadedVertices" render mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PDF3DRenderMode.Illustration">
       
        <p>The "Illustration" render mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PDF3DRenderMode.SolidOutline">
       
        <p>The "SolidOutline" render mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PDF3DRenderMode.ShadedIllustration">
       
        <p>The "ShadedIllustration" render mode.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.PDF3DStream">
       
        <p>Class PDF3DStream.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DStream.getContent">
       
        <p>Gets or sets the content.</p> @return PDF3DContent object: The content.
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DStream.setContent(PDF3DContent)">
       
        <p>Gets or sets the content.</p> @param value : The PDF3DContent object content.
      
      <param name="PDF3DContent"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DStream.#ctor(IDocument,PDF3DArtwork)">
       
        <p>Initializes a new instance of the {@code PDF3DStream} class.</p> @param doc The document. @param pdf3DArtwork The 3D Artwork.
      
      <param name="IDocument"/>
      <param name="PDF3DArtwork"/>
    </member>
    <member name="T:com.aspose.pdf.PDF3DView">
       
        <p>Class PDF3DView.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DView.getLightingScheme">
       
        <p>Gets or sets the lighting scheme of view.</p> @return PDF3DLightingScheme object: The lighting scheme of view.
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DView.setLightingScheme(PDF3DLightingScheme)">
       
        <p>Gets or sets the lighting scheme of view.</p> @param value PDF3DLightingScheme object: The lighting scheme of view.
      
      <param name="PDF3DLightingScheme"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DView.getRenderMode">
       
        <p>Gets or sets the render mode of view.</p> @return PDF3DRenderMode Value: The render mode of view.
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DView.setRenderMode(PDF3DRenderMode)">
       
        <p>Gets or sets the render mode of view.</p> @param value : PDF3DRenderMode object, the render mode of view.
      
      <param name="PDF3DRenderMode"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DView.getCrossSectionsArray">
       
        <p>Gets the cross sections array of view.</p> @return PDF3DCrossSectionArray Value: The cross sections array of view.
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DView.getViewName">
       
        <p>Gets or sets the name of the view.</p> @return String object - the name of the view.
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DView.setViewName(String)">
       
        <p>Gets or sets the name of the view.</p> @param value : The name of the view.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DView.getCameraPosition">
       
        <p>Gets or sets the camera position of view.</p> @return Matrix3D object: The camera position of view.
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DView.setCameraPosition(Matrix3D)">
       
        <p>Gets or sets the camera position of view.</p> @param value : Matrix3D - the camera position of view.
      
      <param name="Matrix3D"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DView.getCameraOrbit">
       
        <p>Gets or sets the camera orbit of view.</p> @return double value: The camera orbit of view.
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DView.setCameraOrbit(double)">
       
        <p>Gets or sets the camera orbit of view.</p> @param value : The camera orbit of view.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DView.getBackGroundColor">
       
        <p>Gets or sets the color of the back ground of view.</p> @return Color Value: The color of the back ground of view.
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DView.setBackGroundColor(Color)">
       
        <p>Gets or sets the color of the back ground of view.</p> @param value : The color of the back ground of view.
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DView.#ctor(IDocument,Matrix3D,double,String)">
       
        <p>Initializes a new instance of the {@code PDF3DView} class.</p> @param doc The document. @param cameraPosition The camera position. @param cameraOrbit The camera orbit. @param viewName Name of the view.
      
      <param name="IDocument"/>
      <param name="Matrix3D"/>
      <param name="double"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DView.#ctor(IDocument,PDF3DView,String)">
       
        <p>Initializes a new instance of the {@code PDF3DView} class.</p> @param doc The document. @param view The view. @param viewName Name of the view.
      
      <param name="IDocument"/>
      <param name="PDF3DView"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.PDF3DViewArray">
       
        <p>Class PDF3DViewArray.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DViewArray.getCount">
       
        <p>Gets the views count.</p> @return int value: The views count.
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DViewArray.add(PDF3DView)">
       
        <p>Adds the specified view.</p> @exception ArgumentException Only one entry of 3D view is allowed @param view The view.
      
      <param name="PDF3DView"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DViewArray.removeAt(int)">
       
        <p>Removes view from views array at specified index.</p> @exception IndexOutOfRangeException Invalid index: index should be in the range [1..n] where n equals to the views count. @param index The view index.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DViewArray.removeAll">
       
        <p>Removes all views.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PDF3DViewArray.get_Item(int)">
       
        <p>Gets or sets the {@code PDF3DView} to view array at the specified index.</p> @return PDF3DView. @exception IndexOutOfRangeException Invalid index: index should be in the range [1..n] where n equals to the views count. @param index The index.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PDF3DViewArray.set_Item(int,PDF3DView)">
       
        <p>Gets or sets the {@code PDF3DView} to view array at the specified index.</p> @exception IndexOutOfRangeException Invalid index: index should be in the range [1..n] where n equals to the views count. @param index The index. @param value PDF3DView object
      
      <param name="int"/>
      <param name="PDF3DView"/>
    </member>
    <member name="T:com.aspose.pdf.PdfAction">
       
        <p>Represents Action in PDF document</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PdfAction.getNext">
       
        <p>Next actions in sequence.</p> @return ActionCollection object
      
    </member>
    <member name="T:com.aspose.pdf.PdfActionCollection">
       
        <p>Class describes list of actions.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PdfActionCollection.getCount">
       
        <p>Gets count of actions.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.PdfActionCollection.get_Item(int)">
       
        <p>Gets action by its index.</p> @param index Action index value. @return PdfAction index if found; otherwise, throws @exception IndexOutOfRangeException IndexOutOfRangeException
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PdfActionCollection.delete(int)">
       
        <p>Remove action by index.</p> @param index Index of action to remove.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PdfActionCollection.add(PdfAction)">
       
        <p>Add action to action list.</p> @param action PdfAction instance Action to be added.
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.PdfActionCollection.iterator">
       
        <p>Gets enumerator.</p> @return PDfAction enumerator.
      
    </member>
    <member name="M:com.aspose.pdf.PdfActionCollection.iterator_Rename_Namesake">
       
        <p>Internal method</p> @return internal object.
      
    </member>
    <member name="T:com.aspose.pdf.PdfASymbolicFontEncodingStrategy">
       
        <p>This class describes rules which can be used to tune process of copy encoding data for cases when TrueType symbolic font has more than one encoding. Some PDF documents after conversion into PDF/A format could have error "More than one encoding in symbolic TrueType font's cmap". What is a reason of this error? All TrueType symbolic fonts have special table "cmap" in it's internal data. This table maps character codes to glyph indices. And this table could contain different encoding subtables which describe encodings used. See advanced info about cmap tables at https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6cmap.html. Usually cmap table contains several encoding subtables, but PDF/A standard requires that only one encoding subtable (3,0) must be leaved for this font in PDF/A document. And key question here - what data must be taken from another subtables to copy into destination encoding table (3,0)? Majority of fonts have 'well-formed' cmap tables where every encoding subtable is fully consistent with another subtable. But some fonts have cmap tables with collisions - where for example one subtable has glyph index 100 for unicode 100, but another subtable has glyph index 200 for the same unicode 100. To solve this problems special strategy needed. By default following strategy used: mac subtable(1,0) is looked for. If this table is found, only this data used to fill destination table (3,0). If mac subtable is not found then all subtables except (3,0) are iterated and used to copy data into destination (3,0) subtable. Also mapping for every unicode(unicode, glyph index) is copied into destination table only if destination table has no this unicode at current moment. So, for example if first subtabe has glyph index 100 for unicode 100, and next subtable has glyph index 200 for the same unicode 100, only data from first subtable (unicode=100, glyph index = 100) will be copied. So each previous subtable takes precedence over the next. Properties of this class {@code PdfASymbolicFontEncodingStrategy} help tune default behaviour. If property {@code PreferredCmapEncodingTable} of type {@code QueueItem.CMapEncodingTableType} is set, then relevant subtable will be used in precedence to mac subtable(1,0). Value 'MacTable' from enumeration {@code QueueItem.CMapEncodingTableType} has no sense in this case, cause it points on the same mac subtable (1,0) which will be used by default. Property {@code CmapEncodingTablesPriorityQueue} discards all priorities for any subtable. If this property is set, then only subtables from declared queue will be used in specified order. If subtables specified are not found then default iteration of all subtables and copy strategy described above will be used. Object {@code QueueItem} specifies encoding subtable used. This subtable can be set via combination of members(PlatformID, PlatformSpecificID) or via {@code QueueItem.CMapEncodingTableType} enumeration.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PdfASymbolicFontEncodingStrategy.getPreferredCmapEncodingTable">
       
        <p>Specifies subtable which will be used in precedence to mac subtable(1,0). Value 'MacTable' from enumeration {@code QueueItem.CMapEncodingTableType} has no sense in this case.</p> @return CMapEncodingTableType element @see PdfASymbolicFontEncodingStrategy.QueueItem.CMapEncodingTableType
      
    </member>
    <member name="M:com.aspose.pdf.PdfASymbolicFontEncodingStrategy.setPreferredCmapEncodingTable(short)">
       
        <p>Specifies subtable which will be used in precedence to mac subtable(1,0). Value 'MacTable' from enumeration {@code QueueItem.CMapEncodingTableType} has no sense in this case.</p> @param value preferredEncodingTable encoding subtable which will be used in precedence to mac subtable(1,0) @see PdfASymbolicFontEncodingStrategy.QueueItem.CMapEncodingTableType
      
      <param name="short"/>
    </member>
    <member name="M:com.aspose.pdf.PdfASymbolicFontEncodingStrategy.getCmapEncodingTablesPriorityQueue">
       
        <p>Specifies queue of encoding subtables to process.</p> @return Queue of QueueItem
      
    </member>
    <member name="M:com.aspose.pdf.PdfASymbolicFontEncodingStrategy.setCmapEncodingTablesPriorityQueue(Queue&lt;QueueItem&gt;)">
       
        <p>Specifies queue of encoding subtables to process.</p> @param value Queue of QueueItem
      
      <param name="Queue&lt;QueueItem&gt;"/>
    </member>
    <member name="M:com.aspose.pdf.PdfASymbolicFontEncodingStrategy.#ctor">
       
        <p>Constructor. Sets default subtable (mac 1,0)</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PdfASymbolicFontEncodingStrategy.#ctor(Queue&lt;QueueItem&gt;)">
       
        <p>Constructor</p> @param priorityQueue queue of encoding subtables to iterate
      
      <param name="Queue&lt;QueueItem&gt;"/>
    </member>
    <member name="M:com.aspose.pdf.PdfASymbolicFontEncodingStrategy.#ctor(short)">
       
        <p>Constructor</p> @param preferredEncodingTable encoding subtable which will be used in precedence to mac subtable(1,0) @see PdfASymbolicFontEncodingStrategy.QueueItem.CMapEncodingTableType
      
      <param name="short"/>
    </member>
    <member name="T:com.aspose.pdf.PdfASymbolicFontEncodingStrategy.QueueItem">
       
        <p>Specifies encoding subtable. Each encoding subtable has unique combination of parameters (PlatformID, PlatformSpecificID). Enumeration {@code CMapEncodingTableType} and property {@code CMapEncodingTable} were implemented to make easier set of encoding subtable needed.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PdfASymbolicFontEncodingStrategy.QueueItem.getCMapEncodingTable">
       
        <p>Specifies encoding subtable via {@code CMapEncodingTableType}enumeration</p> @return encoding subtable
      
    </member>
    <member name="M:com.aspose.pdf.PdfASymbolicFontEncodingStrategy.QueueItem.setCMapEncodingTable(short)">
       
        <p>Specifies encoding subtable via {@code CMapEncodingTableType}enumeration</p> @param value encoding subtable
      
      <param name="short"/>
    </member>
    <member name="M:com.aspose.pdf.PdfASymbolicFontEncodingStrategy.QueueItem.getPlatformId">
       
        <p>Platform identifier for encoding subtable</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.PdfASymbolicFontEncodingStrategy.QueueItem.setPlatformId(int)">
       
        <p>Platform identifier for encoding subtable</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PdfASymbolicFontEncodingStrategy.QueueItem.getPlatformSpecificId">
       
        <p>Platform-specific encoding identifier for encoding subtable</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.PdfASymbolicFontEncodingStrategy.QueueItem.setPlatformSpecificId(int)">
       
        <p>Platform-specific encoding identifier for encoding subtable</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PdfASymbolicFontEncodingStrategy.QueueItem.#ctor">
       
        <p>Constructor, specifies mac subtable(1,0) by default</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PdfASymbolicFontEncodingStrategy.QueueItem.#ctor(int,int)">
       
        <p>Constructor</p> @param platformID Platform identifier for encoding subtable @param platformSpecificID Platform-specific encoding identifier for encoding subtable
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PdfASymbolicFontEncodingStrategy.QueueItem.#ctor(short)">
       
        <p>Constructor</p> @param cmapTable encoding subtable
      
      <param name="short"/>
    </member>
    <member name="T:com.aspose.pdf.PdfASymbolicFontEncodingStrategy.QueueItem.CMapEncodingTableType">
       
        <p>Declares set of some known encoding subtables</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PdfASymbolicFontEncodingStrategy.QueueItem.CMapEncodingTableType.WindowsUnicodeTable">
       
        <p>Specifies windows unicode table(3,1) - Unicode BMP-only (UCS-2)</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PdfASymbolicFontEncodingStrategy.QueueItem.CMapEncodingTableType.WindowsSymbolicTable">
       
        <p>Specifies windows symbolic table - (3,0)</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PdfASymbolicFontEncodingStrategy.QueueItem.CMapEncodingTableType.MacTable">
       
        <p>Specifies mac table(1,0)</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PdfASymbolicFontEncodingStrategy.QueueItem.CMapEncodingTableType.UnicodeTable">
       
        <p>Specifies unicode table(0,3)</p> 
      
    </member>
    <member name="T:com.aspose.pdf.PdfEvent">
       
        <p>Class representing events</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PdfEvent.assign(T)">
      Add only the current delegate, clearing other. @param delegate Handlers object
      <param name="T"/>
    </member>
    <member name="M:com.aspose.pdf.PdfEvent.add(T)">
      Add one more delegate. @param delegate Handlers object
      <param name="T"/>
    </member>
    <member name="M:com.aspose.pdf.PdfEvent.remove(T)">
      Delete delegate from list @param delegate Handlers object
      <param name="T"/>
    </member>
    <member name="M:com.aspose.pdf.PdfEvent.clear">
      Clear delegate list
    </member>
    <member name="M:com.aspose.pdf.PdfEvent.isEmpty">
      Returns true if the list of handlers is empty @return boolean value
    </member>
    <member name="T:com.aspose.pdf.PdfFormat">
       
        <p>This class represents an pdf format.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PdfFormat.PDF_A_1A">
      Pdf/A-1a
    </member>
    <member name="F:com.aspose.pdf.PdfFormat.PDF_A_1B">
      Pdf/A-1b
    </member>
    <member name="F:com.aspose.pdf.PdfFormat.PDF_A_2A">
      Pdf/A-2a format
    </member>
    <member name="F:com.aspose.pdf.PdfFormat.PDF_A_3A">
      Pdf/A-3a format
    </member>
    <member name="F:com.aspose.pdf.PdfFormat.PDF_A_2B">
      Pdf/A-2b
    </member>
    <member name="F:com.aspose.pdf.PdfFormat.PDF_A_2U">
      Pdf/A-2u format
    </member>
    <member name="F:com.aspose.pdf.PdfFormat.PDF_A_3B">
      Pdf/A-3b format
    </member>
    <member name="F:com.aspose.pdf.PdfFormat.PDF_A_3U">
      Pdf/A-3u format
    </member>
    <member name="F:com.aspose.pdf.PdfFormat.v_1_0">
      Adobe version 1.0
    </member>
    <member name="F:com.aspose.pdf.PdfFormat.v_1_1">
      Adobe version 1.1
    </member>
    <member name="F:com.aspose.pdf.PdfFormat.v_1_2">
      Adobe version 1.2
    </member>
    <member name="F:com.aspose.pdf.PdfFormat.v_1_3">
      Adobe version 1.3
    </member>
    <member name="F:com.aspose.pdf.PdfFormat.v_1_4">
      Adobe version 1.4
    </member>
    <member name="F:com.aspose.pdf.PdfFormat.v_1_5">
      Adobe version 1.5
    </member>
    <member name="F:com.aspose.pdf.PdfFormat.v_1_6">
      Adobe version 1.6
    </member>
    <member name="F:com.aspose.pdf.PdfFormat.v_1_7">
      Adobe version 1.7
    </member>
    <member name="F:com.aspose.pdf.PdfFormat.v_2_0">
      ISO Standard PDF 2.0
    </member>
    <member name="F:com.aspose.pdf.PdfFormat.PDF_UA_1">
      PDF/UA-1 format
    </member>
    <member name="F:com.aspose.pdf.PdfFormat.PDF_X_1A_2001">
      PDF/X-1a-2001 format
    </member>
    <member name="F:com.aspose.pdf.PdfFormat.PDF_X_1A">
      PDF/X-1a format
    </member>
    <member name="F:com.aspose.pdf.PdfFormat.PDF_X_3">
      PDF/X-3 format
    </member>
    <member name="F:com.aspose.pdf.PdfFormat.ZUGFeRD">
       
        <p>ZUGFeRD format</p> 
      
    </member>
    <member name="T:com.aspose.pdf.PdfFormatConversionOptions">
       
        <p>represents set of options for convert PDF document</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.isAsyncImageStreamsConversionMode">
       
        <p>Gets/sets run of image streams in async mode.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.setAsyncImageStreamsConversionMode(boolean)">
       
        <p>Gets/sets run of image streams in async mode.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.isLowMemoryMode">
       
        <p>Is low memory conversion mode enabled</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.setLowMemoryMode(boolean)">
       
        <p>Is low memory conversion mode enabled</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.getFormat">
       
        <p>PDF format.</p> @return PdfFormat element @see PdfFormat
      
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.setFormat(int)">
       
        <p>PDF format.</p> @param value PdfFormat element @see PdfFormat
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.getLogFileName">
       
        <p>Path to file where comments will be stored.</p> @return String object
      
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.setLogFileName(String)">
       
        <p>Path to file where comments will be stored.</p> @param value String object
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.getLogStream">
       
        <p>Stream where comments will be stored.</p> @return OutputStream object
      
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.setLogStream(OutputStream)">
       
        <p>Stream where comments will be stored.</p> @param value OutputStream object
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.getErrorAction">
       
        <p>Action for objects that can not be converted</p> @return ConvertErrorAction element @see ConvertErrorAction
      
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.setErrorAction(int)">
       
        <p>Action for objects that can not be converted</p> @param value ConvertErrorAction element @see ConvertErrorAction
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.getTransparencyAction">
       
        <p>Action for image masked objects</p> @return ConvertTransparencyAction element @see ConvertTransparencyAction
      
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.setTransparencyAction(int)">
       
        <p>Action for image masked objects</p> @param value ConvertTransparencyAction element @see ConvertTransparencyAction
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.isTransparencyIgnore">
       
        <p>Default value FALSE and transparency color will be proceed to keep document appearance. With value TRUE transparency color will be converted into non-transparency, some objects could be covered.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.setTransparencyIgnore(boolean)">
       
        <p>Default value FALSE and transparency color will be proceed to keep document appearance. With value TRUE transparency color will be converted into non-transparency, some objects could be covered.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.getConvertSoftMaskAction">
       
        <p>Action for images with soft mask.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.setConvertSoftMaskAction(int)">
       
        <p>Action for images with soft mask.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.getDefault">
       
        <p>Gets PdfFormatConversionOptions object with default parameters</p> @return PdfFormatConversionOptions object
      
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.getNonSpecificationCases">
       
        <p>Holds flags to control PDF/A conversion process for cases when source document doesn't correspond to PDF/A specification.</p> @return PdfANonSpecificationFlags object
      
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.getSymbolicFontEncodingStrategy">
       
        <p>Strategy to copy encoding data for symbolic fonts if symbolic TrueType font has more than one encoding subtable.</p> @return PdfASymbolicFontEncodingStrategy object
      
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.setSymbolicFontEncodingStrategy(PdfASymbolicFontEncodingStrategy)">
       
        <p>Strategy to copy encoding data for symbolic fonts if symbolic TrueType font has more than one encoding subtable.</p> @param value PdfASymbolicFontEncodingStrategy object
      
      <param name="PdfASymbolicFontEncodingStrategy"/>
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.getAlignText">
       
        <p>This flag controls text alignment in converted document. By default document conversion doesn't affect text alignment and leave text as is. But in some cases font substitution causes text overlapping or extra spaces in converted document. When this flag is set special alignment operations will be performed. This flag should be set only for documents which have problems with overlapped text or extra text spaces cause using of this flag decrease performance and in some cases could corrupt text content.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.setAlignText(boolean)">
       
        <p>This flag controls text alignment in converted document. By default document conversion doesn't affect text alignment and leave text as is. But in some cases font substitution causes text overlapping or extra spaces in converted document. When this flag is set special alignment operations will be performed. This flag should be set only for documents which have problems with overlapped text or extra text spaces cause using of this flag decrease performance and in some cases could corrupt text content.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.getPuaTextProcessingStrategy">
       
        <p>Strategy to process symbols from unicode Private Use Area (PUA).</p> @return PuaProcessingStrategy element @see PuaProcessingStrategy
      
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.setPuaTextProcessingStrategy(int)">
       
        <p>Strategy to process symbols from unicode Private Use Area (PUA).</p> @param value PuaProcessingStrategy element @see PuaProcessingStrategy
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.getOptimizeFileSize">
       
        <p>Gets a flag which enables/disables special conversion mode to get PDF/A document with reduced file size.</p> Now this flag impacts on optimization of fonts used in PDF document, possibly, in future, this flag also will be used to switch on optimization for another data structures, such as graphic.
        <p>Set of this flag and mode could significantly reduce file size but at the same time it could significantly decrease performance of conversion.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.setOptimizeFileSize(boolean)">
       
        <p>Sets a flag which enables/disables special conversion mode to get PDF/A document with reduced file size.</p> Now this flag impacts on optimization of fonts used in PDF document, possibly, in future, this flag also will be used to switch on optimization for another data structures, such as graphic.
        <p>Set of this flag and mode could significantly reduce file size but at the same time it could significantly decrease performance of conversion.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.getExcludeFontsStrategy">
       
        <p>Strategy(ies) to exclude superfluous fonts and reduce document file size. This parameter has sense only when flag {@code OptimizeFileSize} is set to true. By default combination of strategies {@code SubsetFonts} and {@code RemoveDuplicatedFonts} is used.</p> @return byte value @see RemoveFontsStrategy
      
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.setExcludeFontsStrategy(byte)">
       
        <p>Strategy(ies) to exclude superfluous fonts and reduce document file size. This parameter has sense only when flag {@code OptimizeFileSize} is set to true. By default combination of strategies {@code SubsetFonts} and {@code RemoveDuplicatedFonts} is used.</p> @param value boolean value
      
      <param name="byte"/>
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.getFontEmbeddingOptions">
       
        <p>Options for cases when it's not possible to embed some fonts into PDF document.</p> @return FontEmbeddingOptions object
      
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.getUnicodeProcessingRules">
       
        <p>Rules to solve problems with unicode mapping. Can be null.</p> @return ToUnicodeProcessingRules object
      
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.setUnicodeProcessingRules(ToUnicodeProcessingRules)">
       
        <p>Rules to solve problems with unicode mapping. Can be null.</p> @param value ToUnicodeProcessingRules object
      
      <param name="ToUnicodeProcessingRules"/>
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.getIccProfileFileName">
       
        <p>Gets the filename of icc profile name. In case of null the default icc profile used.</p> @return String object
      
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.setIccProfileFileName(String)">
       
        <p>Sets the filename of icc profile name. In case of null the default icc profile used.</p> @param value String object
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.getNotAccessibleFonts">
       
        <p>This property is out-property. It holds all the fonts(font names) which were not found on computer at last PDF/A conversion.</p> @return Array of Strings
      
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.getTransparencyResolution">
       
        <p>Sets resolution during converting transparent images. The higher resolution, the slower converting speed. The default value is 300.</p> @return Resolution value
      
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.setTransparencyResolution(int)">
       
        <p>Sets resolution during converting transparent images. The higher resolution, the slower converting speed. The default value is 300.</p> @param dpi Resolution value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.setPageByPageFontProcess(boolean)">
       
        <p>Set font analyse on page by page basis mode enabled</p> Default value = false @param b boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.isPageByPageFontProcess">
       
        <p>Is font analyse on page by page basis mode enabled</p> Default value = false @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.getAlignStrategy">
       
        <p>Strategy to align text. This parameter has sense only when flag {@code AlignText} is set to true.</p> @return SegmentAlignStrategy element @see SegmentAlignStrategy
      
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.setAlignStrategy(byte)">
       
        <p>Strategy to align text. This parameter has sense only when flag {@code AlignText} is set to true.</p> @param alignStrategy SegmentAlignStrategy element @see SegmentAlignStrategy
      
      <param name="byte"/>
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.addNotAccessibleFont(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.#ctor(String,int,int)">
       
        <p>Constructor</p> @param outputLogFileName Path to file where comments will be stored. @param format The pdf format. @param action Action for objects that can not be converted @see PdfFormat @see ConvertErrorAction
      
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.#ctor(String,int)">
       
        <p>Constructor</p> @param outputLogFileName Path to file where comments will be stored. @param format The pdf format. @see PdfFormat
      
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.#ctor(int)">
       
        <p>Constructor</p> @param format The pdf format. @see PdfFormat
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.#ctor(int,int)">
       
        <p>Constructor</p> @param format The pdf format. @param action Action for objects that can not be converted @see PdfFormat @see ConvertErrorAction
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.#ctor(String,int,int,int)">
       
        <p>Constructor</p> @param outputLogFileName Path to file where comments will be stored. @param format The pdf format. @param action Action for objects that can not be converted @param transparencyAction Action for image masked objects @see PdfFormat @see ConvertErrorAction @see ConvertTransparencyAction
      
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PdfFormatConversionOptions.#ctor(OutputStream,int,int)">
       
        <p>Constructor</p> @param outputLogStream Stream where comments will be stored @param format The pdf format @param action Action for objects that can not be converted @see PdfFormat @see ConvertErrorAction
      
      <param name="OutputStream"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.PdfFormatConversionOptions.SegmentAlignStrategy">
       
        <p>Describes strategies used to align document text segments. Now only strategy to restore segments to original bounds is supported. In future another strategies could be added.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PdfFormatConversionOptions.SegmentAlignStrategy.None">
       
        <p>None.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PdfFormatConversionOptions.SegmentAlignStrategy.RestoreSegmentBounds">
       
        <p>Restore segment bounds.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.PdfFormatConversionOptions.PuaProcessingStrategy">
       
        <p>Some PDF documents have special unicode symbols, which are belonged to Private Use Area (PUA), see description at https://en.wikipedia.org/wiki/Private_Use_Areas. This symbols cause an PDF/A compliant errors like "Text is mapped to Unicode Private Use Area but no ActualText entry is present". This enumeration declares a strategies which can be used to handle PUA symbols.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PdfFormatConversionOptions.PuaProcessingStrategy.None">
       
        <p>Disable PUA symbol processing. This strategy used by default for PDF/A documents with Level B conformance.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PdfFormatConversionOptions.PuaProcessingStrategy.SurroundPuaTextWithEmptyActualText">
       
        <p>Inserts marked content block with ActualText entry which contains empty text. This strategy gives good results for documents without marked content blocks. Used by default for PDF/A documents with Level A conformance.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PdfFormatConversionOptions.PuaProcessingStrategy.SubstitutePuaSymbols">
       
        <p>This strategy works slower than 'SurroundPuaTextWithEmptyActualText' but it can remove PUA compliant errors for documents which can't be handled properly by SurroundPuaTextWithEmptyActualText. PUA symbols are substituted on symbol 'space' or special unicode (some PUA symbols have unicode analogs). Substitution applied not to document's text but to font's internal data ToUnicode so it doesn't affects symbol's vision but it affects symbol's presentation in copy/paste operation system buffer.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.PdfFormatConversionOptions.RemoveFontsStrategy">
       
        <p>Some documens have large size after converison into PDF/A format. To reduce file size for these documents it's necessary to define a strategy of fonts removing. This enumeration declares a strategies which can be used to optimize fonts usage. Every strategy from this enumeration has sense only when flag {@code OptimizeFileSize} is set.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PdfFormatConversionOptions.RemoveFontsStrategy.RemoveDuplicatedFonts">
       
        <p>This strategy removes all the fonts which have duplicates in document. If document contains group of duplicated fonts only one font from this group is embedded in document. All other fonts from this group are removed from document, every removed font substituted with the already embedded analog.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PdfFormatConversionOptions.RemoveFontsStrategy.RemoveSimilarFontsWithDifferentWidths">
       
        <p>This strategy looks like {@code RemoveDuplicatedFonts} but it removes not fully duplicated fonts but fonts which are similar one to another and differs only by parameter "Widths". This parameter contains set of some widths for specified symbols of font. Every value of width from this "Widths" set is not the real width of symbol(glyph), real width for this symbol already defined in font's binary data. Value of width from "Widths" set means visual width for this symbol - the width which PDF viewer software must set on displaying symbol instead of real width defined in the font. More accurately specification tells: Acrobat 5.0 and later viewers use the glyph widths stored in the font dictionary to override the widths of glyphs in the font program itself, which improves the consistency of the display and printing of the document. This strategy is more effective than {@code RemoveDuplicatedFonts} but using of this strategy in some cases theoretically could damage visual presentation of converted document. This defect is possible due to that declared widths of fonts could be different for the same symbol and in this case width of this symbol will be changed to new one after font substitution - when removed font will be replaced in document with already embedded one. And if symbol's visual width will be changed - it will be shown incorrectly and this distinction could cause visual defects such as text overlapping or another problems. But visual defect described is a very rare case and this strategy reduces size of document more effectively.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PdfFormatConversionOptions.RemoveFontsStrategy.SubsetFonts">
       
        <p>This is most effective strategy to reduce document's size. It takes fully embedded font sets and trim them down to only the subsets used. It's recommended to use this strategy in combination with {@code RemoveDuplicatedFonts} or {@code RemoveSimilarFontsWithDifferentWidths} to get multiple compression effect for file size. Using of all three strategies simultaneously has no sense and strategy {@code RemoveSimilarFontsWithDifferentWidths} will not be used in this case.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.PdfPageStamp">
       
        <p>Class represents stamp which uses PDF page as stamp.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PdfPageStamp.getPdfPage">
       
        <p>Gets page which will be used as stamp.</p> @return Page value
      
    </member>
    <member name="M:com.aspose.pdf.PdfPageStamp.setPdfPage(Page)">
       
        <p>Sets page which will be used as stamp.</p> @param value Page object
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.PdfPageStamp.put(Page)">
       
        <p>Put stamp on the specified page.</p> @param page Page where stamp will be placed.
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.PdfPageStamp.close">
      Close the instance
    </member>
    <member name="M:com.aspose.pdf.PdfPageStamp.#ctor(Page)">
       
        <p>Constructor of PdfPageStamp.</p> @param pdfPage Page which is used for stamping.
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.PdfPageStamp.#ctor(String,int)">
       
        <p>Creates Pdf page stamp from specifed page of the document in specified file.</p> @param fileName Name and page of PDF file. @param pageIndex Index of the page.
      
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PdfPageStamp.#ctor(InputStream,int)">
       
        <p>Creates Pdf page stamp from specifed page in the document from the stream.</p> @param stream Stream which contains PDF @param pageIndex Index of the page.
      
      <param name="InputStream"/>
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.PdfSaveOptions">
       
        <p>Save options for export to Pdf format</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PdfSaveOptions.getDefaultFontName">
       
        <p>Font name used by default for fonts which are absent on computer. When the PDF document that is saved into PDF contains fonts, that are not available in the document itself and on the device, API replaces this fonts with the default font(if font with {@code DefaultFontName} is found on device)</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.PdfSaveOptions.setDefaultFontName(String)">
       
        <p>Font name used by default for fonts which are absent on computer. When the PDF document that is saved into PDF contains fonts, that are not available in the document itself and on the device, API replaces this fonts with the default font(if font with {@code DefaultFontName} is found on device)</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.PdfSaveOptions.#ctor">
       
        <p>Constructor</p> 
      
    </member>
    <member name="T:com.aspose.pdf.PdfXmlLoadOptions">
       
        <p>Load options for PdfXml format.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PdfXmlLoadOptions.#ctor">
       
        <p>Constructor of PdfXmlLoadOptions class.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.PdfXmlSaveOptions">
       
        <p>Save options for PdfXml format.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PdfXmlSaveOptions.#ctor">
       
        <p>Constructor ofr PdfXml format.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Permissions">
       
        <p>This enum represents user's permissions for a pdf.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Permissions.PrintDocument">
       
        <p>(Security handlers of revision 2) Print the document. (Security handlers of revision 3 or greater) Print the document (possibly not at the highest quality level, depending on whether {@code PrintingQuality} is also set).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Permissions.ModifyContent">
       
        <p>Modify the contents of the document by operations other than those controlled by {@code ModifyTextAnnotations}, {@code FillForm}, and 11.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Permissions.ExtractContent">
       
        <p>(Security handlers of revision 2) Copy or otherwise extract text and graphics from the document, including extracting text and graphics (in support of accessibility to users with disabilities or for other purposes). (Security handlers of revision 3 or greater) Copy or otherwise extract text and graphics from the document by operations other than that controlled by {@code ExtractContentWithDisabilities}.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Permissions.ModifyTextAnnotations">
       
        <p>Add or modify text annotations, fill in interactive form fields, and, if {@code ModifyContent} is also set, create or modify interactive form fields (including signature fields).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Permissions.FillForm">
       
        <p>(Security handlers of revision 3 or greater) Fill in existing interactive form fields (including signature fields), even if {@code ModifyTextAnnotations} is clear.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Permissions.ExtractContentWithDisabilities">
       
        <p>(Security handlers of revision 3 or greater) Extract text and graphics (in support of accessibility to users with disabilities or for other purposes).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Permissions.AssembleDocument">
       
        <p>(Security handlers of revision 3 or greater) Assemble the document (insert, rotate, or delete pages and create bookmarks or thumbnail images), even if {@code ModifyContent} is clear.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Permissions.PrintingQuality">
       
        <p>(Security handlers of revision 3 or greater) Print the document to a representation from which a faithful digital copy of the PDF content could be generated. When this bit is clear (and bit 3 is set), printing is limited to a low-level representation of the appearance, possibly of degraded quality.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.PKCS1">
       
        <p>Represents signature object regarding PKCS#1 standard. RSA encryption algorithm and SHA-1 digest method are used for signing.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PKCS1.#ctor(InputStream)">
       
        <p>Initializes new instance of the {@code PKCS1} class.</p> @param image This image will define signature appearance on the page.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.PKCS1.#ctor">
       
        <p>Inititalizes new instance of the {@code PKCS1} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PKCS1.#ctor(String,String)">
       
        <p>Inititalizes new instance of the {@code PKCS1} class.</p> @param pfx Pfx file which contains certificate for signing. @param password Password for certificate.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.PKCS1.#ctor(InputStream,String)">
       
        <p>Inititalizes new instance of the {@code PKCS1} class.</p> @param pfx Stream with certificate data organized as pfx. @param password Password to get access to the private key in the certificate.
      
      <param name="InputStream"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.PKCS7">
       
        <p>Represents the PKCS#7 object that conform to the PKCS#7 specification in Internet RFC 2315, PKCS #7: Cryptographic Message Syntax, Version 1.5. The SHA1 digest of the document's byte range is encapsulated in the PKCS#7 SignedData field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PKCS7.#ctor">
       
        <p>Inititalizes new instance of the {@code PKCS7} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PKCS7.#ctor(String,String)">
       
        <p>Inititalizes new instance of the {@code PKCS7} class.</p> @param pfx Pfx file which contains certificate for signing. @param password Password for certificate.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.PKCS7.#ctor(InputStream,String)">
       
        <p>Inititalizes new instance of the {@code PKCS7} class.</p> @param pfx Stream with certificate data organized as pfx. @param password Password to get access to the private key in the certificate.
      
      <param name="InputStream"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.PKCS7Detached">
       
        <p>Represents the PKCS#7 object that conform to the PKCS#7 specification in Internet RFC 2315, PKCS #7: Cryptographic Message Syntax, Version 1.5. The original signed message digest over the document's byte range is incorporated as the normal PKCS#7 SignedData field. No data shall is encapsulated in the PKCS#7 SignedData field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PKCS7Detached.#ctor(InputStream)">
       
        <p>Initializes new instance of the {@code PKCS7Detached} class.</p> @param image This image will define signature appearance on the page.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.PKCS7Detached.#ctor">
       
        <p>Inititalizes new instance of the {@code PKCS7Detached} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PKCS7Detached.#ctor(String,String)">
       
        <p>Inititalizes new instance of the {@code PKCS7Detached} class.</p> @param pfx Pfx file which contains certificate for signing. @param password Password to get access to the private key in the certificate.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.PKCS7Detached.#ctor(InputStream,String)">
       
        <p>Inititalizes new instance of the {@code PKCS7Detached} class.</p> @param pfx Stream with certificate data organized as pfx. @param password Password to get access to the private key in the certificate.
      
      <param name="InputStream"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.Point">
       
        <p>Represent point with fractional coordinates.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Point.getX">
       
        <p>Gets X coordinate value.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Point.setX(double)">
       
        <p>Sets X coordinate value.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Point.getY">
       
        <p>Gets Y coordinate value.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Point.setY(double)">
       
        <p>Sets Y coordinate value.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Point.getTrivial">
       
        <p>Gets point with zero coordinates.</p> @return Point object
      
    </member>
    <member name="M:com.aspose.pdf.Point.toPoint">
       
        <p>Converts point into java.awt.geom.Point2D.Float object.</p> @return Float structure.
      
    </member>
    <member name="M:com.aspose.pdf.Point.toString"/>
    <member name="M:com.aspose.pdf.Point.#ctor(double,double)">
       
        <p>Initializes new instance of the {@code Point}.</p> @param x x coordinate value. @param y y coordinate value.
      
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.Point3D">
       
        <p>Represent point with fractional coordinates.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Point3D.getX">
       
        <p>X coordinate value.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Point3D.setX(double)">
       
        <p>X coordinate value.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Point3D.getY">
       
        <p>Y coordinate value.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Point3D.setY(double)">
       
        <p>Y coordinate value.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Point3D.getZ">
       
        <p>Z coordinate value.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Point3D.setZ(double)">
       
        <p>Z coordinate value.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Point3D.getTrivial">
       
        <p>Gets point with zero coordinates.</p> @return Point3D object
      
    </member>
    <member name="M:com.aspose.pdf.Point3D.#ctor(double,double,double)">
       
        <p>Initializes new instance of the {@code Point3D}.</p> @param x x coordinate value. @param y y coordinate value. @param z z coordinate value.
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.PolyAnnotation">
       
        <p>Abstract base class for poly-annotations.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PolyAnnotation.getMeasure">
       
        <p>Measure units specified for this annotation.</p> @return Measure instance
      
    </member>
    <member name="M:com.aspose.pdf.PolyAnnotation.setMeasure(Measure)">
       
        <p>Measure units specified for this annotation.</p> @param value Measure instance
      
      <param name="Measure"/>
    </member>
    <member name="M:com.aspose.pdf.PolyAnnotation.getVertices">
       
        <p>Gets an array of points representing the horizontal and vertical coordinates of each vertex.</p> @return array of Point value
      
    </member>
    <member name="M:com.aspose.pdf.PolyAnnotation.setVertices(Point[])">
       
        <p>Sets an array of points representing the horizontal and vertical coordinates of each vertex.</p> @param value array of Point value
      
      <param name="Point[]"/>
    </member>
    <member name="M:com.aspose.pdf.PolyAnnotation.getInteriorColor">
       
        <p>Gets the interior color with which to fill the annotation's line endings.</p> @return Color object
      
    </member>
    <member name="M:com.aspose.pdf.PolyAnnotation.setInteriorColor(Color)">
       
        <p>Sets the interior color with which to fill the annotation's line endings.</p> @param value Color object
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.PolyAnnotation.getStartingStyle">
       
        <p>Gets the style of first line ending.</p> @return LineEnding element @see LineEnding
      
    </member>
    <member name="M:com.aspose.pdf.PolyAnnotation.setStartingStyle(int)">
       
        <p>Sets the style of first line ending.</p> @param value LineEnding element @see LineEnding
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PolyAnnotation.getEndingStyle">
       
        <p>Gets the style of second line ending.</p> @return LineEnding element @see LineEnding
      
    </member>
    <member name="M:com.aspose.pdf.PolyAnnotation.setEndingStyle(int)">
       
        <p>Sets the style of second line ending.</p> @param value LineEnding element @see LineEnding
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PolyAnnotation.getIntent">
       
        <p>Gets the intent of the polygon or polyline annotation.</p> @return PolyIntent element @see PolyIntent
      
    </member>
    <member name="M:com.aspose.pdf.PolyAnnotation.setIntent(int)">
       
        <p>Sets the intent of the polygon or polyline annotation.</p> @param value PolyIntent element @see PolyIntent
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.PolygonAnnotation">
       
        <p>Class representing polygon annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PolygonAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor object for annotation processing.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.PolygonAnnotation.getAnnotationType">
       
        <p>Gets type of annotation.</p> @return AnnotationType element @see AnnotationType
      
    </member>
    <member name="M:com.aspose.pdf.PolygonAnnotation.#ctor(IDocument,Point[])">
       
        <p>Constructor for using with Generator.</p> @param document Document where annotation will be added. @param vertices Array of points.
      
      <param name="IDocument"/>
      <param name="Point[]"/>
    </member>
    <member name="M:com.aspose.pdf.PolygonAnnotation.#ctor(Page,Rectangle,Point[])">
       
        <p>Creates new Polygon annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page. @param vertices An array of polygon vertices points.
      
      <param name="Page"/>
      <param name="Rectangle"/>
      <param name="Point[]"/>
    </member>
    <member name="T:com.aspose.pdf.PolyIntent">
       
        <p>Enumerates the intents of the polygon or polyline annotation.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PolyIntent.Undefined">
       
        <p>Undefined state.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PolyIntent.PolygonCloud">
       
        <p>Means that the annotation is intended to function as a cloud object.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PolyIntent.PolyLineDimension">
       
        <p>Indicates that the polyline annotation is intended to function as a dimension.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PolyIntent.PolygonDimension">
       
        <p>Indicates that the polygon annotation is intended to function as a dimension.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.PolylineAnnotation">
       
        <p>Represents polyline annotation that is similar to polygon, except that the first and last vertex are not implicitly connected.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PolylineAnnotation.accept(AnnotationSelector)">
      / * 
        <p>/ * Measure units specifed for this annotation. / *</p> / * / * @return Measure value /
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.PolylineAnnotation.getAnnotationType">
       
        <p>Gets type of annotation.</p> @return AnnotationType element @see AnnotationType
      
    </member>
    <member name="M:com.aspose.pdf.PolylineAnnotation.#ctor(Page,Rectangle,Point[])">
       
        <p>Creates new Polyline annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page. @param vertices An array of polygon vertices points.
      
      <param name="Page"/>
      <param name="Rectangle"/>
      <param name="Point[]"/>
    </member>
    <member name="T:com.aspose.pdf.PopupAnnotation">
       
        <p>Represents the pop-up annotation that displays text in a pop-up window for entry and editing.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PopupAnnotation.getOpen">
       
        <p>Gets a flag specifying whether the pop-up annotation should initially be displayed open.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.PopupAnnotation.setOpen(boolean)">
       
        <p>Sets a flag specifying whether the pop-up annotation should initially be displayed open.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.PopupAnnotation.getParent">
       
        <p>Gets the parent annotation with which this pop-up annotation shall be associated. If this entry is present, the parent annotation's Contents, M, C, and T entries shall override those of the pop-up annotation itself.</p> @return MarkupAnnotation object
      
    </member>
    <member name="M:com.aspose.pdf.PopupAnnotation.setParent(MarkupAnnotation)">
       
        <p>Sets the parent annotation with which this pop-up annotation shall be associated. If this entry is present, the parent annotation's Contents, M, C, and T entries shall override those of the pop-up annotation itself.</p> @param value MarkupAnnotation object
      
      <param name="MarkupAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.PopupAnnotation.getAnnotationType">
       
        <p>Gets type of annotation.</p> @return AnnotationType element @see AnnotationType
      
    </member>
    <member name="M:com.aspose.pdf.PopupAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor object to process the annotation.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.PopupAnnotation.#ctor(IDocument)">
       
        <p>Constructor. for using in Generator.</p> @param document Document where new popup annotation will be created.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.PopupAnnotation.#ctor(Page,Rectangle)">
       
        <p>Creates new Popup annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.Position">
       
        <p>Represents a position object</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Position.getXIndent">
       
        <p>Gets the X coordinate of the object</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Position.setXIndent(double)">
       
        <p>Sets the X coordinate of the object</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Position.getYIndent">
       
        <p>Gets the Y coordinate of the object</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Position.setYIndent(double)">
       
        <p>Sets the Y coordinate of the object</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Position.toString">
       
        <p>Gets string representation for the current {@code Position} object.</p> @return String representration of the Position object.
      
    </member>
    <member name="M:com.aspose.pdf.Position.equals(Object)">
       
        <p>Determines whether the specified object is equal to the current {@code Position} object.</p> @return True in case objects are equal. @param obj Object that is checked for equality.
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.Position.hashCode">Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by {@link java.util.HashMap}. &lt;p&gt; The general contract of {@code hashCode} is: &lt;ul&gt; &lt;li&gt;Whenever it is invoked on the same object more than once during an execution of a Java application, the {@code hashCode} method must consistently return the same integer, provided no information used in {@code equals} comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. &lt;li&gt;If two objects are equal according to the {@code equals(Object)} method, then calling the {@code hashCode} method on each of the two objects must produce the same integer result. &lt;li&gt;It is &lt;em&gt;not&lt;/em&gt; required that if two objects are unequal according to the {@link java.lang.Object#equals(java.lang.Object)} method, then calling the {@code hashCode} method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. &lt;/ul&gt; &lt;p&gt; As much as is reasonably practical, the hashCode method defined by class {@code Object} does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java&lt;span style="font-size:70%"&gt;&lt;sup&gt;TM&lt;/sup&gt;&lt;/span&gt; programming language.) @return a hash code value for this object. @see java.lang.Object#equals(java.lang.Object) @see java.lang.System#identityHashCode</member>
    <member name="M:com.aspose.pdf.Position.#ctor(double,double)">
       
        <p>Initializes a new instance of {@code Position} class</p> @param xIndent X coordinate value. @param yIndent Y coordinate value.
      
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.PptxSaveOptions">
       
        <p>Save options for export to SVG format</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PptxSaveOptions.getSlidesAsImages">
       
        <p>If set to true then all the content is recognized as images (one per page)</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.PptxSaveOptions.setSlidesAsImages(boolean)">
       
        <p>If set to true then all the content is recognized as images (one per page)</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.PptxSaveOptions.getImageResolution">
       
        <p>Gets or sets the image resolution (dpi). Default is 192 dpi.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.PptxSaveOptions.setImageResolution(int)">
       
        <p>Gets or sets the image resolution (dpi). Default is 192 dpi.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PptxSaveOptions.getSeparateImages">
       
        <p>If set to true then images are separated from all other graphics</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.PptxSaveOptions.setSeparateImages(boolean)">
       
        <p>If set to true then images are separated from all other graphics</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.PptxSaveOptions.isOptimizeTextBoxes">
       
        <p>Toggles text columns recognition</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.PptxSaveOptions.setOptimizeTextBoxes(boolean)">
       
        <p>Toggles text columns recognition</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.PptxSaveOptions.getCustomProgressHandler">&lt;p&gt; This handler can be used to handle conversion progress events f.e. it can be used to show progress bar or messages about current amount of processed pages, example of handler's code that shows progress on console is : &lt;/p&gt;&lt;hr&gt; &lt;pre&gt; public static void ConvertWithShowingProgress() { (new com.aspose.pdf.License()).setLicense("Aspose.Total.lic"); Document doc = new Document("input.pdf"); HtmlSaveOptions saveOptions = new HtmlSaveOptions(); saveOptions.setCustomProgressHandler(new HtmlSaveOptions.ConversionProgressEventHandler(ShowProgressOnConsole)); doc.save("output.html", saveOptions); } public static void ShowProgressOnConsole(HtmlSaveOptions.ProgressEventHandlerInfo eventInfo) { switch (eventInfo.EventType) { case HtmlSaveOptions.ProgressEventType.TotalProgress: System.out.println(string.Format("{0} - Conversion progress : {1}% .", DateTime.Now.ToLongTimeString(), eventInfo.Value.ToString())); break; case HtmlSaveOptions.ProgressEventType.SourcePageAnalized: System.out.println(string.Format("{0} - Source page {1} of {2} analyzed.", DateTime.Now.ToLongTimeString(), eventInfo.Value.ToString(), eventInfo.MaxValue.ToString())); break; case HtmlSaveOptions.ProgressEventType.ResultPageCreated: System.out.println(string.Format("{0} - Result page's {1} of {2} layout created.", DateTime.Now.ToLongTimeString(), eventInfo.Value.ToString(), eventInfo.MaxValue.ToString())); break; case HtmlSaveOptions.ProgressEventType.ResultPageSaved: System.out.println(string.Format("{0} - Result page {1} of {2} exported.", DateTime.Now.ToLongTimeString(), eventInfo.Value.ToString(), eventInfo.MaxValue.ToString())); break; default: break; } } &lt;/pre&gt; @return ConversionProgressEventHandler instance</member>
    <member name="M:com.aspose.pdf.PptxSaveOptions.setCustomProgressHandler(ConversionProgressEventHandler)">&lt;p&gt; This handler can be used to handle conversion progress events f.e. it can be used to show progress bar or messages about current amount of processed pages, example of handler's code that shows progress on console is : &lt;/p&gt;&lt;hr&gt; &lt;pre&gt; public static void ConvertWithShowingProgress() { (new com.aspose.pdf.License()).setLicense("Aspose.Total.lic"); Document doc = new Document("input.pdf"); HtmlSaveOptions saveOptions = new HtmlSaveOptions(); saveOptions.CustomProgressHandler = new HtmlSaveOptions.ConversionProgressEventHandler(ShowProgressOnConsole); doc.Save("output.html", saveOptions); } public static void ShowProgressOnConsole(HtmlSaveOptions.ProgressEventHandlerInfo eventInfo) { switch (eventInfo.EventType) { case HtmlSaveOptions.ProgressEventType.TotalProgress: System.out.println(string.Format("{0} - Conversion progress : {1}% .", DateTime.Now.ToLongTimeString(), eventInfo.Value.ToString())); break; case HtmlSaveOptions.ProgressEventType.SourcePageAnalized: System.out.println(string.Format("{0} - Source page {1} of {2} analyzed.", DateTime.Now.ToLongTimeString(), eventInfo.Value.ToString(), eventInfo.MaxValue.ToString())); break; case HtmlSaveOptions.ProgressEventType.ResultPageCreated: System.out.println(string.Format("{0} - Result page's {1} of {2} layout created.", DateTime.Now.ToLongTimeString(), eventInfo.Value.ToString(), eventInfo.MaxValue.ToString())); break; case HtmlSaveOptions.ProgressEventType.ResultPageSaved: System.out.println(string.Format("{0} - Result page {1} of {2} exported.", DateTime.Now.ToLongTimeString(), eventInfo.Value.ToString(), eventInfo.MaxValue.ToString())); break; default: break; } } &lt;/pre&gt; @param value ConversionProgressEventHandler instance 
      <param name="ConversionProgressEventHandler"/>
    </member>
    <member name="M:com.aspose.pdf.PptxSaveOptions.#ctor">
       
        <p>Constructor</p> 
      
    </member>
    <member name="T:com.aspose.pdf.PredefinedAction">
       
        <p>Defines different actions which can be triggered from a PDF file.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.FirstPage">
       
        <p>A named action to go to the first page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.LastPage">
       
        <p>A named action to go to the last page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.NextPage">
       
        <p>A named action to go to the next page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.PrevPage">
       
        <p>A named action to go to the previous page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.PrintDialog">
       
        <p>A named action to open a print dialog (JavaScript).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.Print">
       
        <p>A named action to open a print dialog.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.Bookmarks_ExpanCurrentBookmark">
       
        <p>A named action to find current bookmark.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.Bookmarks_HightlightCurrentBookmark">
       
        <p>A named action to highlight current bookmark.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.Document_AttachFile">
       
        <p>A named action to add file attachment.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.Document_CropPages">
       
        <p>A named action to crop document pages.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.Document_DeletePages">
       
        <p>A named action to delete document pages.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.Document_ExtractPages">
       
        <p>A named action to exctract document pages.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.Document_InsertPages">
       
        <p>A named action to insert pages from a document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.Document_ReplacePages">
       
        <p>A named action to replace document pages.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.Document_RotatePages">
       
        <p>A named action to rotate document pages.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.Edit_CheckSpelling_InComFieldEdit">
       
        <p>A named action to check spelling in comments.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.Edit_Find">
       
        <p>A named action to find.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.Edit_Preferences">
       
        <p>A named action to edit preferences.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.Edit_Search">
       
        <p>A named action for searching.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.File_AttachToEmail">
       
        <p>A named action for attaching current pdf document into email message.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.File_Close">
       
        <p>A named action to close the document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.File_CreatePDF_FromScanner">
       
        <p>A named action to create pdf document from scanner.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.File_CreatePDF_FromWebPage">
       
        <p>A named action to create pdf document from web page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.File_Exit">
       
        <p>A named action to exit pdf reader.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.File_Organizer_OpenOrganizer">
       
        <p>A named action to open organizer.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.File_Print">
       
        <p>A named action to print the document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.File_Properties">
       
        <p>A named action to open the document properties.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.File_SaveAs">
       
        <p>A named action to save the document with another name.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.Miscellaneous_ZoomIn">
       
        <p>A named action to zoom in the document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.Miscellaneous_ZoomOut">
       
        <p>A named action to zoom out the document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.PageImages_PrintPages">
       
        <p>A named action to print the document pages.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_GoTo_NextView">
       
        <p>A named action to go to the next view.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_GoTo_Page">
       
        <p>A named action to go to the certain page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_GoTo_PreDocument">
       
        <p>A named action to go to the previous document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_GoTo_PreView">
       
        <p>A named action to go to the previous view.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_NavigationPanels_Articles">
       
        <p>A named action to show/hide articles panel.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_NavigationPanels_Attachments">
       
        <p>A named action to show/hide attachment panel.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_NavigationPanels_Boomarks">
       
        <p>A named action to show/hide bookmark panel.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_NavigationPanels_Comments">
       
        <p>A named action to show/hide comments panel.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_NavigationPanels_Fields">
       
        <p>A named action to show/hide fields panel.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_NavigationPanels_Layers">
       
        <p>A named action to show/hide layers panel.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_NavigationPanels_ModelTree">
       
        <p>A named action to show/hide model tree panel.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_NavigationPanels_Pages">
       
        <p>A named action to show/hide pages panel.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_NavigationPanels_Signatures">
       
        <p>A named action to show/hide signatures panel.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_PageDisplay_SinglePage">
       
        <p>A named action to display single page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_PageDisplay_SinglePageContinuous">
       
        <p>A named action to display single continious page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_PageDisplay_TwoUp">
       
        <p>A named action to display pages as Two-Up.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_PageDisplay_TwoUpContinuous">
       
        <p>A named action to display pages as Two-Up continious.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Toolbars_AdvanceEditing">
       
        <p>A named action to show/hide advanced editing toolbar.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Toolbars_CommentMarkup">
       
        <p>A named action to show/hide commenting toolbar.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Toolbars_Edit">
       
        <p>A named action to show/hide edit toolbar.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Toolbars_File">
       
        <p>A named action to show/hide file toolbar.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Toolbars_Find">
       
        <p>A named action to show/hide find toolbar.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Toolbars_Forms">
       
        <p>A named action to show/hide forms toolbar.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Toolbars_Measuring">
       
        <p>A named action to show/hide measuring toolbar.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Toolbars_ObjectData">
       
        <p>A named action to show/hide object data toolbar.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Toolbars_PageDisplay">
       
        <p>A named action to show/hide page display toolbar.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Toolbars_PageNavigation">
       
        <p>A named action to show/hide navigation toolbar.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Toolbars_PrintProduction">
       
        <p>A named action to show/hide print production toolbar.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Toolbars_PropertiesBar">
       
        <p>A named action to show/hide property toolbar.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Toolbars_Redaction">
       
        <p>A named action to show/hide redaction toolbar.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Toolbars_SelectZoom">
       
        <p>A named action to show/hide select &amp; zoom toolbar.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Toolbars_Tasks">
       
        <p>A named action to show/hide tasks toolbar.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Toolbars_Typewriter">
       
        <p>A named action to show/hide typewriter toolbar.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Zoom_ActualSize">
       
        <p>A named action to view pages in actual size.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Zoom_FitHeight">
       
        <p>A named action to fit page on height.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Zoom_FitPage">
       
        <p>A named action to fit page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Zoom_FitVisible">
       
        <p>A named action to fit page visibility.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Zoom_FitWidth">
       
        <p>A named action to fit page on width.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Zoom_ZoomTo">
       
        <p>A named action to make zoom.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.Window_FullScreenMode">
       
        <p>A named action to view the document in the full screen mode.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.PrintController">
       
        <p>Represents print controller.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PrintController.getFileName">
      Set file name @return String value
    </member>
    <member name="M:com.aspose.pdf.PrintController.setFileName(String)">
      Set file name @param value String value
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.PrintController.dispose">
      dispose instance
    </member>
    <member name="T:com.aspose.pdf.PrintDuplex">
       
        <p>The paper handling option to use when printing the file from the print dialog..</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PrintDuplex.Simplex">
       
        <p>Print single-sided.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PrintDuplex.DuplexFlipShortEdge">
       
        <p>Duplex and flip on the short edge of the sheet.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PrintDuplex.DuplexFlipLongEdge">
       
        <p>Duplex and flip on the long edge of the sheet.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.printing.DuplexKind">
      Specifies the printer's duplex setting.
    </member>
    <member name="M:com.aspose.pdf.printing.DuplexKind.toString(int)">
      Duplex kind name @param pdfPrintRange PaperKind element @return Paper format name
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.printing.DuplexKind.getNames">
      Array of Duplex kind names @return String[] object
    </member>
    <member name="F:com.aspose.pdf.printing.DuplexKind.Default">
      The printer's default duplex setting.
    </member>
    <member name="F:com.aspose.pdf.printing.DuplexKind.Horizontal">
      Double-sided, horizontal printing.
    </member>
    <member name="F:com.aspose.pdf.printing.DuplexKind.Simplex">
      Single-sided printing.
    </member>
    <member name="F:com.aspose.pdf.printing.DuplexKind.Vertical">
      Double-sided, vertical printing.
    </member>
    <member name="T:com.aspose.pdf.printing.PdfPrinterResolution">
      Represents the resolution supported by a printer.
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterResolution.getKind">
      sets the printer resolution. @return PdfPrinterResolutionKind element @see PdfPrinterResolutionKind
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterResolution.setKind(int)">
      Gets or sets the printer resolution. @param value PdfPrinterResolutionKind element @see PdfPrinterResolutionKind
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterResolution.getX">
      Gets the horizontal printer resolution, in dots per inch. @return int value
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterResolution.setX(int)">
      Sets the horizontal printer resolution, in dots per inch. @param value int value
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterResolution.getY">
      Gets the vertical printer resolution, in dots per inch. @return int value
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterResolution.setY(int)">
      Sets the vertical printer resolution, in dots per inch. @param value int value
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterResolution.#ctor">
      Initializes a new instance of the PrinterResolution class.
    </member>
    <member name="T:com.aspose.pdf.printing.PdfPrinterResolutionKind">
      Specifies a printer resolution.
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterResolutionKind.toString(int)">
      Get String name for PrinterResolutionKind element @param printerResolutionKind PrinterResolutionKind element @return String object @see PrinterResolutionKind
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterResolutionKind.getNames">
      Get String names for PrinterResolutionKind @return String[] object
    </member>
    <member name="F:com.aspose.pdf.printing.PdfPrinterResolutionKind.Custom">
      Custom resolution.
    </member>
    <member name="F:com.aspose.pdf.printing.PdfPrinterResolutionKind.Draft">
      Draft-quality resolution.
    </member>
    <member name="F:com.aspose.pdf.printing.PdfPrinterResolutionKind.High">
      High resolution.
    </member>
    <member name="F:com.aspose.pdf.printing.PdfPrinterResolutionKind.Low">
      Low resolution.
    </member>
    <member name="F:com.aspose.pdf.printing.PdfPrinterResolutionKind.Medium">
      Medium resolution.
    </member>
    <member name="T:com.aspose.pdf.printing.PdfPrinterSettings">
      Specifies information about how a document is printed, including the printer that prints it.
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.getPrinterSettings">
      Return PrinterSettings object @return PrinterSettings object
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.canDuplex">
      Gets a value indicating whether the printer supports double-sided printing. @return boolean value
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.getDuplex">
      Gets or sets the printer setting for double-sided printing. @return int value @see DuplexKind
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.setDuplex(int)">
      Gets or sets the printer setting for double-sided printing. @param value int value @see DuplexKind
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.createMeasurementGraphics">
      Get Graphics2D object @return Graphics2D object
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.createMeasurementGraphics(boolean)">
      Get Graphics2D object @param value boolean value @return Graphics2D object
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.createMeasurementGraphics(PrintPageSettings)">
      Get Graphics2D object @param value PrintPageSettings value @return Graphics2D object
      <param name="PrintPageSettings"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.createMeasurementGraphics(PrintPageSettings,boolean)">
      Get Graphics2D object @param pageSettings PrintPageSettings value @param honorOriginAtMargins boolean value @return Graphics2D object
      <param name="PrintPageSettings"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.deepClone">
      Get clonned object @return PdfPrinterSettings object
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.isCollate">
      Gets or sets a value indicating whether the printed document is collated. @return boolean value
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.setCollate(boolean)">
      Gets or sets a value indicating whether the printed document is collated. @param value boolean value
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.getCopies">
      Gets the number of copies of the document to print. @return number of copies
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.setCopies(short)">
      Sets the number of copies of the document to print. @param value number of copies
      <param name="short"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.getDefaultPageSettings">
      Gets the default page settings for this printer. @return default page settings
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.getFromPage">
      Gets or sets the page number of the first page to print. @return int value
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.getLandscapeAngle">
      Gets the angle, in degrees, that the portrait orientation is rotated to produce the landscape orientation. @return int value
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.getMaximumCopies">
      Gets the maximum number of copies that the printer enables the user to print at a time. @return int value
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.getMaximumPage">
      Gets or sets the maximum FromPage or ToPage that can be selected in a PrintDialog. @return int value
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.getMinimumPage">
      Gets or sets the minimum FromPage or ToPage that can be selected in a PrintDialog. @return int value
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.getPaperSizes">Gets the paper sizes that are supported by this printer. @return {@code ArrayList&lt;PrintPaperSize&gt; } object</member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.getPaperSources">Gets the paper source trays that are available on the printer. @return {@code ArrayList&lt;PrintPaperSource&gt; } object</member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.getPrinterName">
      Gets or sets the name of the printer to use. @return string object
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.getPrinterResolutions">
      Gets all the resolutions that are supported by this printer. @return PrinterResolutionCollection object
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.getPrintFileName">
      Gets or sets the file name, when printing to a file. @return string object
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.getPrintRange">
      Gets or sets the page numbers that the user has specified to be printed. @return int value @see PdfPrintRange
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.isPrintToFile">
      Gets a value indicating whether the printing output is sent to a file instead of a port. @return boolean value
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.setPrintToFile(boolean)">
      Sets a value indicating whether the printing output is sent to a file instead of a port. @param value boolean value
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.isSupportsColor">
      Gets a value indicating whether this printer supports color printing. @return boolean value
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.getToPage">
      Gets or sets the number of the last page to print. @return int value
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.getInstalledPrinters">Gets the names of all printers installed on the computer. @return {@code ArrayList&lt;String&gt;} object</member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.isDefaultPrinter">
      Gets a value indicating whether the PrinterName property designates the default printer, except when the user explicitly sets PrinterName. @return boolean value
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.isDirectPrintingSupported(String)">
      Gets a value indicating whether the printer is Supported DirectPrinting @param filename String object @return boolean value
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.isDirectPrintingSupported(ImageType)">
      Gets a value indicating whether the printer is Supported DirectPrinting @param format ImageType object @return boolean value
      <param name="ImageType"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.isPlotter">
      Gets a value indicating whether the printer is a plotter. @return boolean value
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.isValid">
      Gets a value indicating whether the PrinterName property designates a valid printer. @return boolean value
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.setFromPage(int)">
      Gets or sets the page number of the first page to print. @param value int value
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.setMaximumPage(int)">
      Gets or sets the maximum FromPage or ToPage that can be selected in a PrintDialog. @param value int value
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.setMinimumPage(int)">
      Gets or sets the minimum FromPage or ToPage that can be selected in a PrintDialog. @param value int value
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.setPrinterName(String)">
      Sets the name of the printer to use. @param value string value
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.setPrintFileName(String)">
      Sets the filename to print. @param value string value
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.setPrintRange(int)">
      Sets the page numbers that the user has specified to be printed. @param value PdfPrintRange element @see PdfPrintRange
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.setToPage(int)">
      Sets the number of the last page to print. @param value PdfPrintRange element @see PdfPrintRange
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.setSelectedPages(int[])">
      Sets the number of selected pages to print. @param pagesList int array @see PdfPrintRange
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.getSelectedPages">
      Gets the number of selected pages to print. @return pagesList int array @see PdfPrintRange
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrinterSettings.#ctor">
      Initializes a new instance of the PrinterSettings class.
    </member>
    <member name="T:com.aspose.pdf.printing.PdfPrintRange">
      Specifies the part of the document to print.
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrintRange.toString(int)">
      Get String name for PdfPrintRange element @param pdfPrintRange PdfPrintRange element @return String object @see PdfPrintRange
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PdfPrintRange.getNames">
      Get String names for PdfPrintRange @return String[] object
    </member>
    <member name="F:com.aspose.pdf.printing.PdfPrintRange.AllPages">
      All pages are printed.
    </member>
    <member name="F:com.aspose.pdf.printing.PdfPrintRange.CurrentPage">
      The currently displayed page is printed
    </member>
    <member name="F:com.aspose.pdf.printing.PdfPrintRange.Selection">
      The selected pages are printed.
    </member>
    <member name="F:com.aspose.pdf.printing.PdfPrintRange.SomePages">
      The pages between FromPage and ToPage are printed.
    </member>
    <member name="T:com.aspose.pdf.printing.PrinterMargins">
      Specifies the dimensions of the margins of a printed page.
    </member>
    <member name="M:com.aspose.pdf.printing.PrinterMargins.deepClone">
      Retrieves a duplicate of this object, member by member. @return PrinterMargins object
    </member>
    <member name="M:com.aspose.pdf.printing.PrinterMargins.equals(Object)">
      Compares this Margins to the specified Object to determine whether they have the same dimensions. (Overrides Object.Equals(Object).) @return boolean value
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PrinterMargins.hashCode">Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by {@link java.util.HashMap}. &lt;p&gt; The general contract of {@code hashCode} is: &lt;ul&gt; &lt;li&gt;Whenever it is invoked on the same object more than once during an execution of a Java application, the {@code hashCode} method must consistently return the same integer, provided no information used in {@code equals} comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. &lt;li&gt;If two objects are equal according to the {@code equals(Object)} method, then calling the {@code hashCode} method on each of the two objects must produce the same integer result. &lt;li&gt;It is &lt;em&gt;not&lt;/em&gt; required that if two objects are unequal according to the {@link java.lang.Object#equals(java.lang.Object)} method, then calling the {@code hashCode} method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. &lt;/ul&gt; &lt;p&gt; As much as is reasonably practical, the hashCode method defined by class {@code Object} does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java&lt;span style="font-size:70%"&gt;&lt;sup&gt;TM&lt;/sup&gt;&lt;/span&gt; programming language.) @return a hash code value for this object. @see java.lang.Object#equals(java.lang.Object) @see java.lang.System#identityHashCode</member>
    <member name="M:com.aspose.pdf.printing.PrinterMargins.getBottom">
      Gets or sets the bottom margin, in hundredths of an inch. @return int value
    </member>
    <member name="M:com.aspose.pdf.printing.PrinterMargins.setBottom(int)">
      Gets or sets the bottom margin, in hundredths of an inch. @param value int value
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PrinterMargins.getLeft">
      Gets or sets the left margin width, in hundredths of an inch. @return int value
    </member>
    <member name="M:com.aspose.pdf.printing.PrinterMargins.setLeft(int)">
      Gets or sets the left margin width, in hundredths of an inch. @param value int value
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PrinterMargins.getRight">
      Gets or sets the right margin width, in hundredths of an inch. @return int value
    </member>
    <member name="M:com.aspose.pdf.printing.PrinterMargins.setRight(int)">
      Gets or sets the right margin width, in hundredths of an inch. @param value int value
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PrinterMargins.getTop">
      Gets or sets the top margin width, in hundredths of an inch. @return int value
    </member>
    <member name="M:com.aspose.pdf.printing.PrinterMargins.setTop(int)">
      Gets or sets the top margin width, in hundredths of an inch. @param value int value
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PrinterMargins.op_Equality(PrinterMargins,PrinterMargins)">
      Compares two Margins to determine if they have the same dimensions. @param m1 PrinterMargins object @param m2 PrinterMargins object @return boolean value
      <param name="PrinterMargins"/>
      <param name="PrinterMargins"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PrinterMargins.op_Inequality(PrinterMargins,PrinterMargins)">
      Compares two Margins to determine whether they are of unequal width. @param m1 PrinterMargins object @param m2 PrinterMargins object @return boolean value
      <param name="PrinterMargins"/>
      <param name="PrinterMargins"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PrinterMargins.#ctor">
      Initializes a new instance of the Margins class with 1-inch wide margins.
    </member>
    <member name="M:com.aspose.pdf.printing.PrinterMargins.#ctor(int,int,int,int)">
      Initializes a new instance of the Margins class with the specified left, right, top, and bottom margins. @param left int value @param right int value @param top int value @param bottom int value
      <param name="int"/>
      <param name="int"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.printing.PrinterPaperKind">
      Specifies the standard paper sizes.
    </member>
    <member name="M:com.aspose.pdf.printing.PrinterPaperKind.toString(int)">
      Paper format name @param pdfPrintRange PaperKind element @return Paper format name
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PrinterPaperKind.getNames">
      Array of Paper format names @return String[] object
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.A2">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.A3">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.A3Extra">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.A3ExtraTransverse">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.A3Rotated">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.A3Transverse">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.A4">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.A4Extra">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.A4Plus">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.A4Rotated">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.A4Small">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.A4Transverse">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.A5">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.A5Extra">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.A5Rotated">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.A5Transverse">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.A6">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.A6Rotated">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.APlus">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.B4">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.B4Envelope">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.B4JisRotated">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.B5">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.B5Envelope">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.B5Extra">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.B5JisRotated">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.B5Transverse">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.B6Envelope">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.B6Jis">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.B6JisRotated">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.BPlus">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.C3Envelope">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.C4Envelope">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.C5Envelope">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.C6Envelope">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.CSheet">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.Custom">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.DLEnvelope">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.DSheet">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.ESheet">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.Executive">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.Folio">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.GermanLegalFanfold">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.GermanStandardFanfold">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.InviteEnvelope">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.IsoB4">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.ItalyEnvelope">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.JapaneseDoublePostcard">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.JapaneseDoublePostcardRotated">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.JapaneseEnvelopeChouNumber3">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.JapaneseEnvelopeChouNumber3Rotated">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.JapaneseEnvelopeChouNumber4">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.JapaneseEnvelopeChouNumber4Rotated">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.JapaneseEnvelopeKakuNumber2">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.JapaneseEnvelopeKakuNumber2Rotated">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.JapaneseEnvelopeKakuNumber3">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.JapaneseEnvelopeKakuNumber3Rotated">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.JapaneseEnvelopeYouNumber4">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.JapaneseEnvelopeYouNumber4Rotated">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.JapanesePostcard">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.JapanesePostcardRotated">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.Ledger">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.Legal">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.LegalExtra">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.Letter">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.LetterExtra">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.LetterExtraTransverse">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.LetterPlus">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.LetterRotated">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.LetterSmall">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.LetterTransverse">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.MonarchEnvelope">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.Note">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.Number10Envelope">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.Number11Envelope">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.Number12Envelope">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.Number14Envelope">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.Number9Envelope">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.PersonalEnvelope">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.Prc16K">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.Prc16KRotated">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.Prc32K">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.Prc32KBig">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.Prc32KBigRotated">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.Prc32KRotated">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.PrcEnvelopeNumber1">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.PrcEnvelopeNumber10">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.PrcEnvelopeNumber1Rotated">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.PrcEnvelopeNumber2">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.PrcEnvelopeNumber2Rotated">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.PrcEnvelopeNumber3">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.PrcEnvelopeNumber3Rotated">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.PrcEnvelopeNumber4">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.PrcEnvelopeNumber4Rotated">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.PrcEnvelopeNumber5">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.PrcEnvelopeNumber5Rotated">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.PrcEnvelopeNumber6">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.PrcEnvelopeNumber6Rotated">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.PrcEnvelopeNumber7">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.PrcEnvelopeNumber7Rotated">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.PrcEnvelopeNumber8">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.PrcEnvelopeNumber8Rotated">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.PrcEnvelopeNumber9">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.PrcEnvelopeNumber9Rotated">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.Quarto">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.Standard10x11">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.Standard10x14">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.Standard11x17">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.Standard12x11">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.Standard15x11">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.Standard9x11">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.Statement">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.Tabloid">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.TabloidExtra">
      Standard paper format
    </member>
    <member name="F:com.aspose.pdf.printing.PrinterPaperKind.USStandardFanfold">
      Standard paper format
    </member>
    <member name="T:com.aspose.pdf.printing.PrintPageSettings">
      Specifies settings that apply to a single, printed page.
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPageSettings.getPageSettings">
      Gets Page Settings @return PageSettings object
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPageSettings.getBounds">
      Gets the size of the page, taking into account the page orientation specified by the Landscape property. @return Rectangle object
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPageSettings.isColor">
      Gets or sets a value indicating whether the page should be printed in color. @return boolean value
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPageSettings.setColor(boolean)">
      Gets or sets a value indicating whether the page should be printed in color. @param value boolean value
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPageSettings.getHardMarginX">
      Gets the x-coordinate, in hundredths of an inch, of the hard margin at the left of the page. @return float value
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPageSettings.getHardMarginY">
      Gets the y-coordinate, in hundredths of an inch, of the hard margin at the top of the page. @return float value
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPageSettings.isLandscape">
      Gets or sets a value indicating whether the page is printed in landscape or portrait orientation. @return boolean value
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPageSettings.setLandscape(boolean)">
      Gets or sets a value indicating whether the page is printed in landscape or portrait orientation. @param value boolean value
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPageSettings.getMargins">
      Gets the margins for this page. @return PrinterMargins object
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPageSettings.setMargins(PrinterMargins)">
      Sets the margins for this page. @param value PrinterMargins object
      <param name="PrinterMargins"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPageSettings.getPaperSize">
      Gets the paper size for the page. @return PrintPaperSize object
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPageSettings.setPaperSize(PrintPaperSize)">
      Sets the paper size for the page. @param value PrintPaperSize object
      <param name="PrintPaperSize"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPageSettings.getPaperSource">
      Gets the page's paper source; for example, the printer's upper tray. @return PrintPaperSource object
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPageSettings.setPaperSource(PrintPaperSource)">
      Sets the page's paper source; for example, the printer's upper tray. @param value PrintPaperSource object
      <param name="PrintPaperSource"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPageSettings.getPrintableArea">
      Gets the bounds of the printable area of the page for the printer. @return Rectangle object
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPageSettings.getPrinterResolution">
      Gets the printer resolution for the page. @return PdfPrinterResolution object
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPageSettings.setPrinterResolution(PdfPrinterResolution)">
      Sets the printer resolution for the page. @param value PdfPrinterResolution object
      <param name="PdfPrinterResolution"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPageSettings.getPrinterSettings">
      Gets the printer settings associated with the page. @return PdfPrinterSettings object
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPageSettings.setPrinterSettings(PdfPrinterSettings)">
      Sets the printer settings associated with the page. @param value PdfPrinterSettings object
      <param name="PdfPrinterSettings"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPageSettings.#ctor">
      Initializes a new instance of the PageSettings class using the default printer.
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPageSettings.#ctor(PdfPrinterSettings)">
      Initializes a new instance of the PageSettings class using a specified printer. @param value PdfPrinterSettings object
      <param name="PdfPrinterSettings"/>
    </member>
    <member name="T:com.aspose.pdf.printing.PrintPaperSize">
      Specifies the size of a piece of paper.
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPaperSize.getHeight">
      Gets or sets the height of the paper, in hundredths of an inch. @return int value
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPaperSize.getKind">
      Gets the type of paper. @return int value @see PrinterPaperKind
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPaperSize.getPaperName">
      Gets or sets the name of the type of paper. @return String value
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPaperSize.getRawKind">
      Gets or sets an integer representing one of the PaperSize values or a custom value. @return int value
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPaperSize.getWidth">
      Gets or sets the width of the paper, in hundredths of an inch. @return int value
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPaperSize.setHeight(int)">
      Gets or sets the height of the paper, in hundredths of an inch. @param value int value
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPaperSize.setPaperName(String)">
      Gets the name of the type of paper. @param value String value
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPaperSize.setWidth(int)">
      Sets the width of the paper, in hundredths of an inch. @param value int value
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPaperSize.toString">
      Gets the name of this instance. @return String value
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPaperSize.#ctor">
      Initializes a new instance of the PaperSize class.
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPaperSize.#ctor(String,int,int)">
      Initializes a new instance of the PaperSize class. @param name String value @param width int value @param height int value
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.printing.PrintPaperSource">
      Specifies the paper tray from which the printer gets paper.
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPaperSource.getKind">
      Gets the paper source. @return int value
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPaperSource.getRawKind">
      Gets or sets the integer representing one of the PaperSourceKind values or a custom value. @return int value
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPaperSource.getSourceName">
      Gets or sets the name of the paper source. @return String value
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPaperSource.setRawKind(int)">
      Gets or sets the integer representing one of the PaperSourceKind values or a custom value. @param value int value
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPaperSource.setSourceName(String)">
      Gets or sets the name of the paper source. @param value String value
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPaperSource.toString">
      Infrastructure. Provides information about the PrintPaperSource in string form. @return String value
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPaperSource.#ctor">
      Initializes a new instance of the PaperSource class.
    </member>
    <member name="T:com.aspose.pdf.printing.PrintPaperSourceKind">
      Standard paper sources.
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPaperSourceKind.toString(int)">
      PaperSourceKind name @param pdfPrintRange string object @return String object @see PrinterPaperKind
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.printing.PrintPaperSourceKind.getNames">
      Array of Paper format names @return String[] object
    </member>
    <member name="F:com.aspose.pdf.printing.PrintPaperSourceKind.USStandardFanfold">
      Standard PaperSource type
    </member>
    <member name="F:com.aspose.pdf.printing.PrintPaperSourceKind.Cassette">
      Standard PaperSource type
    </member>
    <member name="F:com.aspose.pdf.printing.PrintPaperSourceKind.Custom">
      Standard PaperSource type
    </member>
    <member name="F:com.aspose.pdf.printing.PrintPaperSourceKind.Envelope">
      Standard PaperSource type
    </member>
    <member name="F:com.aspose.pdf.printing.PrintPaperSourceKind.FormSource">
      Standard PaperSource type
    </member>
    <member name="F:com.aspose.pdf.printing.PrintPaperSourceKind.LargeCapacity">
      Standard PaperSource type
    </member>
    <member name="F:com.aspose.pdf.printing.PrintPaperSourceKind.LargeFormat">
      Standard PaperSource type
    </member>
    <member name="F:com.aspose.pdf.printing.PrintPaperSourceKind.Lower">
      Standard PaperSource type
    </member>
    <member name="F:com.aspose.pdf.printing.PrintPaperSourceKind.Manual">
      Standard PaperSource type
    </member>
    <member name="F:com.aspose.pdf.printing.PrintPaperSourceKind.ManualFeed">
      Standard PaperSource type
    </member>
    <member name="F:com.aspose.pdf.printing.PrintPaperSourceKind.Middle">
      Standard PaperSource type
    </member>
    <member name="F:com.aspose.pdf.printing.PrintPaperSourceKind.SmallFormat">
      Standard PaperSource type
    </member>
    <member name="F:com.aspose.pdf.printing.PrintPaperSourceKind.TractorFeed">
      Standard PaperSource type
    </member>
    <member name="F:com.aspose.pdf.printing.PrintPaperSourceKind.Upper">
      Standard PaperSource type
    </member>
    <member name="T:com.aspose.pdf.ProgressEventType">
       
        <p>This enum describes possible progress event types that can occure during conversion</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ProgressEventType.TotalProgress">
       
        <p>means that occured event informs about total progress of conversion</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ProgressEventType.SourcePageAnalysed">
       
        <p>means that occured event informs about end of analysis of one of pages before conversion</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ProgressEventType.ResultPageCreated">
       
        <p>means that occured event informs about creation of one result page before phisical export</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ProgressEventType.ResultPageSaved">
       
        <p>means that occured event informs about finished saving of one result page</p> 
      
    </member>
    <member name="T:com.aspose.pdf.PsLoadOptions">
       
        <p>Represents options for loading/importing of .mht-file into pdf document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PsLoadOptions.getFontsFolders">
       
        <p>Gets fonts folders paths. The folders with additional fonts for conversion.</p> @return array of String values
      
    </member>
    <member name="M:com.aspose.pdf.PsLoadOptions.setFontsFolders(String[])">
       
        <p>Sets fonts folders paths. The folders with additional fonts for conversion.</p> @param value array of String values
      
      <param name="String[]"/>
    </member>
    <member name="M:com.aspose.pdf.PsLoadOptions.#ctor">
       
        <p>Creates load options for converting PostScript into pdf document with empty base path.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.RadioButtonField">
       
        <p>Class representing radio button field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.RadioButtonField.getStyle">
       
        <p>Style of field box.</p> @return BoxStyle value @see BoxStyle
      
    </member>
    <member name="M:com.aspose.pdf.RadioButtonField.setStyle(int)">
       
        <p>Style of field box.</p> @param value BoxStyle value @see BoxStyle
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.RadioButtonField.getSelected">
       
        <p>Gets index of selected item. Numbering of items is started from 1.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.RadioButtonField.setSelected(int)">
       
        <p>Sets index of selected item. Numbering of items is started from 1.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.RadioButtonField.getOptions">
       
        <p>Gets collection of options of the radio button.</p> @return OptionCollection object
      
    </member>
    <member name="M:com.aspose.pdf.RadioButtonField.updateAppearances">
       
        <p>Update appearances value.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.RadioButtonField.add(RadioButtonOptionField)">
       
        <p>Adds new option field to RadioButton field</p> @param newItem Item which should be added.
      
      <param name="RadioButtonOptionField"/>
    </member>
    <member name="M:com.aspose.pdf.RadioButtonField.addOption(String,Rectangle)">
       
        <p>Add to radio button option with specifed rectangle.</p> @param optionName Name of new option. @param rect New item rectangle.
      
      <param name="String"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.RadioButtonField.addOption(String)">
       
        <p>Add option to radion button.</p> @param optionName Name of the option which will be added.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.RadioButtonField.setPosition(Point)">
       
        <p>Move all subitems of radio button to specified positins on the page.</p> @param point Sets position of RadioButton field annotations.
      
      <param name="Point"/>
    </member>
    <member name="M:com.aspose.pdf.RadioButtonField.getPageIndex">
       
        <p>Gets index of page which contains this RadioButton field.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.RadioButtonField.getValue">
       
        <p>Gets value of field.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.RadioButtonField.setValue(String)">
       
        <p>Sets value of field.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.RadioButtonField.#ctor(Page,Rectangle)">
       
        <p>Sets radio button field</p> @param page Page object @param rect Rectangle object
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.RadioButtonField.#ctor(Page)">
       
        <p>Constructor for RadiouttonField</p> @param page Page where radio button will be placed.
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.RadioButtonField.#ctor(IDocument)">
       
        <p>Constructor for RadioButtonField.</p> @param doc Document where radio button will be created.
      
      <param name="IDocument"/>
    </member>
    <member name="T:com.aspose.pdf.RadioButtonOptionField">
       
        <p>Class represents item of RadioButton field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.RadioButtonOptionField.getOptionName_Rename_Namesake">
       
        <p>Gets name of the option.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.RadioButtonOptionField.setOptionName_Rename_Namesake(String)">
       
        <p>Sets name of the option.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.RadioButtonOptionField.getCaption">
       
        <p>Gets caption.</p> @return TextFragment object
      
    </member>
    <member name="M:com.aspose.pdf.RadioButtonOptionField.setCaption(TextFragment)">
       
        <p>Sets caption.</p> @param value TextFragment object
      
      <param name="TextFragment"/>
    </member>
    <member name="M:com.aspose.pdf.RadioButtonOptionField.setOptionName(String)">
       
        <p>Sets name of the option.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.RadioButtonOptionField.getStyle">
       
        <p>Gets style of check box.</p> @return BoxStyle element @see BoxStyle
      
    </member>
    <member name="M:com.aspose.pdf.RadioButtonOptionField.setStyle(int)">
       
        <p>Sets style of check box.</p> @param value BoxStyle element @see BoxStyle
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.RadioButtonOptionField.#ctor">
       
        <p>Create new RadioButtonOptionField instance.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.RadioButtonOptionField.#ctor(Page,Rectangle)">
       
        <p>Creates radiobutton in the specified rectangle on specified page.</p> @param page Page where RadioButton will be placed; @param rect Rectangle of RadioButton.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.Rectangle">
       
        <p>Class represents rectangle.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Rectangle.getWidth">
       
        <p>Gets width of rectangle.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Rectangle.getHeight">
       
        <p>Get height of rectangle.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Rectangle.getLLX">
       
        <p>Gets X-coordinate of lower - left corner.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Rectangle.setLLX(double)">
       
        <p>Sets X-coordinate of lower - left corner.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Rectangle.getLLY">
       
        <p>Gets Y - coordinate of lower-left corner.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Rectangle.setLLY(double)">
       
        <p>Sets Y - coordinate of lower-left corner.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Rectangle.getURX">
       
        <p>Gets X - coordinate of upper-right corner.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Rectangle.setURX(double)">
       
        <p>Sets X - coordinate of upper-right corner.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Rectangle.getURY">
       
        <p>Gets Y - coordinate of upper-right corner.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Rectangle.setURY(double)">
       
        <p>Sets Y - coordinate of upper-right corner.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Rectangle.toRect">
       
        <p>Converts rectangle to instance of System.Drawing.Rectangle. Floating-point positions and size are truncated.</p> @return Result of conversion.
      
    </member>
    <member name="M:com.aspose.pdf.Rectangle.fromRect(java.awt.Rectangle)">
       
        <p>Initializes new rectangle from given instance of System.Drawing.Rectangle.</p> @return New rectangle. @param src Source rectangle which position and size will be set to new rectangle.
      
      <param name="java.awt.Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Rectangle.toArray(ITrailerable)">
      <param name="ITrailerable"/>
    </member>
    <member name="M:com.aspose.pdf.Rectangle.toString">
       
        <p>Gets rectangle string representation.</p> @return String has format llx,lly,urx,ury.
      
    </member>
    <member name="M:com.aspose.pdf.Rectangle.parse(String)">
       
        <p>Try to parse string and extract from it rectangle components llx, lly, urx, ury.</p> @return Rectangle object. @param value String to parse.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Rectangle.getEmpty">
       
        <p>Gets empty rectangle</p> @return new Rectangle object
      
    </member>
    <member name="M:com.aspose.pdf.Rectangle.getTrivial">
       
        <p>Initializes trivial rectangle i.e. rectangle with zero position and size.</p> @return new Rectangle object
      
    </member>
    <member name="M:com.aspose.pdf.Rectangle.isTrivial">
       
        <p>Checks if rectangle is trivial i.e. has zero size and position.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Rectangle.isEmpty">
       
        <p>Checks if rectangle is empty.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Rectangle.isPoint">
       
        <p>Checks if rectangle is point i.e. LLX is equal URX and LLY is equal URY.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Rectangle.equals(Object)">
       
        <p>Check if rectangles are equal i.e. have same position and sizes.</p> @return True if rectangles are equals, false otherwise. @param other Rectangle which will be compared.
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.Rectangle.nearEquals(Rectangle,double)">
       
        <p>Check if rectangles are near equal i.e. have near same (up to delta) position and sizes.</p> @return True if rectangles are equals, false otherwise. @param other Rectangle which will be compared. @param delta Value of comparation tollerance.
      
      <param name="Rectangle"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Rectangle.hashCode">Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by {@link java.util.HashMap}. &lt;p&gt; The general contract of {@code hashCode} is: &lt;ul&gt; &lt;li&gt;Whenever it is invoked on the same object more than once during an execution of a Java application, the {@code hashCode} method must consistently return the same integer, provided no information used in {@code equals} comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. &lt;li&gt;If two objects are equal according to the {@code equals(Object)} method, then calling the {@code hashCode} method on each of the two objects must produce the same integer result. &lt;li&gt;It is &lt;em&gt;not&lt;/em&gt; required that if two objects are unequal according to the {@link java.lang.Object#equals(java.lang.Object)} method, then calling the {@code hashCode} method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. &lt;/ul&gt; &lt;p&gt; As much as is reasonably practical, the hashCode method defined by class {@code Object} does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java&lt;span style="font-size:70%"&gt;&lt;sup&gt;TM&lt;/sup&gt;&lt;/span&gt; programming language.) @return a hash code value for this object. @see java.lang.Object#equals(java.lang.Object) @see java.lang.System#identityHashCode</member>
    <member name="M:com.aspose.pdf.Rectangle.intersect(Rectangle)">
       
        <p>Intersects to rectangles.</p> @return Intersection of rectangles; null if rectangles are not intersected. @param otherRect Rectangle to which this recatangle be intersected.
      
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Rectangle.join(Rectangle)">
       
        <p>Joins rectangles.</p> @return Described rectangle. @param otherRect Rectangle to which this rectangle be joined.
      
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Rectangle._Intersect(Rectangle)">
       
        <p>Intersects rectangles. Obsolete method. Please use Intersect instead.</p> @param otherRect Rectangle object
      
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Rectangle.isIntersect(Rectangle)">
       
        <p>Determines whether this rectangle intersects with other rectangle.</p> @return True if this rectangle intersects with specified rectangle. Otherwise false. @param otherRect Intersection will be tested with specified rectangle.
      
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Rectangle.contains(Point)">
       
        <p>Determinces whether given point is inside of the rectangle.</p> @return True if point is inside of the recatngle. @param point Point to check.
      
      <param name="Point"/>
    </member>
    <member name="M:com.aspose.pdf.Rectangle.center">
       
        <p>Returncs coordinates of center of the rectangle.</p> @return Point which is center of the rectangle.
      
    </member>
    <member name="M:com.aspose.pdf.Rectangle.isInclude(Rectangle,double)">
       
        <p>Checks that this rectangle includes whole another rectangle. I.e. whole another rectangle is inside this rectangle. Difference with IsIntersect method is that IsIntersect will true for partly intersected rectangles but IsInclude will false.</p> @return True if this rectangle includes whole specified rectangle. Otherwise false. @param otherRect Rectangle for which including is checked. @param rotationAngle Rotation angle of another rectangle in radians.
      
      <param name="Rectangle"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Rectangle.rotate(int)">
       
        <p>Rotate rectangle by the specified angle.</p> @param angle Angle of rotation. Member of Rotation enumeration. @see Rotation
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Rectangle.rotateAngle(int)">
       
        <p>Rotate rectangle by the specified angle.</p> @param angle Angle of rotation in degrees between 0 and 360.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Rectangle.compareTo(Object)">
       
        <p>CompareTo</p> @param arg0 Object for compare @return int value
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.Rectangle.clone">
       
        <p>Clones the Rectangle object.</p> @return Clone object.
      
    </member>
    <member name="M:com.aspose.pdf.Rectangle.deepClone">
       
        <p>Clones the Rectangle object.</p> @return Clone object.
      
    </member>
    <member name="M:com.aspose.pdf.Rectangle.toPoints">
       
        <p>Converts rectangle into array of points ("QuadPoints").</p> @return Array of points.
      
    </member>
    <member name="M:com.aspose.pdf.Rectangle.#ctor(double,double,double,double)">
       
        <p>Constructor of Rectangle.</p> @param llx X of lower left corner. @param lly Y of lower left corner. @param urx X of upper right corner. @param ury Y of upper right corner.
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.Redaction">
      For internal usage only @author User
    </member>
    <member name="M:com.aspose.pdf.Redaction.redactText(Page,Rectangle)">
      Removes text which is in requried rectangle @param page Page object @param rect Rectangle object
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Redaction.redactText(XForm,Rectangle)">
      Removes text which is in requried rectangle @param form XForm object @param rect Rectangle object
      <param name="XForm"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Redaction._RedactText(Page,Rectangle)">
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Redaction.redactImages(Page,Rectangle,java.awt.Color)">
      Removes images (or redacts contents of the image is image is partially covered by rectangle) @param page Page object @param rect Rectangle object @param color Color object
      <param name="Page"/>
      <param name="Rectangle"/>
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.Redaction.redactAnnotations(Page,Rectangle)">
      Removes Annotation which is in required rectangle @param page Page object @param rect Rectangle object
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Redaction.getRedactionAppearance(Rectangle,java.awt.Color)">get Redaction Appearance @param rect Rectangle object @param color Color object @return {@code List&lt;Operator&gt; object} 
      <param name="Rectangle"/>
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.Redaction.getredactArea(Page,Rectangle,java.awt.Color)">
      get redact Area @param page Page object @param rect Rectangle object @param color Color object
      <param name="Page"/>
      <param name="Rectangle"/>
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.Redaction.redactArea(Page,Rectangle,java.awt.Color)">
      For Internal Usage only get redact Area @param page Page object @param rect Rectangle object @param color Color object
      <param name="Page"/>
      <param name="Rectangle"/>
      <param name="java.awt.Color"/>
    </member>
    <member name="T:com.aspose.pdf.RedactionAnnotation">
       
        <p>Represents Redact annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.RedactionAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor object to process the annotation.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.RedactionAnnotation.getQuadPoint">
       
        <p>An array of 8xN numbers specifying the coordinates of content region that is intended to be removed.</p> @return array of point
      
    </member>
    <member name="M:com.aspose.pdf.RedactionAnnotation.setQuadPoint(Point[])">
       
        <p>An array of 8xN numbers specifying the coordinates of content region that is intended to be removed.</p> @param value array of point
      
      <param name="Point[]"/>
    </member>
    <member name="M:com.aspose.pdf.RedactionAnnotation.setQuadPoints(Point[])">
       
        <p>Sets an array of points specifying the coordinates of n quadrilaterals. Each quadrilateral encompasses a word or group of contiguous words in the text underlying the annotation.</p> @param value array of Point value
      
      <param name="Point[]"/>
    </member>
    <member name="M:com.aspose.pdf.RedactionAnnotation.getQuadPoints">
       
        <p>Gets an array of points specifying the coordinates of n quadrilaterals. Each quadrilateral encompasses a word or group of contiguous words in the text underlying the annotation.</p> @return array of Point value
      
    </member>
    <member name="M:com.aspose.pdf.RedactionAnnotation.getDefaultAppearance">
       
        <p>Gets or sets the default appearance string to be used in formatting the text.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.RedactionAnnotation.setDefaultAppearance(String)">
       
        <p>Gets or sets the default appearance string to be used in formatting the text.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.RedactionAnnotation.getFillColor">
       
        <p>Gets color to fill annotation.</p> @return color value
      
    </member>
    <member name="M:com.aspose.pdf.RedactionAnnotation.setFillColor(Color)">
       
        <p>Sets color to fill annotation.</p> @param value color value
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.RedactionAnnotation.getBorderColor">
       
        <p>Gets color of border which is drawn when redaction is not active.</p> @return Color value
      
    </member>
    <member name="M:com.aspose.pdf.RedactionAnnotation.setBorderColor(Color)">
       
        <p>Sets color of border which is drawn when redaction is not active.</p> @param value Color value
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.RedactionAnnotation.getOverlayText">
       
        <p>Text to print on redact annotation.</p> @return string value
      
    </member>
    <member name="M:com.aspose.pdf.RedactionAnnotation.setOverlayText(String)">
       
        <p>Text to print on redact annotation.</p> @param value string object
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.RedactionAnnotation.isRepeat">
       
        <p>If true overlay text will be repated on the annotation.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.RedactionAnnotation.setRepeat(boolean)">
       
        <p>If true overlay text will be repated on the annotation.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.RedactionAnnotation.getTextAlignment">
       
        <p>Gets alignment of Overlay Text.</p> @return HorizontalAlignment value @see HorizontalAlignment
      
    </member>
    <member name="M:com.aspose.pdf.RedactionAnnotation.setTextAlignment(int)">
       
        <p>Sets alignment of Overlay Text.</p> @param value HorizontalAlignment value @see HorizontalAlignment
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.RedactionAnnotation.flatten">
       
        <p>Flattens annotation i.e. removes annotation and adds its content</p> 
      
    </member>
    <member name="M:com.aspose.pdf.RedactionAnnotation.redact">
       
        <p>Flattens annotation and redacts page contents (i.e. removes text and image content under redacted annotation)</p> 
      
    </member>
    <member name="M:com.aspose.pdf.RedactionAnnotation.redactExact">
       
        <p>Flattens annotation and redacts page contents (i.e. removes text and image content exactly under redacted annotation)</p> 
      
    </member>
    <member name="M:com.aspose.pdf.RedactionAnnotation.getAnnotationType">
       
        <p>Gets type of annotation.</p> @return AnnotationType element @see AnnotationType
      
    </member>
    <member name="M:com.aspose.pdf.RedactionAnnotation.setFontSize(double)">&lt;p&gt; Font size of text to print on redact annotation. &lt;/p&gt; &lt;p&gt; Default value is 10. @param fontSize int value 
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.RedactionAnnotation.#ctor(IDocument)">
       
        <p>Constructor for RedactionAnnotation. For using in Generator.</p> @param document Document where new annotation will be created.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.RedactionAnnotation.#ctor(Page,Rectangle)">
       
        <p>Constructor for RedactAnnotation.</p> @param page Page where annotation will be placed. @param rect Annotation position on the page.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.RenderingOptions">
       
        <p>Represents rendering options</p> 
      
    </member>
    <member name="M:com.aspose.pdf.RenderingOptions.getBarcodeOptimization">
       
        <p>Gets barcode optimization mode.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.RenderingOptions.setBarcodeOptimization(boolean)">
       
        <p>Sets barcode optimization mode.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.RenderingOptions.getOptimizeDimensions">
       
        <p>Gets or sets optimize dimensions mode.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.RenderingOptions.setOptimizeDimensions(boolean)">
       
        <p>Gets or sets optimize dimensions mode.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.RenderingOptions.getSystemFontsNativeRendering">
       
        <p>Gets a mode where system fonts are rendered natively</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.RenderingOptions.setSystemFontsNativeRendering(boolean)">
       
        <p>Sets a mode where system fonts are rendered natively</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.RenderingOptions.getUseNewImagingEngine">
       
        <p>Gets a flag determines whether new imaging engine is used or not.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.RenderingOptions.setUseNewImagingEngine(boolean)">
       
        <p>Sets a flag determines whether new imaging engine is used or not.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.RenderingOptions.getWidthExtraUnits">
       
        <p>Gets or sets a value used to increase or decrease the width of rectangle for AppendRectangle operator.</p> @return float value
      
    </member>
    <member name="M:com.aspose.pdf.RenderingOptions.setWidthExtraUnits(float)">
       
        <p>Gets or sets a value used to increase or decrease the width of rectangle for AppendRectangle operator.</p> @param value float value
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.RenderingOptions.getConvertFontsToUnicodeTTF">
       
        <p>Indicates that all fonts will be converted to TTF unicode versions. That is useful for compatibility reasons and to optimize font usage, cause every new TTF font will have not all the symbols from source font, but only symbols which are used in text.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.RenderingOptions.setConvertFontsToUnicodeTTF(boolean)">
       
        <p>Indicates that all fonts will be converted to TTF unicode versions. That is useful for compatibility reasons and to optimize font usage, cause every new TTF font will have not all the symbols from source font, but only symbols which are used in text.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.RenderingOptions.getUseFontHinting">
       
        <p>Usage of this flag turn on font hinting mechanism. Font hinting is the use of mathematical instructions to adjust the display of an outline font. In some cases turning this flag on may solve problems with text legibility. At current moment usage of this flag could give effect only for TTF fonts, if these fonts are used in source document.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.RenderingOptions.setUseFontHinting(boolean)">
       
        <p>Usage of this flag turn on font hinting mechanism. Font hinting is the use of mathematical instructions to adjust the display of an outline font. In some cases turning this flag on may solve problems with text legibility. At current moment usage of this flag could give effect only for TTF fonts, if these fonts are used in source document.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.RenderingOptions.getScaleImagesToFitPageWidth">
       
        <p>Gets or sets a values used to scale all images on the page to fit page's width.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.RenderingOptions.setScaleImagesToFitPageWidth(boolean)">
       
        <p>Gets or sets a values used to scale all images on the page to fit page's width.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.RenderingOptions.getInterpolationHighQuality">
       
        <p>Gets or sets high quality mode for interpolation.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.RenderingOptions.setInterpolationHighQuality(boolean)">
       
        <p>Gets or sets high quality mode for interpolation.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.RenderingOptions.getMaxFontsCacheSize">
       
        <p>Maximum count of fonts in fonts cache. Default value is 10.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.RenderingOptions.setMaxFontsCacheSize(int)">
       
        <p>Maximum count of fonts in fonts cache. Default value is 10.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.RenderingOptions.getMaxSymbolsCacheSize">
       
        <p>Maximum count of symbols in symbol cache. Default value is 100.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.RenderingOptions.setMaxSymbolsCacheSize(int)">
       
        <p>Maximum count of symbols in symbol cache. Default value is 100.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.RenderingOptions.getDefaultFontName">
       
        <p>Gets/sets the default name of font used to substitute of missing fonts.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.RenderingOptions.setDefaultFontName(String)">
       
        <p>Gets/sets the default name of font used to substitute of missing fonts.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.RenderingOptions.#ctor">
       
        <p>Initializes new instance of the {@code RenderingOptions} object.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.RenderModeType">
       
        <p>Enum RenderModeType: set of render mode types</p> 
      
    </member>
    <member name="F:com.aspose.pdf.RenderModeType.Solid">
       
        <p>The "Solid" render mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.RenderModeType.SolidWireframe">
       
        <p>The "SolidWireFrame" render mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.RenderModeType.Transparent">
       
        <p>The "Transparent" render mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.RenderModeType.TransparentWareFrame">
       
        <p>The "TransparentWareFrame" render mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.RenderModeType.BoundingBox">
       
        <p>The "BoundingBox" render mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.RenderModeType.TransparentBoundingBox">
       
        <p>The "TransparentBoundingBox" render mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.RenderModeType.TransparentBoundingBoxOutline">
       
        <p>The "TransparentBoundingBoxOutline" render mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.RenderModeType.Wireframe">
       
        <p>The "WireFrame" render mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.RenderModeType.ShadedWireframe">
       
        <p>The "ShadedWireFrame" render mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.RenderModeType.Vertices">
       
        <p>The "Vertices" render mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.RenderModeType.ShadedVertices">
       
        <p>The "ShadedVertices" render mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.RenderModeType.Illustration">
       
        <p>The "Illustration" render mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.RenderModeType.SolidOutline">
       
        <p>The "SolidOutline" render mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.RenderModeType.ShadedIllustration">
       
        <p>The "ShadedIllustration" render mode.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Rendition">
       
        <p>Class which describes rendition object of RendtionAnnotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Rendition.getName">
       
        <p>Text string specifying the name of the rendition for use in a user interface and for name tree lookup by JavaScript actions.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.Rendition.setName(String)">
       
        <p>Text string specifying the name of the rendition for use in a user interface and for name tree lookup by JavaScript actions.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Rendition.getRenditionType">
       
        <p>Gets rendition type.</p> @return RenditionType element
      
    </member>
    <member name="T:com.aspose.pdf.RenditionAction">
       
        <p>A rendition action that controls the playing of multimedia content.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.RenditionAction.getRendition">
       
        <p>Gets or sets rendition associated with the action.</p> @return Rendition instance
      
    </member>
    <member name="M:com.aspose.pdf.RenditionAction.getRenditionOperation">
       
        <p>The operation to perform when the action is triggered.</p> @return RenditionOperation element
      
    </member>
    <member name="M:com.aspose.pdf.RenditionAction.setRenditionOperation(int)">
       
        <p>The operation to perform when the action is triggered.</p> @param value RenditionOperation element
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.RenditionAction.getJavaScript">
       
        <p>Gets or sets JavaScript code associated with the action.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.RenditionAction.setJavaScript(String)">
       
        <p>Gets or sets JavaScript code associated with the action.</p> @param value Staring value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.RenditionAction.#ctor(String,ScreenAnnotation)">
       
        <p>Creates the rendition action.</p> @param mediaFile The path to multimedia file. @param screen The ScreenAnnotation object the RenditionAction will be bound with.
      
      <param name="String"/>
      <param name="ScreenAnnotation"/>
    </member>
    <member name="T:com.aspose.pdf.RenditionOperation">
       
        <p>The operation to perform when the action is triggered.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.RenditionOperation.PlayStop">
       
        <p>If no rendition is associated with the annotation, play the specified rendition, associating it with the annotation. If a rendition is already associated with the annotation, it shall be stopped, and the new rendition shall be associated with the annotation.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.RenditionOperation.Stop">
       
        <p>Stop any rendition being played in association with the annotation.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.RenditionOperation.Pause">
       
        <p>Pause any rendition being played in association with the annotation.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.RenditionOperation.Resume">
       
        <p>Resume any rendition being played in association with the annotation.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.RenditionOperation.PlayResume">
       
        <p>Play the specified rendition, associating it with the annotation. If a rendition is already associated with the annotation, resume the rendition if it is paused.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.RenditionOperation.Undefined">
       
        <p>Operation not defined.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.RenditionType">
       
        <p>Enumeration describes possible types of Rendition.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.RenditionType.Media">
       
        <p>Media rendition object.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.RenditionType.Selector">
       
        <p>Selector rendition object.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.RenditionType.Undefined">
       
        <p>Rendition type is undefined.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.ReplyType">
       
        <p>Enumerates the kinds of the relationships (the “reply type”) between the annotation and one specified by InReplyTo.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ReplyType.Undefined">
       
        <p>Undefined relationship.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ReplyType.Reply">
       
        <p>The annotation is considered a reply to the annotation specified by InReplyTo. Viewer applications should not display replies to an annotation individually but together in the form of threaded comments.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ReplyType.Group">
       
        <p>The annotation is grouped with the annotation specified by InReplyTo.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.ResourceLoadingEventArgs">
       
        <p>Represents resource loading event arguments.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ResourceLoadingEventArgs.getUri">
       
        <p>Gets the URI.</p> @return Value: The URI.
      
    </member>
    <member name="M:com.aspose.pdf.ResourceLoadingEventArgs.#ctor(String)">
       
        <p>Initializes a new instance of the {@code ResourceLoadingEventArgs} class.</p> @param uri The URI path.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.ResourceLoadingResult">
       
        <p>Represents resource loading result object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ResourceLoadingResult.getData">
       
        <p>Gets the resource data.</p> @return Array of bytes
      
    </member>
    <member name="M:com.aspose.pdf.ResourceLoadingResult.getEncoding">
       
        <p>Gets the encoding.</p> @return Charset object
      
    </member>
    <member name="M:com.aspose.pdf.ResourceLoadingResult.#ctor(byte[])">
       
        <p>Initializes a new instance of the {@code ResourceLoadingResult} class.</p> @param data The resource data.
      
      <param name="byte[]"/>
    </member>
    <member name="M:com.aspose.pdf.ResourceLoadingResult.#ctor(byte[],java.nio.charset.Charset)">
       
        <p>Initializes a new instance of the {@code ResourceLoadingResult} class.</p> @param data The resource data. @param encoding The encoding.
      
      <param name="byte[]"/>
      <param name="java.nio.charset.Charset"/>
    </member>
    <member name="T:com.aspose.pdf.Resources">
       
        <p>Class representing page resources.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Resources.clearImagesCache"/>
    <member name="M:com.aspose.pdf.Resources.getForms">
       
        <p>Gets {@code Forms} forms collection</p> @return XFormCollection object
      
    </member>
    <member name="M:com.aspose.pdf.Resources.getImages">
       
        <p>Gets {@code Images} images collection</p> @return XImageCollection object
      
    </member>
    <member name="M:com.aspose.pdf.Resources.getFonts(boolean)">
       
        <p>Returns fonts collection. If resources don't contain fonts entry it will be created in depends of CreateIfAbsent flag.</p> @return Fonts collection. @param createIfAbsent If this flag is true then fonts will be created if this entry is absent.
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Resources.getFonts">
       
        <p>Gets {@code Fonts} resources collection</p> @return FontCollection object
      
    </member>
    <member name="M:com.aspose.pdf.Resources.getResourcesFor(Form)">
       
        <p>Gets resources for</p> @param form Form object @return Resources object
      
      <param name="Form"/>
    </member>
    <member name="M:com.aspose.pdf.Resources.isCommonResource">
       
        <p>True if this resources are common i.e. are shared for several pages (placed in pages dictionary or in every page as object reference) Manipulation with common resources must be performed very carefully for example deleting object form common resources in one page may cause errors on other pages if deleted object was used for other pages.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Resources.setResourceDictionary(IResourceDictionary)">
      For internal usage only! @param resourceDictionary inernal instance
      <param name="IResourceDictionary"/>
    </member>
    <member name="T:com.aspose.pdf.ReturnAction">
      Enum represented a program workflow action in case of invoking the {@code IWarningCallback.Warning(WarningInfo)} method.
    </member>
    <member name="T:com.aspose.pdf.RgbToDeviceGrayConversionStrategy">
       
        <p>Represents rgb to device gray color spaces conversion strategy.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.RgbToDeviceGrayConversionStrategy.convert(Page)">
       
        <p>Converts the page of document.</p> @param page The page of document.
      
      <param name="Page"/>
    </member>
    <member name="T:com.aspose.pdf.RichMediaAnnotation">
       
        <p>Class describes RichMediaAnnotation which allows embed video/audio data into PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.RichMediaAnnotation.getAnnotationType">
       
        <p>Gets type of annotation.</p> @return AnnotationType element @see AnnotationType
      
    </member>
    <member name="M:com.aspose.pdf.RichMediaAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor for this annotation.</p> @param visitor Visitor instance.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.RichMediaAnnotation.getCustomPlayer">
       
        <p>Sets or gets custom flash player to play video/audio data.</p> @return InputStream object
      
    </member>
    <member name="M:com.aspose.pdf.RichMediaAnnotation.setCustomPlayer(InputStream)">
       
        <p>Sets or gets custom flash player to play video/audio data.</p> @param value InputStream object
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.RichMediaAnnotation.getCustomFlashVariables">
       
        <p>Sets or gets flash variables which passed to player.</p> @return String object
      
    </member>
    <member name="M:com.aspose.pdf.RichMediaAnnotation.setCustomFlashVariables(String)">
       
        <p>Sets or gets flash variables which passed to player.</p> @param value String object
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.RichMediaAnnotation.addCustomData(String,InputStream)">
       
        <p>Add custom named data (for example required for flash script).</p> @param name Name of the data. @param data Data.
      
      <param name="String"/>
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.RichMediaAnnotation.setContent(String,InputStream)">
       
        <p>Set content stream.</p> @param fileName Name of the stream. @param audio Data stream.
      
      <param name="String"/>
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.RichMediaAnnotation.getContent">
       
        <p>Data of the Rich Media content.</p> @return InputStream object
      
    </member>
    <member name="M:com.aspose.pdf.RichMediaAnnotation.getType">
       
        <p>Gets or sets type of content. Possible values: Audio, Video.</p> @return ContentType value @see ContentType
      
    </member>
    <member name="M:com.aspose.pdf.RichMediaAnnotation.setType(int)">
       
        <p>Gets or sets type of content. Possible values: Audio, Video.</p> @param value ContentType element
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.RichMediaAnnotation.getActivateOn">
       
        <p>Event which activates application.</p> @return ActivationEvent element
      
    </member>
    <member name="M:com.aspose.pdf.RichMediaAnnotation.setActivateOn(int)">
       
        <p>Event which activates application.</p> @param value ActivationEvent element
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.RichMediaAnnotation.setPoster(InputStream)">
       
        <p>Set poster of the annotation.</p> @param imageStream Stream containing poster image.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.RichMediaAnnotation.update">
       
        <p>Updates data with specified parameters.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.RichMediaAnnotation.#ctor(Page,Rectangle)">
       
        <p>Initializes RichMediaAnnotation.</p> @param page Page where object being created. @param rect Rectangle coordinates.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.RichMediaAnnotation.ContentType">
       
        <p>Type of the multimedia.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.RichMediaAnnotation.ContentType.Audio">
       
        <p>Audio data.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.RichMediaAnnotation.ContentType.Video">
       
        <p>Video data.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.RichMediaAnnotation.ContentType.Unknown">
       
        <p>Unknown/unsupported type of data.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.RichMediaAnnotation.ActivationEvent">
       
        <p>Event which activates annotation.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.RichMediaAnnotation.ActivationEvent.Click">
       
        <p>Activated by click on the annotation.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.RichMediaAnnotation.ActivationEvent.PageOpen">
       
        <p>Activated on page open.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.RichMediaAnnotation.ActivationEvent.PageVisible">
       
        <p>Activated when page becames visible.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.RichTextBoxField">
       
        <p>Class describes rich text editor component.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.RichTextBoxField.getStyle">
       
        <p>Gets default style string of the rich text field.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.RichTextBoxField.setStyle(String)">
       
        <p>Sets default style string of the rich text field.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.RichTextBoxField.getRichTextValue">
       
        <p>Gets rich text value.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.RichTextBoxField.setRichTextValue(String)">
       
        <p>Sets rich text value.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.RichTextBoxField.getFormattedValue">
       
        <p>Gets formatted rich text value with markup.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.RichTextBoxField.setFormattedValue(String)">
       
        <p>Sets formatted rich text value with markup.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.RichTextBoxField.getValue">
       
        <p>Get Value of RichTextField.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.RichTextBoxField.setValue(String)">
       
        <p>Set Value of RichTextField.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.RichTextBoxField.getJustify">
       
        <p>Gets justification of the rich text box.</p> @return Justification value @see Justification
      
    </member>
    <member name="M:com.aspose.pdf.RichTextBoxField.setJustify(int)">
       
        <p>Sets justification of the rich text box.</p> @param value Justification value @see Justification
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.RichTextBoxField.#ctor(Page,java.awt.Rectangle)">
       
        <p>Constructor for Rich Text Box field.</p> @param page Page where field will be placed. @param rect java.awt.Rectangle Position of the field on the page.
      
      <param name="Page"/>
      <param name="java.awt.Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.RichTextBoxField.#ctor(Page,Rectangle)">
       
        <p>Constructor for Rich Text Box field.</p> @param page Page where field will be placed. @param rect com.aspose.pdf.Rectangle Position of the field on the page.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.RootElement">
       
        <p>Root structure element.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Rotation">
       
        <p>Enumeration of possible rotation values.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Rotation.None">
       
        <p>Non-rotated.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Rotation.on90">
       
        <p>Rotated on 90 degrees clockwise.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Rotation.on180">
       
        <p>Rotated on 180 degrees.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Rotation.on270">
       
        <p>Rotated on 270 degrees clockwise.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Row">
       
        <p>Represents a row of the table.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Row.deepClone">
       
        <p>Clone the row.</p> @return The cloned object
      
    </member>
    <member name="M:com.aspose.pdf.Row.getBackgroundColor">
       
        <p>Gets the background color.</p> @return Color value
      
    </member>
    <member name="M:com.aspose.pdf.Row.setBackgroundColor(Color)">
       
        <p>Sets the background color.</p> @param value Color value
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.Row.getBorder">
       
        <p>Gets the border.</p> @return BorderInfo value
      
    </member>
    <member name="M:com.aspose.pdf.Row.setBorder(BorderInfo)">
       
        <p>Sets the border.</p> @param value BorderInfo value
      
      <param name="BorderInfo"/>
    </member>
    <member name="M:com.aspose.pdf.Row.getCells">
       
        <p>Gets the getCells() of the row.</p> @return getCells() value
      
    </member>
    <member name="M:com.aspose.pdf.Row.setCells(Cells)">
       
        <p>Sets the getCells() of the row.</p> @param value getCells() value
      
      <param name="Cells"/>
    </member>
    <member name="M:com.aspose.pdf.Row.getDefaultCellBorder">
       
        <p>Gets default cell border;</p> @return BorderInfo value
      
    </member>
    <member name="M:com.aspose.pdf.Row.setDefaultCellBorder(BorderInfo)">
       
        <p>Sets default cell border;</p> @param value BorderInfo value
      
      <param name="BorderInfo"/>
    </member>
    <member name="M:com.aspose.pdf.Row.getMinRowHeight">
       
        <p>Gets height for row;</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Row.setMinRowHeight(double)">
       
        <p>Sets height for row;</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Row.getFixedRowHeight">
       
        <p>Gets fixed row height - row may have fixed height;</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Row.setFixedRowHeight(double)">
       
        <p>Sets fixed row height - row may have fixed height;</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Row.isInNewPage">
       
        <p>Gets fixed row is in new page - page with this property should be printed to next page Default false;</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Row.setInNewPage(boolean)">
       
        <p>Sets is row can be broken between two pages</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Row.isRowBroken">
       
        <p>Gets is row can be broken between two pages</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Row.setRowBroken(boolean)">
       
        <p>Sets is row can be broken between two pages</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Row.getDefaultCellTextState">
       
        <p>Gets or sets default text state for row getCells()</p> Gets default text state for row getCells() @return TextState value
      
    </member>
    <member name="M:com.aspose.pdf.Row.setDefaultCellTextState(TextState)">
       
        <p>Sets default text state for row getCells()</p> @param value TextState value
      
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.Row.getDefaultCellPadding">
       
        <p>Gets default margin for row getCells()</p> @return MarginInfo value
      
    </member>
    <member name="M:com.aspose.pdf.Row.setDefaultCellPadding(MarginInfo)">
       
        <p>Sets default margin for row getCells()</p> @param value MarginInfo value
      
      <param name="MarginInfo"/>
    </member>
    <member name="M:com.aspose.pdf.Row.getVerticalAlignment">
       
        <p>Gets or sets the vertical alignment.</p> @return VerticalAlignment element @see VerticalAlignment
      
    </member>
    <member name="M:com.aspose.pdf.Row.setVerticalAlignment(int)">
       
        <p>Gets or sets the vertical alignment.</p> @param value VerticalAlignment element @see VerticalAlignment
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Row.#ctor">
       
        <p>Initializes a new instance of the Row class.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Rows">
       
        <p>Represents a rows collection of table.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Rows.add">
       
        <p>Add row to collection.</p> @return The new row
      
    </member>
    <member name="M:com.aspose.pdf.Rows.add(Row)">
       
        <p>Add row to cellection.</p> @param row The new row.
      
      <param name="Row"/>
    </member>
    <member name="M:com.aspose.pdf.Rows.indexOf(Row)">
       
        <p>Returns index of row in collection.</p> @return The row index @param row The existing row.
      
      <param name="Row"/>
    </member>
    <member name="M:com.aspose.pdf.Rows.remove(Row)">
       
        <p>Remove row from collection.</p> @param row The existing row.
      
      <param name="Row"/>
    </member>
    <member name="M:com.aspose.pdf.Rows.removeAt(int)">
       
        <p>Remove row at position from collection.</p> @param index The collection index.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Rows.removeRange(int,int)">
       
        <p>Remove row set from collection.</p> @param index The collection index. @param count The rows count.
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Rows.iterator_Rename_Namesake">
      ReservedForInternalUse For internal usage only. @return IEnumerator object
    </member>
    <member name="M:com.aspose.pdf.Rows.iterator">
       
        <p>Gets collection's enumerator.</p> @return Iterator of Row instances
      
    </member>
    <member name="M:com.aspose.pdf.Rows.getCount">
      / * 
        <p>/ * Dispose / *</p> /
      
    </member>
    <member name="M:com.aspose.pdf.Rows.get_Item(int)">
       
        <p>Gets row.</p> @return Row object @param index The row index.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Rows.set_Item(int,Row)">
       
        <p>Sets row.</p> @param index The row index. @param value Row object
      
      <param name="int"/>
      <param name="Row"/>
    </member>
    <member name="T:com.aspose.pdf.SaveFormat">
       
        <p>Specifies format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveFormat.Pdf">
       
        <p>means saving without change of format, i.e. as PDF use it please instead of 'SaveFormat.None', that is obsolete one</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveFormat.None">
       
        <p>means saving without change of format, i.e. as PDF It's obsolete one and will be deleted eventually, please use instead 'SaveFormat.Pdf'</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveFormat.Doc">
       
        <p>means saving in DOC format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveFormat.Xps">
       
        <p>means saving in XPS format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveFormat.Html">
       
        <p>means saving in HTML format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveFormat.Xml">
       
        <p>means saving in XML format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveFormat.TeX">
       
        <p>means saving in TEX format i.e. format suitable for Latex text editor</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveFormat.DocX">
       
        <p>means saving in DOCX format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveFormat.Svg">
       
        <p>means saving in SVG format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveFormat.MobiXml">
       
        <p>means saving in MobiXML format(special format of e-books)</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveFormat.Excel">
       
        <p>means saving in MsExcel format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveFormat.Epub">
       
        <p>means saving in EPUB format(special format of e-books)</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveFormat.Plugin">
       
        <p>means saving with the aid of a plugin</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveFormat.Pptx">
       
        <p>means saving in MHT(WebArchieve) ///</p>  
        <p>Convet document to Mht format. This code was experimental one used during works related to https://pdf.aspose.com/jira/browse/PDFNEWNET-36340 is not going on production, cause there are cross-browsers problems with created MHT - so, it can be used in the future if finally it will be necessary to create MHT itself. PDFNEWNET-36340 was resolved with usage of DataSceme URLs(embedding data into HTML http://en.wikipedia.org/wiki/Data_URI_scheme) So, this conversion really not used right now.</p>  
        <p>means saving in PPTX format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveFormat.Aps">
       
        <p>Saving as APS XML file.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveFormat.PdfXml">
       
        <p>Internal PDF document structure in XML format</p> 
      
    </member>
    <member name="T:com.aspose.pdf.SaveOptions">
       
        <p>SaveOptions type hold level of abstraction on individual save options</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.getWarningHandler">
       
        <p>Callback to handle any warnings generated. The WarningHandler returns ReturnAction enum item specifying either Continue or Abort. Continue is the default action and the Save operation continues, however the user may also return Abort in which case the Save operation should cease.</p> @return IWarningCallback value
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.setWarningHandler(WarningCallback)">
       
        <p>Callback to handle any warnings generated. The WarningHandler returns ReturnAction enum item specifying either Continue or Abort. Continue is the default action and the Save operation continues, however the user may also return Abort in which case the Save operation should cease.</p> @param value IWarningCallback value
      
      <param name="WarningCallback"/>
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.getSaveFormat">
       
        <p>Format of data save.</p> @return SaveFormat value @see SaveFormat
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.isCloseResponse">
       
        <p>Gets boolean value which indicates will Response object be closed after document saved into response.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.setCloseResponse(boolean)">
       
        <p>Sets boolean value which indicates will Response object be closed after document saved into response.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="T:com.aspose.pdf.SaveOptions.HtmlBorderLineType">
       
        <p>Represents line types that can be used in result document for drawing borders or another lines</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveOptions.HtmlBorderLineType.None">
       
        <p>No line will be shown</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveOptions.HtmlBorderLineType.Dotted">
       
        <p>dotted line will be shown</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveOptions.HtmlBorderLineType.Dashed">
       
        <p>dashed line will be shown</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveOptions.HtmlBorderLineType.Solid">
       
        <p>solid line will be shown</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveOptions.HtmlBorderLineType.Double">
       
        <p>double line will be shown</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveOptions.HtmlBorderLineType.Groove">
       
        <p>grove line will be shown</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveOptions.HtmlBorderLineType.Ridge">
       
        <p>ridhe line will be shown</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveOptions.HtmlBorderLineType.Inset">
       
        <p>inset line will be shown</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveOptions.HtmlBorderLineType.Outset">
       
        <p>outset line will be shown</p> 
      
    </member>
    <member name="T:com.aspose.pdf.SaveOptions.BorderPartStyle">
       
        <p>Represents information of one part of border(top, botom, left side or right side)</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.BorderPartStyle.getWidthInPoints">
       
        <p>Represents border line's width in points. Must be number greater then zero.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.BorderPartStyle.setWidthInPoints(int)">
       
        <p>Represents border line's width in points. Must be number greater then zero.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.BorderPartStyle.getColor">
       
        <p>Represents border line's line color</p> @return java.awt.Color instance
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.BorderPartStyle.setColor(java.awt.Color)">
       
        <p>Represents border line's line color</p> @param color java.awt.Color instance
      
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.BorderPartStyle.getLineType">
       
        <p>Represents border line's type - f.e. Dashed or Solid</p> @return HtmlBorderLineType element @see HtmlBorderLineType
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.BorderPartStyle.setLineType(int)">
       
        <p>Represents border line's type - f.e. Dashed or Solid</p> @param lineType HtmlBorderLineType element @see HtmlBorderLineType
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.SaveOptions.BorderInfo">
       
        <p>Instance of this class represents information about border That can be drown on some result document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.BorderInfo.getTopStyleIfAny">
       
        <p>Represents top part(if any) of border</p> @return BorderPartStyle instance
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.BorderInfo.setTopStyleIfAny(BorderPartStyle)">
       
        <p>Represents top part(if any) of border</p> @param topStyleIfAny BorderPartStyle instance
      
      <param name="BorderPartStyle"/>
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.BorderInfo.getLeftStyleIfAny">
       
        <p>Represents left part(if any) of border</p> @return BorderPartStyle instance
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.BorderInfo.setLeftStyleIfAny(BorderPartStyle)">
       
        <p>Represents left part(if any) of border</p> @param leftStyleIfAny BorderPartStyle instance
      
      <param name="BorderPartStyle"/>
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.BorderInfo.getRightStyleIfAny">
       
        <p>Represents right part(if any) of border</p> @return BorderPartStyle instance
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.BorderInfo.setRightStyleIfAny(BorderPartStyle)">
       
        <p>Represents right part(if any) of border</p> @param rightStyleIfAny BorderPartStyle instance
      
      <param name="BorderPartStyle"/>
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.BorderInfo.getBottomStyleIfAny">
       
        <p>Represents bottom part(if any) of border</p> @return BorderPartStyle instance
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.BorderInfo.setBottomStyleIfAny(BorderPartStyle)">
       
        <p>Represents bottom part(if any) of border</p> @param bottomStyleIfAny BorderPartStyle instance
      
      <param name="BorderPartStyle"/>
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.BorderInfo.#ctor">
       
        <p>Creates instance of BorderInfo class</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.BorderInfo.#ctor(BorderPartStyle)">
       
        <p>Creates instance of BorderInfo class and initializes all elements of border(Top, Left, Right, Bottom) with attributes copied from supplied border style</p> @param commonStyle style of border parts that will be used for all elements of border(left, right, top, bottom)
      
      <param name="BorderPartStyle"/>
    </member>
    <member name="T:com.aspose.pdf.SaveOptions.MarginInfo">
       
        <p>Instance of this class represents information about page margin That can be drown on some result document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.MarginInfo.getTopMarginIfAny">
       
        <p>Represents top page margin(if any)</p> @return MarginPartStyle instance
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.MarginInfo.setTopMarginIfAny(MarginPartStyle)">
       
        <p>Represents top page margin(if any)</p> @param topMarginIfAny MarginPartStyle instance
      
      <param name="MarginPartStyle"/>
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.MarginInfo.getRightMarginIfAny">
       
        <p>Represents right page margin(if any)</p> @return MarginPartStyle instance
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.MarginInfo.setRightMarginIfAny(MarginPartStyle)">
       
        <p>Represents right page margin(if any)</p> @param rightMarginIfAny MarginPartStyle instance
      
      <param name="MarginPartStyle"/>
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.MarginInfo.getBottomMarginIfAny">
       
        <p>Represents bottom page margin(if any)</p> @return MarginPartStyle instance
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.MarginInfo.setBottomMarginIfAny(MarginPartStyle)">
       
        <p>Represents bottom page margin(if any)</p> @param bottomMarginIfAny MarginPartStyle instance
      
      <param name="MarginPartStyle"/>
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.MarginInfo.getLeftMarginIfAny">
       
        <p>Represents left page margin(if any)</p> @return MarginPartStyle instance
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.MarginInfo.setLeftMarginIfAny(MarginPartStyle)">
       
        <p>Represents left page margin(if any)</p> @param leftMarginIfAny MarginPartStyle instance
      
      <param name="MarginPartStyle"/>
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.MarginInfo.#ctor">
       
        <p>Creates instance of MarginInfo</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.MarginInfo.#ctor(MarginPartStyle)">
       
        <p>Creates instance of MarginInfo class and initializes all elements of page margin(Top, Left, Right, Bottom) with attributes copied from supplied margin style</p> @param commonMargin style of margin parts that will be used for all elements of margin(left, right, top, bottom)
      
      <param name="MarginPartStyle"/>
    </member>
    <member name="T:com.aspose.pdf.SaveOptions.MarginPartStyle">
       
        <p>Represents information of one part of margin(top, botom, left side or right side)</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.MarginPartStyle.isAuto">
       
        <p>Gets or sets a value indicating whether this instance is auto.</p>Value: {@code true} if this instance is auto; otherwise, {@code false}. @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.MarginPartStyle.setAuto(boolean)">
       
        <p>Gets or sets a value indicating whether this instance is auto.</p>Value: {@code true} if this instance is auto; otherwise, {@code false}. @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.MarginPartStyle.getValueInPoints">
       
        <p>Represents margin in points. Must be number greater then zero.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.MarginPartStyle.setValueInPoints(int)">
       
        <p>Represents margin in points. Must be number greater then zero.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.MarginPartStyle.#ctor(int)">
       
        <p>Creates instance of MarginPartStyle class and set its value in points</p> @param valueInPoints Integer value in points
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.MarginPartStyle.#ctor(boolean)">
       
        <p>Creates instance of MarginPartStyle class and initializes its value in points</p> @param isAuto Mark margin auto
      
      <param name="boolean"/>
    </member>
    <member name="T:com.aspose.pdf.SaveOptions.NodeLevelResourceType">
       
        <p>enumerates possible types of saved external resources</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveOptions.NodeLevelResourceType.Image">
       
        <p>Means that supplied resource is image</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveOptions.NodeLevelResourceType.Font">
       
        <p>Means that supplied resource is font</p> 
      
    </member>
    <member name="T:com.aspose.pdf.SaveOptions.ResourceSavingInfo">
       
        <p>This class represents set of data that related to external resource file's saving that occures during conversion of PDF to some other format (f.e. HTML)</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.ResourceSavingInfo.getResourceType">
       
        <p>Set by converter. Supposed file name that goes from converter to code of custom method Can be use in custom code to decide how to process or where save that file</p> @return NodeLevelResourceType element @see NodeLevelResourceType
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.ResourceSavingInfo.getSupposedFileName">
       
        <p>Set by converter. Supposed file name that goes from converter to code of custom method Can be use in custom code to decide how to process or where save that file</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.ResourceSavingInfo.getContentStream">
       
        <p>Set by converter. Represents binary content of saved file.</p> @return array of bytes
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.ResourceSavingInfo.isCustomProcessingCancelled">
       
        <p>this flag must set to "true" in custom code if for some reasons proposed file should be processed not with custom code but with converter's code itself in standard for converter way. So, it' setting set to true means that custom code did not process referenced file and converter must handle it itself (in both sences - for saving somewhere and for naming in referencing file).</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.ResourceSavingInfo.setCustomProcessingCancelled(boolean)">
       
        <p>this flag must set to "true" in custom code if for some reasons proposed file should be processed not with custom code but with converter's code itself in standard for converter way. So, it' setting set to true means that custom code did not process referenced file and converter must handle it itself (in both senses - for saving somewhere and for naming in referencing file).</p> @param customProcessingCancelled boolean value
      
      <param name="boolean"/>
    </member>
    <member name="T:com.aspose.pdf.ScalingMode">
       
        <p>The type of scaling that shall be used.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ScalingMode.Proportional">
       
        <p>Scale the icon to fit the width or height of the annotation rectangle while maintaining the icon's original aspect ratio.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ScalingMode.Anamorphic">
       
        <p>Scale the icon to fill the annotation rectangle exactly.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.ScalingReason">
       
        <p>The circumstances under which the icon shall be scaled inside the annotation rectangle.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ScalingReason.Always">
       
        <p>Always scale.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ScalingReason.IconIsBigger">
       
        <p>BScale only when the icon is bigger than the annotation rectangle.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ScalingReason.IconIsSmaller">
       
        <p>Scale only when the icon is smaller than the annotation rectangle.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ScalingReason.Never">
       
        <p>Never scale.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.ScreenAnnotation">
       
        <p>A screen annotation that specifies a region of a page upon which media clips may be played.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ScreenAnnotation.accept(AnnotationSelector)">
       
        <p>Represent accept method</p> @param visitor AnnotationSelector object
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.ScreenAnnotation.getTitle">
       
        <p>Gets the title of the screen annotation.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.ScreenAnnotation.setTitle(String)">
       
        <p>Sets the title of the screen annotation.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.ScreenAnnotation.getAction">
       
        <p>Gets an action to be performed when the annotation is activated.</p> @return PdfAction object
      
    </member>
    <member name="M:com.aspose.pdf.ScreenAnnotation.setAction(PdfAction)">
       
        <p>Sets an action to be performed when the annotation is activated.</p> @param value PdfAction object
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.ScreenAnnotation.getAnnotationType">
       
        <p>Gets type of annotation.</p> @return AnnotationType element @see AnnotationType
      
    </member>
    <member name="M:com.aspose.pdf.ScreenAnnotation.#ctor(Page,Rectangle,String)">
       
        <p>Creates new Screen annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page. @param mediaFile The path to multimedia file.
      
      <param name="Page"/>
      <param name="Rectangle"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.SelectorRendition">
       
        <p>Class describes selector rendition.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SelectorRendition.getRenditions">
       
        <p>Gets array of renditions.</p> @return array of Renditions
      
    </member>
    <member name="T:com.aspose.pdf.Signature">
       
        <p>An abstract class which represents signature object in the pdf document. Signatures are fields with values of signature objects, the last contain data which is used to verify the document validity.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Signature.getCustomAppearance">
       
        <p>Gets/sets the custom appearance.</p> @return SignatureCustomAppearance instance
      
    </member>
    <member name="M:com.aspose.pdf.Signature.setCustomAppearance(SignatureCustomAppearance)">
       
        <p>Gets/sets the custom appearance.</p> @param value SignatureCustomAppearance instance
      
      <param name="SignatureCustomAppearance"/>
    </member>
    <member name="M:com.aspose.pdf.Signature.getAuthority">
       
        <p>The name of the person or authority signing the document.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.Signature.setAuthority(String)">
       
        <p>Sets the name of the person or authority signing the document.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Signature.getDate">
       
        <p>Gets the time of signing.</p> @return Date value
      
    </member>
    <member name="M:com.aspose.pdf.Signature.setDate(java.util.Date)">
       
        <p>Set the time of signing.</p> @param value Date object
      
      <param name="java.util.Date"/>
    </member>
    <member name="M:com.aspose.pdf.Signature.getLocation">
       
        <p>Gets the CPU host name or physical location of the signing.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.Signature.setLocation(String)">
       
        <p>Sets the CPU host name or physical location of the signing.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Signature.getReason">
       
        <p>Gets the reason for the signing, such as (I agreeРІР‚В¦).</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.Signature.setReason(String)">
       
        <p>Sets the reason for the signing, such as (I agreeРІР‚В¦).</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Signature.getContactInfo">
       
        <p>Get information provided by the signer to enable a recipient to contact the signer to verify the signature, e.g. a phone number.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.Signature.setContactInfo(String)">
       
        <p>Set information provided by the signer to enable a recipient to contact the signer to verify the signature, e.g. a phone number.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Signature.getByteRange">
       
        <p>Get array of pairs of integers (starting byte offset, length in bytes) that shall describe the exact byte range for the digest calculation.</p> @return array of int value
      
    </member>
    <member name="M:com.aspose.pdf.Signature.getTimestampSettings">
      Gets timestamp settings. @return TimestampSettings
    </member>
    <member name="M:com.aspose.pdf.Signature.setTimestampSettings(TimestampSettings)">
      Sets timestamp settings. @param value TimestampSettings
      <param name="TimestampSettings"/>
    </member>
    <member name="M:com.aspose.pdf.Signature.getOcspSettings">
       
        <p>Gets/sets ocsp settings.</p> @return OcspSettings instance
      
    </member>
    <member name="M:com.aspose.pdf.Signature.setOcspSettings(OcspSettings)">
       
        <p>Gets/sets ocsp settings.</p> @param value OcspSettings instance
      
      <param name="OcspSettings"/>
    </member>
    <member name="M:com.aspose.pdf.Signature.getUseLtv">
       
        <p>Gets/sets ltv validation flag.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Signature.setUseLtv(boolean)">
       
        <p>Gets/sets ltv validation flag.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Signature.getImageInternal">
       
        <p>Gets image stream.</p> For internal only usage @return Stream object
      
    </member>
    <member name="M:com.aspose.pdf.Signature.setImage(InputStream)">
       
        <p>Sets image stream.</p> @param _signatureAppearanceStream Steam object
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.Signature.setImageInternal(Stream)">
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.Signature.getSignatureReferences">get Signature References @return {@code java.util.List&lt;SignatureReference&gt; object}</member>
    <member name="M:com.aspose.pdf.Signature.verify">
       
        <p>Verify the document regarding this signature and return true if document is valid or otherwise false.</p> @return true if document is valid.
      
    </member>
    <member name="M:com.aspose.pdf.Signature.isShowProperties">
       
        <p>Force to show/hide signature properties. In case ShowProperties is true signature field has predefined format of appearance (strings to represent): ------------------------------------------- Digitally signed by {certificate subject} Date: {signature.Date} Reason: {signature.Reason} Location: {signature.Location} ------------------------------------------- where {X} is placeholder for X value. Also signature can have image, in this case listed strings are placed over image. ShowProperties is true by default.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Signature.setShowProperties(boolean)">
       
        <p>Force to show/hide signature properties. In case ShowProperties is true signature field has predefined format of appearance (strings to represent): ------------------------------------------- Digitally signed by {certificate subject} Date: {signature.Date} Reason: {signature.Reason} Location: {signature.Location} ------------------------------------------- where {X} is placeholder for X value. Also signature can have image, in this case listed strings are placed over image. ShowProperties is true by default.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Signature.close">
       
        <p>Destructor which closes temporary streams (if necessary).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Signature.#ctor">
       
        <p>Inititalizes new instance of the {@code Signature} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Signature.#ctor(String,String)">
       
        <p>Inititalizes new instance of the {@code Signature} class.</p> @param pfx Pfx file which contains certificate for signing. @param password Password to get access to the private key in the certificate.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Signature.#ctor(InputStream,String)">
       
        <p>Inititalizes new instance of the {@code Signature} class.</p> @param pfx Stream with certificate data organized as pfx. @param password Password to get access to the private key in the certificate.
      
      <param name="InputStream"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.SignatureCustomAppearance">
       
        <p>An abstract class which represents signature custon appearance object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SignatureCustomAppearance.getFontFamilyName">
       
        <p>Gets/sets font family name. It should be existed in the document. Default value: Arial.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.SignatureCustomAppearance.setFontFamilyName(String)">
       
        <p>Gets/sets font family name. It should be existed in the document. Default value: Arial.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.SignatureCustomAppearance.getFontSize">
       
        <p>Gets/sets font size. Default value: 10.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.SignatureCustomAppearance.getForegroundColor">
       
        <p>Gets/sets foreground color (color of text). Default value: Blue.</p> @return com.aspose.pdf.Color instance
      
    </member>
    <member name="M:com.aspose.pdf.SignatureCustomAppearance.setForegroundColor(Color)">
       
        <p>Gets/sets foreground color (color of text). Default value: Blue.</p> @param value com.aspose.pdf.Color instance
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.SignatureCustomAppearance.getBackgroundColor">
       
        <p>Gets/sets background color. Default value: Transparent.</p> @return com.aspose.pdf.Color instance
      
    </member>
    <member name="M:com.aspose.pdf.SignatureCustomAppearance.setBackgroundColor(Color)">
       
        <p>Gets/sets background color. Default value: Transparent.</p> @param value com.aspose.pdf.Color instance
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.SignatureCustomAppearance.setFontSize(double)">
       
        <p>Gets/sets font size. Default value: 10.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.SignatureCustomAppearance.isShowContactInfo">
       
        <p>Gets/sets contact info visibility. Default value: true.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.SignatureCustomAppearance.setShowContactInfo(boolean)">
       
        <p>Gets/sets contact info visibility. Default value: true.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.SignatureCustomAppearance.isShowReason">
       
        <p>Gets/sets reason visibility. Default value: true.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.SignatureCustomAppearance.setShowReason(boolean)">
       
        <p>Gets/sets reason visibility. Default value: true.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.SignatureCustomAppearance.isShowLocation">
       
        <p>Gets/sets location visibility. Default value: true.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.SignatureCustomAppearance.setShowLocation(boolean)">
       
        <p>Gets/sets location visibility. Default value: true.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.SignatureCustomAppearance.getContactInfoLabel">
       
        <p>Gets/sets contact info label. Default value: "Contact".</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.SignatureCustomAppearance.setContactInfoLabel(String)">
       
        <p>Gets/sets contact info label. Default value: "Contact".</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.SignatureCustomAppearance.getReasonLabel">
       
        <p>Gets/sets reason label. Default value: "Reason".</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.SignatureCustomAppearance.setReasonLabel(String)">
       
        <p>Gets/sets reason label. Default value: "Reason".</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.SignatureCustomAppearance.getLocationLabel">
       
        <p>Gets/sets location label. Default value: "Location".</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.SignatureCustomAppearance.setLocationLabel(String)">
       
        <p>Gets/sets location label. Default value: "Location".</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.SignatureCustomAppearance.getDigitalSignedLabel">
       
        <p>Gets/sets digital signed label. Default value: "Digitally signed by".</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.SignatureCustomAppearance.setDigitalSignedLabel(String)">
       
        <p>Gets/sets digital signed label. Default value: "Digitally signed by".</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.SignatureCustomAppearance.getDateSignedAtLabel">
       
        <p>Gets/sets date signed label. Default value: "Date".</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.SignatureCustomAppearance.setDateSignedAtLabel(String)">
       
        <p>Gets/sets date signed label. Default value: "Date".</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.SignatureCustomAppearance.getDateTimeLocalFormat">
       
        <p>Gets/sets datetime local format. Default value: "yyyy.MM.dd HH:mm:ss zzz".</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.SignatureCustomAppearance.setDateTimeLocalFormat(String)">
       
        <p>Gets/sets datetime local format. Default value: "yyyy.MM.dd HH:mm:ss zzz".</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.SignatureCustomAppearance.getDateTimeFormat">
       
        <p>Gets/sets datetime format. Default value: "yyyy.MM.dd HH:mm:ss".</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.SignatureCustomAppearance.setDateTimeFormat(String)">
       
        <p>Gets/sets datetime format. Default value: "yyyy.MM.dd HH:mm:ss".</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.SignatureCustomAppearance.getCulture">
       
        <p>Gets/sets culture info value. Default value: InvariantCulture.</p> @return Locale value
      
    </member>
    <member name="M:com.aspose.pdf.SignatureCustomAppearance.setCulture(java.util.Locale)">
       
        <p>Gets/sets culture info value. Default value: InvariantCulture.</p> @param value Locale value
      
      <param name="java.util.Locale"/>
    </member>
    <member name="M:com.aspose.pdf.SignatureCustomAppearance.getRotation">
       
        <p>Gets or sets signature rotation.</p> @return Rotation element
      
    </member>
    <member name="M:com.aspose.pdf.SignatureCustomAppearance.setRotation(int)">
       
        <p>Gets or sets signature rotation.</p> @param value Rotation element
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.SignatureCustomAppearance.#ctor">
       
        <p>Inititalizes new instance of the {@link SignatureCustomAppearance} class.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.SignatureField">
       
        <p>Represents signature form field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SignatureField.getSignature">
       
        <p>Gets signature object. This object contains signature data regarding public-key cryptographic standards. Classes {@code PKCS1}, {@code PKCS7} and {@code PKCS7Detached} represent all supported types of signature objects.</p> @return Signature object
      
    </member>
    <member name="M:com.aspose.pdf.SignatureField.sign(Signature,InputStream,String)">
       
        <p>Signs the document using this signature field.</p> @param signature Signature object, see {@code PKCS1}, {@code PKCS7}, {@code PKCS7Detached}. @param pfx Stream with certificate. @param pass Password to access private in the {@code pfx}.
      
      <param name="Signature"/>
      <param name="InputStream"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.SignatureField.sign(Signature)">
       
        <p>Sign the document using this signature field.</p> @param signature Signature object, see {@code PKCS1}, {@code PKCS7} and {@code PKCS7Detached}.
      
      <param name="Signature"/>
    </member>
    <member name="M:com.aspose.pdf.SignatureField.clear">
       
        <p>Removes signature object from field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SignatureField.extractImage(ImageType)">
       
        <p>Extracts signature's image as encoded stream.</p> @param format Image format for encoding. @return If image was successfully found than returns encodedstream object; otherwise, null.
      
      <param name="ImageType"/>
    </member>
    <member name="M:com.aspose.pdf.SignatureField.extractImage">
       
        <p>Extracts signature's image as jpeg encoded stream.</p> @return If image was successfully found than returns jpeg encoded stream object; otherwise, null.
      
    </member>
    <member name="M:com.aspose.pdf.SignatureField.extractCertificate">
       
        <p>Extracts the single X.509 certificate in DER format as a stream.</p> @return If certificate was found returns X.509 single certificate; otherwise, null.
      
    </member>
    <member name="M:com.aspose.pdf.SignatureField.#ctor(Page,Rectangle)">
       
        <p>Initializes new instance of the {@code SignatureField} class.</p> @param page Page where signature field should be placed. @param rect Position and size of signature field.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.SignatureField.#ctor(IDocument,Rectangle)">
       
        <p>Initializes new instance of the {@code SignatureField} class.</p> @param doc Page where signature field should be placed. @param rect Position and size of signature field.
      
      <param name="IDocument"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.SoundAnnotation">
       
        <p>Represents a sound annotation that contains sound recorded from the computer's microphone or imported from a file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SoundAnnotation.getIcon">
       
        <p>Gets an icon to be used in displaying the annotation.</p> @return SoundIcon value @see SoundIcon
      
    </member>
    <member name="M:com.aspose.pdf.SoundAnnotation.setIcon(int)">
       
        <p>Sets an icon to be used in displaying the annotation.</p> @param value SoundIcon value @see SoundIcon
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.SoundAnnotation.getSoundData">
       
        <p>Gets a sound object defining the sound to be played when the annotation is activated.</p> @return SoundData value
      
    </member>
    <member name="M:com.aspose.pdf.SoundAnnotation.getAnnotationType">
       
        <p>Gets type of annotation.</p> @return AnnotationType value @see AnnotationType
      
    </member>
    <member name="M:com.aspose.pdf.SoundAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor object to process the annotation.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.SoundAnnotation.#ctor(Page,Rectangle,String)">
       
        <p>Creates new Sound annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page. @param soundFile A sound file defining the sound to be played when the annotation is activated.
      
      <param name="Page"/>
      <param name="Rectangle"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.SoundAnnotation.#ctor(Page,Rectangle,String,SoundSampleData)">
       
        <p>Creates new Sound annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page. @param soundFile A sound file defining the sound to be played when the annotation is activated. @param soundSampleData A sound sample data contains extra of sound parameters such as sampling rate, bits per sample and so on.
      
      <param name="Page"/>
      <param name="Rectangle"/>
      <param name="String"/>
      <param name="SoundSampleData"/>
    </member>
    <member name="T:com.aspose.pdf.SoundData">
       
        <p>Represents a sound data defining the sound to be played when the annotation is activated.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SoundData.getRate">
       
        <p>Gets the sampling rate, in samples per second.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.SoundData.setRate(int)">
       
        <p>Sets the sampling rate, in samples per second.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.SoundData.getChannels">
       
        <p>Gets the number of sound channels.</p> @return The number of sound channels.
      
    </member>
    <member name="M:com.aspose.pdf.SoundData.setChannels(int)">
       
        <p>Sets the number of sound channels.</p> @param value The number of sound channels.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.SoundData.getBits">
       
        <p>Gets the number of bits per sample value per channel.</p> @return int value number of bits
      
    </member>
    <member name="M:com.aspose.pdf.SoundData.setBits(int)">
       
        <p>Sets the number of bits per sample value per channel.</p> @param value number of bits
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.SoundData.getContents">
       
        <p>Gets stream of the sound to be played when the annotation is activated.</p> @return InputStream value
      
    </member>
    <member name="M:com.aspose.pdf.SoundData.getContentsInternal">
       
        <p>Gets stream of the sound to be played when the annotation is activated.</p> @return Stream value
      
    </member>
    <member name="M:com.aspose.pdf.SoundData.getEncoding">
       
        <p>Gets the encoding format for the sample data.</p> @return SoundEncoding value @see SoundEncoding
      
    </member>
    <member name="M:com.aspose.pdf.SoundData.setEncoding(int)">
       
        <p>Sets the encoding format for the sample data.</p> @param value SoundEncoding value @see SoundEncoding
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.SoundEncoding">
       
        <p>The encoding format for the sample data.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SoundEncoding.Raw">
       
        <p>Unspecified or unsigned values in the range 0 to 2^bits − 1.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SoundEncoding.Signed">
       
        <p>Twos-complement values.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SoundEncoding.MuLaw">
       
        <p>μ-law–encoded samples.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SoundEncoding.ALaw">
       
        <p>A-law–encoded samples.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.SoundIcon">
       
        <p>Enumerates the icons to be used in displaying the annotation.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SoundIcon.Speaker">
       
        <p>Speaker icon.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SoundIcon.Mic">
       
        <p>Microphone icon.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.SoundIconConverter">
      Represents SoundIconConverter class
    </member>
    <member name="M:com.aspose.pdf.SoundIconConverter.toString(int)">
      String name for SoundIcon element @param value SoundIcon element @return String name @see SoundIcon
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.SoundIconConverter.toEnum(String)">
      String SoundIcon element for its string name @param value String name @return StampIcon element @see SoundIcon
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.SoundSampleData">
       
        <p>Represents additional entries specific to a sound object (Section 9.2 PDF1-7)</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SoundSampleData.getSamplingRate">
       
        <p>Gets the sampling rate.</p> @return long value
      
    </member>
    <member name="M:com.aspose.pdf.SoundSampleData.setSamplingRate(long)">
       
        <p>Sets the sampling rate.</p> @param value long value
      
      <param name="long"/>
    </member>
    <member name="M:com.aspose.pdf.SoundSampleData.getNumberOfSoundChannels">
       
        <p>Gets the number of sound channels.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.SoundSampleData.setNumberOfSoundChannels(int)">
       
        <p>Sets the number of sound channels.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.SoundSampleData.getBitsPerChannel">
       
        <p>Gets the number of bits per sample value per channel.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.SoundSampleData.setBitsPerChannel(int)">
       
        <p>Sets the number of bits per sample value per channel.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.SoundSampleData.getEncodingFormat_Rename_Namesake">
       
        <p>Gets the encoding format.</p> @return SoundSampleDataEncodingFormat value @see SoundSampleDataEncodingFormat
      
    </member>
    <member name="M:com.aspose.pdf.SoundSampleData.setEncodingFormat(int)">
       
        <p>Sets the encoding format.</p> @param value SoundSampleDataEncodingFormat value @see SoundSampleDataEncodingFormat
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.SoundSampleData.#ctor(long)">
       
        <p>Initializes new sound sample data.</p> @param samplingRate The sampling rate.
      
      <param name="long"/>
    </member>
    <member name="M:com.aspose.pdf.SoundSampleData.#ctor(long,int)">
       
        <p>Initializes new sound sample data.</p> @param samplingRate The sampling rate. @param numberOfSoundChannels The number of sound channels.
      
      <param name="long"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.SoundSampleData.#ctor(long,int,int)">
       
        <p>Initializes new sound sample data.</p> @param samplingRate The sampling rate. @param numberOfSoundChannels The number of sound channels. @param bitsPerChannel The number of bits per sample value per channel.
      
      <param name="long"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.SoundSampleData.#ctor(long,int,int,int)">
       
        <p>Initializes new sound sample data.</p> @param samplingRate The sampling rate. @param numberOfSoundChannels The number of sound channels. @param bitsPerChannel The number of bits per sample value per channel. @param soundSampleDataEncodingFormat The encoding format for the sample data.
      
      <param name="long"/>
      <param name="int"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="F:com.aspose.pdf.SoundSampleData.DEFAULT_SAMPLING_RATE">
       
        <p>Default value for SamplingRate.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SoundSampleData.DEFAULT_OF_SOUND_CHANNELS">
       
        <p>Default value for Channels parameter.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SoundSampleData.DEFAULT_OF_BITS_PER_CHANNEL">
       
        <p>Default value for BitsPerchannel parameter.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SoundSampleData.DEFAULT_ENCODING_FORMAT">
       
        <p>Default value for encoding format.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.SoundSampleDataEncodingFormat">
       
        <p>The encoding format for the sound sample data.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SoundSampleDataEncodingFormat.Raw">
       
        <p>Unspecified or unsigned values in the range 0 to 2B − 1.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SoundSampleDataEncodingFormat.Signed">
       
        <p>Twos-complement values.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SoundSampleDataEncodingFormat.muLaw">
       
        <p>μ-law–encoded samples.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SoundSampleDataEncodingFormat.ALaw">
       
        <p>A-law–encoded samples.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.SquareAnnotation">
       
        <p>Class representing square annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SquareAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor to process annotation.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.SquareAnnotation.getAnnotationType">
       
        <p>Gets type of annotation.</p> @return AnnotationType element @see AnnotationType
      
    </member>
    <member name="M:com.aspose.pdf.SquareAnnotation.#ctor(IDocument)">
       
        <p>Constructor for using with Generator.</p> @param document Documennt where annotation will be created.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.SquareAnnotation.#ctor(Page,Rectangle)">
       
        <p>Creates new Square annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.SquigglyAnnotation">
       
        <p>Represents the squiggly annotation that appears as a jagged underline in the text of a document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SquigglyAnnotation.getAnnotationType">
       
        <p>Gets type of annotation.</p> @return AnnotationType element @see AnnotationType
      
    </member>
    <member name="M:com.aspose.pdf.SquigglyAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor object to process the annotation.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.SquigglyAnnotation.#ctor(Page,Rectangle)">
       
        <p>Creates new Squiggly annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.Stamp">
       
        <p>An abstract class for various kinds of stamps which come as descendants.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.isBackground">
       
        <p>Gets a bool value that indicates the content is stamped as background. If the value is true, the stamp content is layed at the bottom. By defalt, the value is false, the stamp content is layed at the top.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setBackground(boolean)">
       
        <p>Sets a bool value that indicates the content is stamped as background. If the value is true, the stamp content is layed at the bottom. By default, the value is false, the stamp content is layed at the top.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getOpacity">
       
        <p>Gets a value to indicate the stamp opacity. The value is from 0.0 to 1.0. By default the value is 1.0.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setOpacity(double)">
       
        <p>Sets a value to indicate the stamp opacity. The value is from 0.0 to 1.0. By default the value is 1.0.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getOutlineOpacity">
       
        <p>Gets a value to indicate the stamp outline opacity. The value is from 0.0 to 1.0. By default the value is 1.0.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setOutlineOpacity(double)">
       
        <p>Sets a value to indicate the stamp outline opacity. The value is from 0.0 to 1.0. By default the value is 1.0.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getOutlineWidth">
       
        <p>Gets a value of the stamp outline width. By default the value is 1.0.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setOutlineWidth(double)">
       
        <p>Sets a value of the stamp outline width. By default the value is 1.0.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getRotate">
       
        <p>Gets the rotation of stamp content according {@code Rotation} values. Note. This property is for set angles which are multiples of 90 degrees (0, 90, 180, 270 degrees). To set arbitrary angle use RotateAngle property. If angle set by ArbitraryAngle is not multiple of 90 then Rotate property returns Rotation.None.</p> @return Rotation value @see Rotation
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setRotate(int)">
       
        <p>Sets the rotation of stamp content according {@code Rotation} values. Note. This property is for set angles which are multiples of 90 degrees (0, 90, 180, 270 degrees). To set arbitrary angle use RotateAngle property. If angle set by ArbitraryAngle is not multiple of 90 then Rotate property returns Rotation.None.</p> @param value int value @see Rotation
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getXIndent">
       
        <p>Get horizontal stamp coordinate, starting from the left.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setXIndent(double)">
       
        <p>Set horizontal stamp coordinate, starting from the left.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getYIndent">
       
        <p>Get vertical stamp coordinate, starting from the bottom.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setYIndent(double)">
       
        <p>Set vertical stamp coordinate, starting from the bottom.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getHorizontalAlignment">
       
        <p>Gets horizontal alignment of stamp on the page.</p> @return HorizontalAlignment value @see HorizontalAlignment
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setHorizontalAlignment(int)">
       
        <p>Sets Horizontal alignment of stamp on the page.</p> @param value HorizontalAlignment value @see HorizontalAlignment
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getVerticalAlignment">
       
        <p>Gets vertical alignment of stamp on page.</p> @return VerticalAlignment value @see VerticalAlignment
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setVerticalAlignment(int)">
       
        <p>Sets vertical alignment of stamp on page.</p> @param value VerticalAlignment value @see VerticalAlignment
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getLeftMargin">
       
        <p>Gets left margin of stamp.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setLeftMargin(double)">
       
        <p>Sets left margin of stamp.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getRightMargin">
       
        <p>Gets right margin of stamp.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setRightMargin(double)">
       
        <p>Sets right margin of stamp.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getBottomMargin">
       
        <p>Gets bottom margin of stamp.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setBottomMargin(double)">
       
        <p>Sets bottom margin of stamp.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getTopMargin">
       
        <p>Get top margin of stamp.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setTopMargin(double)">
       
        <p>Sets top margin of stamp.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getZoomX">
       
        <p>Gets horizontal zooming factor of the stamp. Allows to scale stamp horizontally.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setZoomX(double)">
       
        <p>Sets horizontal zooming factor of the stamp. Allows to scale stamp horizontally.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getWidth">
       
        <p>Gets desired width of the stamp on the page.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setWidth(double)">
       
        <p>Sets desired width of the stamp on the page.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getHeight">
       
        <p>Gets desired height of the stamp on the page.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setHeight(double)">
       
        <p>Sets desired height of the stamp on the page.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getZoomY">
       
        <p>Gets vertical zooming factor of the stamp. Allows to scale stamp vertically.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setZoomY(double)">
       
        <p>Sets vertical zooming factor of the stamp. Allows to scale stamp vertically.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getZoom">
       
        <p>Gets zooming factor of the stamp. Allows to scale stamp. Please note that pair of properties ZoomX and ZoomY allows to set zoom factor for every axe separately. Setting of this property changes both ZoomX and ZoomY properties. If ZoomX and ZoomY are different then Zoom property returns ZoomX value.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setZoom(double)">
       
        <p>Gets zooming factor of the stamp. Allows to scale stamp. Please note that pair of properties ZoomX and ZoomY allows to set zoom factor for every axe separately. Setting of this property changes both ZoomX and ZoomY properties. If ZoomX and ZoomY are different then Zoom property returns ZoomX value.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getRotateAngle">
       
        <p>Gets rotate angle of stamp in degrees. This property allows to set arbitrary rotate angle.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setRotateAngle(double)">
       
        <p>Sets rotate angle of stamp in degrees. This property allows to set arbitrary rotate angle.</p> @param value rotate angle
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.put(Page)">
       
        <p>Adds stamp on the page.</p> @param page The page to add stamp.
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.setStampId(int)">
       
        <p>Sets stamp Id.</p> @param value New value of Stamp ID.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getStampId">
       
        <p>Gets stamp ID.</p> @return Identifier of the stamp.
      
    </member>
    <member name="T:com.aspose.pdf.StampAnnotation">&lt;p&gt; Represents rubber stamp annotation. This type of annotation displays text or graphics intended to look as if they were stamped on the page with a rubber stamp. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; Next code snippet demonstrates how to add 2 stamps into the first pdf document page. Input document comes from inFile and changes are saved into the outFile. The first stamp has icon NotForPublicRelease and the second comes with image from rubber.jpg. Document document = new Document(inFile); StampAnnotation stamp1 = new StampAnnotation(StampIcon.NotForPublicRelease); stamp1.setRect ( new Rectangle(100, 100, 120, 120)) document.getPages().get(1).getAnnotations().add(stamp1); StampAnnotation stamp2 = new StampAnnotation(new FileStream("rubber.jpg", FileMode.Open)); stamp2.setRect ( new Rectangle(200, 200, 220, 220)) document.getPages().get(1).getAnnotations().add(stamp2); document.save(outFile); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.StampAnnotation.getIcon">
       
        <p>Gets icon for rubber stamp.</p> @return StampIcon value
      
    </member>
    <member name="M:com.aspose.pdf.StampAnnotation.setIcon(int)">
       
        <p>Sets icon for rubber stamp.</p> @param value StampIcon value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.StampAnnotation.getAnnotationType">
       
        <p>Gets type of annotation.</p> @return AnnotationType element @see AnnotationType
      
    </member>
    <member name="M:com.aspose.pdf.StampAnnotation.accept(AnnotationSelector)">
       
        <p>Acepts {@code AnnotationSelector} visitor when browsing annotation collection.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.StampAnnotation.getImage">
       
        <p>Gets image of the annotation.</p> @return InputStream object
      
    </member>
    <member name="M:com.aspose.pdf.StampAnnotation.setImage(InputStream)">
       
        <p>Sets image of the annotation.</p> @param value InputStream object
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.StampAnnotation.#ctor(IDocument)">
       
        <p>Constructor</p> @param document Document where annotation will be created.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.StampAnnotation.#ctor(Page,Rectangle)">
       
        <p>Creates new Stamp annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.StampIcon">
       
        <p>Enumerates the icons to be used in displaying the annotation.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.StampIcon.Draft">
       
        <p>Draft stamp icon.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.StampIcon.Approved">
       
        <p>Approved stamp icon.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.StampIcon.Experimental">
       
        <p>Experimental stamp icon.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.StampIcon.NotApproved">
       
        <p>Stamp icon is not approved.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.StampIcon.AsIs">
       
        <p>Stamp icon "as is".</p> 
      
    </member>
    <member name="F:com.aspose.pdf.StampIcon.Expired">
       
        <p>Stamp icon is expired.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.StampIcon.NotForPublicRelease">
       
        <p>Not for public release.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.StampIcon.Confidential">
       
        <p>Confidential.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.StampIcon.Final">
       
        <p>Final stamp.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.StampIcon.Sold">
       
        <p>Sold stamp.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.StampIcon.Departmental">
       
        <p>Departamental.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.StampIcon.ForComment">
       
        <p>For comment.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.StampIcon.ForPublicRelease">
       
        <p>For public release.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.StampIcon.TopSecret">
       
        <p>Top secret.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.StampIconConverter">
      Represents StampIconConverter class
    </member>
    <member name="M:com.aspose.pdf.StampIconConverter.toString(int)">
      String name for StampIcon element @param value StampIcon element @return String name @see StampIcon
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.StampIconConverter.toEnum(String)">
      String StampIcon element for its string name @param value String name @return StampIcon element @see StampIcon
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.StrikeOutAnnotation">
       
        <p>Represents a strikeout annotation that appears as a strikeout in the text of the document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.StrikeOutAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor object to process the annotation.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.StrikeOutAnnotation.getAnnotationType">
       
        <p>Gets type of annotation.</p> @return AnnotationType element @see AnnotationType
      
    </member>
    <member name="M:com.aspose.pdf.StrikeOutAnnotation.#ctor(Page,Rectangle)">
       
        <p>Creates new StrikeOut annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.StructElement">
       
        <p>General structure element.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.SubmitFormAction">
       
        <p>Class which describes submit-form action.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SubmitFormAction.getFlags">
       
        <p>Gets flagas of submit action</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.SubmitFormAction.setFlags(int)">
       
        <p>Sets flagas of submit action</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.SubmitFormAction.getUrl">
       
        <p>Destination URL.</p> @return FileSpecification value
      
    </member>
    <member name="M:com.aspose.pdf.SubmitFormAction.setUrl(FileSpecification)">
       
        <p>Destination URL.</p> @param value FileSpecification value
      
      <param name="FileSpecification"/>
    </member>
    <member name="M:com.aspose.pdf.SubmitFormAction.#ctor">
       
        <p>Initializes SubmitFormAction object.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SubmitFormAction.EXCLUDE">
       
        <p>If clear, the Fields array specifies which fields to include in the submission.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SubmitFormAction.INCLUDE_NO_VALUE_FIELDS">
       
        <p>If set, all fields designated by the Fields array and the Include/Exclude flag shall be submitted.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SubmitFormAction.EXPORT_FORMAT">
       
        <p>If set, field names and values shall be submitted in HTML Form format.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SubmitFormAction.GET_METHOD">
       
        <p>If set, field names and values shall be submitted using an HTTP GET request.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SubmitFormAction.SUBMIT_COORDINATES">
       
        <p>If set, the coordinates of the mouse click that caused the submit-form action shall be transmitted as part of the form data.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SubmitFormAction.XFDF">
       
        <p>If set, field names and values shall be submitted as XFDF.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SubmitFormAction.INCLUDE_APPEND_SAVES">
       
        <p>If set, the submitted FDF file shall include the contents of all incremental updates.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SubmitFormAction.INCLUDE_ANNOTATIONS">
       
        <p>If set, the submitted FDF file shall include includes all markup annotations in the underlying PDF document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SubmitFormAction.SUBMIT_PDF">
       
        <p>If set, the document shall be submitted as PDF, using the MIME content type application/pdf.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SubmitFormAction.CANONICAL_FORMAT">
       
        <p>If set, any submitted field values representing dates shall be converted to the standard format.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SubmitFormAction.EXCL_NON_USER_ANNOTS">
       
        <p>If set, it shall include only those markup annotations whose T entry matches the name of the current user.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SubmitFormAction.EXCL_F_KEY">
       
        <p>If set, the submitted FDF shall exclude the F entry.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SubmitFormAction.EMBED_FORM">
       
        <p>If set, the F entry of the submitted FDF shall be a file specification containing an embedded file stream representing the PDF file from which the FDF is being submitted.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.SvgLoadOptions">
       
        <p>Represents options for loading/importing SVG file into pdf document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SvgLoadOptions.getConversionEngine">
       
        <p>Allows select conversion engine that will be in use during conversion. Currently new engine is in B-testing stage, so this value by default set to ConversionEngines.LegacyEngine</p> @return ConversionEngines element @see ConversionEngines
      
    </member>
    <member name="M:com.aspose.pdf.SvgLoadOptions.setConversionEngine(int)">
       
        <p>Allows select conversion engine that will be in use during conversion. Currently new engine is in B-testing stage, so this value by default set to ConversionEngines.LegacyEngine</p> @param conversionEngine ConversionEngines element @see ConversionEngines
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.SvgLoadOptions.getPageInfo">
       
        <p>Gets page info that should be applied during loading of document. NOTE that this parameter only works when ConversionEngine == ConversionEngines.NewEngine</p> @return PageInfo object
      
    </member>
    <member name="M:com.aspose.pdf.SvgLoadOptions.setPageInfo(PageInfo)">
       
        <p>Sets page info that should be applied during loading of document. NOTE that this parameter only works when ConversionEngine == ConversionEngines.NewEngine</p> @param value PageInfo object
      
      <param name="PageInfo"/>
    </member>
    <member name="M:com.aspose.pdf.SvgLoadOptions.isAdjustPageSize">
       
        <p>Adust pdf page size to svg size</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.SvgLoadOptions.setAdjustPageSize(boolean)">
       
        <p>Adust pdf page size to svg size</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.SvgLoadOptions.#ctor">
       
        <p>Creates {@code SvgLoadOptions} object.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.SvgLoadOptions.ConversionEngines">
       
        <p>Enumerates conversion engines that can be used for conversion</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SvgLoadOptions.ConversionEngines.LegacyEngine">
       
        <p>Represents legacy SVG to PDF conversion engine.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SvgLoadOptions.ConversionEngines.NewEngine">
       
        <p>Represents new SVG to PDF conversion engine.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.SvgSaveOptions">
       
        <p>Save options for export to SVG format</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SvgSaveOptions.getCustomStrategyOfEmbeddedImagesSaving">
       
        <p>This field can contain saving strategy that must be used (if present) during conversion for customized handling of created referenced external images files (like embedded BMP or JPEG) embedded into saved SVG. That strategy must process resources and return string that represents desirable URI of saved resource in generated SVG. If processing for this or that file for some reason must be done by converter's code itself, not in custom code, please set in custom code flag 'CustomProcessingCancelled' of 'imageSavingInfo' parameter's variable It signals to converter that all the necessary steps for processing of that resource must be done in converter itself as if there was no any external custom code .</p> @return EmbeddedImagesSavingStrategy instance
      
    </member>
    <member name="M:com.aspose.pdf.SvgSaveOptions.setCustomStrategyOfEmbeddedImagesSaving(EmbeddedImagesSavingStrategy)">
       
        <p>This field can contain saving strategy that must be used (if present) during conversion for customized handling of created referenced external images files (like embedded BMP or JPEG) embedded into saved SVG. That strategy must process resources and return string that represents desirable URI of saved resource in generated SVG. If processing for this or that file for some reason must be done by converter's code itself, not in custom code, please set in custom code flag 'CustomProcessingCancelled' of 'imageSavingInfo' parameter's variable It signals to converter that all the necessary steps for processing of that resource must be done in converter itself as if there was no any external custom code .</p> @param customStrategyOfEmbeddedImagesSaving EmbeddedImagesSavingStrategy instance
      
      <param name="EmbeddedImagesSavingStrategy"/>
    </member>
    <member name="M:com.aspose.pdf.SvgSaveOptions.isTreatTargetFileNameAsDirectory">
       
        <p>This options defines whether will be created target directory (if absent yet) with same name as requested output file instead of requested output file itself. It so, that directory will contain all output SVG-images of pages (like described below). If no, output files of pages other then first one will be created exactly in requested directory as main output file, but will contain in file name suffix _[2...n], that is defined by page number, f.e. if You define output file "C:\AsposeTests\output.svg" and output will contain several svg-files of pages, then files of pages will be created also in directory "C:\AsposeTests\" and have names 'output.svg', 'output_2.svg', 'output_3.svg' etc.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.SvgSaveOptions.setTreatTargetFileNameAsDirectory(boolean)">
       
        <p>This options defines whether will be created target directory (if absent yet) with same name as requested output file instead of requested output file itself. It so, that directory will contain all output SVG-images of pages (like described below). If no, output files of pages other then first one will be created exactly in requested directory as main output file, but will contain in file name suffix _[2...n], that is defined by page number, f.e. if You define output file "C:\AsposeTests\output.svg" and output will contain several svg-files of pages, then files of pages will be created also in directory "C:\AsposeTests\" and have names 'output.svg', 'output_2.svg', 'output_3.svg' etc.</p> @param treatTargetFileNameAsDirectory boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.SvgSaveOptions.isCompressOutputToZipArchive">
       
        <p>Specifies whether output will be created as one zip-archive. Please refer comment to 'TreatTargetFileNameAsDirectory' options to see rules of naming of svg-files of pages for multipage source document, that are also applied to zipped set of output files.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.SvgSaveOptions.setCompressOutputToZipArchive(boolean)">
       
        <p>Specifies whether output will be created as one zip-archive. Please refer comment to 'TreatTargetFileNameAsDirectory' options to see rules of naming of svg-files of pages for multipage source document, that are also applied to zipped set of output files.</p> @param compressOutputToZipArchive boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.SvgSaveOptions.isScaleToPixels">
       
        <p>Specifies whether to scale the output document from typographic points to pixels.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.SvgSaveOptions.setScaleToPixels(boolean)">
       
        <p>Specifies whether to scale the output document from typographic points to pixels.</p> @param scaleToPixels boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.SvgSaveOptions.#ctor">
       
        <p>Constructor</p> 
      
    </member>
    <member name="T:com.aspose.pdf.SvgSaveOptions.EmbeddedImagesSavingStrategy">
       
        <p>To property of such type You can assign delegate created from custom method that implements processing of external saving of image that was extracted from SVG created from PDF and must be saved as external resource during conversion of PDF to HTML. In such case processing (like self-made saving into stream or on disk) can be done in that custom code and that custom code must return path(or any another string without quotemarks) that will be afterwards incorporated into generated SVG instead of original supposed path to that image resource. In such case all the necessary actions for saving of image must be undertaken in code of supplied method, because saving of result in code of converter will be not in use. If processing for this or that file for some reason must be done by converter's code itself, not in custom code, please set in custom code flag 'CustomProcessingCancelled' of 'imageSavingInfo' parameter's variable It signals to converter that all the necessary steps for processing of that resource must be done in converter itself as if there was no any external custom code .</p> 
      
    </member>
    <member name="T:com.aspose.pdf.SvgSaveOptions.SvgExternalImageType">
       
        <p>enumerates possible types of image files that can be saved as external resources during during Pdf to SVG conversion</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SvgSaveOptions.SvgExternalImageType.Jpeg">
       
        <p>Jpeg format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SvgSaveOptions.SvgExternalImageType.Png">
       
        <p>Png format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SvgSaveOptions.SvgExternalImageType.Bmp">
       
        <p>Bmp format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SvgSaveOptions.SvgExternalImageType.Gif">
       
        <p>Gif format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SvgSaveOptions.SvgExternalImageType.Tiff">
       
        <p>Tiff format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SvgSaveOptions.SvgExternalImageType.Unknown">
       
        <p>Unknown - means that converter cannot detect type of content itself</p> 
      
    </member>
    <member name="T:com.aspose.pdf.SvgSaveOptions.SvgImageSavingInfo">
       
        <p>This class represents set of data that related to external resource image file's saving during PDF to HTML conversion.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SvgSaveOptions.SvgImageSavingInfo.getImageType">
       
        <p>represent type os saved image referenced in HTML. Set by converter and can be used in custom code to decide what should be done</p> @return SvgExternalImageType element @see SvgExternalImageType
      
    </member>
    <member name="M:com.aspose.pdf.SvgSaveOptions.SvgImageSavingInfo.setImageType(int)">
       
        <p>represent type os saved image referenced in HTML. Set by converter and can be used in custom code to decide what should be done</p> @param imageType SvgExternalImageType element @see SvgExternalImageType
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.SvgSaveOptions.SvgImageSavingInfo.#ctor">
       
        <p>creates new instance of HtmlImageSavingInfo</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Symbology">
       
        <p>A (Barcode) Symbology defines the technical details of a particular type of barcode: the width of the bars, character set, method of encoding, checksum specifications, etc.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Symbology.PDF417">
       
        <p>A multi-row, variable-length 2D symbology with high data capacity and error-correction capability.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Symbology.QRCode">
       
        <p>QR code (short for Quick Response) is a specific matrix barcode (2D code), readable by dedicated QR barcode readers and camera phones.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Symbology.DataMatrix">
       
        <p>A 2D matrix symbology consisting of black and white square modules arranged in either a square or rectangular pattern.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.SystemFontSource">
      Represents all fonts installed to the system.
    </member>
    <member name="M:com.aspose.pdf.SystemFontSource.getFontDefinitions">
      For Internal only @return FontDefinition[] object
    </member>
    <member name="M:com.aspose.pdf.SystemFontSource.equals(Object)">
       
        <p>Check if system font source objects are equal.</p> @return True if both objects are system font sources, false otherwise. @param obj System font source object which will be compared.
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.SystemFontSource.hashCode">Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by {@link java.util.HashMap}. &lt;p&gt; The general contract of {@code hashCode} is: &lt;ul&gt; &lt;li&gt;Whenever it is invoked on the same object more than once during an execution of a Java application, the {@code hashCode} method must consistently return the same integer, provided no information used in {@code equals} comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. &lt;li&gt;If two objects are equal according to the {@code equals(Object)} method, then calling the {@code hashCode} method on each of the two objects must produce the same integer result. &lt;li&gt;It is &lt;em&gt;not&lt;/em&gt; required that if two objects are unequal according to the {@link java.lang.Object#equals(java.lang.Object)} method, then calling the {@code hashCode} method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. &lt;/ul&gt; &lt;p&gt; As much as is reasonably practical, the hashCode method defined by class {@code Object} does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java&lt;span style="font-size:70%"&gt;&lt;sup&gt;TM&lt;/sup&gt;&lt;/span&gt; programming language.) @return a hash code value for this object. @see java.lang.Object#equals(java.lang.Object) @see java.lang.System#identityHashCode</member>
    <member name="M:com.aspose.pdf.SystemFontSource.#ctor">
      Initializes a new instance of class.
    </member>
    <member name="T:com.aspose.pdf.TabAlignmentType">
       
        <p>Enumerates the tab alignment types.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TabAlignmentType.Left">
       
        <p>Text aligned left from tab stop</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TabAlignmentType.Center">
       
        <p>Text aligned center from tab stop</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TabAlignmentType.Right">
       
        <p>Text aligned right from tab stop</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Table">
       
        <p>Represents a table that can be added to the page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Table.getBackgroundColor">
       
        <p>Gets table background color</p> @return Color object
      
    </member>
    <member name="M:com.aspose.pdf.Table.setBackgroundColor(Color)">
       
        <p>Sets table background color</p> @param value Color object
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.Table.getBreakText">
       
        <p>Gets break text for table</p> @return TextFragment object
      
    </member>
    <member name="M:com.aspose.pdf.Table.setBreakText(TextFragment)">
       
        <p>Sets break text for table</p> @param value TextFragment object
      
      <param name="TextFragment"/>
    </member>
    <member name="M:com.aspose.pdf.Table.getCornerStyle">
       
        <p>Gets the styles of the border corners</p> @return BorderCornerStyle value @see BorderCornerStyle
      
    </member>
    <member name="M:com.aspose.pdf.Table.setCornerStyle(int)">
       
        <p>Gets or sets the styles of the border corners</p> @param value BorderCornerStyle value @see BorderCornerStyle
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Table.getRepeatingRowsStyle">
       
        <p>Gets the style for repeating rows</p> @return TextState object
      
    </member>
    <member name="M:com.aspose.pdf.Table.setRepeatingRowsStyle(TextState)">
       
        <p>Gets the style for repeating rows</p> @param value TextState object
      
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.Table.getRepeatingColumnsCount">
       
        <p>Gets or sets the maximum columns count for table</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.Table.setRepeatingColumnsCount(int)">
       
        <p>Gets or sets the maximum columns count for table</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Table.getRepeatingRowsCount">
       
        <p>Gets the first rows count repeated for several pages</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.Table.setRepeatingRowsCount(int)">
       
        <p>Gets the first rows count repeated for several pages</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Table.getColumnWidths">
       
        <p>Gets the column widths of the table.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.Table.setColumnWidths(String)">
       
        <p>Gets the column widths of the table.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Table.getBroken">
       
        <p>Gets or sets table vertial broken;</p> @return TableBroken value @see TableBroken
      
    </member>
    <member name="M:com.aspose.pdf.Table.setBroken(int)">
       
        <p>Gets or sets table vertial broken;</p> @param value TableBroken value @see TableBroken
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Table.getDefaultCellBorder">
       
        <p>Gets default cell border;</p> @return BorderInfo object
      
    </member>
    <member name="M:com.aspose.pdf.Table.setDefaultCellBorder(BorderInfo)">
       
        <p>Gets default cell border;</p> @param value BorderInfo object
      
      <param name="BorderInfo"/>
    </member>
    <member name="M:com.aspose.pdf.Table.getDefaultColumnWidth">
       
        <p>Gets default cell border;</p> @return String object
      
    </member>
    <member name="M:com.aspose.pdf.Table.setDefaultColumnWidth(String)">
       
        <p>Gets default cell border;</p> @param value String object
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Table.getRows">
       
        <p>Gets the rows of the table.</p> @return Rows object
      
    </member>
    <member name="M:com.aspose.pdf.Table.getBorder">
       
        <p>Gets the border.</p> @return BorderInfo object
      
    </member>
    <member name="M:com.aspose.pdf.Table.setBorder(BorderInfo)">
       
        <p>Sets the border.</p> @param value BorderInfo object
      
      <param name="BorderInfo"/>
    </member>
    <member name="M:com.aspose.pdf.Table.getDefaultCellPadding">
       
        <p>Gets the default cell padding.</p> @return MarginInfo object
      
    </member>
    <member name="M:com.aspose.pdf.Table.setDefaultCellPadding(MarginInfo)">
       
        <p>Sets the default cell padding.</p> @param value MarginInfo object
      
      <param name="MarginInfo"/>
    </member>
    <member name="M:com.aspose.pdf.Table.getDefaultCellTextState">
       
        <p>Gets the default cell text state.</p> @return TextState value
      
    </member>
    <member name="M:com.aspose.pdf.Table.setDefaultCellTextState(TextState)">
       
        <p>Sets the default cell text state.</p> @param value TextState value
      
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.Table.getAlignment">
       
        <p>Gets the table alignment.</p> @return HorizontalAlignment value @see HorizontalAlignment
      
    </member>
    <member name="M:com.aspose.pdf.Table.setAlignment(int)">
       
        <p>Sets the table alignment.</p> @param value HorizontalAlignment value @see HorizontalAlignment
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Table.getLeft">
       
        <p>Gets the table left coordinate.</p> @return float value
      
    </member>
    <member name="M:com.aspose.pdf.Table.setLeft(float)">
       
        <p>Sets the table left coordinate.</p> @param value float value
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.Table.getTop">
       
        <p>Gets the table top coordinate.</p> @return float value
      
    </member>
    <member name="M:com.aspose.pdf.Table.setTop(float)">
       
        <p>Sets the table top coordinate.</p> @param value float value
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.Table.isBroken">
       
        <p>Gets the table is broken - will be truncated for next page.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Table.setBroken(boolean)">
       
        <p>Sets the table is broken - will be truncated for next page.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Table.isBordersIncluded">
       
        <p>Gets border included in column widths.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Table.setBordersIncluded(boolean)">
       
        <p>Sets border included in column widths.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Table.getColumnAdjustment">
       
        <p>Gets the table column adjustment.</p> @return ColumnAdjustment value @see ColumnAdjustment
      
    </member>
    <member name="M:com.aspose.pdf.Table.setColumnAdjustment(int)">
       
        <p>Sets the table column adjustment.</p> @param value ColumnAdjustment value @see ColumnAdjustment
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Table.drawRoundedRectangle(GraphInfo,Point,Point,java.util.List&lt;Operator&gt;,double)">
       
        <p>Add operators for rectangle.</p> For internal usage only. @param info The border style. @param topLeft The left top point. @param rightBottom The right bottom point. @param operators The operators list to be added into the page's content. @param radius The border radius.
      
      <param name="GraphInfo"/>
      <param name="Point"/>
      <param name="Point"/>
      <param name="java.util.List&lt;Operator&gt;"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Table.getColumnWidth(String)">
       
        <p>Get column width</p> @param stringColumnWidth The string representation. @return double value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Table.getWidth">
       
        <p>Get width.</p> @return The table width
      
    </member>
    <member name="M:com.aspose.pdf.Table.getHeight">
       
        <p>Get height.</p> @return The table height
      
    </member>
    <member name="M:com.aspose.pdf.Table.setColumnTextState(int,TextState)">
       
        <p>Set height.</p> @param colNumber The column number. @param textState The text state for column.
      
      <param name="int"/>
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.Table.deepClone">
      / * 
        <p>/ * Imports one-dimensional array of data into table. Import goes one cell per each array's item and / * starts from row and column defined in parameters. During import, if detected that necessary rows / * are still absent(i.e. target table is too small to absorb all data), necessary rows will be created / *</p> / * @param importedArray imported data, nulls will be imported as empty strings / * @param firstFilledRow define number of first target row in target table from wich import will start. / * If amount of rows in target table less then required, missing rows will be created first. / * @param firstFilledColumn specifies number of first target column in target table , column must be / present in target table before start of import / * @param isLeftColumnsFilled If 'isLeftColumnsFilled'=false, then in second and all subsequent filled rows / cells that are on the left hand from / * firstFilledColumn will be skipped /
      
    </member>
    <member name="M:com.aspose.pdf.Table.#ctor">
       
        <p>Default ctor</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TableAbsorber">&lt;p&gt; Represents an absorber object of table elements. Performs search and provides access to search results via {@code TableAbsorber.TableList} collection. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to find table on the first PDF document page and replace the text in a table cell. // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TableAbsorber object to find tables TableAbsorber absorber = new TableAbsorber(); // Visit first page with absorber absorber.visit(doc.getPages().get_Item(1)); // Get access to first table on page, their first cell and text fragments in it TextFragment fragment = absorber.getTableList().get_Item(0).getRowList().get_Item(0).getCellList().get_Item(0) .getTextFragments().get_Item(1); // Change text of the first text fragment in the cell fragment.setText("hi world"); // Save document doc.save("D:\\Tests\\output.pdf"); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.TableAbsorber.getTextSearchOptions">&lt;p&gt; Gets text search options. &lt;/p&gt; &lt;hr&gt; Allows to define several options that will be used during search text containing in tables. @return TextSearchOptions object</member>
    <member name="M:com.aspose.pdf.TableAbsorber.setTextSearchOptions(TextSearchOptions)">&lt;p&gt; Gets or sets text search options. &lt;/p&gt; &lt;hr&gt; Allows to define several options that will be used during search text containing in tables. @param value TextSearchOptions object 
      <param name="TextSearchOptions"/>
    </member>
    <member name="M:com.aspose.pdf.TableAbsorber.getTableList">&lt;p&gt; Returns readonly IList containing tables that were found &lt;/p&gt; @return {@code IGenericList&lt;AbsorbedTable&gt; object}</member>
    <member name="M:com.aspose.pdf.TableAbsorber.isUseFlowEngine">
       
        <p>Activate an early alfa version of alternative table recognition engine that could be used for conversion tables without borders. Doesn't support editing tables and getting text styles yet. By default is false.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TableAbsorber.setUseFlowEngine(boolean)">
       
        <p>Activate an early alfa version of alternative table recognition engine that could be used for conversion tables without borders. Doesn't support editing tables and getting text styles yet. By default is false.</p> @param useFlowEngine boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TableAbsorber.visit(Page)">&lt;p&gt; Extracts tables on the specified page &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to extract table on the first PDF document page. // Open document Document doc = new Document(@"D:\Tests\input.pdf"); // Create TableAbsorber object to find tables TableAbsorber absorber = new TableAbsorber(); // Visit first page with absorber absorber.visit(pdfDocument.getPages.get_item(1)); // Get access to first table on page, their first cell and text fragments in it TextFragment fragment = absorber.getTableList().get_item(0).getRowList.get_item(0).getCellList().get_item(0) .getTextFragments.get_item(1); // Change text of the first text fragment in the cell fragment.setText ("hi world"); // Save document doc.save(@"D:\Tests\output.pdf"); &lt;/pre&gt; @param page Pdf document page object. 
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.TableAbsorber.remove(AbsorbedTable)">&lt;p&gt; Removes an {@code AbsorbedTable} from the page. &lt;/p&gt; &lt;hr&gt; &lt;p&gt; Please take into account it changes TableList collection. In case removing/replacing tables in loop please use copy of TableList collection. &lt;/p&gt; @param table {@code AbsorbedTable} to remove. 
      <param name="AbsorbedTable"/>
    </member>
    <member name="M:com.aspose.pdf.TableAbsorber.replace(Page,AbsorbedTable,Table)">&lt;p&gt; Replaces an {@code AbsorbedTable} with {@code Table} on the page. &lt;/p&gt; &lt;hr&gt; &lt;p&gt; Please take into account it changes TableList collection. In case removing/replacing tables in loop please use copy of TableList collection. &lt;/p&gt; @param page Pdf pocument page object. @param oldTable {@code AbsorbedTable} to be replaced. @param newTable {@code Table} to replace old table. 
      <param name="Page"/>
      <param name="AbsorbedTable"/>
      <param name="Table"/>
    </member>
    <member name="M:com.aspose.pdf.TableAbsorber.#ctor(TextSearchOptions)">&lt;p&gt; Initializes a new instance of the {@code TableAbsorber} with text search options. &lt;/p&gt; @param textSearchOptions Text search options &lt;hr&gt; Performs searching for tables and provides access to the tables via {@code TableList} object. 
      <param name="TextSearchOptions"/>
    </member>
    <member name="M:com.aspose.pdf.TableAbsorber.#ctor">&lt;p&gt; Initializes a new instance of the {@code TableAbsorber}. &lt;/p&gt; &lt;hr&gt; Performs searching for tables and provides access to the tables via {@code TableList} object.</member>
    <member name="T:com.aspose.pdf.TabLeaderType">
       
        <p>Enumerates the tab leader types.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TabLeaderType.Solid">
       
        <p>Solid tab leader.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TabLeaderType.Dash">
       
        <p>Dash tab leader.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TabLeaderType.Dot">
       
        <p>Dot tab leader.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TabLeaderType.None">
       
        <p>No tab leader.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TableBroken">
       
        <p>Enumerates the table broken.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TableBroken.None">
       
        <p>No broken.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TableBroken.Vertical">
       
        <p>Vertical broken.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TableBroken.VerticalInSamePage">
       
        <p>Vertical broken in same page.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TableElementCollection">
       
        <p>Represents a collection of elements absorbed from existing table</p>  
        <p>{@code T}: Instance of type implementing {@code ITableElement}</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TableElementCollection.size">
       
        <p>Gets the number of table elements actually contained in the collection.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.TableElementCollection.getSyncRoot">
       
        <p>Gets an object that can be used to synchronize access to the collection.</p> @return SyncRoot Object
      
    </member>
    <member name="M:com.aspose.pdf.TableElementCollection.isSynchronized">
       
        <p>Gets a value indicating whether access to the collection is synchronized (thread safe).</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TableElementCollection.isReadOnly">
       
        <p>Gets a value indicating whether collection is read-only</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TableElementCollection.addItem(ITableElement)">
       
        <p>Adds the text fragment element at the specified index.</p> @param element ITableElement instance
      
      <param name="ITableElement"/>
    </member>
    <member name="M:com.aspose.pdf.TableElementCollection.iterator_Rename_Namesake">
       
        <p>Returns an enumerator for the entire collection.</p> @return Enumerator object.
      
    </member>
    <member name="M:com.aspose.pdf.TableElementCollection.iterator">
       
        <p>Returns an enumerator for the entire collection.</p> @return Enumerator object.
      
    </member>
    <member name="M:com.aspose.pdf.TableElementCollection.copyToTArray(T1[],int)">
       
        <p>Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array</p> @param array Array of objects which will be copied. @param index Starting index from which copying will be started.
      
      <param name="T1[]"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TableElementCollection.clear">
       
        <p>Clears all items from the collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TableElementCollection.containsItem(T1)">
       
        <p>Determines whether the collection contains a specific value.</p> @return true if item is found in the collection; otherwise, false. @param item The object to locate in the collection
      
      <param name="T1"/>
    </member>
    <member name="M:com.aspose.pdf.TableElementCollection.removeItem(T1)">
       
        <p>Deletes specified item from collection.</p> @return true if item was deleted from collection; otherwise, false. @param item The object to delete
      
      <param name="T1"/>
    </member>
    <member name="M:com.aspose.pdf.TableElementCollection.get_Item(int)">
       
        <p>Gets the text fragment element at the specified index.</p> @return table element object. @param index Index within the collection.
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.TabOrder">
       
        <p>Tab order on the page</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TabOrder.None">
       
        <p>No tab order.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TabOrder.Row">
       
        <p>Row order.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TabOrder.Column">
       
        <p>Column order.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TabOrder.Default">
       
        <p>Default tab order.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TabOrder.Manual">
       
        <p>Manual tab order.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TabStop">
       
        <p>Represents a custom Tab stop position in a paragraph.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TabStop.getPosition">
       
        <p>Gets or sets a float value that indicates the tab stop position.</p> @return float value
      
    </member>
    <member name="M:com.aspose.pdf.TabStop.setPosition(float)">
       
        <p>Sets a float value that indicates the tab stop position.</p> @param value float value
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TabStop.getLeaderType">
       
        <p>Gets or sets a {@code TabLeaderType} enum that indicates the tab leader type.</p> @return TabLeaderType element @see TabLeaderType
      
    </member>
    <member name="M:com.aspose.pdf.TabStop.setLeaderType(int)">
       
        <p>Gets or sets a {@code TabLeaderType} enum that indicates the tab leader type.</p> @param value TabLeaderType element @see TabLeaderType
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TabStop.getAlignmentType">
       
        <p>Gets or sets a {@code AlignmentType} enum that indicates the tab tab alignment type.</p> @return TabAlignmentType element @see TabAlignmentType
      
    </member>
    <member name="M:com.aspose.pdf.TabStop.setAlignmentType(int)">
       
        <p>Gets or sets a {@code AlignmentType} enum that indicates the tab tab alignment type.</p> @param value TabAlignmentType element @see TabAlignmentType
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TabStop.isReadOnly">
       
        <p>Gets value indicating that this {@code TabStop} instance is already attached to {@code TextFragment} and became readonly</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TabStop.#ctor">
       
        <p>Initializes a new instance of the {@code TabStop} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TabStop.#ctor(float)">
       
        <p>Initializes a new instance of the {@code TabStop} class with specified position.</p> @param position The position of the tab stop.
      
      <param name="float"/>
    </member>
    <member name="T:com.aspose.pdf.TabStops">
       
        <p>Represents a collection of {@code TabStop} objects.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TabStops.isReadOnly">
       
        <p>Gets value indicating that this {@code TabStops} instance is already attached to {@code TextFragment} and became readonly.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TabStops.add">
       
        <p>Initializes a new instance of the {@code TabStop} class and add it to the TabStops collection.</p> @return The new {@code TabStop} object.
      
    </member>
    <member name="M:com.aspose.pdf.TabStops.add(float)">
       
        <p>Initializes a new instance of the {@code TabStop} class with specified position and add it to the TabStops collection.</p> @return The new {@code TabStop} object. @param position The position of the tab stop.
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TabStops.add(TabStop)">
       
        <p>Add instance of the {@code TabStop} class to the TabStops collection.</p> @param tabStop The {@code TabStop} object.
      
      <param name="TabStop"/>
    </member>
    <member name="M:com.aspose.pdf.TabStops.getCount">
       
        <p>Returns tabStops Cound</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.TabStops.add(float,int)">
       
        <p>Initializes a new instance of the {@code TabStop} class with specified position and leader type and add it to the TabStops collection.</p> @return The new {@code TabStop} object. @param position The position of the tab stop. @param leaderType The leader type of the tab stop.
      
      <param name="float"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TabStops.deepClone">
       
        <p>Clones a new {@code TabStops} objects.</p> @return The new {@code TabStops} object.
      
    </member>
    <member name="M:com.aspose.pdf.TabStops.get_Item(int)">
       
        <p>Gets a {@code TabStop} object from the collection according to TabStop index.</p> @return {@code TabStop} object. @param index Zero-based index of element in {@code TabStops} collection.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TabStops.set_Item(int,TabStop)">
       
        <p>Sets a {@code TabStop} object from the collection according to TabStop index.</p> @param index Zero-based index of element in {@code TabStops} collection. @param value {@code TabStop} object.
      
      <param name="int"/>
      <param name="TabStop"/>
    </member>
    <member name="M:com.aspose.pdf.TabStops.#ctor">
       
        <p>Initializes a new instance of the {@code TabStops} class.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.tagged.helpers.PdfTreeFactory"/>
    <member name="M:com.aspose.pdf.tagged.helpers.PdfTreeFactory.getRegularNumsTree(IPdfDictionary,String,ITrailerable)">
      <param name="IPdfDictionary"/>
      <param name="String"/>
      <param name="ITrailerable"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.helpers.PdfTreeFactory.getRegularNamesTree(IPdfDictionary,String,ITrailerable)">
      <param name="IPdfDictionary"/>
      <param name="String"/>
      <param name="ITrailerable"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.helpers.StructureElementUtil"/>
    <member name="M:com.aspose.pdf.tagged.helpers.StructureElementUtil.setContentToMCRElement(StructureElement,String)">
      <param name="StructureElement"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.helpers.StructureElementUtil.setImageToMCRElement(StructureElement,String,Double[],Double[],Double[])">
      <param name="StructureElement"/>
      <param name="String"/>
      <param name="Double[]"/>
      <param name="Double[]"/>
      <param name="Double[]"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.helpers.StructureElementUtil.getParentForElement(Class&lt;T&gt;,Element)">
      <param name="Class&lt;T&gt;"/>
      <param name="Element"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.helpers.StructureElementUtil.getITextParentForElement(Element)">
      <param name="Element"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.helpers.StructureTextStateFactory"/>
    <member name="M:com.aspose.pdf.tagged.helpers.StructureTextStateFactory.createTextStateForStructureElement(ITextElement)">
      <param name="ITextElement"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.helpers.StructureTextStateFactory.createMarginForStructureElement(ITextElement)">
      <param name="ITextElement"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.helpers.StructureTextStateFactory.getBaseStructureTextState(StructureTypeStandard)">
      <param name="StructureTypeStandard"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.helpers.StructureTextStateFactory.getBaseStructureTextStateForLinkElement"/>
    <member name="T:com.aspose.pdf.tagged.ITaggedContent">
       
        <p>Represents interface for work with TaggedPdf content of document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.getStructureTextState">
       
        <p>Get {@link StructureTextState} settings for whole document.</p> @return Value: {@link StructureTextState} settings for whole document.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.getStructTreeRootElement">
       
        <p>Gets {@link StructTreeRootElement} of PDF document.</p> @return StructTreeRootElement of PDF document.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.getRootElement">
       
        <p>Gets root {@link StructureElement} of logical structure of PDF document.</p> @return Root {@link StructureElement} of logical structure of PDF document.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.setLanguage(String)">
       
        <p>Sets natural language for pdf document.</p>  
        <p>A language identifier that shall specify the natural language for all text in the document except where overridden by language specifications for structure elements or marked content.</p> @param lang A language identifier shall either be the empty text string, to indicate that the language is unknown, or a Language-Tag as defined in RFC 3066, Tags for the Identification of Languages.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.setTitle(String)">
       
        <p>Sets title for PDF document.</p> @param title The title of PDF document.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createPartElement">
       
        <p>Creates {@link PartElement}.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createArtElement">
       
        <p>Creates {@link ArtElement}.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createSectElement">
       
        <p>Creates {@link SectElement}.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createDivElement">
       
        <p>Creates {@link DivElement}.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createBlockQuoteElement">
       
        <p>Creates {@link BlockQuoteElement}.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createCaptionElement">
       
        <p>Creates {@link CaptionElement}.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createTOCElement">
       
        <p>Creates {@link TOCElement}.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createTOCIElement">
       
        <p>Creates {@link TOCIElement}.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createIndexElement">
       
        <p>Creates {@link IndexElement}.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createNonStructElement">
       
        <p>Creates {@link NonStructElement}.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createPrivateElement">
       
        <p>Creates {@link PrivateElement}.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createParagraphElement">
       
        <p>Creates {@link ParagraphElement}.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createHeaderElement">
       
        <p>Creates {@link HeaderElement}.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createHeaderElement(int)">
       
        <p>Creates {@link HeaderElement} with level.</p> @param level The level of Header. Must be 1, 2, 3, 4, 5 or 6. @return Created structure element.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createListElement">
       
        <p>Creates {@link ListElement}.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createTableElement">
       
        <p>Creates {@link TableElement}.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createTableTHeadElement">
       
        <p>Creates {@link TableTHeadElement}.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createTableTBodyElement">
       
        <p>Creates {@link TableTHeadElement}.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createTableTFootElement">
       
        <p>Creates {@link TableTFootElement}.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createTableTRElement">
       
        <p>Creates {@link TableTRElement}.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createTableTHElement">
       
        <p>Creates {@link TableTHElement}.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createTableTDElement">
       
        <p>Creates {@link TableTDElement}.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createSpanElement">
       
        <p>Creates {@link SpanElement}.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createQuoteElement">
       
        <p>Creates {@link QuoteElement}.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createNoteElement">
       
        <p>Creates {@link NoteElement}.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createReferenceElement">
       
        <p>Creates {@link ReferenceElement}.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createBibEntryElement">
       
        <p>Creates {@link BibEntryElement}.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createCodeElement">
       
        <p>Creates {@link CodeElement}.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createLinkElement">
       
        <p>Creates {@link LinkElement}.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createAnnotElement">
       
        <p>Creates {@link AnnotElement}.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createRubyElement">
       
        <p>Creates {@link RubyElement}.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createWarichuElement">
       
        <p>Creates {@link WarichuElement}.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createFigureElement">
       
        <p>Creates {@link FigureElement}.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createFormulaElement">
       
        <p>Creates {@link FormulaElement}.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.ITaggedContent.createFormElement">
       
        <p>Creates {@link FormElement}.</p> @return Created structure element.
      
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.AttributeKey">
       
        <p>Represents Standard Attribute Keys.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.AttributeKey.hashCode"/>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.AttributeKey.getKey">
       
        <p>Get Attribute Key.</p>Value: Attribute Key. @return String value
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.AttributeKey.getOwner">
       
        <p>Get Attribute Owner.</p>Value: Attribute Owner. @return AttributeKey instance
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.AttributeKey.to_AttributeKey(String)">
       
        <p>Performs an explicit conversion from {@link String} to {@link AttributeKey}.</p> @param key The attribute key. @return The result of the conversion.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.AttributeKey.toString">
       
        <p>Returns a string that represents the current object.</p> @return String that represents the current object.
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.Placement">
       
        <p>Placement attribute (Layout attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.WritingMode">
       
        <p>WritingMode attribute (Layout attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.BackgroundColor">
       
        <p>BackgroundColor attribute (Layout attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.BorderColor">
       
        <p>BorderColor attribute (Layout attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.BorderStyle">
       
        <p>BorderStyle attribute (Layout attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.BorderThickness">
       
        <p>BorderThickness attribute (Layout attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.Padding">
       
        <p>Padding attribute (Layout attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.Color">
       
        <p>Color attribute (Layout attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.SpaceBefore">
       
        <p>SpaceBefore attribute (Layout attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.SpaceAfter">
       
        <p>SpaceAfter attribute (Layout attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.StartIndent">
       
        <p>StartIndent attribute (Layout attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.EndIndent">
       
        <p>EndIndent attribute (Layout attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.TextIndent">
       
        <p>TextIndent attribute (Layout attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.TextAlign">
       
        <p>TextAlign attribute (Layout attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.BBox">
       
        <p>BBox attribute (Layout attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.Width">
       
        <p>Width attribute (Layout attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.Height">
       
        <p>Height attribute (Layout attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.BlockAlign">
       
        <p>BlockAlign attribute (Layout attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.InlineAlign">
       
        <p>InlineAlign attribute (Layout attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.TBorderStyle">
       
        <p>TBorderStyle attribute (Layout attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.TPadding">
       
        <p>TPadding attribute (Layout attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.BaselineShift">
       
        <p>BaselineShift attribute (Layout attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.LineHeight">
       
        <p>LineHeight attribute (Layout attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.TextDecorationColor">
       
        <p>TextDecorationColor attribute (Layout attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.TextDecorationThickness">
       
        <p>TextDecorationThickness attribute (Layout attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.TextDecorationType">
       
        <p>TextDecorationType attribute (Layout attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.RubyAlign">
       
        <p>RubyAlign attribute (Layout attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.RubyPosition">
       
        <p>RubyPosition attribute (Layout attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.GlyphOrientationVertical">
       
        <p>GlyphOrientationVertical attribute (Layout attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.ColumnCount">
       
        <p>ColumnCount attribute (Layout attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.ColumnGap">
       
        <p>ColumnGap attribute (Layout attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.ColumnWidths">
       
        <p>ColumnWidths attribute (Layout attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.ListNumbering">
       
        <p>ListNumbering attribute (List attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.Role">
       
        <p>Role attribute (PrintField attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.Checked">
       
        <p>Checked attribute (PrintField attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.Desc">
       
        <p>Desc attribute (PrintField attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.RowSpan">
       
        <p>RowSpan attribute (Table attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.ColSpan">
       
        <p>ColSpan attribute (Table attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.Headers">
       
        <p>Headers attribute (Table attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.Scope">
       
        <p>Scope attribute (Table attribute owner).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeKey.Summary">
       
        <p>Summary attribute (Table attribute owner).</p> 
      
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.AttributeName">
       
        <p>Represents class for Attribute Name Values.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.AttributeName.getName">
       
        <p>Gets name value of attribute.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.AttributeName.getAttributeKey">
       
        <p>Gets attribute key.</p> @return AttributeKey instance
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.AttributeName.fromNameAttributeKey(String,AttributeKey)">
       
        <p>Gets attribute name for attribute key.</p> @param name Attribute name @param attributeKey Attribute key @return Attribute name
      
      <param name="String"/>
      <param name="AttributeKey"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.AttributeName.toString">
       
        <p>Returns a string that represents the current object.</p> @return String that represents the current object.
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.Placement_Block">
       
        <p>Attribute Placement: Block - Stacked in the block-progression direction within an enclosing reference area or parent BLSE.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.Placement_Inline">
       
        <p>Attribute Placement: Inline - Packed in the inline-progression direction within an enclosing BLSE.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.Placement_Before">
       
        <p>Attribute Placement: Before - Placed so that the before edge of the element's allocation rectangle coincides with that of the nearest enclosing reference area.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.Placement_Start">
       
        <p>Attribute Placement: Start - Placed so that the start edge of the element's allocation rectangle coincides with that of the nearest enclosing reference area.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.Placement_End">
       
        <p>Attribute Placement: End - Placed so that the end edge of the element's allocation rectangle coincides with that of the nearest enclosing reference area.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.WritingMode_LrTb">
       
        <p>Attribute WritingMode: LrTb - Inline progression from left to right; block progression from top to bottom. This is the typical writing mode for Western writing systems.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.WritingMode_RlTb">
       
        <p>Attribute WritingMode: RlTb - Inline progression from right to left; block progression from top to bottom. This is the typical writing mode for Arabic and Hebrew writing systems.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.WritingMode_TbRl">
       
        <p>Attribute WritingMode: TbRl - Inline progression from top to bottom; block progression from right to left. This is the typical writing mode for Chinese and Japanese writing systems.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.BorderStyle_None">
       
        <p>Attribute BorderStyle: None - No border. Forces the computed value of BorderThicknessto be 0.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.BorderStyle_Hidden">
       
        <p>Attribute BorderStyle: Hidden - Same as None, except in terms of border conflict resolution for table elements.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.BorderStyle_Dotted">
       
        <p>Attribute BorderStyle: Dotted - The border is a series of dots.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.BorderStyle_Dashed">
       
        <p>Attribute BorderStyle: Dashed - The border is a series of short line segments.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.BorderStyle_Solid">
       
        <p>Attribute BorderStyle: Solid - The border is a single line segment.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.BorderStyle_Double">
       
        <p>Attribute BorderStyle: Double - The border is two solid lines. The sum of the two lines and the space between them equals the value of BorderThickness.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.BorderStyle_Groove">
       
        <p>Attribute BorderStyle: Groove - The border looks as though it were carved into the canvas.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.BorderStyle_Ridge">
       
        <p>Attribute BorderStyle: Ridge - The border looks as though it were coming out of the canvas (the opposite of Groove).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.BorderStyle_Inset">
       
        <p>Attribute BorderStyle: Inset - The border makes the entire box look as though it were embedded in the canvas.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.BorderStyle_Outset">
       
        <p>Attribute BorderStyle: Outset - The border makes the entire box look as though it were coming out of the canvas (the opposite of Inset).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.TextAlign_Start">
       
        <p>Attribute TextAlign: Start - Aligned with the start edge.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.TextAlign_Center">
       
        <p>Attribute TextAlign: Center - Centered between the start and end edges.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.TextAlign_End">
       
        <p>Attribute TextAlign: End - Aligned with the end edge.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.TextAlign_Justify">
       
        <p>Attribute TextAlign: Justify - Aligned with both the start and end edges, with internal spacing within each line expanded, if necessary, to achieve such alignment. The last (or only) line shall be aligned with the start edge only.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.Width_Auto">
       
        <p>Attribute Width: Auto - the element's width shall be determined by the intrinsic width of its content.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.Height_Auto">
       
        <p>Attribute Height: Auto - The element's height shall be determined by the intrinsic height of its content.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.BlockAlign_Before">
       
        <p>Attribute BlockAlign: Before - Before edge of the first child's allocation rectangle aligned with that of the table cell's content rectangle.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.BlockAlign_Middle">
       
        <p>Attribute BlockAlign: Middle- Children centered within the table cell. The distance between the before edge of the first child's allocation rectangle and that of the table cell's content rectangle shall be the same as the distance between the after edge of the last child's allocation rectangle and that of the table cell's content rectangle.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.BlockAlign_After">
       
        <p>Attribute BlockAlign: After - After edge of the last child's allocation rectangle aligned with that of the table cell's content rectangle.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.BlockAlign_Justify">
       
        <p>Attribute BlockAlign: Justify - Children aligned with both the before and after edges of the table cell's content rectangle. The first child shall be placed as described for Before and the last child as described for After, with equal spacing between the children. If there is only one child, it shall be aligned with the before edge only, as for Before.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.InlineAlign_Start">
       
        <p>Attribute InlineAlign: Start - Start edge of each child's allocation rectangle aligned with that of the table cell's content rectangle.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.InlineAlign_Center">
       
        <p>Attribute InlineAlign: Center - Each child centered within the table cell. The distance between the start edges of the child's allocation rectangle and the table cell's content rectangle shall be the same as the distance between their end edges.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.InlineAlign_End">
       
        <p>Attribute InlineAlign: End - End edge of each child's allocation rectangle aligned with that of the table cell's content rectangle.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.LineHeight_Normal">
       
        <p>Attribute LineHeight: Normal - Adjust the line height to include any nonzero value specified for BaselineShift.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.LineHeight_Auto">
       
        <p>Attribute LineHeight: Auto - Adjustment for the value of BaselineShift shall not be made.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.TextDecorationType_None">
       
        <p>Attribute TextDecorationType: None - No text decoration.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.TextDecorationType_Underline">
       
        <p>Attribute TextDecorationType: Underline - A line below the text.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.TextDecorationType_Overline">
       
        <p>Attribute TextDecorationType: Overline - A line above the text.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.TextDecorationType_LineThrough">
       
        <p>Attribute TextDecorationType: LineThrough - A line through the middle of the text.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.RubyAlign_Start">
       
        <p>Attribute RubyAlign: Start - The content shall be aligned on the start edge in the inline-progression direction.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.RubyAlign_Center">
       
        <p>Attribute RubyAlign: Center - The content shall be centered in the inline-progression direction.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.RubyAlign_End">
       
        <p>Attribute RubyAlign: End - The content shall be aligned on the end edge in the inline-progression direction.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.RubyAlign_Justify">
       
        <p>Attribute RubyAlign: Justify - The content shall be expanded to fill the available width in the inline-progression direction.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.RubyAlign_Distribute">
       
        <p>Attribute RubyAlign: Distribute - The content shall be expanded to fill the available width in the inline-progression direction. However, space shall also be inserted at the start edge and end edge of the text . The spacing shall be distributed using a 1:2:1 (start:infix:end) ratio. It shall be changed to a 0:1:1 ratio if the ruby appears at the start of a text line or to a 1:1:0 ratio if the ruby appears at the end of the text line.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.RubyPosition_Before">
       
        <p>Attribute RubyPosition: Before - The RT content shall be aligned along the before edge of the element.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.RubyPosition_After">
       
        <p>Attribute RubyPosition: After - The RT content shall be aligned along the after edge of the element.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.RubyPosition_Warichu">
       
        <p>Attribute RubyPosition: Warichu - The RT and associated RP elements shall be formatted as a warichu, following the RB element.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.RubyPosition_Inline">
       
        <p>Attribute RubyPosition: Inline - The RT and associated RP elements shall be formatted as a parenthesis comment, following the RB element.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.GlyphOrientationVertical_Auto">
       
        <p>Attribute GlyphOrientationVertical: Auto - Specifies a default orientation for text, depending on whether it is fullwidth (as wide as it is high).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.ListNumbering_None">
       
        <p>Attribute ListNumbering: None - No autonumbering; Lbl elements (if present) contain arbitrary text not subject to any numbering scheme.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.ListNumbering_Disc">
       
        <p>Attribute ListNumbering: Disc - Solid circular bullet.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.ListNumbering_Circle">
       
        <p>Attribute ListNumbering: Circle - Open circular bullet.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.ListNumbering_Square">
       
        <p>Attribute ListNumbering: Square - Solid square bullet.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.ListNumbering_Decimal">
       
        <p>Attribute ListNumbering: Decimal - Decimal arabic numerals (1-9, 10-99, ...).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.ListNumbering_UpperRoman">
       
        <p>Attribute ListNumbering: UpperRoman - Uppercase roman numerals (I, II, III, IV, ...).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.ListNumbering_LowerRoman">
       
        <p>Attribute ListNumbering: LowerRoman - Lowercase roman numerals (i, ii, iii, iv, ...).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.ListNumbering_UpperAlpha">
       
        <p>Attribute ListNumbering: UpperAlpha - Uppercase letters (A, B, C, ...).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.ListNumbering_LowerAlpha">
       
        <p>Attribute ListNumbering: LowerAlpha - Lowercase letters (a, b, c, ...).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.Role_rb">
       
        <p>Attribute Role: rb - Radio button.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.Role_cb">
       
        <p>Attribute Role: cb - Check box.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.Role_pb">
       
        <p>Attribute Role: pb - Push button.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.Role_tv">
       
        <p>Attribute Role: tv - Text-value field.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.Checked_on">
       
        <p>Attribute checked: On - The state of a radio button or check box field.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.Checked_off">
       
        <p>Attribute checked: Off - The state of a radio button or check box field.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.Checked_neutral">
       
        <p>Attribute checked: Neutral - The state of a radio button or check box field.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.Scope_Row">
       
        <p>Attribute Scope: Row.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.Scope_Column">
       
        <p>Attribute Scope: Column.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeName.Scope_Both">
       
        <p>Attribute Scope: Both.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.AttributeOwnerStandard">
       
        <p>Represents Standard Attribute Owners.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.AttributeOwnerStandard.clear"/>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.AttributeOwnerStandard.hashCode"/>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.AttributeOwnerStandard.getOwner">
       
        <p>Get Attribute Owner.</p>Value: Attribute Owner. @return String value
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.AttributeOwnerStandard.to_AttributeOwnerStandard(String)">
       
        <p>Performs an explicit conversion from {@link String} to {@link AttributeOwnerStandard}.</p> @return The result of the conversion. @param owner The owner.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.AttributeOwnerStandard.toString">
       
        <p>Returns a string that represents the current object.</p> @return String that represents the current object.
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeOwnerStandard.Layout">
       
        <p>Layout attribute owner.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeOwnerStandard.List">
       
        <p>List attribute owner.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeOwnerStandard.PrintField">
       
        <p>PrintField attribute owner.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeOwnerStandard.Table">
       
        <p>Table attribute owner.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeOwnerStandard.XML_100">
       
        <p>XML-1.0.0 attribute owner.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeOwnerStandard.HTML_320">
       
        <p>HTML-3.20 attribute owner.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeOwnerStandard.HTML_401">
       
        <p>HTML-4.01 attribute owner.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeOwnerStandard.OEB_100">
       
        <p>OEB-1.00 attribute owner.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeOwnerStandard.RTF_105">
       
        <p>RTF-1.05 attribute owner.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeOwnerStandard.CSS_100">
       
        <p>CSS-1.00 attribute owner.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.AttributeOwnerStandard.CSS_200">
       
        <p>CSS-2.00 attribute owner.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.ElementList">
       
        <p>Represents an ordered collection of elements.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.ElementList.getCount">
       
        <p>Gets the number of elements in the ElementList.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.ElementList.item(int)">
       
        <p>Retrieves a element at the given index.</p> @return The {@code /Aspose.Pdf.LogicalStructure.Element} with the specified index in the collection. If {@code index} is greater than or equal to the number of elements in the list, this returns null. @param index The index into the list of elements.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.ElementList.get_Item(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.ElementList.iterator">
       
        <p>Gets an enumerator that iterates through the collection of elements.</p> @return An enumerator used to iterate through the collection of elements.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.ElementList.addElement(Element)">
      <param name="Element"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.ElementList.addElement(Element,boolean)">
      <param name="Element"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.ElementList.removeElement(Element)">
      <param name="Element"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.ElementListImplementation"/>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.ElementListImplementation.getCount"/>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.ElementListImplementation.item(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.ElementListImplementation.iterator"/>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.ElementListImplementation.addElement(Element,boolean)">
      <param name="Element"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.ElementListImplementation.removeElement(Element)">
      <param name="Element"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.ElementListImplementation.#ctor(Element)">
      <param name="Element"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.ElementPdfEngine"/>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.ElementPdfEngine.getTaggedContext"/>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.ElementPdfEngine.getEnginePrimitive"/>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.ElementPdfEngine.setEnginePrimitive(IPdfPrimitive)">
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.ElementPdfEngine.getEngineObject"/>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.ElementPdfEngine.getEngineDictionary"/>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.ElementPdfEngine.getPdfObjectType"/>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.ElementPdfEngine.getPdfObject(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.ElementPdfEngine.setPdfObject(String,IPdfObject)">
      <param name="String"/>
      <param name="IPdfObject"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.ElementPdfEngine.getPdfName(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.ElementPdfEngine.setPdfName(String,IPdfName)">
      <param name="String"/>
      <param name="IPdfName"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.ElementPdfEngine.getString(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.ElementPdfEngine.setString(String,String)">
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.ElementPdfEngine.#ctor(TaggedContext,IPdfName,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfName"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.bls.BLSElement">
       
        <p>Represents a base class for block-level structure elements in logical structure.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.bls.BLSTextElement">
       
        <p>Represents a base class for block-level text structure elements in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.BLSTextElement.getTextFragment"/>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.BLSTextElement.getStructureTextState">
       
        <p>Gets {@code StructureTextState} object for current element.</p>Value: {@code structureTextState} object for current element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.BLSTextElement.setText(String)">
       
        <p>Appends text content to current text element.</p> @param text Text content
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.bls.HeaderElement">
       
        <p>Represents Header structure element in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.HeaderElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.HeaderElement.#ctor(TaggedContext,int,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="int"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.bls.ListChildElement">
       
        <p>Represents a base class for children elements of the List in logical structure.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.bls.ListElement">
       
        <p>Represents List structure element in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.ListElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.bls.ListLblElement">
       
        <p>Represents Lbl structure element in logical structure of the list.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.ListLblElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.bls.ListLBodyElement">
       
        <p>Represents LBody structure element in logical structure of the list.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.ListLBodyElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.bls.ListLIElement">
       
        <p>Represents LI structure element in logical structure of the list.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.ListLIElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.bls.ParagraphElement">
       
        <p>Represents Paragraph structure element in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.ParagraphElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableCellElement">
       
        <p>Represents a base class for table cell elements (TH and TD) in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableCellElement.getCell"/>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableCellElement.getBackgroundColor">
       
        <p>Gets or sets the cell background color.</p> @return Color instance
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableCellElement.setBackgroundColor(Color)">
       
        <p>Gets or sets the cell background color.</p> @param value Color instance
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableCellElement.getBorder">
       
        <p>Gets or sets the cell border.</p> @return BorderInfo instance
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableCellElement.setBorder(BorderInfo)">
       
        <p>Gets or sets the cell border.</p> @param value BorderInfo instance
      
      <param name="BorderInfo"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableCellElement.isNoBorder">
       
        <p>Gets or sets the cell have border.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableCellElement.setNoBorder(boolean)">
       
        <p>Gets or sets the cell have border.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableCellElement.getMargin">
       
        <p>Gets or sets the padding.</p> @return MarginInfo instance
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableCellElement.setMargin(MarginInfo)">
       
        <p>Gets or sets the padding.</p> @param value MarginInfo instance
      
      <param name="MarginInfo"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableCellElement.getAlignment">
       
        <p>Gets or sets the cell alignment.</p> @return HorizontalAlignment element
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableCellElement.setAlignment(int)">
       
        <p>Gets or sets the cell alignment.</p> @param value HorizontalAlignment element
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableCellElement.getDefaultCellTextState">
       
        <p>Gets or sets the default cell text state.</p> @return TextState instance
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableCellElement.setDefaultCellTextState(TextState)">
       
        <p>Gets or sets the default cell text state.</p> @param value TextState instance
      
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableCellElement.isWordWrapped">
       
        <p>Gets or sets the cell's text word wrapped.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableCellElement.setWordWrapped(boolean)">
       
        <p>Gets or sets the cell's text word wrapped.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableCellElement.getVerticalAlignment">
       
        <p>Gets or sets the vertical alignment.</p> @return VerticalAlignment element
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableCellElement.setVerticalAlignment(int)">
       
        <p>Gets or sets the vertical alignment.</p> @param value VerticalAlignment element
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableCellElement.getColSpan">
       
        <p>Gets or sets the column span.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableCellElement.setColSpan(int)">
       
        <p>Gets or sets the column span.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableCellElement.getRowSpan">
       
        <p>Gets or sets the row span.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableCellElement.setRowSpan(int)">
       
        <p>Gets or sets the row span.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableCellElement.getStructureTextState">
       
        <p>Gets {@code /Aspose.Pdf.LogicalStructure.StructureTextState} object for current element.</p>Value: {@code /Aspose.Pdf.LogicalStructure.StructureTextState} object for current element. @return StructureTextState instance
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableCellElement.setText(String)">
       
        <p>Appends text content to current text element.</p> @param text Text content
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableChildElement">
       
        <p>Represents a base class for children elements of the Table in logical structure.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement">
       
        <p>Represents Table structure element in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.getTable"/>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.getBackgroundColor">
       
        <p>Gets or sets the table background color.</p> @return Color instance
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.setBackgroundColor(Color)">
       
        <p>Gets or sets the table background color.</p> @param value Color instance
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.getBorder">
       
        <p>Gets or sets the table border.</p> @return BorderInfo instance
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.setBorder(BorderInfo)">
       
        <p>Gets or sets the table border.</p> @param value BorderInfo instance
      
      <param name="BorderInfo"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.getAlignment">
       
        <p>Gets or sets the table alignment.</p> @return HorizontalAlignment element
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.setAlignment(int)">
       
        <p>Gets or sets the table alignment.</p> @param value HorizontalAlignment element
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.getCornerStyle">
       
        <p>Gets or sets the styles of the border corners</p> @return BorderCornerStyle element
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.setCornerStyle(int)">
       
        <p>Gets or sets the styles of the border corners</p> @param value BorderCornerStyle element
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.getBroken">
       
        <p>Gets or sets table vertical broken;</p> @return TableBroken element
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.setBroken(int)">
       
        <p>Gets or sets table vertical broken;</p> @param value TableBroken element
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.getColumnAdjustment">
       
        <p>Gets or sets the table column adjustment.</p> @return ColumnAdjustment element
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.setColumnAdjustment(int)">
       
        <p>Gets or sets the table column adjustment.</p> @param value ColumnAdjustment element
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.getColumnWidths">
       
        <p>Gets the column widths of the table.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.setColumnWidths(String)">
       
        <p>Gets the column widths of the table.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.getDefaultCellBorder">
       
        <p>Gets default cell border.</p> @return BorderInfo instance
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.setDefaultCellBorder(BorderInfo)">
       
        <p>Gets default cell border.</p> @param value BorderInfo instance
      
      <param name="BorderInfo"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.getDefaultCellPadding">
       
        <p>Gets or sets the default cell padding.</p> @return MarginInfo instance
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.setDefaultCellPadding(MarginInfo)">
       
        <p>Gets or sets the default cell padding.</p> @param value MarginInfo instance
      
      <param name="MarginInfo"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.getDefaultCellTextState">
       
        <p>Gets or sets the default cell text state.</p> @return TextState instance
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.setDefaultCellTextState(TextState)">
       
        <p>Gets or sets the default cell text state.</p> @param value TextState instance
      
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.getDefaultColumnWidth">
       
        <p>Gets or sets default column width.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.setDefaultColumnWidth(String)">
       
        <p>Gets or sets default column width.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.isBroken">
       
        <p>Gets or sets the table is broken - will be truncated for next page.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.setBroken(boolean)">
       
        <p>Gets or sets the table is broken - will be truncated for next page.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.isBordersIncluded">
       
        <p>Gets or sets border included in column widhts.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.setBordersIncluded(boolean)">
       
        <p>Gets or sets border included in column widhts.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.getLeft">
       
        <p>Gets or sets the table left coordinate.</p> @return float value
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.setLeft(float)">
       
        <p>Gets or sets the table left coordinate.</p> @param value float value
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.getTop">
       
        <p>Gets or sets the table top coordinate.</p> @return float value
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.setTop(float)">
       
        <p>Gets or sets the table top coordinate.</p> @param value float value
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.getRepeatingColumnsCount">
       
        <p>Gets or sets the maximum columns count for table.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.setRepeatingColumnsCount(int)">
       
        <p>Gets or sets the maximum columns count for table.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.getRepeatingRowsCount">
       
        <p>Gets the first rows count repeated for several pages.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.setRepeatingRowsCount(int)">
       
        <p>Gets the first rows count repeated for several pages.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.getRepeatingRowsStyle">
       
        <p>Gets the style for repeating rows.</p> @return TextState instance
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.setRepeatingRowsStyle(TextState)">
       
        <p>Gets the style for repeating rows.</p> @param value TextState instance
      
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.createTHead">
       
        <p>Creates {@link TableTHeadElement} and added it to current table.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.createTBody">
       
        <p>Creates {@link TableTHeadElement} and added it to current table.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.createTFoot">
       
        <p>Creates {@link TableTFootElement} and added it to current table.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableElement.#ctor(TaggedContext,IPdfPrimitive)">
      constructor for internal usage only @param taggedContext TaggedContext instance @param pdfEngineEntity internal instance
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableRowCollectionElement">
       
        <p>Represents a base class for children elements of the Table Head, Body and Foot in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableRowCollectionElement.createTR">
       
        <p>Creates {@link TableTRElement} and added it to current table.</p> @return Created structure element.
      
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableTBodyElement">
       
        <p>Represents TBody structure element in logical structure of the table.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableTBodyElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableTDElement">
       
        <p>Represents TD structure element in logical structure of the table.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableTDElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableTFootElement">
       
        <p>Represents TFoot structure element in logical structure of the table.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableTFootElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableTHeadElement">
       
        <p>Represents THead structure element in logical structure of the table.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableTHeadElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableTHElement">
       
        <p>Represents TH structure element in logical structure of the table.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableTHElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableTRElement">
       
        <p>Represents TR structure element in logical structure of the table.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableTRElement.getBackgroundColor">
       
        <p>Gets or sets the row background color.</p> @return Color instance
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableTRElement.setBackgroundColor(Color)">
       
        <p>Gets or sets the row background color.</p> @param value Color instance
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableTRElement.getBorder">
       
        <p>Gets or sets the row border.</p> @return BorderInfo instance
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableTRElement.setBorder(BorderInfo)">
       
        <p>Gets or sets the row border.</p> @param value BorderInfo instance
      
      <param name="BorderInfo"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableTRElement.getDefaultCellBorder">
       
        <p>Gets default cell border.</p> @return BorderInfo instance
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableTRElement.setDefaultCellBorder(BorderInfo)">
       
        <p>Gets default cell border.</p> @param value BorderInfo instance
      
      <param name="BorderInfo"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableTRElement.getMinRowHeight">
       
        <p>Gets height for row.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableTRElement.setMinRowHeight(double)">
       
        <p>Gets height for row.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableTRElement.getFixedRowHeight">
       
        <p>Gets fixed row height - row may have fixed height.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableTRElement.setFixedRowHeight(double)">
       
        <p>Gets fixed row height - row may have fixed height.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableTRElement.isInNewPage">
       
        <p>Gets fixed row is in new page - page with this property should be printed to next page Default false.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableTRElement.setInNewPage(boolean)">
       
        <p>Gets fixed row is in new page - page with this property should be printed to next page Default false.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableTRElement.isRowBroken">
       
        <p>Gets is row can be broken between two pages.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableTRElement.setRowBroken(boolean)">
       
        <p>Gets is row can be broken between two pages.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableTRElement.getDefaultCellTextState">
       
        <p>Gets or sets default text state for row cells</p> @return TextState instance
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableTRElement.setDefaultCellTextState(TextState)">
       
        <p>Gets or sets default text state for row cells</p> @param value TextState instance
      
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableTRElement.getDefaultCellPadding">
       
        <p>Gets or sets default margin for row cells.</p> @return MarginInfo instance
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableTRElement.setDefaultCellPadding(MarginInfo)">
       
        <p>Gets or sets default margin for row cells.</p> @param value MarginInfo instance
      
      <param name="MarginInfo"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableTRElement.getVerticalAlignment">
       
        <p>Gets or sets the vertical alignment.</p> @return VerticalAlignment element
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableTRElement.setVerticalAlignment(int)">
       
        <p>Gets or sets the vertical alignment.</p> @param value VerticalAlignment element
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableTRElement.createTH">
       
        <p>Creates {@link TableTHElement} and added it to current table.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableTRElement.createTD">
       
        <p>Creates {@link TableTHElement} and added it to current table.</p> @return Created structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.bls.TableTRElement.#ctor(TaggedContext,IPdfPrimitive)">
      constructor for internal usage only @param taggedContext TaggedContext instance @param pdfEngineEntity internal instance
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.Element">
       
        <p>Represents a base class for element in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.Element.getTrailer">
      Internam method @return Internal element
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.Element.getTaggedContent"/>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.Element.getElementEngine">
       
        <p>Get parent element.</p> @return Value: Parent element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.Element.getParentElement">
       
        <p>Gets parent collection of {@code Element} objects.</p> @return Value: Parent collection of {@code Element} objects.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.Element.getChildElements">
       
        <p>Gets children collection of {@code Element} objects.</p> @return Value: Children collection of {@code Element} objects.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.Element.findElements(Class&lt;T&gt;)">&lt;p&gt; Find Elements of a given type &lt;/p&gt; @param typeOfTboolean class instance @return List of found Elements @param &lt;T&gt; Type of Structure Element for search &lt;p&gt;{@code T}: Type of Structure Element for search&lt;/p&gt; 
      <param name="Class&lt;T&gt;"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.Element.findElements(Class&lt;T&gt;,boolean)">&lt;p&gt; Find Elements of a given type &lt;/p&gt; @param typeOfT class instance @return List of found Elements @param recursiveSearch (Optional) Recursive Search (default false, search only from direct children) @param &lt;T&gt; Type of Structure Element for search &lt;p&gt;{@code T}: Type of Structure Element for search&lt;/p&gt; &lt;p&gt;{@code T}: Type of Structure Element for search&lt;/p&gt; 
      <param name="Class&lt;T&gt;"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.Element.setParentElement(Element)">
      <param name="Element"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.Element.appendChild(Element)">
       
        <p>Append {@code /Aspose.Pdf.LogicalStructure.Element} to collection of children.</p> @param element {@code /Aspose.Pdf.LogicalStructure.Element} object to add. @return {@code /Aspose.Pdf.LogicalStructure.Element} which has been added.
      
      <param name="Element"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.Element.toString">
       
        <p>Returns a string that represents the current object.</p> @return String that represents the current object.
      
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.FormElement">
       
        <p>Represents Form structure element in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.FormElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.FormulaElement">
       
        <p>Represents Formula structure element in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.FormulaElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.grouping.ArtElement">
       
        <p>Represents Art structure element in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.grouping.ArtElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.grouping.BlockQuoteElement">
       
        <p>Represents BlockQuote structure element in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.grouping.BlockQuoteElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.grouping.CaptionElement">
       
        <p>Represents Caption structure element in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.grouping.CaptionElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.grouping.DivElement">
       
        <p>Represents Div structure element in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.grouping.DivElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.grouping.DocumentElement">
       
        <p>Represents Document structure element in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.grouping.DocumentElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.grouping.GroupingElement">
       
        <p>Represents a base class for grouping structure elements in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.grouping.GroupingElement.#ctor(TaggedContext,StructureTypeStandard,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="StructureTypeStandard"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.grouping.IndexElement">
       
        <p>Represents Index structure element in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.grouping.IndexElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.grouping.NonStructElement">
       
        <p>Represents NonStruct structure element in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.grouping.NonStructElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.grouping.PartElement">
       
        <p>Represents Part structure element in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.grouping.PartElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.grouping.PrivateElement">
       
        <p>Represents Private structure element in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.grouping.PrivateElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.grouping.SectElement">
       
        <p>Represents Sect structure element in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.grouping.SectElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.grouping.TOCElement">
       
        <p>Represents TOC structure element in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.grouping.TOCElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.grouping.TOCIElement">
       
        <p>Represents TOCI structure element in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.grouping.TOCIElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.IllustrationElement">
       
        <p>Represents a base class for illustration structure elements in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.IllustrationElement.setImage(String)">
       
        <p>Appends image to current illustration element.</p> @param imageSrc Image source.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.IllustrationElement.setImage(String,double)">
       
        <p>Appends image to current illustration element.</p> @param imageSrc Image source. @param imageResolution (Optional) Image Resolution. Default: 300 DPI.
      
      <param name="String"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.IllustrationElement.setImage(String,double,double)">
       
        <p>Appends image to current illustration element.</p> @param imageSrc Image source. @param imageWidth Image width. @param imageHeight Image height.
      
      <param name="String"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.ils.AnnotationElement">
       
        <p>Represents a base class for annotation structure elements in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.ils.AnnotationElement.getAnnotations"/>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.ils.AnnotationElement.getAlternateDescriptions">
       
        <p>Gets or Sets the Alternate Descriptions for annotation. Text that shall be displayed for the annotation or, if this type of annotation does not display text, an alternate description of the annotation's contents in human-readable form.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.ils.AnnotationElement.setAlternateDescriptions(String)">
       
        <p>Gets or Sets the Alternate Descriptions for annotation. Text that shall be displayed for the annotation or, if this type of annotation does not display text, an alternate description of the annotation's contents in human-readable form.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.ils.AnnotElement">
       
        <p>Represents Annot structure element in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.ils.AnnotElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.ils.BibEntryElement">
       
        <p>Represents BibEntry structure element in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.ils.BibEntryElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.ils.CodeElement">
       
        <p>Represents Code structure element in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.ils.CodeElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.ils.ILSElement">
       
        <p>Represents a base class for inline-level structure elements in logical structure.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.ils.ILSTextElement">
       
        <p>Represents a base class for inline-level text structure elements in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.ils.ILSTextElement.getStructureTextState">
       
        <p>Gets {@code StructureTextState} object for current element.</p>Value: {@code StructureTextState} object for current element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.ils.ILSTextElement.setText(String)">
       
        <p>Appends text content to current text element.</p> @param text Text content.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.ils.LinkElement">
       
        <p>Represents Link structure element in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.ils.LinkElement.getHyperlink">
       
        <p>Gets or Sets Hyperlink for Link Element.</p> @return Hyperlink instance
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.ils.LinkElement.setHyperlink(Hyperlink)">
       
        <p>Gets or Sets Hyperlink for Link Element.</p> @param value Hyperlink instance
      
      <param name="Hyperlink"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.ils.LinkElement.getStructureTextState">
       
        <p>Gets {@code /Aspose.Pdf.LogicalStructure.StructureTextState} object for current element.</p>Value: {@code /Aspose.Pdf.LogicalStructure.StructureTextState} object for current element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.ils.LinkElement.setText(String)">
       
        <p>Appends text content to current text element.</p> @param text Text content.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.ils.LinkElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.ils.NoteElement">
       
        <p>Represents Note structure element in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.ils.NoteElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.ils.QuoteElement">
       
        <p>Represents Quote structure element in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.ils.QuoteElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.ils.ReferenceElement">
       
        <p>Represents Reference structure element in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.ils.ReferenceElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.ils.RubyChildElement">
       
        <p>Represents a base class for children elements of the Ruby in logical structure.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.ils.RubyElement">
       
        <p>Represents Ruby structure element in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.ils.RubyElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.ils.RubyRBElement">
       
        <p>Represents RB structure element in logical structure of the Ruby.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.ils.RubyRBElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.ils.RubyRPElement">
       
        <p>Represents RP structure element in logical structure of the Ruby.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.ils.RubyRPElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.ils.RubyRTElement">
       
        <p>Represents RT structure element in logical structure of the Ruby.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.ils.RubyRTElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.ils.SpanElement">
       
        <p>Represents Span structure element in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.ils.SpanElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.ils.WarichuChildElement">
       
        <p>Represents a base class for children elements of the Warichu in logical structure.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.ils.WarichuElement">
       
        <p>Represents Warichu structure element in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.ils.WarichuElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.ils.WarichuWPElement">
       
        <p>Represents WP structure element in logical structure of the Warichu.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.ils.WarichuWPElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.ils.WarichuWTElement">
       
        <p>Represents WT structure element in logical structure of the Warichu.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.ils.WarichuWTElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.ITextElement">
       
        <p>Interface for presenting text structure elements.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.ITextElement.getStructureTextState">
       
        <p>Gets {@code StructureTextState} object for text structure element.</p> @return Value: {@code StructureTextState} object for text structure element.
      
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.MCRElement">
       
        <p>Represents marked-content reference object in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.MCRElement.setHyperlink(Hyperlink)">
      <param name="Hyperlink"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.MCRElement.isCreatedElement"/>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.MCRElement.getPage">
      Get Page instance @return Page instance
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.MCRElement.setPage(Page)">
      Set Page instance @param value Page instance
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.MCRElement.setNewMCID(int)">
      Get MCID value @param value MCID value
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.MCRElement.setBdcOperator(com.aspose.pdf.operators.BDC)">
      Set BDC Operator @param value BDC Operator
      <param name="com.aspose.pdf.operators.BDC"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.MCRElement.getImageSrc">
       
        <p>Gets image source for marked-content reference element.</p>  
        <p>For just created {@link IllustrationElement}. Is null in other cases.</p> @return Image source for marked-content reference element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.MCRElement.setImageSrc(String)">
       
        <p>Gets image source for marked-content reference element.</p>  
        <p>For just created {@link IllustrationElement}. Is null in other cases.</p> @param value Image source for marked-content reference element.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.MCRElement.getImageResolution">
      For internal usage only @return For internal usage only
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.MCRElement.setImageResolution(Double[])">
      For internal usage only @param value For internal usage only
      <param name="Double[]"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.MCRElement.getImageWidth">
      For internal usage only @return For internal usage only
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.MCRElement.setImageWidth(Double[])">
      For internal usage only @param value For internal usage only
      <param name="Double[]"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.MCRElement.getImageHeight">
      For internal usage only @return For internal usage only
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.MCRElement.setImageHeight(Double[])">
      For internal usage only @param value For internal usage only
      <param name="Double[]"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.MCRElement.getContent">
       
        <p>Gets text content for marked-content reference element.</p>  
        <p>For just created object wich implement {@link ITextElement}. Is null in other cases.</p> @return Text content for marked-content reference element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.MCRElement.setContent(String)">
       
        <p>Gets text content for marked-content reference element.</p>  
        <p>For just created object wich implement {@link ITextElement}. Is null in other cases.</p> @param value Text content for marked-content reference element.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.MCRElement.getMCID">
       
        <p>Gets MCID of marked-content reference object.</p> @return MCID of marked-content reference object.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.MCRElement.toString">
       
        <p>Returns a string that represents the current object.</p> @return String that represents the current object.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.MCRElement.#ctor(TaggedContext,IPdfPrimitive)">
      Constructor @param taggedContext TaggedContext instance @param pdfEngineEntity Internal instance
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.OBJRElement">
       
        <p>Represents object reference entity in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.OBJRElement.toString">
       
        <p>Returns a string that represents the current object.</p> @return String that represents the current object.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.OBJRElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.StructureAttribute">
       
        <p>Represents attribute of structure element.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureAttribute.getKey">
       
        <p>Gets attribute key.</p>Value: Attribute Key. @return AttributeKey instance
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureAttribute.getNameValue">
       
        <p>Gets Value Name.</p> @return Value Name.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureAttribute.getStringValue">
       
        <p>Gets Value String.</p> @return Value String.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureAttribute.getNumberValue">
       
        <p>Gets Value Number.</p> @return Value Number.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureAttribute.getArrayValue">
       
        <p>Gets Value Name Array.</p> @return Value Name Array.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureAttribute.getArrayNumberValue">
       
        <p>Gets Value Number Array.</p> @return Value Number Array.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureAttribute.setNameValue(AttributeName)">
       
        <p>Sets Value Name.</p> @param name Allowable Value Name.
      
      <param name="AttributeName"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureAttribute.setStringValue(String)">
       
        <p>Sets Value String.</p> @param value Value String.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureAttribute.setNumberValue(double)">
       
        <p>Sets Value Number.</p> @param number Value Number.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureAttribute.setArrayValue(AttributeName[])">
       
        <p>Sets Value Name Array.</p> @param array Array of allowable Value Names.
      
      <param name="AttributeName[]"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureAttribute.setArrayNumberValue(Double[][])">
       
        <p>Sets Value Number Array.</p> @param arrayNumber Array of Numbers.
      
      <param name="Double[][]"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureAttribute.setColorValue(Color)">
       
        <p>Sets Value Color.</p> @param color Color.
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureAttribute.setRectangleValue(Rectangle)">
       
        <p>Sets Value Rectangle.</p> @param rectangle Rectangle.
      
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureAttribute.isInitializedValue">
       
        <p>Gets status of structure attribute value. True if value is set.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureAttribute.#ctor(AttributeKey)">
       
        <p>Initializes a new instance of the StructureAttribute.</p> @param attributeKey Attribute Key
      
      <param name="AttributeKey"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureAttribute.#ctor(AttributeKey,IPdfPrimitive)">
      <param name="AttributeKey"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.StructureElement">
       
        <p>Represents a base class for structure elements in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureElement.getDefaultAttributeOwner">
       
        <p>Gets {@code /Aspose.Pdf.LogicalStructure.AttributeOwnerStandard} object.</p>Value: {@code /Aspose.Pdf.LogicalStructure.AttributeOwnerStandard} object. @return AttributeOwnerStandard instance
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureElement.getAttributes">
       
        <p>Gets {@code StructureAttributeCollection} object.</p> @return {@code StructureAttributeCollection} object.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureElement.getStructureType">
       
        <p>Gets type of structure element.</p> @return Value: {@code StructureTypeStandard} object of structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureElement.getS"/>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureElement.getID">
       
        <p>Gets the ID for structure element.</p>Value: ID of the structure element. @return String value
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureElement.getTitle">
       
        <p>Gets or sets the title for structure element.</p> @return Value: Title of the structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureElement.setTitle(String)">
       
        <p>Gets or sets the title for structure element.</p> @param value Value: Title of the structure element.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureElement.getLanguage">
       
        <p>Gets or sets the language for structure element.</p> @return Value: Language of the structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureElement.setLanguage(String)">
       
        <p>Gets or sets the language for structure element.</p> @param value Value: Language of the structure element.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureElement.getAlternativeText">
       
        <p>Gets or sets the alternative text for structure element.</p> @return Value: Alternative text of the structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureElement.setAlternativeText(String)">
       
        <p>Gets or sets the alternative text for structure element.</p> @param value Value: Alternative text of the structure element.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureElement.getExpansionText">
       
        <p>Gets or sets the expansion text for structure element.</p> @return Value: Expansion text of the structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureElement.setExpansionText(String)">
       
        <p>Gets or sets the expansion text for structure element.</p> @param value Value: Expansion text of the structure element.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureElement.getActualText">
       
        <p>Gets or sets the actual text for structure element.</p> @return Value: Actual text of the structure element.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureElement.setActualText(String)">
       
        <p>Gets or sets the actual text for structure element.</p> @param value Value: Actual text of the structure element.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureElement.setParentElement(Element)">
      set Parent Element @param parentElement value
      <param name="Element"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureElement.changeParentElement(StructureElement)">
       
        <p>Change parent element for current structure element</p> @param newParentElement New parent structure element
      
      <param name="StructureElement"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureElement.generateId">
       
        <p>Generate ID for structure element.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureElement.setId(String)">
       
        <p>Sets ID for structure element.</p> @param id ID value for structure element
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureElement.clearId">
       
        <p>Clear ID for structure element.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureElement.setTag(String)">
       
        <p>Sets custom tag for structure element.</p> @param newTag Tag name
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureElement.toString">
       
        <p>Returns a string that represents the current object.</p> @return String that represents the current object.
      
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.elements.StructureTextState">
       
        <p>Represents text state settings for Text Structure Elements and TaggedContent (ITextElement, ITaggedContent)</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureTextState.getFont">
       
        <p>Gets or sets the font of text.</p>
        <p>Can be null. Use null to inherit {@code Font} property from parent structure element.</p> @return Font instance
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureTextState.setFont(Font)">
       
        <p>Gets or sets the font of text.</p>
        <p>Can be null. Use null to inherit {@code Font} property from parent structure element.</p> @param value Font instance
      
      <param name="Font"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureTextState.getFontSize">
       
        <p>Gets or sets font size of the text.</p>
        <p>Can be null. Use null to inherit {@code FontSize} property from parent structure element.</p> @return Float array
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureTextState.setFontSize(Float)">
       
        <p>Gets or sets font size of the text.</p>
        <p>Can be null. Use null to inherit {@code FontSize} property from parent structure element.</p> @param value Float value
      
      <param name="Float"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureTextState.getFontStyle">
       
        <p>Gets or sets font style of the text.</p>
        <p>Can be null. Use null to inherit {@code FontStyle} property from parent structure element.</p> @return Integer array
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureTextState.setFontStyle(Integer)">
       
        <p>Gets or sets font style of the text.</p>
        <p>Can be null. Use null to inherit {@code FontStyle} property from parent structure element.</p> @param value FontStyle element value
      
      <param name="Integer"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureTextState.getForegroundColor">
       
        <p>Gets or sets foreground color of the text.</p>
        <p>Can be null. Use null to inherit {@code ForegroundColor} property from parent structure element.</p> @return Color instance
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureTextState.setForegroundColor(Color)">
       
        <p>Gets or sets foreground color of the text.</p>
        <p>Can be null. Use null to inherit {@code ForegroundColor} property from parent structure element.</p> @param value Color instance
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureTextState.getBackgroundColor">
       
        <p>Gets or sets background color of the text.</p>
        <p>Can be null. Use null to inherit {@code BackgroundColor} property from parent structure element.</p> @return Color instance
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureTextState.setBackgroundColor(Color)">
       
        <p>Gets or sets background color of the text.</p>
        <p>Can be null. Use null to inherit {@code BackgroundColor} property from parent structure element.</p> @param value Color instance
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureTextState.getUnderline">
       
        <p>Gets or sets underline for the text.</p>
        <p>Can be null. Use null to inherit {@code Underline} property from parent structure element.</p> @return Boolean array
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureTextState.setUnderline(Boolean)">
       
        <p>Gets or sets underline for the text.</p>
        <p>Can be null. Use null to inherit {@code Underline} property from parent structure element.</p> @param value Boolean value
      
      <param name="Boolean"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureTextState.getStrikeOut">
       
        <p>Gets or sets strikeout for the text.</p>
        <p>Can be null. Use null to inherit {@code StrikeOut} property from parent structure element.</p> @return Boolean array
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureTextState.setStrikeOut(Boolean)">
       
        <p>Gets or sets strikeout for the text.</p>
        <p>Can be null. Use null to inherit {@code StrikeOut} property from parent structure element.</p> @param value Boolean value
      
      <param name="Boolean"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureTextState.getSuperscript">
       
        <p>Gets or sets superscript of the text.</p>
        <p>Can be null. Use null to inherit {@code Superscript} property from parent structure element.</p> @return Boolean array
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureTextState.setSuperscript(Boolean)">
       
        <p>Gets or sets superscript of the text.</p>
        <p>Can be null. Use null to inherit {@code Superscript} property from parent structure element.</p> @param value Boolean value
      
      <param name="Boolean"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureTextState.getSubscript">
       
        <p>Gets or sets subscript of the text.</p>
        <p>Can be null. Use null to inherit {@code Subscript} property from parent structure element.</p> @return Boolean array
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureTextState.setSubscript(Boolean)">
       
        <p>Gets or sets subscript of the text.</p>
        <p>Can be null. Use null to inherit {@code Subscript} property from parent structure element.</p> @param value Boolean value
      
      <param name="Boolean"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureTextState.getHorizontalScaling">
       
        <p>Gets or sets horizontal scaling of the text.</p>
        <p>Can be null. Use null to inherit {@code HorizontalScaling} property from parent structure element.</p> @return Float array
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureTextState.setHorizontalScaling(Float)">
       
        <p>Gets or sets horizontal scaling of the text.</p>
        <p>Can be null. Use null to inherit {@code HorizontalScaling} property from parent structure element.</p> @param value Float value
      
      <param name="Float"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureTextState.getLineSpacing">
       
        <p>Gets or sets line spacing of the text.</p>
        <p>Can be null. Use null to inherit {@code LineSpacing} property from parent structure element.</p> @return Float array
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureTextState.setLineSpacing(Float)">
       
        <p>Gets or sets line spacing of the text.</p>
        <p>Can be null. Use null to inherit {@code LineSpacing} property from parent structure element.</p> @param value Float value
      
      <param name="Float"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureTextState.getCharacterSpacing">
       
        <p>Gets or sets character spacing of the text.</p>
        <p>Can be null. Use null to inherit {@code CharacterSpacing} property from parent structure element.</p> @return Float array
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureTextState.setCharacterSpacing(Float)">
       
        <p>Gets or sets character spacing of the text.</p>
        <p>Can be null. Use null to inherit {@code CharacterSpacing} property from parent structure element.</p> @param value Float value
      
      <param name="Float"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureTextState.getWordSpacing">
       
        <p>Gets or sets word spacing of the text.</p>
        <p>Can be null. Use null to inherit {@code WordSpacing} property from parent structure element.</p> @return Float array
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureTextState.setWordSpacing(Float)">
       
        <p>Gets or sets word spacing of the text.</p>
        <p>Can be null. Use null to inherit {@code WordSpacing} property from parent structure element.</p> @param value Float value
      
      <param name="Float"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureTextState.getMarginInfo">
       
        <p>Gets or sets margin for block structure element.</p> @return MarginInfo instance
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureTextState.setMarginInfo(MarginInfo)">
       
        <p>Gets or sets margin for block structure element.</p> @param value MarginInfo instance
      
      <param name="MarginInfo"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureTextState.update(StructureTextState)">
      Update elements @param structureTextState StructureTextState instance
      <param name="StructureTextState"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureTextState.createTextState">
      Create Text State @return TextState instance
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.elements.StructureTextState.#ctor">
      Default constructor
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.StructTreeRootElement">
       
        <p>Represents StructTreeRoot object in logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.StructTreeRootElement.getIDTree"/>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.StructTreeRootElement.getRoleMap"/>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.StructTreeRootElement.doPreSave"/>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.StructTreeRootElement.doSave"/>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.StructTreeRootElement.createStructParents"/>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.StructTreeRootElement.getStructParentsArray(IPdfNumber)">
      <param name="IPdfNumber"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.StructTreeRootElement.getAllElements"/>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.StructTreeRootElement.registrationObjectInParentTree(IPdfObject)">
      <param name="IPdfObject"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.StructTreeRootElement.#ctor(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.StructureAttributeCollection">
       
        <p>Represents collection of attributes of structure elements.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.StructureAttributeCollection.getEngineAttributeCollection"/>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.StructureAttributeCollection.getAttributes(AttributeOwnerStandard)">
       
        <p>Return {@link StructureAttributes} of structure element by standard attribute owner.</p> @return {@link StructureAttributes} of structure element. Return null if not found. @param ownerStandard Standard attribute owner.
      
      <param name="AttributeOwnerStandard"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.StructureAttributeCollection.createAttributes(AttributeOwnerStandard)">
       
        <p>Create and return {@link StructureAttributes} of structure element by standard attribute owner.</p> @return {@link StructureAttributes} of structure element. Structure Attributes will be created if it needed. @param ownerStandard Standard attribute owner.
      
      <param name="AttributeOwnerStandard"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.StructureAttributeCollection.#ctor(IPdfPrimitive,StructureElement)">
      <param name="IPdfPrimitive"/>
      <param name="StructureElement"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.StructureAttributeCollection.#ctor(StructureElement)">
      <param name="StructureElement"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.StructureAttributes">
       
        <p>Represents attributes of structure element for standard attribute owners.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.StructureAttributes.getEngineAttributes"/>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.StructureAttributes.getOwner">
       
        <p>Gets standard attribute owner.</p>Value: Standard attribute owner. @return AttributeOwnerStandard instance
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.StructureAttributes.getAttribute(AttributeKey)">
       
        <p>Gets StructureAttribute by AttributeKey.</p> @return StructureAttribute instance @param key AttributeKey.
      
      <param name="AttributeKey"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.StructureAttributes.hasAttribute(AttributeKey)">
      <param name="AttributeKey"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.StructureAttributes.setAttribute(StructureAttribute)">
       
        <p>Sets StructureAttribute into StructureAttributes.</p> @param attribute StructureAttribute.
      
      <param name="StructureAttribute"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.StructureTypeCategory">
       
        <p>Represents Categories of Standard Structure Types.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.StructureTypeCategory.to_StructureTypeCategory(String)">
       
        <p>Performs an explicit conversion from {@link String} to {@link StructureTypeCategory}.</p> @param name The name. @return The result of the conversion.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.StructureTypeCategory.toString">
       
        <p>Returns a string that represents the current object.</p> @return String that represents the current object.
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeCategory.GroupingElements">
       
        <p>Grouping elements group other elements into sequences or hierarchies but hold no content directly and have no direct effect on layout.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeCategory.BLSEs">
       
        <p>Block-level structure elements (BLSEs) describe the overall layout of content on the page, proceeding in the block-progression direction.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeCategory.ILSEs">
       
        <p>Inline-level structure elements (ILSEs) describe the layout of content within a BLSE, proceeding in the inline-progression direction.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeCategory.IllustrationElements">
       
        <p>Illustration elements are compact sequences of content, in page content order, that are considered to be unitary objects with respect to page layout. An illustration can be treated as either a BLSE or an ILSE.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard">
       
        <p>Represents Standard Structure Types.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.getTag">
       
        <p>Gets tag name of {@code StructureElement}.</p> @return Tag name of {@code StructureElement}.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.getCategory">
       
        <p>Gets category of Standard Structure Type.</p> @return Value: Category of Standard Structure Type.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.to_StructureTypeStandard(String)">
       
        <p>Performs an explicit conversion from {@link String} to {@link StructureTypeStandard}.</p> @param tag The tag name. @return The result of the conversion.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.toString">
       
        <p>Returns a string that represents the current object.</p> @return String that represents the current object.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.createElement(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.canBeAppended(StructureTypeStandard)">
      <param name="StructureTypeStandard"/>
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.Document">
       
        <p>(Document) A complete document. This is the root element of any structure tree containing multiple parts or multiple articles.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.Part">
       
        <p>(Part) A large-scale division of a document. This type of element is appropriate for grouping articles or sections.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.Art">
       
        <p>(Article) A relatively self-contained body of text constituting a single narrative or exposition. Articles should be disjoint; that is, they should not contain other articles as constituent elements.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.Sect">
       
        <p>(Section) A container for grouping related content elements.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.Div">
       
        <p>(Division) A generic block-level element or group of elements.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.BlockQuote">
       
        <p>(Block quotation) A portion of text consisting of one or more paragraphs attributed to someone other than the author of the surrounding text.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.Caption">
       
        <p>(Caption) A brief portion of text describing a table or figure.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.TOC">
       
        <p>(Table of contents) A list made up of table of contents item entries (structure type TOCI) and/or other nested table of contents entries (TOC).</p>  
        <p>A TOC entry that includes only TOCI entries represents a flat hierarchy. A TOC entry that includes other nested TOC entries (and possibly TOCI entries) represents a more complex hierarchy.Ideally, the hierarchy of a top level TOC entry reflects the structure of the main body of the document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.TOCI">
       
        <p>(Table of contents item) An individual member of a table of contents. This entry’s children may be any of the following structure types:</p>  
        <p>Lbl - A label</p>  
        <p>Reference - A reference to the title and the page number</p>  
        <p>NonStruct - Non-structure elements for wrapping a leader artifact</p>  
        <p>P - Descriptive text</p>  
        <p>TOC - Table of content elements for hierarchical tables of content, as described for the TOC entry</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.Index">
       
        <p>(Index) A sequence of entries containing identifying text accompanied by reference elements that point out occurrences of the specified text in the main body of a document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.NonStruct">
       
        <p>(Nonstructural element) A grouping element having no inherent structural significance; it serves solely for grouping purposes. This type of element differs from a division (structure type Div) in that it shall not be interpreted or exported to other document formats; however, its descendants shall be processed normally.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.Private">
       
        <p>(Private element) A grouping element containing private content belonging to the application producing it. The structural significance of this type of element is unspecified and shall be determined entirely by the conforming writer. Neither the Private element nor any of its descendants shall be interpreted or exported to other document formats.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.P">
       
        <p>(Paragraph) A low-level division of text.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.H">
       
        <p>(Heading) A label for a subdivision of a document's content. It should be the first child of the division that it heads.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.H1">
       
        <p>Level 1 Heading, for use in conforming writers that cannot hierarchically nest their sections and thus cannot determine the level of a heading from its level of nesting.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.H2">
       
        <p>Level 2 Heading, for use in conforming writers that cannot hierarchically nest their sections and thus cannot determine the level of a heading from its level of nesting.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.H3">
       
        <p>Level 3 Heading, for use in conforming writers that cannot hierarchically nest their sections and thus cannot determine the level of a heading from its level of nesting.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.H4">
       
        <p>Level 4 Heading, for use in conforming writers that cannot hierarchically nest their sections and thus cannot determine the level of a heading from its level of nesting.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.H5">
       
        <p>Level 5 Heading, for use in conforming writers that cannot hierarchically nest their sections and thus cannot determine the level of a heading from its level of nesting.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.H6">
       
        <p>Level 6 Heading, for use in conforming writers that cannot hierarchically nest their sections and thus cannot determine the level of a heading from its level of nesting.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.L">
       
        <p>(List) A sequence of items of like meaning and importance. Its immediate children should be an optional caption (structure type Caption) followed by one or more list items (structure type LI).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.LI">
       
        <p>(List item) An individual member of a list. Its children may be one or more labels, list bodies, or both (structure types Lbl or LBody).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.Lbl">
       
        <p>(Label) A name or number that distinguishes a given item from others in the same list or other group of like items.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.LBody">
       
        <p>(List body) The descriptive content of a list item. In a dictionary list, for example, it contains the definition of the term. It may either contain the content directly or have other BLSEs, perhaps including nested lists, as children.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.Table">
       
        <p>(Table) A two-dimensional layout of rectangular data cells, possibly having a complex substructure. It contains either one or more table rows (structure type TR) as children; or an optional table head (structure type THead) followed by one or more table body elements (structure type TBody) and an optional table footer (structure type TFoot). In addition, a table may have a caption (structure type Caption) as its first or last child.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.THead">
       
        <p>(Table header row group; PDF 1.5) A group of rows that constitute the header of a table. If the table is split across multiple pages, these rows may be redrawn at the top of each table fragment (although there is only one THead element).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.TBody">
       
        <p>(Table body row group; PDF 1.5) A group of rows that constitute the main body portion of a table. If the table is split across multiple pages, the body area may be broken apart on a row boundary. A table may have multiple TBody elements to allow for the drawing of a border or background for a set of rows.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.TFoot">
       
        <p>(Table footer row group; PDF 1.5) A group of rows that constitute the footer of a table. If the table is split across multiple pages, these rows may be redrawn at the bottom of each table fragment (although there is only one TFoot element.)</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.TR">
       
        <p>(Table row) A row of headings or data in a table. It may contain table header cells and table data cells (structure types TH and TD).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.TH">
       
        <p>(Table header cell) A table cell containing header text describing one or more rows or columns of the table.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.TD">
       
        <p>(Table data cell) A table cell containing data that is part of the table's content.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.Span">
       
        <p>(Span) A generic inline portion of text having no particular inherent characteristics. It can be used, for example, to delimit a range of text with a given set of styling attributes.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.Quote">
       
        <p>(Quotation) An inline portion of text attributed to someone other than the author of the surrounding text.</p>  
        <p>The quoted text should be contained inline within a single paragraph. This differs from the block-level element BlockQuote, which consists of one or more complete paragraphs (or other elements presented as if they were complete paragraphs).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.Note">
       
        <p>(Note) An item of explanatory text, such as a footnote or an endnote, that is referred to from within the body of the document. It may have a label (structure type Lbl) as a child. The note may be included as a child of the structure element in the body text that refers to it, or it may be included elsewhere (such as in an endnotes section) and accessed by means of a reference (structure type Reference).</p>  
        <p>Tagged PDF does not prescribe the placement of footnotes in the page content order. They may be either inline or at the end of the page, at the discretion of theconforming writer.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.Reference">
       
        <p>(Reference) A citation to content elsewhere in the document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.BibEntry">
       
        <p>(Bibliography entry) A reference identifying the external source of some cited content. It may contain a label (structure type Lbl) as a child.</p>  
        <p>Although a bibliography entry is likely to include component parts identifying the cited content's author, work, publisher, and so forth, no standard structure types are defined at this level of detail.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.Code">
       
        <p>(Code) A fragment of computer program text.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.Link">
       
        <p>(Link) An association between a portion of the ILSE's content and a corresponding link annotation or annotations. Its children should be one or more content items or child ILSEs and one or more object references identifying the associated link annotations.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.Annot">
       
        <p>(Annotation; PDF 1.5) An association between a portion of the ILSE's content and a corresponding PDF annotation. Annot shall be used for all PDF annotations except link annotations and widget annotations.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.Ruby">
       
        <p>(Ruby; PDF 1.5) A side-note (annotation) written in a smaller text size and placed adjacent to the base text to which it refers. A Ruby element may also contain the RB, RT, and RP elements.</p>  
        <p>(Ruby) The wrapper around the entire ruby assembly. It shall contain one RB element followed by either an RT element or a three-element group consisting of RP, RT, and RP. Ruby elements and their content elements shall not break across multiple lines.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.RB">
       
        <p>(Ruby base text) The full-size text to which the ruby annotation is applied. RB may contain text, other inline elements, or a mixture of both. It may have the RubyAlignattribute.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.RT">
       
        <p>(Ruby annotation text) The smaller-size text that shall be placed adjacent to the ruby base text. It may contain text, other inline elements, or a mixture of both. It may have the RubyAlign and RubyPosition attributes.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.RP">
       
        <p>(Ruby punctuation) Punctuation surrounding the ruby annotation text. It is used only when a ruby annotation cannot be properly formatted in a ruby style and instead is formatted as a normal comment, or when it is formatted as a warichu. It contains text (usually a single LEFT or RIGHT PARENTHESIS or similar bracketing character).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.Warichu">
       
        <p>(Warichu; PDF 1.5) A comment or annotation in a smaller text size and formatted onto two smaller lines within the height of the containing text line and placed following (inline) the base text to which it refers. A Warichu element may also contain the WT and WP elements.</p>  
        <p>(Warichu) The wrapper around the entire warichu assembly. It may contain a three-element group consisting of WP, WT, and WP. Warichu elements (and their content elements) may wrap across multiple lines, according to the warichu breaking rules described in the Japanese Industrial Standard (JIS) X 4051-1995.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.WT">
       
        <p>(Warichu text) The smaller-size text of a warichu comment that is formatted into two lines and placed between surrounding WP elements.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.WP">
       
        <p>(Warichu punctuation) The punctuation that surrounds the WT text. It contains text (usually a single LEFT or RIGHT PARENTHESIS or similar bracketing character). According to JIS X 4051-1995, the parentheses surrounding a warichu may be converted to a SPACE (nominally 1/4 EM in width) at the discretion of the formatter.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.Figure">
       
        <p>(Figure) An item of graphical content. Its placement may be specified with the Placement layout attribute.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.Formula">
       
        <p>(Formula) A mathematical formula.</p>  
        <p>This structure type is useful only for identifying an entire content element as a formula. No standard structure types are defined for identifying individual components within the formula. From a formatting standpoint, the formula shall be treated similarly to a figure (structure type Figure).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.tagged.logicalstructure.StructureTypeStandard.Form">
       
        <p>(Form) A widget annotation representing an interactive form field.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.tagged.TaggedContent"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.getStructureTextState">
       
        <p>Get {@link StructureTextState} settings for whole document.</p>Value: {@link StructureTextState} settings for whole document.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.getStructTreeRootElement">
       
        <p>Gets {@link StructTreeRootElement} of PDF document.</p>Value: {@link StructTreeRootElement} of PDF document.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.getRootElement">
       
        <p>Gets root {@link StructureElement} of logical structure of PDF document.</p>Value: Root {@link StructureElement} of logical structure of PDF document.
      
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createMCRElementTextInternal(TaggedContext,String)">
      <param name="TaggedContext"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createMCRElementImageInternal(TaggedContext,String)">
      <param name="TaggedContext"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.setLanguage(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.setTitle(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createDocumentElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createPartElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createPartElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createArtElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createArtElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createSectElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createSectElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createDivElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createDivElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createBlockQuoteElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createBlockQuoteElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createCaptionElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createCaptionElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createTOCElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createTOCElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createTOCIElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createTOCIElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createIndexElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createIndexElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createNonStructElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createNonStructElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createPrivateElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createPrivateElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createParagraphElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createParagraphElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createHeaderElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createHeaderElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createHeaderElement(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createH1ElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createH2ElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createH3ElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createH4ElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createH5ElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createH6ElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createListElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createListElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createListLIElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createListLblElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createListLBodyElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createTableElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createTableElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createTableTHeadElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createTableTHeadElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createTableTBodyElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createTableTBodyElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createTableTFootElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createTableTFootElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createTableTRElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createTableTRElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createTableTHElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createTableTHElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createTableTDElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createTableTDElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createSpanElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createSpanElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createQuoteElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createQuoteElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createNoteElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createNoteElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createReferenceElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createReferenceElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createBibEntryElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createBibEntryElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createCodeElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createCodeElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createLinkElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createLinkElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createAnnotElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createAnnotElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createRubyElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createRubyElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createRubyRBElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createRubyRTElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createRubyRPElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createWarichuElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createWarichuElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createWarichuWTElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createWarichuWPElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createFigureElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createFigureElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createFormulaElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createFormulaElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createFormElementInternal(TaggedContext,IPdfPrimitive)">
      <param name="TaggedContext"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.createFormElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.preSave"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.save"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContent.#ctor(IDocument)">
      <param name="IDocument"/>
    </member>
    <member name="T:com.aspose.pdf.tagged.TaggedContext">
      For internal usage only
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContext.getNextMCID"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContext.updateLastMCID(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContext.getTrailer"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContext.getDocument"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContext.getCurrentPage"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContext.getStructTreeRootElement"/>
    <member name="M:com.aspose.pdf.tagged.TaggedContext.pageRegisterMCRElement(Page,MCRElement)">
      <param name="Page"/>
      <param name="MCRElement"/>
    </member>
    <member name="M:com.aspose.pdf.tagged.TaggedContext.pageRegisterTableElement(Page,TableElement)">
      <param name="Page"/>
      <param name="TableElement"/>
    </member>
    <member name="T:com.aspose.pdf.TeXFragment">
       
        <p>Represents LaTeX fragment.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TeXFragment.getTeXLoadOptionsOfInstance">
       
        <p>Gets or sets TeXLoadOptions that will be used for loading (and rendering) of LaTeX into this instance of class. Please use it when it's necessary use specific setting for import of LaTeX for this or that instance (f.e when this or that instance should use specific BasePath for imported LaTeX or should use specific loader of external resources) If parameter is default (null), then standard LaTeX loading options will be used.</p> @return TeXLoadOptions instance
      
    </member>
    <member name="M:com.aspose.pdf.TeXFragment.setTeXLoadOptionsOfInstance(TeXLoadOptions)">
       
        <p>Gets or sets LatexLoadOptions that will be used for loading (and rendering) of LaTeX into this instance of class. Please use it when it's necessary use specific setting for import of LaTeX for this or that instance (f.e when this or that instance should use specific BasePath for imported LaTeX or should use specific loader of external resources) If parameter is default (null), then standard LaTeX loading options will be used.</p> @param value TeXLoadOptions instance
      
      <param name="TeXLoadOptions"/>
    </member>
    <member name="M:com.aspose.pdf.TeXFragment.getLatexLoadOptionsOfInstance">
       
        <p>Gets or sets TeXLoadOptions that will be used for loading (and rendering) of LaTeX into this instance of class. Please use it when it's necessary use specific setting for import of LaTeX for this or that instance (f.e when this or that instance should use specific BasePath for imported LaTeX or should use specific loader of external resources) If parameter is default (null), then standard LaTeX loading options will be used.</p> @return TeXLoadOptions instance @deprecated Please us TeXLoadOptionsOfInstance instead.
      
    </member>
    <member name="M:com.aspose.pdf.TeXFragment.setLatexLoadOptionsOfInstance(TeXLoadOptions)">
       
        <p>Gets or sets TeXLoadOptions that will be used for loading (and rendering) of LaTeX into this instance of class. Please use it when it's necessary use specific setting for import of LaTeX for this or that instance (f.e when this or that instance should use specific BasePath for imported LaTeX or should use specific loader of external resources) If parameter is default (null), then standard LaTeX loading options will be used.</p> @param value TeXLoadOptions instance @deprecated Please us TeXLoadOptionsOfInstance instead.
      
      <param name="TeXLoadOptions"/>
    </member>
    <member name="M:com.aspose.pdf.TeXFragment.deepClone">
       
        <p>Clones fragment.</p> @return Cloned fragment.
      
    </member>
    <member name="M:com.aspose.pdf.TeXFragment.#ctor(String)">
       
        <p>Initializes a new instance of the HtmlFragment class.</p> @param text The fragment text
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TeXFragment.#ctor(String,boolean)">
       
        <p>Initializes a new instance of the HtmlFragment class.</p> @param text The fragment text @param removeIndents Determines whether not to make indents while typesetting LaTeX fragment
      
      <param name="String"/>
      <param name="boolean"/>
    </member>
    <member name="T:com.aspose.pdf.TeXLoadOptions">
       
        <p>Represents options for loading/importing TeX file into PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TeXLoadOptions.getTextFontName">
       
        <p>Gets name of the font used for rendering math formulas.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.TeXLoadOptions.setTextFontName(String)">
       
        <p>Sets name of the font used for rendering math formulas.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TeXLoadOptions.getResourceLoadingCallback">
       
        <p>Resource loading callback.</p> @return IResourceLoadingCallback object
      
    </member>
    <member name="M:com.aspose.pdf.TeXLoadOptions.setResourceLoadingCallback(com.aspose.pdf.IResourceLoadingCallback)">
       
        <p>Resource loading callback.</p> @param value IResourceLoadingCallback object
      
      <param name="com.aspose.pdf.IResourceLoadingCallback"/>
    </member>
    <member name="M:com.aspose.pdf.TeXLoadOptions.getWarningCallback">
       
        <p>Gets callback object for info/errors notification.</p> @return IWarningCallback value
      
    </member>
    <member name="M:com.aspose.pdf.TeXLoadOptions.setWarningCallback(WarningCallback)">
       
        <p>Sets callback object for info/errors notification.</p> @param value IWarningCallback value
      
      <param name="WarningCallback"/>
    </member>
    <member name="M:com.aspose.pdf.TeXLoadOptions.getMathFontName">
       
        <p>Gets name of the font used for rendering math formulas.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.TeXLoadOptions.setMathFontName(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TeXLoadOptions.getSpecSymbolsFontName">
       
        <p>Gets name of the font used for rendering special symbols, e.g. \sigma, \textbraceright, \vdots, etc.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.TeXLoadOptions.setSpecSymbolsFontName(String)">
       
        <p>Sets name of the font used for rendering special symbols, e.g. \sigma, \textbraceright, \vdots, etc.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TeXLoadOptions.getUseTempFile">
       
        <p>Sets/Gets the value indicating whether the LaTeX parser should save normalized content into a temp file or into memory.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TeXLoadOptions.setUseTempFile(boolean)">
       
        <p>Sets/Gets the value indicating whether the LaTeX parser should save normalized content into a temp file or into memory.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TeXLoadOptions.#ctor">
       
        <p>Creates default load options for converting TeX file into PDF document.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TeXSaveOptions">
       
        <p>Save options for export to TeX format</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TeXSaveOptions.getOutDirectoryPath">
       
        <p>Property for {@code _outDirectoryPath} parameter.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.TeXSaveOptions.setOutDirectoryPath(String)">
       
        <p>Property for {@code _outDirectoryPath} parameter.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TeXSaveOptions.addFontEncs(String)">
      Adds a font ancoding to the font encoding list @param fontEncs Fonts to encodings list
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TeXSaveOptions.clearFontEncs">
      Clears fonts encodings list
    </member>
    <member name="M:com.aspose.pdf.TeXSaveOptions.getPagesCount">
      Get pages count @return int value
    </member>
    <member name="M:com.aspose.pdf.TeXSaveOptions.setPagesCount(int)">
      Set pages count @param value int value
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TeXSaveOptions.#ctor">
       
        <p>Initializes a new instance of the {@code LaTeXSaveOptions} class.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.text.CustomFontSubstitutionBase">
       
        <p>Represents a base class for custom font substitution strategy.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.text.CustomFontSubstitutionBase.trySubstitute(OriginalFontSpecification,com.aspose.pdf.Font[])">&lt;p&gt; Substitutes original font with another font. &lt;/p&gt; @return True in case substitution was successful. @param originalFontSpecification Original font specification. @param substitutionFont Substitution font. &lt;hr&gt; &lt;p&gt; The class CustomFontSubstitutionBase should be inherited to implement custom font substitution logic. TrySubstitute method should be overridden properly: Must return true in case substitution is required. substitutionFont must be set to valid Font object. Must return false in case no substitution is required. substitutionFont may be set to null. &lt;/p&gt; 
      <param name="OriginalFontSpecification"/>
      <param name="com.aspose.pdf.Font[]"/>
    </member>
    <member name="T:com.aspose.pdf.text.CustomFontSubstitutionBase.OriginalFontSpecification">&lt;p&gt; Represents original font specification. &lt;/p&gt; &lt;hr&gt; &lt;p&gt; Provides info related to original font such as , flag. Also provides flag that helps to check is the substitution will anyway happen with the font and the user may override the default substitution logic. &lt;/p&gt;</member>
    <member name="M:com.aspose.pdf.text.CustomFontSubstitutionBase.OriginalFontSpecification.getOriginalFontName">
       
        <p>Gets original font name.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.text.CustomFontSubstitutionBase.OriginalFontSpecification.isEmbedded">
       
        <p>Gets a value that indicates whether the font is embedded.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.text.CustomFontSubstitutionBase.OriginalFontSpecification.isSubstitutionUnavoidable">&lt;p&gt; Gets a value that indicates that the substitution is unavoidable. &lt;/p&gt; @return boolean value &lt;hr&gt; &lt;p&gt; Returns true in case substitution was requested because of absence of the original font or in case original font cannot be used in context of some task. In case user ignores the flag and doesn't substitute the font - default font substitution procedure is performed. But it provides opportunity for the user to alternate standard font substitution procedure and set better font to the system. Returns false in case original font is present, valid, but it is allowed for the user to substitute it. &lt;/p&gt;</member>
    <member name="M:com.aspose.pdf.text.CustomFontSubstitutionBase.OriginalFontSpecification.#ctor(String,boolean,boolean)">
       
        <p>Initializes new OriginalFontSpecification object.</p> @param originalFontName String object @param isEmbedded boolean value @param isUnavoidable boolean value
      
      <param name="String"/>
      <param name="boolean"/>
      <param name="boolean"/>
    </member>
    <member name="T:com.aspose.pdf.text.ExtractedTextPostProcessor">
       
        <p>Performs post processing of extrated text</p> 
      
    </member>
    <member name="M:com.aspose.pdf.text.ExtractedTextPostProcessor.process(String)">
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.text.FontSourceCollection">
      Represents font sources collection.
    </member>
    <member name="M:com.aspose.pdf.text.FontSourceCollection.size">
       
        <p>Gets the number of Font object elements actually contained in the collection.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.text.FontSourceCollection.getSyncRoot">
       
        <p>Gets an object that can be used to synchronize access to the collection.</p> @return Object element
      
    </member>
    <member name="M:com.aspose.pdf.text.FontSourceCollection.isSynchronized">
       
        <p>Gets a value indicating whether access to the collection is synchronized (thread safe).</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.text.FontSourceCollection.iterator">
       
        <p>Returns an enumerator for the entire collection.</p> @return Enumerator object.
      
    </member>
    <member name="M:com.aspose.pdf.text.FontSourceCollection.copyTo(FontSource[],int)">
       
        <p>Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array</p> @param array Array of objects which will be copied. @param index Starting index from which copying will be started.
      
      <param name="FontSource[]"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.text.FontSourceCollection.add(FontSource)">
       
        <p>Adds new font source object to the collection.</p> @param fontSource Font source.
      
      <param name="FontSource"/>
    </member>
    <member name="M:com.aspose.pdf.text.FontSourceCollection.clear">
       
        <p>Clears the font source collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.text.FontSourceCollection.delete(FontSource)">
       
        <p>Deletes the font source element.</p> @param fontSource FontSource object that will be deleted.
      
      <param name="FontSource"/>
    </member>
    <member name="M:com.aspose.pdf.text.FontSourceCollection.getItem(int)">
       
        <p>Gets the font element at the specified index.</p> @param index Index within the collection. @return Font source object.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.text.FontSourceCollection.contains(FontSource)">
       
        <p>Determines whether an element is in the collection.</p> @return True - if element found; otherwise, false. @param item FontSource object to search.
      
      <param name="FontSource"/>
    </member>
    <member name="M:com.aspose.pdf.text.FontSourceCollection.remove(FontSource)">
       
        <p>Deletes the font source element.</p> @param item FontSource object that will be deleted. @return True - if element found; otherwise, false.
      
      <param name="FontSource"/>
    </member>
    <member name="M:com.aspose.pdf.text.FontSourceCollection.#ctor">
       
        <p>Initializes collection object</p> 
      
    </member>
    <member name="F:com.aspose.pdf.text.FontSourceCollection.CollectionChanged">
      CollectionChanged event
    </member>
    <member name="T:com.aspose.pdf.text.FontSubstitution">
      For internal usage only 
        <p>Represents a base class for font substitution strategies.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.text.FontSubstitution.getSubstitutionFontDefinition">
      Get Substitution Font Definition @return FontDefinition object
    </member>
    <member name="M:com.aspose.pdf.text.FontSubstitution.setSubstitutionFontDefinition(FontDefinition)">
      Set Substitution Font Definition @param value FontDefinition object
      <param name="FontDefinition"/>
    </member>
    <member name="M:com.aspose.pdf.text.FontSubstitution.getSubstitutedUnicode(char)">
       
        <p>Returns unicode substitution</p> @return char value @param unicode char value
      
      <param name="char"/>
    </member>
    <member name="M:com.aspose.pdf.text.FontSubstitution.#ctor">
      Creates FontSubstitution instance
    </member>
    <member name="T:com.aspose.pdf.text.FontSubstitutionCollection">
      Represents font substitution strategies collection.
    </member>
    <member name="M:com.aspose.pdf.text.FontSubstitutionCollection.size">
       
        <p>Gets the number of Font object elements actually contained in the collection.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.text.FontSubstitutionCollection.getSyncRoot">
       
        <p>Gets an object that can be used to synchronize access to the collection.</p> @return Object for synchronization
      
    </member>
    <member name="M:com.aspose.pdf.text.FontSubstitutionCollection.isSynchronized">
       
        <p>Gets a value indicating whether access to the collection is synchronized (thread safe).</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.text.FontSubstitutionCollection.iterator">
       
        <p>Returns an enumerator for the entire collection.</p> @return Enumerator object
      
    </member>
    <member name="M:com.aspose.pdf.text.FontSubstitutionCollection.add(FontSubstitution)">
       
        <p>Adds new font substitution object to the collection.</p> @param fontSubstitution Font substitution strategy.
      
      <param name="FontSubstitution"/>
    </member>
    <member name="M:com.aspose.pdf.text.FontSubstitutionCollection.clear">
       
        <p>Clears the font substitution collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.text.FontSubstitutionCollection.delete(FontSubstitution)">
      For internal only 
        <p>Deletes the font substitution element.</p> @param fontSubstitution FontSubstitution object
      
      <param name="FontSubstitution"/>
    </member>
    <member name="M:com.aspose.pdf.text.FontSubstitutionCollection.contains(FontSubstitution)">
       
        <p>Determines whether an element is in the collection.</p> @return True - if element found; otherwise, false. @param item FontSubstitution object to search.
      
      <param name="FontSubstitution"/>
    </member>
    <member name="M:com.aspose.pdf.text.FontSubstitutionCollection.remove(FontSubstitution)">
       
        <p>Deletes the font substitution element.</p> @param item FontSubstitution object to delete. @return True - if element removed; otherwise, false.
      
      <param name="FontSubstitution"/>
    </member>
    <member name="M:com.aspose.pdf.text.FontSubstitutionCollection.getItem(int)">
       
        <p>Gets the font element at the specified index.</p> @param index Index within the collection. @return FontSubstitution object.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.text.FontSubstitutionCollection.#ctor">
       
        <p>Initializes collection object</p> 
      
    </member>
    <member name="T:com.aspose.pdf.text.FontTypes">
       
        <p>Supported font types enumeration.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.text.FontTypes.TTF">
       
        <p>TTF font type</p> 
      
    </member>
    <member name="F:com.aspose.pdf.text.FontTypes.OTF">
       
        <p>OTF font type</p> 
      
    </member>
    <member name="T:com.aspose.pdf.text.SimpleFontSubstitution">
       
        <p>Represents a class for simple font substitution strategy.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.text.SimpleFontSubstitution.getOriginalFontName">
       
        <p>Gets original font name that should be substituted with {@code SubstitutionFontName}</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.text.SimpleFontSubstitution.getSubstitutionFontName">
       
        <p>Gets font name that should substitute the {@code OriginalFontName}</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.text.SimpleFontSubstitution.getSubstitutedUnicode(char)">
       
        <p>Returns unicode substitution</p> @return char value @param unicode char value
      
      <param name="char"/>
    </member>
    <member name="M:com.aspose.pdf.text.SimpleFontSubstitution.#ctor(String,String,boolean)">
       
        <p>Initializes a new instance of {@code SimpleFontSubstitution} class.</p> @param originalFontName Original font name. @param substitutionFontName Substitution font name. @param isForcedBySaveOption Substitution forced by DefaultFontName save option.
      
      <param name="String"/>
      <param name="String"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.text.SimpleFontSubstitution.#ctor(String,String)">
       
        <p>Initializes a new instance of {@code SimpleFontSubstitution} class.</p> @param originalFontName Original font name. @param substitutionFontName Substitution font name.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.text.SubstitutionFontCategories">
       
        <p>Represents font categories that can be substituted.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.text.SubstitutionFontCategories.TheSameNamedEmbeddedFonts">
       
        <p>The fonts that are named the same as system fonts. Those fonts are mostly safe to be substituted with the same named system fonts.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.text.SubstitutionFontCategories.AllEmbeddedFonts">
       
        <p>All embedded fonts are substituted.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.text.SystemFontsSubstitution">
       
        <p>Represents a class for font substitution strategy that substitutes fonts with system fonts.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.text.SystemFontsSubstitution.getFontCategories">
       
        <p>Gets or sets substitution font categories that should be substituted with system fonts.</p> @return SubstitutionFontCategories element @see SubstitutionFontCategories
      
    </member>
    <member name="M:com.aspose.pdf.text.SystemFontsSubstitution.setFontCategories(int)">
       
        <p>Gets or sets substitution font categories that should be substituted with system fonts.</p> @param value SubstitutionFontCategories element @see SubstitutionFontCategories
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.text.SystemFontsSubstitution.getDefaultFont">
       
        <p>Gets or sets default substitution font. The font is used when no other valid substitution were found but initial font belongs to target substitution category ({@code FontCategories}).</p> @return Font object
      
    </member>
    <member name="M:com.aspose.pdf.text.SystemFontsSubstitution.setDefaultFont(Font)">
       
        <p>Gets or sets default substitution font. The font is used when no other valid substitution were found but initial font belongs to target substitution category ({@code FontCategories}).</p> @param value Font object
      
      <param name="Font"/>
    </member>
    <member name="M:com.aspose.pdf.text.SystemFontsSubstitution.#ctor(int)">
       
        <p>Initializes a new instance of {@code SystemFontsSubstitution} class.</p> @param fontCategories Target font categories to substitute with system fonts
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.text.TextProcessingContext">
       
        <p>Represents text processing context</p> 
      
    </member>
    <member name="M:com.aspose.pdf.text.TextProcessingContext.getInstance(IContext)">
      get Instance @param context IContext object @return TextProcessingContext object
      <param name="IContext"/>
    </member>
    <member name="M:com.aspose.pdf.text.TextProcessingContext.beginMassChanges">
      begin Mass Changes
    </member>
    <member name="M:com.aspose.pdf.text.TextProcessingContext.endMassChanges">
      end Mass Changes
    </member>
    <member name="M:com.aspose.pdf.text.TextProcessingContext.isMassOperation">
      is Mass Operation @return boolean value
    </member>
    <member name="M:com.aspose.pdf.text.TextProcessingContext.getLastEmcOpIndex"/>
    <member name="M:com.aspose.pdf.text.TextProcessingContext.setLastEmcOpIndex(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.text.TextProcessingContext.getMcName"/>
    <member name="M:com.aspose.pdf.text.TextProcessingContext.setMcName(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.text.TextProcessingContext.getMcId"/>
    <member name="M:com.aspose.pdf.text.TextProcessingContext.setMcId(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.text.TextProcessingContext.initializeMcProperties"/>
    <member name="T:com.aspose.pdf.TextAbsorber">&lt;p&gt; Represents an absorber object of a text. Performs text extraction and provides access to the result via {@code TextAbsorber.Text} object. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to extract text on the first PDF document page. // open document Document doc = new Document(inFile); // create TextAbsorber object to extract text TextAbsorber absorber = new TextAbsorber(); // accept the absorber for first page doc.getPages().get(1).accept(absorber); // get the extracted text String extractedText = absorber.getText(); &lt;/pre&gt; &lt;hr&gt; &lt;p&gt; The {@code TextAbsorber} object is used to extract text from a Pdf document or the document's page. &lt;/p&gt;</member>
    <member name="M:com.aspose.pdf.TextAbsorber.getText">&lt;p&gt; Gets extracted text that the {@code TextAbsorber} extracts on the PDF document or page. &lt;/p&gt; @return String value &lt;hr&gt; &lt;pre&gt; The example demonstrates how to extract text from all pages of the PDF document. // open document Document doc = new Document(inFile); // create TextAbsorber object to extract text TextAbsorber absorber = new TextAbsorber(); // accept the absorber for all document's pages doc.getPages().accept(absorber); // get the extracted text String extractedText = absorber.getText(); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.TextAbsorber.hasErrors">
       
        <p>Value indicates whether errors were found during text extraction. Searching for errors will performed only if TextSearchOptions.LogTextExtractionErrors = true; And it may decrease performance.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextAbsorber.getErrors">
       
        <p>List of {@code TextExtractionError} objects. It contain information about errors were found during text extraction. Searching for errors will performed only if TextSearchOptions.LogTextExtractionErrors = true; And it may decrease performance.</p> @return List of TextExtractionError objects
      
    </member>
    <member name="M:com.aspose.pdf.TextAbsorber.visit(Page)">&lt;p&gt; Extracts text on the specified page &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to extract text on the first PDF document page. // open document Document doc = new Document(inFile); // create TextAbsorber object to extract text TextAbsorber absorber = new TextAbsorber(); // accept the absorber for all document's pages absorber.visit(doc.getPages(1)); // get the extracted text String extractedText = absorber.getText(); &lt;/pre&gt; @param page Pdf pocument page object. 
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.TextAbsorber.visit(XForm)">&lt;p&gt; Extracts text on the specified XForm. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to extract text on the first PDF document page. // open document Document doc = new Document(inFile); // create TextAbsorber object to extract text TextAbsorber absorber = new TextAbsorber(); // accept the absorber for all document's pages absorber.visit(doc.Pages().get(1).getResources().getForms().get("Xform1")); // get the extracted text String extractedText = absorber.getText(); &lt;/pre&gt; @param form Pdf form object. 
      <param name="XForm"/>
    </member>
    <member name="M:com.aspose.pdf.TextAbsorber.visit(IDocument)">&lt;p&gt; Extracts text on the specified document &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to extract text on PDF document. // open document Document doc = new Document(inFile); // create TextAbsorber object to extract text TextAbsorber absorber = new TextAbsorber(); // accept the absorber for all document's pages absorber.visit(doc); // get the extracted text String extractedText = absorber.getText(); &lt;/pre&gt; @param pdf Pdf pocument object. 
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.TextAbsorber.getExtractionOptions">&lt;p&gt; Gets text extraction options. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to set Pure text formatting mode and perform text extraction. // open document Document doc = new Document(inFile); // create TextAbsorber object to extract text with formatting TextAbsorber absorber = new TextAbsorber(); // set pure text formatting mode absorber.setExtractionOptions ( new TextExtractionOptions(TextExtractionOptions.TextFormattingMode.Pure)); // accept the absorber for all document's pages doc.getPages().accept(absorber); // get the extracted text String extractedText = absorber.getText(); &lt;/pre&gt; &lt;hr&gt; &lt;p&gt; Allows to define text formatting mode {@code TextExtractionOptions} during extraction. The default mode is {@code TextExtractionOptions.TextFormattingMode.Pure} &lt;/p&gt; @return TextExtractionOptions value</member>
    <member name="M:com.aspose.pdf.TextAbsorber.setExtractionOptions(TextExtractionOptions)">&lt;p&gt; Sets text extraction options. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to set Pure text formatting mode and perform text extraction. // open document Document doc = new Document(inFile); // create TextAbsorber object to extract text with formatting TextAbsorber absorber = new TextAbsorber(); // set pure text formatting mode absorber.setExtractionOptions ( new TextExtractionOptions(TextExtractionOptions.TextFormattingMode.Pure)); // accept the absorber for all document's pages doc.getPages().accept(absorber); // get the extracted text String extractedText = absorber.getText(); &lt;/pre&gt; &lt;hr&gt; &lt;p&gt; Allows to define text formatting mode {@code TextExtractionOptions} during extraction. The default mode is {@code TextExtractionOptions.TextFormattingMode.Pure} &lt;/p&gt; @param value TextExtractionOptions value 
      <param name="TextExtractionOptions"/>
    </member>
    <member name="M:com.aspose.pdf.TextAbsorber.getTextSearchOptions">
      Gets text search options. 
        <p>Allows to define rectangle which delimits the extracted text. By default the rectangle is empty. That means page boundaries only defines the text extraction region.</p> @return TextSearchOptions value
      
    </member>
    <member name="M:com.aspose.pdf.TextAbsorber.setTextSearchOptions(TextSearchOptions)">
      Sets text search options. 
        <p>Allows to define rectangle which delimits the extracted text. By default the rectangle is empty. That means page boundaries only defines the text extraction region.</p> @param value TextSearchOptions value
      
      <param name="TextSearchOptions"/>
    </member>
    <member name="M:com.aspose.pdf.TextAbsorber.#ctor">&lt;p&gt; Initializes a new instance of the {@code TextAbsorber}. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to extract text from all pages of the PDF document. // open document Document doc = new Document(inFile); // create TextAbsorber object to extract text TextAbsorber absorber = new TextAbsorber(); // accept the absorber for all document's pages doc.getPages().accept(absorber); // get the extracted text String extractedText = absorber.getText(); &lt;/pre&gt; &lt;hr&gt; &lt;p&gt; Performs text extraction and provides access to the extracted text via {@code TextAbsorber.Text} object. &lt;/p&gt;</member>
    <member name="M:com.aspose.pdf.TextAbsorber.#ctor(TextExtractionOptions)">&lt;p&gt; Initializes a new instance of the {@code TextAbsorber} with extraction options. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to extract text from all pages of the PDF document. // open document Document doc = new Document(inFile); // create TextAbsorber object to extract text with formatting TextAbsorber absorber = new TextAbsorber(new TextExtractionOptions(TextExtractionOptions.TextFormattingMode.Pure)); // accept the absorber for all document's pages doc.getPages().accept(absorber); // get the extracted text String extractedText = absorber.getText(); &lt;/pre&gt; &lt;hr&gt; &lt;p&gt; Performs text extraction and provides access to the extracted text via {@code TextAbsorber.Text} object. &lt;/p&gt; @param extractionOptions Text extraction options &lt;hr&gt; 
      <param name="TextExtractionOptions"/>
    </member>
    <member name="M:com.aspose.pdf.TextAbsorber.#ctor(TextExtractionOptions,TextSearchOptions)">&lt;p&gt; Initializes a new instance of the {@code TextAbsorber} with extraction and text search options. &lt;/p&gt; @param extractionOptions Text extraction options @param textSearchOptions Text search options &lt;hr&gt; &lt;p&gt; Performs text extraction and provides access to the extracted text via {@code TextAbsorber.Text} object. &lt;/p&gt; 
      <param name="TextExtractionOptions"/>
      <param name="TextSearchOptions"/>
    </member>
    <member name="M:com.aspose.pdf.TextAbsorber.#ctor(TextSearchOptions)">&lt;p&gt; Initializes a new instance of the {@code TextAbsorber} with text search options. &lt;/p&gt; @param textSearchOptions Text search options &lt;hr&gt; &lt;p&gt; Performs text extraction and provides access to the extracted text via {@code TextAbsorber.Text} object. &lt;/p&gt; 
      <param name="TextSearchOptions"/>
    </member>
    <member name="T:com.aspose.pdf.TextAlignment">
       
        <p>Alignment of text in annotation.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextAlignment.Left">
       
        <p>Text is aligned to left.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextAlignment.Center">
       
        <p>Text is centered.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextAlignment.Right">
       
        <p>Text is aligned to right.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TextAnnotation">
       
        <p>Represents a text annotation that is a "sticky note" attached to a point in the PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextAnnotation.getOpen">
       
        <p>Gets a flag specifying whether the annotation should initially be displayed open.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextAnnotation.setOpen(boolean)">
       
        <p>Sets a flag specifying whether the annotation should initially be displayed open.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextAnnotation.getIcon">
       
        <p>Gets an icon to be used in displaying the annotation.</p> @return TextIcon value @see TextIcon
      
    </member>
    <member name="M:com.aspose.pdf.TextAnnotation.setIcon(int)">
       
        <p>Sets an icon to be used in displaying the annotation.</p> @param value TextIcon value @see TextIcon
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextAnnotation.getState">
       
        <p>Gets the state to which the original annotation should be set.</p> @return AnnotationState value @see AnnotationState
      
    </member>
    <member name="M:com.aspose.pdf.TextAnnotation.setState(int)">
       
        <p>Sets the state to which the original annotation should be set.</p> @param value AnnotationState value @see AnnotationState
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextAnnotation.getAnnotationType">
       
        <p>Gets type of annotation.</p> @return AnnotationType value @see AnnotationState
      
    </member>
    <member name="M:com.aspose.pdf.TextAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor object to process the annotation.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.TextAnnotation.getStateModel">
       
        <p>Gets state model</p> @return AnnotationStateModel value @see AnnotationStateModel
      
    </member>
    <member name="M:com.aspose.pdf.TextAnnotation.#ctor(IDocument)">
       
        <p>Constructor for annotation when used in Generator.</p> @param document Document where text annotation will be created.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.TextAnnotation.#ctor(Page,Rectangle)">
       
        <p>Creates new Text annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.TextAnnotation.#ctor">
      Create TextAnnotation instance
    </member>
    <member name="T:com.aspose.pdf.TextBoxField">
       
        <p>Class representing text box field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.getMultiline">
       
        <p>Gets multiline flag of the field. If Multiline is true field can contain multiple lines of text.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.setMultiline(boolean)">
       
        <p>Sets multiline flag of the field. If Multiline is true field can contain multiple lines of text.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.getSpellCheck">
       
        <p>Gets spellcheck flag for field. If true field shall be spell checked.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.setSpellCheck(boolean)">
       
        <p>Sets spellcheck flag for field. If true field shall be spell checked.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.getScrollable">
       
        <p>Gets scrollable flag of field. If true field can be scrolled.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.setScrollable(boolean)">
       
        <p>Sets scrollable flag of field. If true field can be scrolled.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.getForceCombs">
       
        <p>Gets flag which indicates is field divided into spaced positions.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.setForceCombs(boolean)">
       
        <p>Sets flag which indicates is field divided into spaced positions.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.getMaxLen">
       
        <p>Gets maximum length of text in the field.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.setMaxLen(int)">
       
        <p>Sets maximum length of text in the field.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.getTextVerticalAlignment">
       
        <p>Gets or sets text vertical alignment for annotation.</p> @return VerticalAlignment element
      
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.setTextVerticalAlignment(int)">
       
        <p>Gets or sets text vertical alignment for annotation.</p> @param value VerticalAlignment element
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.getValue">
       
        <p>Gets value of the field.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.setValue(String)">
       
        <p>Sets value of the field.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.addImage(BufferedImage)">
       
        <p>Adds image into the field resources an draws it.</p> @param image Image to add into text field.
      
      <param name="BufferedImage"/>
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.addBarcode(String)">
       
        <p>Adds barcode 128 into the field. Field value will be changed onto the code and field become read only.</p> @param code The text to generate barcode 128.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.setJustification(boolean)">
       
        <p>Sets justification</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.#ctor(IDocument)">
       
        <p>Constructor which should be used with Generator.</p> @param doc Document where field will be created.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.#ctor">
       
        <p>Create instance of TextBoxField.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.#ctor(Page,Rectangle)">
       
        <p>Constructor of TextBox field.</p> @param page Page where text field is placed. @param rect Rectangle where the text field will be placed on the page.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.#ctor(IDocument,Rectangle)">
       
        <p>Constructor of TextBox field.</p> @param doc Document where field will be created. @param rect Rectangle of the field.
      
      <param name="IDocument"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.TextBuilder">
       
        <p>Appends text object to Pdf page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextBuilder.getSegmenter">
      Gets TextSegmenter object @return TextSegmenter object
    </member>
    <member name="M:com.aspose.pdf.TextBuilder.appendParagraph(TextParagraph)">&lt;p&gt; Appends text paragraph to Pdf page. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to create text paragraph object and append it to the Pdf page. Document doc = new Document(inFile); Page page = (Page)doc.getPages().get(1); // create text paragraph TextParagraph paragraph = new TextParagraph(); // set the paragraph rectangle paragraph.setRectangle ( new Rectangle(100, 600, 200, 700)); // set word wrapping options paragraph.getFormattingOptions().setWrapMode ( TextFormattingOptions.WordWrapMode.ByWords); // append string lines paragraph.appendLine("the quick brown fox jumps over the lazy dog"); paragraph.appendLine("line2"); paragraph.appendLine("line3"); // append the paragraph to the Pdf page with the TextBuilder TextBuilder textBuilder = new TextBuilder(page); textBuilder.appendParagraph(paragraph); // save Pdf document doc.save(outFile); &lt;/pre&gt; @param textParagraph Text paragraph object. 
      <param name="TextParagraph"/>
    </member>
    <member name="M:com.aspose.pdf.TextBuilder.appendText(TextFragment)">&lt;p&gt; Appends text fragment to Pdf page &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to create text fragment object, customize it's text segments and append it to the Pdf page. Document doc = new Document(inFile); Page page = (Page)doc.getPages().get(1); // create text fragment TextFragment tf = new TextFragment("main text"); tf.Position = new Position(100, 600); // set it's text properties tf.getTextState().setFontSize ( 5); tf.getTextState().setFont ( FontRepository.FindFont("TimesNewRoman")); tf.getTextState().setBackgroundColor ( Color.GREY); tf.getTextState().setForegroundColor ( Color.Red); // add one more segment to text fragment's Segments collection TextSegment segment2 = new TextSegment(); segment2.setText ( "another segment"); tf.getSegments.add(segment2); // create TextBuilder object TextBuilder builder = new TextBuilder(page); // append the text fragment to the Pdf page builder.appendText(tf); //save document doc.save(outFile); &lt;/pre&gt; @param textFragment Text fragment object. 
      <param name="TextFragment"/>
    </member>
    <member name="M:com.aspose.pdf.TextBuilder.appendText(java.util.List&lt;TextFragment&gt;)">
      <param name="java.util.List&lt;TextFragment&gt;"/>
    </member>
    <member name="M:com.aspose.pdf.TextBuilder.appendParagraph(TextParagraph,int)">
       
        <p>Appends paragraph with rotation</p> @param textParagraph TextParagraph object @param rotation int value
      
      <param name="TextParagraph"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextBuilder.#ctor(Page)">&lt;p&gt; Initializes a new instance of {@code TextBuilder} class for the Pdf page. &lt;/p&gt; @param page Page object. &lt;hr&gt; &lt;p&gt; The TextBuilder allows to append text objects to Pdf pages. &lt;/p&gt; 
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.TextBuilder.#ctor(Page,BaseOperatorCollection)">
       
        <p>Initializes a new instance of {@code TextBuilder} class for the Pdf page.</p> @param page Page object. @param operatorCollection Operator collection.
      
      <param name="Page"/>
      <param name="BaseOperatorCollection"/>
    </member>
    <member name="T:com.aspose.pdf.TextDefaults">
       
        <p>Defines text subsystem defaults</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextDefaults.getDefaultFontStrategy">
       
        <p>Default font Strategy type</p> @return DefaultFontStrategy element @see DefaultFontStrategy
      
    </member>
    <member name="M:com.aspose.pdf.TextDefaults.setDefaultFontStrategy(int)">
      Default font Strategy type @param value DefaultFontStrategy element @see DefaultFontStrategy
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextDefaults.getDefaultFont">
       
        <p>Default font</p> @return Font instance
      
    </member>
    <member name="M:com.aspose.pdf.TextDefaults.getPredefinedFont"/>
    <member name="M:com.aspose.pdf.TextDefaults.setPredefinedFont(Font)">
      <param name="Font"/>
    </member>
    <member name="M:com.aspose.pdf.TextDefaults.setDefaultFonts(java.util.List&lt;Font&gt;)">
      <param name="java.util.List&lt;Font&gt;"/>
    </member>
    <member name="M:com.aspose.pdf.TextDefaults.getDefaultFonts"/>
    <member name="M:com.aspose.pdf.TextDefaults.getDefaultFontForText(String)">
       
        <p>Default font</p> @return Font instance @param text String value
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.TextDefaults.DefaultFontStrategy"/>
    <member name="F:com.aspose.pdf.TextDefaults.DefaultFontStrategy.SystemFont">
      Use default system font Helvetica or it's substituted analogue.
    </member>
    <member name="F:com.aspose.pdf.TextDefaults.DefaultFontStrategy.PredefinedFont">
      Use default font that. Can be set using set/get PredefinedFont(Font) if PredefinedFont is null - will be used SystemFont
    </member>
    <member name="F:com.aspose.pdf.TextDefaults.DefaultFontStrategy.ListOfFonts">
      Use default font from predefined list of Font instances. Can be set using setDefaultFonts(List of Font instances) Will be used the first found font that contains all required characters for text. If such font not found - will be used System font.
    </member>
    <member name="F:com.aspose.pdf.TextDefaults.DefaultFontStrategy.TheFirstSuitableFoundFont">
      The first font found will be used, containing all the necessary characters for the text. All fonts found will be involved. If such font not found - will be used System font.
    </member>
    <member name="T:com.aspose.pdf.TextEditOptions">
       
        <p>Descubes options of text edit operations.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextEditOptions.getReplacementFont">
       
        <p>Gets or sets font used for replacing if user font does not contain required character</p> @return Font instance
      
    </member>
    <member name="M:com.aspose.pdf.TextEditOptions.setReplacementFont(Font)">
       
        <p>Gets or sets font used for replacing if user font does not contain required character</p> @param value Font instance
      
      <param name="Font"/>
    </member>
    <member name="M:com.aspose.pdf.TextEditOptions.getNoCharacterBehavior">
       
        <p>Gets mode that defines behavior in case fonts don't contain requested characters.</p> @return NoCharacterAction value @see NoCharacterAction
      
    </member>
    <member name="M:com.aspose.pdf.TextEditOptions.setNoCharacterBehavior(int)">
       
        <p>Sets mode that defines behavior in case fonts don't contain requested characters.</p> @param value NoCharacterAction value @see NoCharacterAction
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextEditOptions.getFontReplaceBehavior">
      Gets mode that defines behavior for fonts replacement scenarios. @return FontReplace value @see FontReplace
    </member>
    <member name="M:com.aspose.pdf.TextEditOptions.setFontReplaceBehavior(int)">
      Sets mode that defines behavior for fonts replacement scenarios. @param value FontReplace value @see FontReplace
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextEditOptions.getAllowLanguageTransformation">
       
        <p>Gets value that permits usage of language transformation during adding or editing of text. true - language transformation will be applied if necessary (default value). false - language transformation will NOT be applied.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextEditOptions.setAllowLanguageTransformation(boolean)">
       
        <p>Sets value that permits usage of language transformation during adding or editing of text. true - language transformation will be applied if necessary (default value). false - language transformation will NOT be applied.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextEditOptions.getLanguageTransformationBehavior">
       
        <p>Gets mode that defines behavior for language transformation scenarios.</p> @return LanguageTransformation value @see LanguageTransformation
      
    </member>
    <member name="M:com.aspose.pdf.TextEditOptions.setLanguageTransformationBehavior(int)">
       
        <p>Sets mode that defines behavior for language transformation scenarios.</p> @param value LanguageTransformation value @see LanguageTransformation
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextEditOptions.getClippingPathsProcessing">
       
        <p>Gets mode for processing clipping path of the edited text.</p> @return ClippingPathsProcessingMode element
      
    </member>
    <member name="M:com.aspose.pdf.TextEditOptions.setClippingPathsProcessing(int)">
       
        <p>Gets mode for processing clipping path of the edited text.</p> @param value ClippingPathsProcessingMode element
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextEditOptions.getToAttemptGetUnderlineFromSource">
       
        <p>Gets or sets value that permits searching for text underlining on the page of source document. (Obsolete) Please use TextSearchOptions.SearchForTextRelatedGraphics instead this.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextEditOptions.setToAttemptGetUnderlineFromSource(boolean)">
       
        <p>Gets or sets value that permits searching for text underlining on the page of source document. (Obsolete) Please use TextSearchOptions.SearchForTextRelatedGraphics instead this.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextEditOptions.#ctor">
       
        <p>Initializes new instance of the {@code TextEditOptions} object with default options. NoCharacterAction.UseStandardFont LanguageTransformation.Default</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextEditOptions.#ctor(int)">
       
        <p>Initializes new instance of the {@code TextEditOptions} object for the specified no-character behavior mode. Please init fontReplaceBehavior by using setFontReplaceBehavior(int)</p> @param noCharacterBehavior No-character behavior mode object. @see NoCharacterAction
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextEditOptions.#ctor(int,Class)">
       
        <p>Initializes new instance of the {@code TextEditOptions} object for the specified no-character behavior mode. Please init fontReplaceBehavior by using setFontReplaceBehavior(int)</p> @param option value for one from the following classes: NoCharacterAction, LanguageTransformation, FontReplace, @param type class of the option @see NoCharacterAction @see FontReplace @see TextRearrangement
      
      <param name="int"/>
      <param name="Class"/>
    </member>
    <member name="M:com.aspose.pdf.TextEditOptions.#ctor(boolean)">
      / * 
        <p>/ * Initializes new instance of the {@code TextEditOptions} object for the specified text rearrangement mode. / *</p> / * @param rearrangementMode Rearrangement mode object. /
      
      <param name="boolean"/>
    </member>
    <member name="T:com.aspose.pdf.TextEditOptions.NoCharacterAction">
       
        <p>Action to perform if font does not contain required character</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextEditOptions.NoCharacterAction.ThrowException">
       
        <p>Throw exception</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextEditOptions.NoCharacterAction.UseStandardFont">
       
        <p>Repalce font to standard font which contains required character</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextEditOptions.NoCharacterAction.ReplaceAnyway">
       
        <p>Replace text anyway without font substitution</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextEditOptions.NoCharacterAction.UseCustomReplacementFont">
       
        <p>Repalce font to defined replacement font</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TextEditOptions.FontReplace">
       
        <p>Font replacement behavior.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextEditOptions.FontReplace.Default">
       
        <p>No additional changes performed during font replacement.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextEditOptions.FontReplace.RemoveUnusedFonts">
       
        <p>Fonts that become unused during font replacement will be removed from resulting document.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TextEditOptions.LanguageTransformation">
       
        <p>Language transformation modes</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextEditOptions.LanguageTransformation.Default">
       
        <p>Default language transformation is performed.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextEditOptions.LanguageTransformation.ExactlyAsISee">
       
        <p>Language transformation is performed the same way as in a text editor. It usually means text will looks in the document exactly as You see it in code. But no warranties.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextEditOptions.LanguageTransformation.None">
       
        <p>Language transformation is not performed.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TextEditOptions.ClippingPathsProcessingMode">
       
        <p>Clipping path processing modes</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextEditOptions.ClippingPathsProcessingMode.KeepIntact">
       
        <p>Keeps clipping paths of the original page layout. (Default)</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextEditOptions.ClippingPathsProcessingMode.Expand">
       
        <p>Original clipping path will be expanded in the case edited text requires more space.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextEditOptions.ClippingPathsProcessingMode.Remove">
       
        <p>Original clipping path will be removed in the case edited text requires more space. Caution: Because of clipping paths may interact with each other removing of it may lead to unexpected result on the page layout.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TextElement">
       
        <p>General text element of document logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextElement.getText">
       
        <p>Gets the value of text structure element.</p> @return String object
      
    </member>
    <member name="M:com.aspose.pdf.TextElement.#ctor(IPdfObject)">
      <param name="IPdfObject"/>
    </member>
    <member name="T:com.aspose.pdf.TextEncodingInternal"/>
    <member name="M:com.aspose.pdf.TextEncodingInternal.getASCII">
      Gets an encoding for the ASCII (7-bit) character set. @return TextEncodingInternal instance
    </member>
    <member name="M:com.aspose.pdf.TextEncodingInternal.getBigEndianUnicode">
      Gets an encoding for the UTF-16 format that uses the big endian byte order. @return TextEncodingInternal instance
    </member>
    <member name="M:com.aspose.pdf.TextEncodingInternal.getDefault">
      Gets an encoding for the operating system's current ANSI code page. @return TextEncodingInternal instance
    </member>
    <member name="M:com.aspose.pdf.TextEncodingInternal.getUnicode">
      Gets an encoding for the UTF-16 format using the little endian byte order. @return TextEncodingInternal instance
    </member>
    <member name="M:com.aspose.pdf.TextEncodingInternal.getUTF32">
      Gets an encoding for the UTF-32 format using the little endian byte order. @return TextEncodingInternal instance
    </member>
    <member name="M:com.aspose.pdf.TextEncodingInternal.getUTF32BE">
      Gets an encoding for the UTF-16 format that uses the big endian byte order. @return TextEncodingInternal instance
    </member>
    <member name="M:com.aspose.pdf.TextEncodingInternal.getUTF7">
      Gets an encoding for the UTF-7 format. @return TextEncodingInternal instance
    </member>
    <member name="M:com.aspose.pdf.TextEncodingInternal.getUTF8">
      Gets an encoding for the UTF-8 format. @return TextEncodingInternal instance
    </member>
    <member name="M:com.aspose.pdf.TextEncodingInternal.getUTF8Unmarked">
      Gets an encoding for the UTF-8 Unmarked format. @return TextEncodingInternal instance
    </member>
    <member name="M:com.aspose.pdf.TextEncodingInternal.getInternalFormat">
      Internal method @return Internal object
    </member>
    <member name="M:com.aspose.pdf.TextEncodingInternal.getEncoding(String)">
      Returns the encoding associated with the specified code page name. @param name The code page name of the preferred encoding. Any value returned by the WebName property is valid. Possible values are listed in the Name column of the table that appears in the Encoding class topic. @return TextEncodingInternal instance
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TextEncodingInternal.toString(TextEncodingInternal)">
      Returns a string that represents the current object. @param encoding TextEncodingInternal instance @return String object
      <param name="TextEncodingInternal"/>
    </member>
    <member name="M:com.aspose.pdf.TextEncodingInternal.getNames">
      Gets an array with encoding names. @return String array
    </member>
    <member name="M:com.aspose.pdf.TextEncodingInternal.getString(byte[])">
      When overridden in a derived class, decodes all the bytes in the specified byte array into a string. @param value The byte array containing the sequence of bytes to decode. @return A string that contains the results of decoding the specified sequence of bytes.
      <param name="byte[]"/>
    </member>
    <member name="M:com.aspose.pdf.TextEncodingInternal.#ctor(Encoding)">
      Internal constructor @param value Internal object
      <param name="Encoding"/>
    </member>
    <member name="T:com.aspose.pdf.TextExtractionError">
       
        <p>Describes the text extraction error has appeared in the PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextExtractionError.getSummary">
       
        <p>Brief description of the error.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.TextExtractionError.getDescription">
       
        <p>Expanded description of the error.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.TextExtractionError.getLocation">
       
        <p>Location of the error.</p> @return TextExtractionErrorLocation instance
      
    </member>
    <member name="M:com.aspose.pdf.TextExtractionError.getFontKey">
       
        <p>Key (PDF name) of the Font object that is used for showing text that causes extraction error.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.TextExtractionError.getFontName">
       
        <p>Readable (internal) name of the Font object that is used for showing text that causes extraction error.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.TextExtractionError.getExtractedText">
       
        <p>Text that was actually extracted.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.TextExtractionError.toString">
       
        <p>Returns string representation.</p> @return String representation
      
    </member>
    <member name="T:com.aspose.pdf.TextExtractionErrorLocation">
       
        <p>Represents the location in the PDF document where text extraction error has appeared.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextExtractionErrorLocation.getPath">
       
        <p>Location of the PDF document where text extraction error has appeared.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.TextExtractionErrorLocation.getPageNumber">
       
        <p>Number of the document page where text extraction error has located.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.TextExtractionErrorLocation.getObjectType">
       
        <p>Type of the PDF object (Page or xForm) in which contents stream text extraction error has located.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.TextExtractionErrorLocation.getFormKey">
       
        <p>Key (name) of the PDF Form XObject in which contents stream text extraction error has located. Not empty if ObjectType == 'xForm'.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.TextExtractionErrorLocation.getOperatorIndex">
       
        <p>Index of text showing operator in the contents stream (operator collection) that causes text extraction error.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.TextExtractionErrorLocation.getOperatorString">
       
        <p>Text showing operator that causes text extraction error.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.TextExtractionErrorLocation.getFontUsedKey">
       
        <p>Key (name) of the PDF Font object that is used for showing of the operator that causes text extraction error.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.TextExtractionErrorLocation.getTextStartPoint">
       
        <p>Key (name) of the PDF Font object that is used for showing of the operator that causes text extraction error.</p> @return Point instance
      
    </member>
    <member name="M:com.aspose.pdf.TextExtractionErrorLocation.toString">
       
        <p>Returns string representation.</p> @return String representation.
      
    </member>
    <member name="T:com.aspose.pdf.TextExtractionOptions">
       
        <p>Represents text extraction options</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextExtractionOptions.getFormattingMode">
       
        <p>Gets formatting mode.</p> @return TextFormattingMode value @see TextFormattingMode
      
    </member>
    <member name="M:com.aspose.pdf.TextExtractionOptions.setFormattingMode(int)">
       
        <p>Sets formatting mode.</p> @param value TextFormattingMode value @see TextFormattingMode
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextExtractionOptions.getScaleFactor">
       
        <p>Gets factor that will be applied to scale font size during extraction in pure mode. Setting of less value leads to more spaces in the extracted text. Default value is 1 - no scaling; Setting value to zero allows algorithm choose scaling automatically.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.TextExtractionOptions.setScaleFactor(double)">
       
        <p>Sets factor that will be applied to scale font size during extraction in pure mode. Setting of less value leads to more spaces in the extracted text (from 1 to 10). Default value is 1 - no scaling; Setting value to zero allows algorithm choose scaling automatically.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.TextExtractionOptions.#ctor(int)">
       
        <p>Initializes new instance of the {@code TextExtractionOptions} object for the specified text formatting mode.</p> @param formattingMode Text formatting mode value.
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.TextExtractionOptions.TextFormattingMode">
       
        <p>Defines different modes which can be used while converting pdf document into text. See {@code TextDevice} class.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextExtractionOptions.TextFormattingMode.Pure">
       
        <p>Represent pdf content with a bit of formatting routines.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextExtractionOptions.TextFormattingMode.Raw">
       
        <p>Represent pdf content as is, i.e. without formatting.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextExtractionOptions.TextFormattingMode.MemorySaving">
       
        <p>Extraction with memory saving. It is almost same to 'Raw' mode but works slightly faster and uses less memory.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TextFormattingOptions">
       
        <p>Represents text formatting options</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextFormattingOptions.getWrapMode">
       
        <p>Gets word wrap mode. Default value is WordWrapMode.NoWrap</p> @return WordWrapMode value @see WordWrapMode
      
    </member>
    <member name="M:com.aspose.pdf.TextFormattingOptions.setWrapMode(int)">
       
        <p>Sets word wrap mode. Default value is WordWrapMode.NoWrap</p> @param value WordWrapMode value @see WordWrapMode
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextFormattingOptions.getLineSpacing">
       
        <p>Gets line spacing mode. Default value is LineSpacingMode.FontSize</p> @return int value @see LineSpacingMode
      
    </member>
    <member name="M:com.aspose.pdf.TextFormattingOptions.setLineSpacing(int)">
       
        <p>Sets line spacing mode. Default value is LineSpacingMode.FontSize</p> @param value int value @see LineSpacingMode
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextFormattingOptions.getHyphenSymbol">&lt;p&gt; Gets or sets hyphen symbol that is used in hyphenation process. &lt;/p&gt;&lt;hr&gt; To eliminate hyphen drawing (with wrapping procedure still in place) please set empty string string.Empty for HyphenSymbol. @return String value</member>
    <member name="M:com.aspose.pdf.TextFormattingOptions.setHyphenSymbol(String)">&lt;p&gt; Gets or sets hyphen symbol that is used in hyphenation process. &lt;/p&gt;&lt;hr&gt; To eliminate hyphen drawing (with wrapping procedure still in place) please set empty string string.Empty for HyphenSymbol. @param value value String value 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TextFormattingOptions.getSubsequentLinesIndent">
       
        <p>Gets or sets subsequent lines indent value.</p> @return float value
      
    </member>
    <member name="M:com.aspose.pdf.TextFormattingOptions.setSubsequentLinesIndent(float)">
       
        <p>Gets or sets subsequent lines indent value.</p> @param value float value
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TextFormattingOptions.getFirstLineIndent">
       
        <p>Gets or sets first line indent value.</p> @return float value
      
    </member>
    <member name="M:com.aspose.pdf.TextFormattingOptions.setFirstLineIndent(float)">
       
        <p>Gets or sets first line indent value.</p> @param value float value
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TextFormattingOptions.#ctor(int)">
       
        <p>Initializes new instance of the {@code TextFormattingOptions} object for the specified word wrap mode.</p> @param wrapMode Word wrap mode. @see WordWrapMode
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextFormattingOptions.#ctor">
       
        <p>Initializes new instance of the {@code TextFormattingOptions} object with undefined word wrap mode.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TextFormattingOptions.WordWrapMode">
       
        <p>Defines word wrapping strategies</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextFormattingOptions.WordWrapMode.NoWrap">
       
        <p>No wrapping is performed</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextFormattingOptions.WordWrapMode.DiscretionaryHyphenation">
       
        <p>Discretionary hyphenation is performed. Allows breaking words in the middle.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextFormattingOptions.WordWrapMode.ByWords">
       
        <p>Word wrapping only wraps complete words. If the complete word cannot be wrapped, attempts to use discretionary hyphenation</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextFormattingOptions.WordWrapMode.Undefined">
       
        <p>WordWrapMode not set. Wrapping strategie of upper level structure (table cell, paragraph etc.) will be used.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TextFormattingOptions.LineSpacingMode">
       
        <p>Defines line spacing specifics</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextFormattingOptions.LineSpacingMode.FontSize">
       
        <p>Line spacing is font size</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextFormattingOptions.LineSpacingMode.FullSize">
       
        <p>Line spacing is a full space between descender and ascender</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TextFragment">&lt;p&gt; Represents fragment of Pdf text. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to find text on the first PDF document page and replace the text and it's font. // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Find font that will be used to change document text font Font font = FontRepository.findFont("Arial"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get(1).accept(absorber); // Change text and font of the first text occurrence absorber.getTextFragments().get_Item(1).setText ( "hi world"); absorber.getTextFragments().get_Item(1).getTextState().setFont ( font); // Save document doc.save("D:\\Tests\\output.pdf"); &lt;/pre&gt; &lt;hr&gt; &lt;pre&gt; In a few words, {@code TextFragment} object contains list of {@code TextSegment} objects. In details: Text of pdf document in {@code com.aspose.pdf} is represented by two basic objects: {@code TextFragment} and {@code TextSegment} The differences between them is mostly context-dependent. Let's consider following scenario. User searches text "hello world" to operate with it, change it's properties, look etc. Document doc = new Document(docFile); TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); doc.getPages().get(1).accept(absorber); &lt;/pre&gt; Phisycally pdf text's representation is very complex. The text "hello world" may consist of several phisycally independent text segments. The Aspose.Pdf text model basically establishes that {@code TextFragment} object provides single logic operation set over physical {@code TextSegment} objects set that represent user's query. In text search scenario, {@code TextFragment} is logical "hello world" text representation, and {@code TextSegment} object collection represents all physical segments that construct "hello world" text object. So, {@code TextFragment} is close to logical text representation. And {@code TextSegment} is close to physical text representation. Obviously each {@code TextSegment} object may have it's own font, coloring, positioning properties. {@code TextFragment} provides simple way to change text with it's properties: set font, set font size, set font color etc. Meanwhile {@code TextSegment} objects are accessible and users are able to operate with {@code TextSegment} objects independently. &lt;p&gt; Note that changing TextFragment properties may change inner {@code Segments} collection because TextFragment is an aggregate object and it may rearrange internal segments or merge them into single segment. If your requirement is to leave the {@code Segments} collection unchanged, please change inner segments individually. &lt;/p&gt;</member>
    <member name="M:com.aspose.pdf.TextFragment.getReplaceOptions">
       
        <p>Gets text replace options. The options define behavior when fragment text is replaced to more short/long.</p> @return TextReplaceOptions instance
      
    </member>
    <member name="M:com.aspose.pdf.TextFragment.getText">&lt;p&gt; Gets {@code string} text object that the {@code TextFragment} object represents. &lt;/p&gt; @return String value &lt;hr&gt; &lt;pre&gt; The example demonstrates how to search a text and replace first occurrence represented with {@code TextFragment} object . // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get(1).accept(absorber); // Change font of the first text occurrence absorber.getTextFragments().get_Item(1).setText ( "hi world"); // Save document doc.save("D:\\Tests\\output.pdf"); &lt;/pre&gt; @see TextFragmentAbsorber @see IDocument</member>
    <member name="M:com.aspose.pdf.TextFragment.setText(String)">&lt;p&gt; Sets {@code string} text object that the {@code TextFragment} object represents. &lt;/p&gt; @param value String value &lt;hr&gt; &lt;pre&gt; The example demonstrates how to search a text and replace first occurrence represented with {@code TextFragment} object . // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get(1).accept(absorber); // Change font of the first text occurrence absorber.getTextFragments().get_Item(1).setText ( "hi world"); // Save document doc.save("D:\\Tests\\output.pdf"); &lt;/pre&gt; @see TextFragmentAbsorber @see IDocument 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragment.getVerticalAlignment">
       
        <p>Gets a vertical alignment of text fragment.</p> @return int value @see VerticalAlignment
      
    </member>
    <member name="M:com.aspose.pdf.TextFragment.setVerticalAlignment(int)">
       
        <p>Sets a vertical alignment of text fragment.</p> @param value int value @see VerticalAlignment
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragment.getHorizontalAlignment">
       
        <p>Gets a horizontal alignment of text fragment.</p> @return HorizontalAlignment value @see HorizontalAlignment
      
    </member>
    <member name="M:com.aspose.pdf.TextFragment.setHorizontalAlignment(int)">
       
        <p>Sets a horizontal alignment of text fragment.</p> @param value HorizontalAlignment value @see HorizontalAlignment
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragment.setHyperlink(Hyperlink)">
       
        <p>Sets the fragment hyperlink</p> 
      
      <param name="Hyperlink"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragment.getTextState">&lt;p&gt; Gets or sets text state for the text that {@code TextFragment} object represents. &lt;/p&gt; @return TextFragmentState object &lt;hr&gt; &lt;pre&gt; The example demonstrates how to change text color and font size of the text with {@code TextState} object. // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get(1).accept(absorber); // Change foreground color of the first text occurrence absorber.getTextFragments().get_Item(1).getTextState().setForegroundColor(Color.RED); // Change font size of the first text occurrence absorber.getTextFragments().get_Item(1).getTextState().setFontSize ( 15); // Save document doc.save("D:\\Tests\\output.pdf"); &lt;/pre&gt; &lt;hr&gt; &lt;p&gt; Provides a way to change following properties of the text: Font FontSize FontStyle ForegroundColor BackgroundColor &lt;/p&gt; @see TextFragmentAbsorber @see IDocument</member>
    <member name="M:com.aspose.pdf.TextFragment.getSegments">&lt;p&gt; Gets text segments for current {@code TextFragment}. &lt;/p&gt; @return TextSegmentCollection value &lt;hr&gt; &lt;pre&gt; The example demonstrates how to navigate all {@code TextSegment} objects inside {@code TextFragment}. // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get(1).accept(absorber); // Navigate all text segments and out their text and placement info for (TextSegment segment : ({@code Iterable&lt;TextSegment&gt;})absorber.getTextFragments().get_Item(1).getSegments()) { System.out.println("segment text: "+ segment.getText())); System.out.println("segment X indent: "+ segment.getPosition().getXIndent())); System.out.println("segment Y indent: "+ segment.getPosition().getYIndent())); } &lt;/pre&gt; &lt;hr&gt; &lt;p&gt; In a few words, {@code TextSegment} objects are children of {@code TextFragment} object. Advanced users may access segments directly to perform more complex text edit scenarios. For details, please look at {@code TextFragment} object description. &lt;/p&gt; @see TextFragmentAbsorber @see IDocument @see TextSegment</member>
    <member name="M:com.aspose.pdf.TextFragment.setSegments(TextSegmentCollection)">
       
        <p>Represent setSegments method</p> @param value TextSegmentCollection value
      
      <param name="TextSegmentCollection"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragment.getPosition">&lt;p&gt; Gets text position for text, represented with {@code TextFragment} object. &lt;/p&gt; @return Position value &lt;hr&gt; &lt;pre&gt; The example demonstrates how to view placement of a text, represented by {@code TextFragment} object. // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get(1).accept(absorber); // View text and placement info of first text occurrence TextFragment firstOccurrence = absorber.getTextFragments().get_Item(1); System.out.println("fragment text: " + firstOccurrence.getText())); System.out.println("fragment X indent: "+ firstOccurrence.getPosition().getXIndent())); System.out.println("fragment Y indent: "+ firstOccurrence.getPosition().getYIndent())); &lt;/pre&gt; @see TextFragmentAbsorber @see IDocument @see TextSegment</member>
    <member name="M:com.aspose.pdf.TextFragment.setPosition(Position)">&lt;p&gt; Sets text position for text, represented with {@code TextFragment} object. &lt;/p&gt; @param value Position value &lt;hr&gt; &lt;pre&gt; The example demonstrates how to view placement of a text, represented by {@code TextFragment} object. // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get(1).accept(absorber); // View text and placement info of first text occurrence TextFragment firstOccurrence = absorber.getTextFragments().get_Item(1); System.out.println("fragment text: " + firstOccurrence.getText())); System.out.println("fragment X indent: "+ firstOccurrence.getPosition().getXIndent())); System.out.println("fragment Y indent: "+ firstOccurrence.getPosition().getYIndent())); &lt;/pre&gt; @see TextFragmentAbsorber @see IDocument @see TextSegment 
      <param name="Position"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragment.getBaselinePosition">
       
        <p>Gets text position for text, represented with {@code TextFragment} object. The YIndent of the Position structure represents baseline coordinate of the text fragment.</p> @return Position value
      
    </member>
    <member name="M:com.aspose.pdf.TextFragment.setBaselinePosition(Position)">
       
        <p>Sets text position for text, represented with {@code TextFragment} object. The YIndent of the Position structure represents baseline coordinate of the text fragment.</p> @param value Position value
      
      <param name="Position"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragment.getRectangle">
       
        <p>Gets rectangle of the TextFragment</p> @return Rectangle object
      
    </member>
    <member name="M:com.aspose.pdf.TextFragment.setRectangle(Rectangle)">
       
        <p>Gets rectangle of the TextFragment</p> @param value Rectangle instance
      
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragment.getPage">
       
        <p>Gets page that contains the TextFragment 
          <br/> The value can be null in case the TextFragment object doesn't belong to any page.
        </p> @return Page object
      
    </member>
    <member name="M:com.aspose.pdf.TextFragment.getForm">
       
        <p>Gets form object that contains the TextFragment 
          <br/> The value can be null in case the TextFragment object doesn't belong to a form.
        </p> @return XForm value
      
    </member>
    <member name="M:com.aspose.pdf.TextFragment.getWrapLinesCount">
       
        <p>Gets wrap lines count for this paragraph(for pdf generation only)</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.TextFragment.setWrapLinesCount(int)">
       
        <p>Sets wrap lines count for this paragraph(for pdf generation only)</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragment.getEndNote">
       
        <p>Gets the paragraph end note.(for pdf generation only)</p> @return Note value
      
    </member>
    <member name="M:com.aspose.pdf.TextFragment.setEndNote(Note)">
       
        <p>Sets the paragraph end note.(for pdf generation only)</p> @param value Note value
      
      <param name="Note"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragment.getFootNote">
       
        <p>Gets the paragraph foot note.(for pdf generation only)</p> @return Note value
      
    </member>
    <member name="M:com.aspose.pdf.TextFragment.setFootNote(Note)">
       
        <p>Sets the paragraph foot note.(for pdf generation only)</p> @param value Note value
      
      <param name="Note"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragment.isolateTextSegments(int,int)">
       
        <p>Gets {@code TextSegment}(s) representing specified part of the {@code TextFragment} text.</p> @param startIndex Position in text from which new {@code TextSegment}(s) will start. @param length Length of the text that will isolated into {@code TextSegment}(s). @return {@code TextSegmentCollection} containing text segments represeting text substring starting at a specifing position and having a specified length.
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragment.setMarkedContentProperties(String,int)">
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragment.deepClone">
       
        <p>Clone the fragment.</p> @return The cloned object
      
    </member>
    <member name="M:com.aspose.pdf.TextFragment.cloneWithSegments">
       
        <p>Clone the fragment with all segments.</p> @return The cloned object
      
    </member>
    <member name="M:com.aspose.pdf.TextFragment.#ctor">
       
        <p>Initializes new instance of the {@code TextFragment} object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextFragment.#ctor(TabStops)">
       
        <p>Initializes new instance of the {@code TextFragment} object with predefined {@code TabStops} positions.</p> @param tabStops Tabulation positions
      
      <param name="TabStops"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragment.#ctor(String)">
       
        <p>Creates {@code TextFragment} object with single {@code TextSegment} object inside. Specifies text string inside the segment.</p> @param text Text fragment's text.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragment.#ctor(String,TabStops)">
       
        <p>Creates {@code TextFragment} object with single {@code TextSegment} object inside and predefined {@code TabStops} positions.</p> @param text Text fragment's text. @param tabStops Tabulation positions
      
      <param name="String"/>
      <param name="TabStops"/>
    </member>
    <member name="T:com.aspose.pdf.TextFragmentAbsorber">&lt;p&gt; Represents an absorber object of text fragments. Performs text search and provides access to search results via {@code TextFragmentAbsorber.TextFragments} collection. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to find text on the first PDF document page and replace the text and it's font. // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Find font that will be used to change document text font com.aspose.pdf.Font font = FontRepository.findFont("Arial"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get(1).accept(absorber); // Change text and font of the first text occurrence absorber.getTextFragments().get_Item(1).setText ( "hi world"); absorber.getTextFragments().get_Item(1).getTextState().setFont ( font); // Save document doc.save("D:\\Tests\\output.pdf"); &lt;/pre&gt; &lt;hr&gt; &lt;p&gt; The {@code TextFragmentAbsorber} object is basically used in text search scenario. When the search is completed the occurrences are represented with {@code TextFragment} objects that the {@code TextFragmentAbsorber.TextFragments} collection contains. The {@code TextFragment} object provides access to the search occurrence text, text properties, and allows to edit text and change the text state (font, font size, color etc). &lt;/p&gt;</member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.getTextFragments">&lt;p&gt; Gets collection of search occurrences that are presented with {@code TextFragment} objects. &lt;/p&gt; @return TextFragmentCollection object &lt;hr&gt; &lt;pre&gt; The example demonstrates how to find text on the first PDF document page and replace all search occurrences with new text. // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Find font that will be used to change document text font Font font = FontRepository.findFont("Arial"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get(1).accept(absorber); // Change text of all search occurrences for (TextFragment textFragment : {@code (Iterable&lt;TextFragment&gt;)}absorber.getTextFragments()) { textFragment.setText ( "hi world"); } // Save document doc.save("D:\\Tests\\output.pdf"); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.setTextFragments(TextFragmentCollection)">&lt;p&gt; Sets collection of search occurrences that are presented with {@code TextFragment} objects. &lt;/p&gt; @param value TextFragmentCollection object &lt;hr&gt; &lt;pre&gt; The example demonstrates how to find text on the first PDF document page and replace all search occurrences with new text. // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Find font that will be used to change document text font Font font = FontRepository.findFont("Arial"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get(1).accept(absorber); // Change text of all search occurrences for (TextFragment textFragment : {@code (Iterable&lt;TextFragment&gt;)}absorber.getTextFragments()) { textFragment.setText ( "hi world"); } // Save document doc.save("D:\\Tests\\output.pdf"); &lt;/pre&gt; 
      <param name="TextFragmentCollection"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.getPhrase">&lt;p&gt; Gets phrase that the {@code TextFragmentAbsorber} searches on the PDF document or page. &lt;/p&gt; @return String value &lt;hr&gt; &lt;pre&gt; The example demonstrates how to perform search text several times and perform text replacements. // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object to find all "hello" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello"); doc.getPages().get(1).accept(absorber); absorber.getTextFragments().get_Item(1).setText ( "Hi"); // search another word and replace it absorber.setPhrase ( "world"); doc.getPages().get(1).accept(absorber); absorber.getTextFragments().get_Item(1).setText ( "John"); // Save document doc.save("D:\\Tests\\output.pdf"); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.setPhrase(String)">&lt;p&gt; Sets phrase that the {@code TextFragmentAbsorber} searches on the PDF document or page. &lt;/p&gt; @param value String value &lt;hr&gt; &lt;pre&gt; The example demonstrates how to perform search text several times and perform text replacements. // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object to find all "hello" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello"); doc.getPages().get(1).accept(absorber); absorber.getTextFragments().get_Item(1).setText ( "Hi"); // search another word and replace it absorber.setPhrase ( "world"); doc.getPages().get(1).accept(absorber); absorber.getTextFragments().get_Item(1).setText ( "John"); // Save document doc.save("D:\\Tests\\output.pdf"); &lt;/pre&gt; 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.getTextSearchOptions">&lt;p&gt; Gets search options. The options enable search using regular expressions. &lt;/p&gt; @return TextSearchOptions object &lt;hr&gt; &lt;pre&gt; The example demonstrates how to perform search text using regular expression. // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object TextFragmentAbsorber absorber = new TextFragmentAbsorber(); // make the absorber to search all words starting 'h' and ending 'o' using regular expression. absorber.setPhrase ( "h\w*?o"); absorber.setTextSearchOptions ( new TextSearchOptions(true)); // we should find "hello" word and replace it with "Hi" doc.getPages().get(1).accept(absorber); absorber.getTextFragments().get_Item(1).setText ( "Hi"); // Save document doc.save("D:\\Tests\\output.pdf"); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.setTextSearchOptions(TextSearchOptions)">&lt;p&gt; Sets search options. The options enable search using regular expressions. &lt;/p&gt; @param value TextSearchOptions object &lt;hr&gt; &lt;pre&gt; The example demonstrates how to perform search text using regular expression. // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object TextFragmentAbsorber absorber = new TextFragmentAbsorber(); // make the absorber to search all words starting 'h' and ending 'o' using regular expression. absorber.setPhrase ( "h\w*?o"); absorber.setTextSearchOptions ( new TextSearchOptions(true)); // we should find "hello" word and replace it with "Hi" doc.getPages().get(1).accept(absorber); absorber.getTextFragments().get_Item(1).setText ( "Hi"); // Save document doc.save("D:\\Tests\\output.pdf"); &lt;/pre&gt; 
      <param name="TextSearchOptions"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.getTextEditOptions">
       
        <p>Gets text edit options. The options define special behavior when requested symbol cannot be written with font.</p> @return TextEditOptions object
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.setTextEditOptions(TextEditOptions)">
       
        <p>Sets text edit options. The options define special behavior when requested symbol cannot be written with font.</p> @param value TextEditOptions object
      
      <param name="TextEditOptions"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.getTextReplaceOptions">
       
        <p>Gets text replace options. The options define behavior when fragment text is replaced to more short/long.</p> @return TextReplaceOptions value
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.setTextReplaceOptions(TextReplaceOptions)">
       
        <p>Sets text replace options. The options define behavior when fragment text is replaced to more short/long.</p> @param value TextReplaceOptions value
      
      <param name="TextReplaceOptions"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.hasErrors_Fragment">
       
        <p>Value indicates whether errors were found during text extraction. Searching for errors will performed only if TextSearchOptions.LogTextExtractionErrors = true; And it may decrease performance.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.getErrors">
       
        <p>List of {@code TextExtractionError} objects. It contain information about errors were found during text extraction. Searching for errors will performed only if TextSearchOptions.LogTextExtractionErrors = true; And it may decrease performance.</p> @return List of TextExtractionError objects
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.getText">
       
        <p>Gets extracted text that the {@code TextAbsorber} extracts on the PDF document or page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.visit(Page)">&lt;p&gt; Performs search on the specified page. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to find text on the first PDF document page and replace the text. // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Find font that will be used to change document text font Font font = FontRepository.findFont("Arial"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page absorber.visit(doc.getPages().get(1)); // Change text of all search occurrences for (TextFragment textFragment : {@code (Iterable&lt;TextFragment&gt;)}absorber.getTextFragments()) { textFragment.setText ( "hi world"); } // Save document doc.save("D:\\Tests\\output.pdf"); &lt;/pre&gt; @param page PDF document page object. 
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.visit(IDocument)">&lt;p&gt; Performs search on the specified document. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to find text on PDF document and replace text of all search occurrences. // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Find font that will be used to change document text font Font font = FontRepository.findFont("Arial"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page absorber.visit(doc); // Change text of the first text occurrence absorber.getTextFragments().get_Item(1).setText ( "hi world"); // Save document doc.save("D:\\Tests\\output.pdf"); &lt;/pre&gt; @param pdf PDF document object. 
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.applyForAllFragments(Font)">
       
        <p>Applies font for all text fragments that were absorbed. It works faster than looping through the fragments if all fragments on the page(s) were absorbed. Otherwise it works similar with looping.</p> @param font {@code Font}of the text.
      
      <param name="Font"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.applyForAllFragments(float)">
       
        <p>Applies font size for all text fragments that were absorbed. It works faster than looping through the fragments if all fragments on the page(s) were absorbed. Otherwise it works similar with looping.</p> @param fontSize Font size of the text.
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.applyForAllFragments(Font,float)">
       
        <p>Applies font and size for all text fragments that were absorbed. It works faster than looping through the fragments if all fragments on the page(s) were absorbed. Otherwise it works similar with looping.</p> @param font {@code Font}of the text. @param fontSize Font size of the text.
      
      <param name="Font"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.reset">
       
        <p>Clears TextFragments collection of this {@code TextFragmentAbsorber} object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.removeAllText(Page)">
       
        <p>Removes all text from the specified page.</p> @param page PDF document page object.
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.removeAllText(Page,Rectangle)">
       
        <p>Removes text inside the specified rectangle from the specified page.</p> @param page PDF document page object. @param rect {@link Rectangle} to remove text inside.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.removeAllText(Document)">
       
        <p>Removes all text from the document.</p> @param document PDF document object.
      
      <param name="Document"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.visit(XForm)">
       
        <p>Performs search on the specified form object.</p> @param xForm Pdf form object.
      
      <param name="XForm"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.getExtractionOptions">
       
        <p>Gets text extraction options.</p> @return TextExtractionOptions object
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.setExtractionOptions(TextExtractionOptions)">
       
        <p>Sets text extraction options.</p> @param value TextExtractionOptions object
      
      <param name="TextExtractionOptions"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.#ctor">&lt;p&gt; Initializes a new instance of the {@code TextFragmentAbsorber} that performs search of all text segments of the document or page. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to find text on the first PDF document page and replace the text. // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Find font that will be used to change document text font Font font = FontRepository.findFont("Arial"); // Create TextFragmentAbsorber object TextFragmentAbsorber absorber = new TextFragmentAbsorber(); // Make the absorber to search all "hello world" text occurrences absorber.setPhrase ( "hello world"); // Accept the absorber for first page doc.getPages().get(1).accept(absorber); // Change text of the first text occurrence absorber.getTextFragments().get_Item(1).setText ( "hi world"); // Save document doc.save("D:\\Tests\\output.pdf"); &lt;/pre&gt; &lt;hr&gt; &lt;p&gt; Performs text search and provides access to search results via {@code TextFragmentAbsorber.TextFragments} collection. &lt;/p&gt;</member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.#ctor(TextEditOptions)">&lt;p&gt; Initializes a new instance of the {@code TextFragmentAbsorber} with text edit options, that performs search of all text segments of the document or page. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to find all text fragments on the first PDF document page and replace font for them. // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object TextFragmentAbsorber absorber = new TextFragmentAbsorber(new TextEditOptions(TextEditOptions.FontReplace .RemoveUnusedFonts)); // Accept the absorber for first page doc.getPages()get(1).accept(absorber); // Find Courier font Font font = FontRepository.findFont("Courier"); // Set the font for all the text fragments for (TextFragment textFragment : {@code (Iterable&lt;TextFragment&gt;)}absorber.TextFragments) { textFragment.getTextState().setFont ( font); } // Save document doc.save("D:\\Tests\\output.pdf"); &lt;/pre&gt; @param textEditOptions Text edit options (Allows to turn on some edit features). &lt;hr&gt; &lt;p&gt; Performs text search and provides access to search results via {@code TextFragmentAbsorber.TextFragments} collection. &lt;/p&gt; 
      <param name="TextEditOptions"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.#ctor(String)">&lt;p&gt; Initializes a new instance of the {@code TextFragmentAbsorber} class for the specified text phrase. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to find text on the first PDF document page and replace the text and it's font. // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Find font that will be used to change document text font com.aspose.pdf.Font font = FontRepository.findFont("Arial"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get_Item(1).accept(absorber); // Change text and font of the first text occurrence absorber.getTextFragments().get_Item(1).setText ( "hi world"); absorber.getTextFragments().get_Item(1).getTextState().setFont ( font); // Save document doc.save("D:\\Tests\\output.pdf"); &lt;/pre&gt; @param phrase Phrase that the {@code TextFragmentAbsorber} searches &lt;hr&gt; &lt;p&gt; Performs text search of the specified phrase and provides access to search results via {@code TextFragmentAbsorber.TextFragments} collection. &lt;/p&gt; 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.#ctor(java.util.regex.Pattern)">&lt;p&gt; Initializes a new instance of the {@link TextFragmentAbsorber} class for the specified System.Text.RegularExpressions.Regex class object. &lt;/p&gt; &lt;hr&gt; The example demonstrates how to find text on the first PDF document page and replace the text and it's font. &lt;pre&gt; // Open document Document doc = new Document("input.pdf"); // Find font that will be used to change document text font Font font = FontRepository.findFont("Arial"); // Create TextAbsorber object to find all instances of the input regex TextFragmentAbsorber absorber = new TextFragmentAbsorber(new Regex("h\\w*?o")); // Accept the absorber for first page doc.getPages().get_item(1).accept(absorber); // we should find "hello" word and replace it with "Hi" absorber.getTextFragments().get_item(1).setText("Hi"); // Save document doc.save("output.pdf"); &lt;/pre&gt; @param regex System.Text.RegularExpressions.Regex class object that the {@link TextFragmentAbsorber} searches &lt;hr&gt; &lt;p&gt; Performs text search of the specified phrase and provides access to search results via {@code TextFragmentAbsorber.TextFragments}({@link #getTextFragments}/{@link #setTextFragments(TextFragmentCollection)}) collection. &lt;/p&gt; 
      <param name="java.util.regex.Pattern"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.#ctor(String,TextSearchOptions)">&lt;p&gt; Initializes a new instance of the {@code TextFragmentAbsorber} class for the specified text phrase and text search options. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to find text with regular expression on the first PDF document page and replace the text. // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object that searches all words starting 'h' and ending 'o' using regular expression. TextFragmentAbsorber absorber = new TextFragmentAbsorber("h\\w*?o", new TextSearchOptions(true)); // we should find "hello" word and replace it with "Hi" doc.getPages().get_Item(1).accept(absorber); absorber.getTextFragments().get_Item(1).setText ( "Hi"); // Save document doc.save("D:\\Tests\\output.pdf"); &lt;/pre&gt; @param phrase Phrase that the {@code TextFragmentAbsorber} searches @param textSearchOptions Text search options (Allows to turn on some search features. For example, search with regular expression) &lt;hr&gt; &lt;p&gt; Performs text search of the specified phrase and provides access to search results via {@code TextFragmentAbsorber.TextFragments} collection. &lt;/p&gt; 
      <param name="String"/>
      <param name="TextSearchOptions"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.#ctor(java.util.regex.Pattern,TextSearchOptions)">&lt;p&gt; Initializes a new instance of the {@link TextFragmentAbsorber} class for the specified text phrase and text search options. &lt;/p&gt; &lt;hr&gt; The example demonstrates how to find text with regular expression on the first PDF document page and replace the text. &lt;pre&gt; // Open document Document doc = new Document("input.pdf"); // Create TextFragmentAbsorber object that searches all words starting 'h' and ending 'o' using regular expression. TextFragmentAbsorber absorber = new TextFragmentAbsorber(new Regex("h\\w*?o"), new TextSearchOptions(true)); // we should find "hello" word and replace it with "Hi" doc.getPages().get_Item(1).accept(absorber); absorber.getTextFragments.get_Item(1).setText("Hi"); // Save document doc.save("output.pdf"); &lt;/pre&gt; @param regex Regex class object that the {@link TextFragmentAbsorber} searches @param textSearchOptions Text search options (Allows to turn on some search features.) &lt;hr&gt; &lt;p&gt; Performs text search of the specified phrase and provides access to search results via {@code TextFragmentAbsorber.TextFragments}({@link #getTextFragments}/{@link #setTextFragments(TextFragmentCollection)}) collection. &lt;/p&gt; 
      <param name="java.util.regex.Pattern"/>
      <param name="TextSearchOptions"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.#ctor(String,TextSearchOptions,TextEditOptions)">&lt;p&gt; Initializes a new instance of the {@code TextFragmentAbsorber} class for the specified text phrase, text search options and text edit options. The text edit options are not supported yet. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to find text with regular expression on the first PDF document page and replace the text. // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object that searches all words starting 'h' and ending 'o' using regular expression. TextFragmentAbsorber absorber = new TextFragmentAbsorber("h\w*?o", new TextSearchOptions(true)); // we should find "hello" word and replace it with "Hi" doc.getPages().get_item(1).accept(absorber); absorber.getTextFragments().get_Item(1).setText ( "Hi"); // Save document doc.save("D:\\Tests\\output.pdf"); &lt;/pre&gt; @param phrase Phrase that the {@code TextFragmentAbsorber} searches @param textSearchOptions Text search options (Allows to turn on some search features. For example, search with regular expression) @param textEditOptions Text edit options (Allows to turn on some edit features. For example, define special behavior when requested symbol cannot be written with font). The parameter is not supported yet. &lt;hr&gt; &lt;p&gt; Performs text search of the specified phrase and provides access to search results via {@code TextFragmentAbsorber.TextFragments} collection. &lt;/p&gt; 
      <param name="String"/>
      <param name="TextSearchOptions"/>
      <param name="TextEditOptions"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.#ctor(java.util.regex.Pattern,TextEditOptions)">&lt;p&gt; Initializes a new instance of the {@link TextFragmentAbsorber} class for the specified text phrase and text edit options. &lt;/p&gt; @param regex System.Text.RegularExpressions.Regex class object that the {@link TextFragmentAbsorber} searches @param textEditOptions Text edit options (Allows to turn on some edit features). &lt;hr&gt; &lt;p&gt; Performs text search of the specified phrase and provides access to search results via {@code TextFragmentAbsorber.TextFragments}({@link #getTextFragments}/{@link #setTextFragments(TextFragmentCollection)}) collection. &lt;/p&gt; 
      <param name="java.util.regex.Pattern"/>
      <param name="TextEditOptions"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.#ctor(String,TextEditOptions)">&lt;p&gt; Initializes a new instance of the {@code TextFragmentAbsorber} class for the specified text phrase and text edit options. &lt;/p&gt; @param phrase Phrase that the {@code TextFragmentAbsorber} searches @param textEditOptions Text edit options (Allows to turn on some edit features). &lt;hr&gt; &lt;p&gt; Performs text search of the specified phrase and provides access to search results via {@code TextFragmentAbsorber.TextFragments} collection. &lt;/p&gt; 
      <param name="String"/>
      <param name="TextEditOptions"/>
    </member>
    <member name="T:com.aspose.pdf.TextFragmentCollection">
       
        <p>Represents a text fragments collection</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentCollection.size">
       
        <p>Gets the number of {@code TextFragment} object elements actually contained in the collection.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentCollection.getSyncRoot">
       
        <p>Gets an object that can be used to synchronize access to the collection.</p> @return Object element
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentCollection.isSynchronized">
       
        <p>Gets a value indicating whether access to the collection is synchronized (thread safe).</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentCollection.isReadOnly">
       
        <p>Gets a value indicating whether collection is read-only</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentCollection.add(TextFragment)">
       
        <p>Adds the text fragment element at the specified index.</p> @param fragment TextFragment object element to add.
      
      <param name="TextFragment"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentCollection.iterator">
       
        <p>Returns an enumerator for the entire collection.</p> @return Enumerator object.
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentCollection.copyTo(TextFragment[],int)">
      / * 
        <p>/ * Returns an enumerator for the entire collection. / *</p> / * @return Enumerator object. /
      
      <param name="TextFragment[]"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentCollection.clear">
       
        <p>Clears all items from the collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentCollection.contains(TextFragment)">
       
        <p>Determines whether the collection contains a specific value.</p> @param item The object to locate in the collection @return true if item is found in the collection; otherwise, false.
      
      <param name="TextFragment"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentCollection.remove(TextFragment)">
       
        <p>Deletes specified item from collection.</p> @param item The object to delete @return true if item was deleted from collection; otherwise, false.
      
      <param name="TextFragment"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentCollection.get_Item(int)">
       
        <p>Gets the text fragment element at the specified index.</p> Index should be in the range [1..n] where n equals to the text fragments count. @param index Index within the collection. @return TextFragment object.
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.TextFragmentState">&lt;p&gt; Represents a text state of a text fragment. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to change text color and font size of the text with {@code TextState} object. // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get(1).accept(absorber); // Change foreground color of the first text occurrence absorber.TgetextFragments().get(1).getTextState().setForegroundColor ( java.awt.Color.RED); // Change font size of the first text occurrence absorber.getTextFragments().get(1).getTextState().setFontSize ( 15); // Save document doc.save("D:\\Tests\\output.pdf"); &lt;/pre&gt; &lt;hr&gt; &lt;p&gt; Provides a way to change following properties of the text: font ({@code TextFragmentState.Font} property) font size ({@code TextFragmentState.FontSize} property) font style ( {@code TextFragmentState.FontStyle} property) foreground color ( {@code TextFragmentState.ForegroundColor} property) background color ( {@code TextFragmentState.BackgroundColor} property) Note that changing {@code TextFragmentState} properties may change inner {@code TextFragment.Segments} collection because TextFragment is an aggregate object and it may rearrange internal segments or merge them into single segment. If your requirement is to leave the {@code TextFragment.Segments} collection unchanged, please change inner segments individually. &lt;/p&gt; @see TextFragmentAbsorber @see IDocument</member>
    <member name="M:com.aspose.pdf.TextFragmentState.getCharacterSpacing">
       
        <p>Gets character spacing of the text, represented by the {@code TextFragment} object.</p> @return float value
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.setCharacterSpacing(float)">
       
        <p>Sets character spacing of the text, represented by the {@code TextFragment} object.</p> @param value float value
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.getHorizontalScaling">
       
        <p>Gets horizontal scaling of the text, represented by the {@code TextFragment} object.</p> @return float value
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.setHorizontalScaling(float)">
       
        <p>Sets horizontal scaling of the text, represented by the {@code TextFragment} object.</p> @param value float value
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.getWordSpacing">
       
        <p>Gets word spacing of the text.</p> @return float value
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.setWordSpacing(float)">
       
        <p>Sets word spacing of the text.</p> @param value float value
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.getRenderingMode">
       
        <p>Gets or sets rendering mode of the text.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.setRenderingMode(int)">
       
        <p>Gets or sets rendering mode of the text.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.isSubscript">
       
        <p>Gets or sets subscript of the text, represented by the {@code TextFragment} object.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.setSubscript(boolean)">
       
        <p>Gets or sets subscript of the text, represented by the {@code TextFragment} object.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.isInvisible">
       
        <p>Gets invisibility of the text.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.setInvisible(boolean)">
       
        <p>Sets invisibility of the text.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.isSuperscript">
       
        <p>Gets or sets superscript of the text, represented by the {@code TextFragment} object.</p> @return value boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.setSuperscript(boolean)">
       
        <p>Gets or sets superscript of the text, represented by the {@code TextFragment} object.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.getTabStops">&lt;p&gt; Gets tabstops for the text. &lt;/p&gt; &lt;hr&gt; &lt;p&gt; Note that Tabstops property works in new document generation scenarios only. Tabstops may be added during {@code TextFragment} initialization. Tabstops must be constructed before the text. &lt;/p&gt; @return TabStops object</member>
    <member name="M:com.aspose.pdf.TextFragmentState.getLineSpacing">&lt;p&gt; Gets line spacing of the text. &lt;/p&gt; @return float value &lt;hr&gt; &lt;p&gt; Note that the value is not preserved as a text characteristic within the document. The LineSpacing property getter works for an object in case it was explicitly set previously with LineSpacing setter for those object. The property is used by runtime in context of current generation/modification process. &lt;/p&gt;</member>
    <member name="M:com.aspose.pdf.TextFragmentState.setLineSpacing(float)">&lt;p&gt; Sets line spacing of the text. &lt;/p&gt; @param value float value &lt;hr&gt; &lt;p&gt; Note that the value is not preserved as a text characteristic within the document. The LineSpacing property getter works for an object in case it was explicitly set previously with LineSpacing setter for those object. The property is used by runtime in context of current generation/modification process. &lt;/p&gt; 
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.getForegroundColor">
       
        <p>Gets foreground color of the text, represented by the {@code TextFragment} object</p> @return Color object
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.setForegroundColor(Color)">
       
        <p>Sets foreground color of the text, represented by the {@code TextFragment} object</p> @param value Color object
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.getStrokingColor">
       
        <p>Gets or sets color stroking operations of {@code TextFragment} rendering (stroke text, rectangle border)</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.setStrokingColor(Color)">
       
        <p>Gets or sets color stroking operations of {@code TextFragment} rendering (stroke text, rectangle border)</p> 
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.getBackgroundColor">
       
        <p>Sets background color of the text, represented by the {@code TextFragment} object</p> @return value Color object
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.setBackgroundColor(com.aspose.pdf.Color)">
       
        <p>Sets background color of the text, represented by the {@link TextFragment} object</p> 
      
      <param name="com.aspose.pdf.Color"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.getUnderline">
       
        <p>Gets or sets underline for the text, represented by the {@link TextFragment} object</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.setUnderline(boolean)">
       
        <p>Sets underline for the text, represented by the {@code TextFragment} object</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.setStrikeOut(boolean)">
       
        <p>Sets strikeout for the text, represented by the {@code TextFragment} object</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.getFontStyle">
       
        <p>Sets font style of the text, represented by the {@code TextFragment} object</p> @return FontStyles element @see FontStyles
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.setFontStyle(int)">
       
        <p>Sets font style of the text, represented by the {@link TextFragment} object</p> @param value int value @see FontStyles
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.getFont">
       
        <p>Gets font of the text, represented by the {@code TextFragment} object</p> @return Font value
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.setFont(Font)">
       
        <p>Sets font of the text, represented by the {@code TextFragment} object</p> @param value Font value
      
      <param name="Font"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.getFontSize">
       
        <p>Gets font size of the text, represented by the {@code TextFragment} object</p> @return float value
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.setFontSize(float)">
       
        <p>Sets font size of the text, represented by the {@code TextFragment} object</p> @param value float value
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.getHorizontalAlignment">&lt;p&gt; Gets horizontal alignment for the text. &lt;/p&gt; &lt;hr&gt; &lt;p&gt; HorizontalAlignment.None is equal to HorizontalAlignment.Left. Note that TextFragmentState.VerticalAlignment property works in new document generation scenarios only. &lt;/p&gt; @return HorizontalAlignment value @see HorizontalAlignment</member>
    <member name="M:com.aspose.pdf.TextFragmentState.setHorizontalAlignment(int)">&lt;p&gt; Sets horizontal alignment for the text. &lt;/p&gt; &lt;hr&gt; &lt;p&gt; HorizontalAlignment.None is equal to HorizontalAlignment.Left. Note that TextFragmentState.VerticalAlignment property works in new document generation scenarios only. &lt;/p&gt; @param value HorizontalAlignment value @see HorizontalAlignment 
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.getFormattingOptions">
       
        <p>Gets or sets formatting options. Setting of the options will be effective in generator scenarios only.</p> @return TextFormattingOptions instance
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.setFormattingOptions(TextFormattingOptions)">
       
        <p>Gets or sets formatting options. Setting of the options will be effective in generator scenarios only.</p> @param value TextFormattingOptions instance
      
      <param name="TextFormattingOptions"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.getTextHeight">
       
        <p>Gets text height, represented by the {@code TextFragment} object</p> @return float value
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.getRotation">
       
        <p>Gets or sets rotation angle in degrees.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.setRotation(double)">
       
        <p>Gets or sets rotation angle in degrees.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.getDrawTextRectangleBorder">
       
        <p>Gets if text rectangle border drawn flag.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.setDrawTextRectangleBorder(boolean)">
       
        <p>Sets if text rectangle border drawn flag.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.measureString(String)">
       
        <p>Measures the string.</p> @return double value, Width of the string. @param str The string.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.applyChangesFrom(TextState)">&lt;p&gt; Applies settings from another textState &lt;/p&gt; @param textState Text state object. &lt;hr&gt; &lt;p&gt; Only those properties will be copied that were changed explicitly. &lt;/p&gt; 
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.applyChangesFrom(TextState,boolean)">
       
        <p>Applies settings from another textState</p> @param textState Text state object. @param groupChangesOnly if true inherit group changes only (without isolating the segments into single segment)
      
      <param name="TextState"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.#ctor(TextFragment)">
       
        <p>Initializes new instance of the {@code TextFragmentState} object with specified {@code TextFragment} object. This {@code TextFragmentState} initialization is not supported. TextFragmentState is only available with {@code TextFragment.TextState} property.</p> @param fragment Text fragment object.
      
      <param name="TextFragment"/>
    </member>
    <member name="T:com.aspose.pdf.TextIcon">
       
        <p>Enumerates the icons to be used in displaying the annotation.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextIcon.Note">
       
        <p>Note icon.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextIcon.Comment">
       
        <p>Comment icon.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextIcon.Key">
       
        <p>Key icon.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextIcon.Help">
       
        <p>Help icon.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextIcon.NewParagraph">
       
        <p>NewParagraph icon.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextIcon.Paragraph">
       
        <p>Paragraph icon.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextIcon.Insert">
       
        <p>Insert icon.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextIcon.Check">
       
        <p>Check icon.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextIcon.Cross">
       
        <p>Cross icon.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextIcon.Circle">
       
        <p>Circle icon.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextIcon.Star">
       
        <p>Star icon.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TextIconConverter">
      Represents TextIconConverter class
    </member>
    <member name="M:com.aspose.pdf.TextIconConverter.toString(int)">
      Returns name for TextIcon element @param value TextIcon element @return string object @see TextIcon
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextIconConverter.toEnum(String)">
      Returns TextIcon element for the string equivalent @param value String object @return TextIcon element @see TextIcon
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.TextMarkupAnnotation">
       
        <p>Abstract base class for text markup annotations.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextMarkupAnnotation.getQuadPoints">
       
        <p>Gets an array of points specifying the coordinates of n quadrilaterals. Each quadrilateral encompasses a word or group of contiguous words in the text underlying the annotation.</p> @return array of Point value
      
    </member>
    <member name="M:com.aspose.pdf.TextMarkupAnnotation.setQuadPoints(Point[])">
       
        <p>Sets an array of points specifying the coordinates of n quadrilaterals. Each quadrilateral encompasses a word or group of contiguous words in the text underlying the annotation.</p> @param value array of Point value
      
      <param name="Point[]"/>
    </member>
    <member name="M:com.aspose.pdf.TextMarkupAnnotation.getMarkedText">
       
        <p>Gets text under markup annotation as string.</p> @return String containing text that is under markup annotation.
      
    </member>
    <member name="M:com.aspose.pdf.TextMarkupAnnotation.getMarkedTextFragments">
       
        <p>Gets text under markup annotation as {@code TextFragmentCollection}.</p> @return {@code TextFragmentCollection} containing {@code TextFragment}s that is under markup annotation.
      
    </member>
    <member name="T:com.aspose.pdf.TextOptions">
       
        <p>Represents text processing options</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TextParagraph">&lt;p&gt; Represents text paragraphs as multiline text object. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to create text paragraph object and append it to the Pdf page. Document doc = new Document(inFile); Page page = (Page)doc.getPages().get(1); // create text paragraph TextParagraph paragraph = new TextParagraph(); // set the paragraph rectangle paragraph.setRectangle ( new Rectangle(100, 600, 200, 700)); // set word wrapping options paragraph.getFormattingOptions().setWrapMode ( TextFormattingOptions.WordWrapMode.ByWords); // append string lines paragraph.appendLine("the quick brown fox jumps over the lazy dog"); paragraph.appendLine("line2"); paragraph.appendLine("line3"); // append the paragraph to the Pdf page with the TextBuilder TextBuilder textBuilder = new TextBuilder(page); textBuilder.appendParagraph(paragraph); // save Pdf document doc.save(outFile); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.TextParagraph.setBackgroundColor(com.aspose.pdf.Color)">
       
        <p>Sets background color for the text paragraph.</p> @param value Color object
      
      <param name="com.aspose.pdf.Color"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.getVerticalAlignment">&lt;p&gt; Gets vertical alignment for the text inside paragrph's {@code Rectangle}. &lt;/p&gt; @return VerticalAlignment value @see VerticalAlignment &lt;hr&gt; &lt;p&gt; VerticalAlignment.None is equal to VerticalAlignment.Bottom. &lt;/p&gt;</member>
    <member name="M:com.aspose.pdf.TextParagraph.setVerticalAlignment(int)">
       
        <p>Sets vertical alignment for the text inside paragrph's {@code Rectangle}.</p>  
        <p>VerticalAlignment.None is equal to VerticalAlignment.Bottom.</p> @param value VerticalAlignment value @see VerticalAlignment
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.getSubsequentLinesIndent">
       
        <p>Gets subsequent lines indent value.</p> @return float value
      
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.setSubsequentLinesIndent(float)">
       
        <p>Sets subsequent lines indent value.</p> @param value float value
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.getFirstLineIndent">
       
        <p>Gets or sets subsequent lines indent value. If set to a non-zero value, it has an advantage over the FormattingOptions.SubsequentLinesIndent value.</p> @return float value
      
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.setFirstLineIndent(float)">
       
        <p>Gets or sets subsequent lines indent value. If set to a non-zero value, it has an advantage over the FormattingOptions.SubsequentLinesIndent value.</p> @param value float value
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.isJustify">
       
        <p>Gets value whether text is justified.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.setJustify(boolean)">
       
        <p>Sets value whether text is justified.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.getHorizontalAlignment">
      Gets horizontal alignment for the text inside paragrph's Rectangle.
        <p>HorizontalAlignment.None is equal to HorizontalAlignment.Left.</p> @return HorizontalAlignment value @see HorizontalAlignment
      
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.setHorizontalAlignment(int)">
       
        <p>Sets horizontal alignment for the text inside paragrph's Rectangle.</p>  
        <p>HorizontalAlignment.None is equal to HorizontalAlignment.Left.</p> @param value HorizontalAlignment value @see HorizontalAlignment
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.getHyphenSymbol">
       
        <p>Gets hyphen symbol that is used in hyphenation process.</p>  
        <p>The hyphenation symbol is "-" by default. To eliminate hyphen drawing (with wrapping procedure still in place) please set empty string string.Empty for HyphenSymbol.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.setHyphenSymbol(String)">
       
        <p>Sets hyphen symbol that is used in hyphenation process.</p>  
        <p>The hyphenation symbol is "-" by default. To eliminate hyphen drawing (with wrapping procedure still in place) please set empty string string.Empty for HyphenSymbol.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.getFormattingOptions">
       
        <p>Gets formatting options.</p> @return TextFormattingOptions object
      
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.setFormattingOptions(TextFormattingOptions)">
       
        <p>Sets formatting options.</p> @param value TextFormattingOptions object
      
      <param name="TextFormattingOptions"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.getPosition">
       
        <p>Gets position of the paragraph.</p> @return Position value
      
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.setPosition(Position)">
       
        <p>Sets position of the paragraph.</p> @param value Position value
      
      <param name="Position"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.getTextRectangle">
       
        <p>Gets rectangle of the text placed to the paragraph.</p> @return Rectangle object
      
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.getRectangle">
       
        <p>Gets rectangle of the paragraph.</p> @return Rectangle object
      
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.setRectangle(Rectangle)">
       
        <p>Sets rectangle of the paragraph.</p> @param value Rectangle object
      
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.getMargin">
       
        <p>Gets the padding.</p> @return MarginInfo value
      
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.setMargin(MarginInfo)">
       
        <p>Sets the padding.</p> @param value MarginInfo value
      
      <param name="MarginInfo"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.getRotation">
       
        <p>Gets or sets rotation angle in degrees.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.setRotation(double)">
       
        <p>Gets or sets rotation angle in degrees.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.beginEdit">Begins the editing of the TextParagraph. &lt;p&gt; Improves performance of TextParagraph population. Any layout calculation is suspended until EndEdit method is invoked. &lt;p&gt; Note that method invoke can't be nested. &lt;/p&gt;</member>
    <member name="M:com.aspose.pdf.TextParagraph.endEdit">Ends the editing of the TextParagraph. &lt;p&gt; Improves performance of TextParagraph population. Any layout calculation is suspended until EndEdit method is invoked. &lt;p&gt; Note that method invoke can't be nested. &lt;/p&gt;</member>
    <member name="M:com.aspose.pdf.TextParagraph.appendLine(String)">
       
        <p>Appends text line</p> @param line The new line's text.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.appendLine(String,float)">
       
        <p>Appends text line.</p> @param line The new line's text. @param lineSpacing Additional spacing (0.0 is default and corresponds to default text line height). The spacing value is added to default line spacing for the particular line, so you may specify 12.0 to get empty row AFTER a text line drawn with 12pt font.
      
      <param name="String"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.appendLine(String,TextState)">
       
        <p>Appends text line with text state parameters.</p> @param line The new line's text. @param textState Text state of the new line.
      
      <param name="String"/>
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.appendLine(String,TextState,float)">
       
        <p>Appends text line with text state parameters</p> @param line The new line's text. @param textState Text state of the new line. @param lineSpacing Additional spacing (0.0 is default and corresponds to default text line height). The spacing value is added to default line spacing for the particular line, so you may specify 12.0 to get empty row AFTER a text line drawn with 12pt font.
      
      <param name="String"/>
      <param name="TextState"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.appendLine(TextFragment)">
       
        <p>Appends text line with text state parameters.</p> @param line The new line's text.
      
      <param name="TextFragment"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.appendLine(TextFragment,TextState)">
       
        <p>Appends text line with text state parameters.</p> @param line The new line's text. @param textState Text state of the new line.
      
      <param name="TextFragment"/>
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.appendLine(TextFragment,TextState,float)">
       
        <p>Appends text line with text state parameters</p> @param line The new line's text. @param textState Text state of the new line. @param lineSpacing Additional spacing (0.0 is default and corresponds to default text line height). The spacing value is added to default line spacing for the particular line, so you may specify 12.0 to get empty row AFTER a text line drawn with 12pt font.
      
      <param name="TextFragment"/>
      <param name="TextState"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.setMatrix(Matrix)">
       
        <p>Sets Rotation of the paragraph.</p> @param value Matrix object
      
      <param name="Matrix"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.setOldCodeCompatibilityMode(boolean)">
       
        <p>Set old code compatibility mode</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.setBackgroundMode(int)">
       
        <p>Set background mode for the text paragraph</p> @param value int value @see TextBackgroundMode
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.#ctor">
       
        <p>Creates {@code TextParagraph} object.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TextParagraph.TextBackgroundMode">
       
        <p>Background mode for TextParagraph</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextParagraph.TextBackgroundMode.WholeParagraph">
       
        <p>Background is set for the whole paragraph as single solid rectangle.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextParagraph.TextBackgroundMode.LogicalLine">
       
        <p>Each line will have it's own rectangle.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TextParagraphAbsorber">
       
        <p>Represents an absorber object of text paragraphs. Performs text search and provides access to search results via {@code TextParagraphAbsorber.TextParagraphs} collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextParagraphAbsorber.getTextParagraphs">
       
        <p>Gets collection of search occurrences that are presented with {@code TextParagraph} objects.</p> @return TextParagraphCollection value
      
    </member>
    <member name="M:com.aspose.pdf.TextParagraphAbsorber.setTextParagraphs(TextParagraphCollection)">
       
        <p>Sets collection of search occurrences that are presented with {@code TextParagraph} objects.</p> @param value TextParagraphCollection value
      
      <param name="TextParagraphCollection"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraphAbsorber.getRectangles">
       
        <p>Gets ractangles that the {@code TextParagraphAbsorber} used to searche for text paragraphs on the PDF document or page.</p> @return rectangle array
      
    </member>
    <member name="M:com.aspose.pdf.TextParagraphAbsorber.setRectangles(Rectangle[])">
       
        <p>Sets rectangles that the {@code TextParagraphAbsorber} used to search for text paragraphs on the PDF document or page.</p> @param value rectangle array
      
      <param name="Rectangle[]"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraphAbsorber.visit(Page)">
       
        <p>Performs search on the specified page.</p> @param page Page object
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraphAbsorber.#ctor(Rectangle[])">&lt;p&gt; Initializes a new instance of the {@code TextParagraphAbsorber} with rectangles collection. &lt;/p&gt; @param rectangles The paragraphs' rectangles. &lt;hr&gt; &lt;p&gt; The absorber will search for text and return paragraphs corresponding to the rectangles. &lt;/p&gt; 
      <param name="Rectangle[]"/>
    </member>
    <member name="T:com.aspose.pdf.TextParagraphCollection">
       
        <p>Represents a text paragraphs collection</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextParagraphCollection.size">
       
        <p>Gets the number of {@code TextParagraph} object elements actually contained in the collection.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.TextParagraphCollection.getSyncRoot">
       
        <p>Gets an object that can be used to synchronize access to the collection.</p> @return Object element
      
    </member>
    <member name="M:com.aspose.pdf.TextParagraphCollection.isSynchronized">
       
        <p>Gets a value indicating whether access to the collection is synchronized (thread safe).</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextParagraphCollection.isReadOnly">
       
        <p>Gets a value indicating whether collection is read-only</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextParagraphCollection.add(TextParagraph)">
       
        <p>Adds the text paragraph element at the specified index.</p> @param paragraph TextParagraph instance
      
      <param name="TextParagraph"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraphCollection.iterator">
       
        <p>Returns an enumerator for the entire collection.</p> @return IEnumerator object
      
    </member>
    <member name="M:com.aspose.pdf.TextParagraphCollection.copyTo(TextParagraph[],int)">
       
        <p>Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array</p> @param array Array collection @param index int value
      
      <param name="TextParagraph[]"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraphCollection.clear">
       
        <p>Clears all items from the collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextParagraphCollection.contains(TextParagraph)">
       
        <p>Determines whether the collection contains a specific value.</p> @param item The object to locate in the collection @return true if item is found in the collection; otherwise, false.
      
      <param name="TextParagraph"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraphCollection.remove(TextParagraph)">
       
        <p>Deletes specified item from collection.</p> @param item The object to delete @return true if item was deleted from collection; otherwise, false.
      
      <param name="TextParagraph"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraphCollection.get_Item(int)">
       
        <p>Gets the text paragraph element at the specified index.</p> @param index int value @return TextParagraph object
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.TextRenderingMode">
       
        <p>The text rendering mode, Tmode, determines whether showing text shall cause glyph outlines to be stroked, filled, used as a clipping boundary, or some combination of the three.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextRenderingMode.FillText">
       
        <p>Fill text.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextRenderingMode.StrokeText">
       
        <p>Stroke text.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextRenderingMode.FillThenStrokeText">
       
        <p>Fill, then stroke text.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextRenderingMode.Invisible">
       
        <p>Neither fill nor stroke text (invisible).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextRenderingMode.FillTextAndAddPathToClipping">
       
        <p>Fill text and add to path for clipping (see 9.3.6, "Text Rendering Mode,").</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextRenderingMode.StrokeTextAndAddPathToClipping">
       
        <p>Stroke text and add to path for clipping.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextRenderingMode.FillThenStrokeTextAndAddPathToClipping">
       
        <p>Fill, then stroke text and add to path for clipping.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextRenderingMode.AddPathToClipping">
       
        <p>Add text to path for clipping.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TextReplaceOptions">
       
        <p>Represents text replace options</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextReplaceOptions.getReplaceScope">
       
        <p>Gets a scope where replace text operation is applied</p> @return int value @see Scope
      
    </member>
    <member name="M:com.aspose.pdf.TextReplaceOptions.setReplaceScope(int)">
       
        <p>Sets a scope where replace text operation is applied</p> @param value int value @see Scope
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextReplaceOptions.getReplaceAdjustmentAction">
       
        <p>Gets an action that will be done after replace of text fragment to more short.</p> @return ReplaceAdjustment element @see ReplaceAdjustment
      
    </member>
    <member name="M:com.aspose.pdf.TextReplaceOptions.setReplaceAdjustmentAction(int)">
       
        <p>Sets an action that will be done after replace of text fragment to more short.</p> @param value ReplaceAdjustment element @see ReplaceAdjustment
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextReplaceOptions.getAdjustmentNewLineSpacing">
       
        <p>Gets or sets value of line spacing that used if replace adjustment is forced to create new line of text. The value expected is multiplier of font size of the replaced text. Default is 1.2.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.TextReplaceOptions.setAdjustmentNewLineSpacing(double)">
       
        <p>Gets or sets value of line spacing that used if replace adjustment is forced to create new line of text. The value expected is multiplier of font size of the replaced text. Default is 1.2.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.TextReplaceOptions.#ctor(int)">
       
        <p>Initializes new instance of the {@code TextReplaceOptions} object for the specified scope.</p> @param scope Scope object. @see Scope
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextReplaceOptions.#ctor(int,int)">
       
        <p>Initializes new instance of the {@code TextReplaceOptions} object for the specified after replace action.</p> @param adjustment ReplaceAdjustment object. @param scope Scope object. @see ReplaceAdjustment @see Scope
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextReplaceOptions.#ctor">
       
        <p>Initializes new instance of the {@code TextReplaceOptions} object for the default adjustment and scope : ReplaceAdjustment.None and Scope.REPLACE_FIRST</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TextReplaceOptions.Scope">
       
        <p>Scope where replace text operation is applied REPLACE_FIRST by default This obsolete option was kept for compatibility. It affects to PdfContentEditor and has no effect to TextFragmentAbsorber.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextReplaceOptions.Scope.REPLACE_FIRST">
       
        <p>Replace only first occurrence of the text on each of affected pages</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextReplaceOptions.Scope.REPLACE_ALL">
       
        <p>Replace all text occurrences on all affected pages</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TextReplaceOptions.ReplaceAdjustment">
       
        <p>Determines action that will be done after replace of text fragment to more short. None - no action, replaced text may overlaps rest of the line; AdjustSpaceWidth - tries adjust spaces between words to keep line length; WholeWordsHyphenation - tries distribute words between paragraph lines to keep paragraph's right field; ShiftRestOfLine - shifts rest of the line according to changing length of text, length of the line may be changed; Default value is ShiftRestOfLine.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextReplaceOptions.ReplaceAdjustment.None">
       
        <p>No action, replaced text may overlaps rest of the line</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextReplaceOptions.ReplaceAdjustment.AdjustSpaceWidth">
       
        <p>Tries adjust spaces between words to keep line length</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextReplaceOptions.ReplaceAdjustment.WholeWordsHyphenation">
       
        <p>Tries distribute words between paragraph lines to keep paragraph's right field</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextReplaceOptions.ReplaceAdjustment.ShiftRestOfLine">
       
        <p>(Default) Shifts rest of the line according to changing length of text, length of the line may be changed</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TextSearchOptions">
       
        <p>Represents text search options</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextSearchOptions.setDotallMode(boolean)">Enables dotall mode. &lt;p&gt; In dotall mode, the expression &lt;tt&gt;.&lt;/tt&gt; matches any character, including a line terminator. By default this expression does not match line terminators. @param dotallMode boolean value 
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextSearchOptions.isDotallMode">&lt;p&gt; In dotall mode, the expression &lt;tt&gt;.&lt;/tt&gt; matches any character, including a line terminator. By default this expression does not match line terminators. @return boolean value</member>
    <member name="M:com.aspose.pdf.TextSearchOptions.isRegularExpressionUsed">
       
        <p>Indicated that regular expression is used or not</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextSearchOptions.setRegularExpressionUsed(boolean)">
       
        <p>Indicated that regular expression is used or not</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextSearchOptions.getLimitToPageBounds">
       
        <p>Gets indication that text is searched within the page bounds.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextSearchOptions.setLimitToPageBounds(boolean)">
       
        <p>Sets indication that text is searched within the page bounds.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextSearchOptions.getRectangle">
       
        <p>Gets rectangle that bounds the searched text. The property may be used in case it is required to delimit text extraction or text replace region.</p> @return Rectangle value
      
    </member>
    <member name="M:com.aspose.pdf.TextSearchOptions.setRectangle(Rectangle)">
       
        <p>Sets rectangle that bounds the searched text. The property may be used in case it is required to delimit text extraction or text replace region.</p> @param value Rectangle object
      
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.TextSearchOptions.getUseFontEngineEncoding">
       
        <p>Gets indication that text will be searched using font engine encoding. true - means that font engine encoding will be used (try this if text search fails because of imperfect encoding in the document) false - means that document font encoding will be used (default value)</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextSearchOptions.setUseFontEngineEncoding(boolean)">
       
        <p>Sets indication that text will be searched using font engine encoding. true - means that font engine encoding will be used (try this if text search fails because of imperfect encoding in the document) false - means that document font encoding will be used (default value)</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextSearchOptions.isIgnoreShadowText">
       
        <p>Gets or sets indication that text fragments representing shadow of normal text will be ignored during search. true - means that shadow text will not be found (try this if text search returns duplicated fragments on the close positions) false - means that shadow text will be found as well as normal text (default value)</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextSearchOptions.setIgnoreShadowText(boolean)">
       
        <p>Gets or sets indication that text fragments representing shadow of normal text will be ignored during search. true - means that shadow text will not be found (try this if text search returns duplicated fragments on the close positions) false - means that shadow text will be found as well as normal text (default value)</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextSearchOptions.getLogTextExtractionErrors">
       
        <p>Gets or sets indication that text extraction (decoding) errors will be logged in the text (fragment) absorber. true - means that text extraction (decoding) errors will be loged. It may decrease performance. false (default) - no error loging.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextSearchOptions.setLogTextExtractionErrors(boolean)">
       
        <p>Gets or sets indication that text extraction (decoding) errors will be logged in the text (fragment) absorber. true - means that text extraction (decoding) errors will be loged. It may decrease performance. false (default) - no error loging.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextSearchOptions.getIgnoreResourceFontErrors">
       
        <p>Gets or sets indication that errors related to absence of font will be ignored by text (fragment) absorber. true - means that errors of absence of font will be ignored. Text segments that refer to incorrect resources will be skipped during processing. false (default) - absence of font error will terminate processing by throwing exception.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextSearchOptions.setIgnoreResourceFontErrors(boolean)">
       
        <p>Gets or sets indication that errors related to absence of font will be ignored by text (fragment) absorber. true - means that errors of absence of font will be ignored. Text segments that refer to incorrect resources will be skipped during processing. false (default) - absence of font error will terminate processing by throwing exception.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextSearchOptions.getSearchForTextRelatedGraphics">
       
        <p>Gets or sets value that permits searching for text related graphics (underlining, background etc.) during text search. true - searching for text related graphics will be performed (default value). false - graphic elements that may present in source document will be ignored. Set this in case of performance issues or no need to handle underlining, background, or clipping.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextSearchOptions.setSearchForTextRelatedGraphics(boolean)">
       
        <p>Gets or sets value that permits searching for text related graphics (underlining, background etc.) during text search. true - searching for text related graphics will be performed (default value). false - graphic elements that may present in source document will be ignored. Set this in case of performance issues or no need to handle underlining, background, or clipping.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextSearchOptions.getStoredGraphicElementsMaxCount">
       
        <p>Gets value that limits searching for text related graphics (underlining, background etc.) on a page for the speciefied number of elements. The default is 250. Set lesser value in the case of performance problems, try larger value in the case some graphic elements wasn't found.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.TextSearchOptions.setStoredGraphicElementsMaxCount(int)">
       
        <p>Sets value that limits searching for text related graphics (underlining, background etc.) on a page for the speciefied number of elements. The default is 250. Set lesser value in the case of performance problems, try larger value in the case some graphic elements wasn't found.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextSearchOptions.#ctor(boolean)">
       
        <p>Initializes new instance of the {@code TextSearchOptions} object. Specifies regular expression usage mode.</p> @param isRegularExpressionUsed Value that indicates that regularexpression is used.
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextSearchOptions.#ctor(Rectangle)">
       
        <p>Initializes new instance of the TextSearchOptions object. Specifies rectangle that delimits the searched text.</p> @param rectangle Rectangle that includes the extracted text.
      
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.TextSearchOptions.#ctor(Rectangle,boolean)">
       
        <p>Initializes new instance of the TextSearchOptions object. Specifies rectangle that delimits the searched text and regular expression usage mode.</p> @param rectangle Rectangle that includes the extracted text. @param isRegularExpressionUsed Value that indicates that regular expression is used.
      
      <param name="Rectangle"/>
      <param name="boolean"/>
    </member>
    <member name="T:com.aspose.pdf.TextSegment">&lt;p&gt; Represents segment of Pdf text. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to change text color and font size of the text with {@code TextState} object of {@code TextSegment} object. // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get(1).accept(absorber); // Change foreground color of the first text segment of the first text occurrence absorber.getTextFragments().get(1).getSegments().get(1).getTextState().setForegroundColor ( java.awt.Color.RED); // Change font size of the first text segment of the first text occurrence absorber.getTextFragments().get(1).getSegments().get_Item(1).getTextState().setFontSize ( 15); // Save document doc.save("D:\\Tests\\output.pdf"); &lt;/pre&gt; &lt;hr&gt; &lt;pre&gt; In a few words, {@code TextSegment} objects are children of {@code TextFragment} object. In details: Text of pdf document in {@code Aspose.Pdf} is represented by two basic objects: {@code TextFragment} and {@code TextSegment} The differences between them is mostly context-dependent. Let's consider following scenario. User searches text "hello world" to operate with it, change it's properties, look etc. Document doc = new Document(docFile); TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); doc.getPages().get(1).accept(absorber); &lt;/pre&gt; &lt;p&gt; Physically pdf text's representation is very complex. The text "hello world" may consist of several physically independent text segments. The Aspose.PDF text model basically establishes that {@code TextFragment} object provides single logic operation set over physical {@code TextSegment} objects set that represent user's query. In text search scenario, {@code TextFragment} is logical "hello world" text representation, and {@code TextSegment} object collection represents all physical segments that construct "hello world" text object. So, {@code TextFragment} is close to logical text representation. And {@code TextSegment} is close to physical text representation. Obviously each {@code TextSegment} object may have it's own font, coloring, positioning properties. {@code TextFragment} provides simple way to change text with it's properties: set font, set font size, set font color etc. Meanwhile {@code TextSegment} objects are accessible and users are able to operate with {@code TextSegment} objects independently. &lt;/p&gt;</member>
    <member name="M:com.aspose.pdf.TextSegment.getStartCharIndex">
       
        <p>Gets starting character index of current segment in the show text operator (Tj, TJ) segment.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.TextSegment.getEndCharIndex">
       
        <p>Gets ending character index of current segment in the show text operator (Tj, TJ) segment.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.TextSegment.getText">
       
        <p>Gets {@code string} text object that the {@code TextSegment} object represents.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.TextSegment.setTextSuppressedUpdate(String)">
       
        <p>Sets {@code string} text object that the {@code TextSegment} object represents wish suppressed update.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TextSegment.setText(String)">
       
        <p>Sets {@code string} text object that the {@code TextSegment} object represents.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TextSegment.getTextState">&lt;p&gt; Gets or sets text state for the text that {@code TextSegment} object represents. &lt;/p&gt; &lt;hr&gt; &lt;p&gt; Provides a way to change following properties of the text: Font FontSize FontStyle ForegroundColor BackgroundColor &lt;/p&gt; @return TextState value</member>
    <member name="M:com.aspose.pdf.TextSegment.setTextState(TextState)">&lt;p&gt; Sets text state for the text that {@code TextSegment} object represents. &lt;/p&gt; &lt;hr&gt; &lt;p&gt; Provides a way to change following properties of the text: Font FontSize FontStyle ForegroundColor BackgroundColor &lt;/p&gt; @param value TextState value 
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.TextSegment.getPosition">
       
        <p>Gets text position for text, represented with {@code TextSegment} object.</p> @return Position value
      
    </member>
    <member name="M:com.aspose.pdf.TextSegment.setPosition(Position)">
       
        <p>Sets text position for text, represented with {@code TextSegment} object.</p> @param value Position value
      
      <param name="Position"/>
    </member>
    <member name="M:com.aspose.pdf.TextSegment.getRectangle">
       
        <p>Gets rectangle of the TextSegment</p> @return Rectangle object
      
    </member>
    <member name="M:com.aspose.pdf.TextSegment.getBaselinePosition">
       
        <p>Gets text position for text, represented with {@code TextSegment} object. The YIndent of the Position structure represents baseline coordinate of the text segment.</p> @return Position value
      
    </member>
    <member name="M:com.aspose.pdf.TextSegment.setBaselinePosition(Position)">
       
        <p>Sets text position for text, represented with {@code TextSegment} object. The YIndent of the Position structure represents baseline coordinate of the text segment.</p> @param value Position value
      
      <param name="Position"/>
    </member>
    <member name="M:com.aspose.pdf.TextSegment.getTextEditOptions">
       
        <p>Gets text edit options. The options define special behavior when requested symbol cannot be written with font.</p> @return TextEditOptions value
      
    </member>
    <member name="M:com.aspose.pdf.TextSegment.setTextEditOptions(TextEditOptions)">
       
        <p>Sets text edit options. The options define special behavior when requested symbol cannot be written with font.</p> @param value TextEditOptions value
      
      <param name="TextEditOptions"/>
    </member>
    <member name="M:com.aspose.pdf.TextSegment.getCharacters">
       
        <p>Gets collection of CharInfo objects that represent information on characters in the text segment.</p> @return CharInfoCollection object
      
    </member>
    <member name="M:com.aspose.pdf.TextSegment.getHyperlink">
       
        <p>Gets or sets the segment hyperlink(for pdf generator).</p> @return Hyperlink object
      
    </member>
    <member name="M:com.aspose.pdf.TextSegment.setHyperlink(Hyperlink)">
       
        <p>Gets or sets the segment hyperlink(for pdf generator).</p> @param value Hyperlink object
      
      <param name="Hyperlink"/>
    </member>
    <member name="M:com.aspose.pdf.TextSegment.#ctor">&lt;p&gt; Creates TextSegment object. &lt;/p&gt; &lt;hr&gt; &lt;pre&gt; The example demonstrates how to create text fragment object, add a text segment to the text fragment collection and append it to the Pdf page. Document doc = new Document(inFile); Page page = (Page)doc.getPages().get(1); // create text fragment TextFragment tf = new TextFragment("main text"); tf.setPosition ( new Position(100, 600)); // set it's text properties tf.getTextState().setFontSize ( 5); tf.getTextState().setFont ( FontRepository.FindFont("TimesNewRoman")); tf.getTextState().setBackgroundColor ( Color.GRAY); tf.getTextState().setForegroundColor ( Color.RED); // add one more segment to text fragment's Segments collection TextSegment segment2 = new TextSegment(); segment2.setText ( "another segment"); tf.getSegments().add(segment2); // create TextBuilder object TextBuilder builder = new TextBuilder(page); // append the text fragment to the Pdf page builder.appendText(tf); //save document doc.save(outFile); &lt;/pre&gt;</member>
    <member name="M:com.aspose.pdf.TextSegment.#ctor(String)">
       
        <p>Creates TextSegment object.</p>  
        <pre>The example demonstrates how to create text fragment object, add a text segment to the text fragment collection and append it to the Pdf page. Document doc = new Document(inFile); Page page = (Page)doc.getPages().get(1); // create text fragment TextFragment tf = new TextFragment("main text"); tf.setPosition ( new Position(100, 600)); // set it's text properties tf.getTextState().setFontSize ( 5); tf.getTextState().setFont ( FontRepository.FindFont("TimesNewRoman")); tf.getTextState().setBackgroundColor ( Color.GRAY); tf.getTextState().setForegroundColor ( Color.RED); // add one more segment to text fragment's Segments collection TextSegment segment2 = new TextSegment("another segment"); tf.getSegments().add(segment2); // create TextBuilder object TextBuilder builder = new TextBuilder(page); // append the text fragment to the Pdf page builder.appendText(tf); //save document doc.save(outFile);</pre> @param text Text segment's text.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.TextSegmentCollection">
       
        <p>Represents a text segments collection</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextSegmentCollection.size">
       
        <p>Gets the number of {@code TextSegment} object elements actually contained in the collection.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.TextSegmentCollection.getSyncRoot">
       
        <p>Gets an object that can be used to synchronize access to the collection.</p> @return Object element
      
    </member>
    <member name="M:com.aspose.pdf.TextSegmentCollection.isSynchronized">
       
        <p>Gets a value indicating whether access to the collection is synchronized (thread safe).</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextSegmentCollection.isReadOnly">
       
        <p>Gets a value indicating whether collection is read-only</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextSegmentCollection.add(TextSegment)">
       
        <p>Adds the text segment element at the specified index.</p> @param segment Text segment object
      
      <param name="TextSegment"/>
    </member>
    <member name="M:com.aspose.pdf.TextSegmentCollection.delete(int)">
       
        <p>Deletes the text segment element at the specified index.</p> @param index int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextSegmentCollection.iterator">
       
        <p>Returns an enumerator for the entire collection.</p> @return Enumerator object.
      
    </member>
    <member name="M:com.aspose.pdf.TextSegmentCollection.copyTo(TextSegment[],int)">
       
        <p>Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array</p> @param array Array of objects which will be copied. @param index Starting index from which copying will be started.
      
      <param name="TextSegment[]"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextSegmentCollection.get_Item(int)">
       
        <p>Gets the text segment element at the specified index.</p> @param index Index within the collection. @return TextSegment object.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextSegmentCollection.clear">
       
        <p>Clears all items from the collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextSegmentCollection.contains(TextSegment)">
       
        <p>Determines whether the collection contains a specific value.</p> @param item The object to locate in the collection @return true if item is found in the collection; otherwise, false.
      
      <param name="TextSegment"/>
    </member>
    <member name="M:com.aspose.pdf.TextSegmentCollection.remove(TextSegment)">
       
        <p>Deletes specified item from collection.</p> @param item The object to delete @return true if item was deleted from collection; otherwise, false.
      
      <param name="TextSegment"/>
    </member>
    <member name="T:com.aspose.pdf.TextStamp">
       
        <p>Reresents textual stamp.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextStamp.getDefaultFontSize">
      Default Font Size @return float value
    </member>
    <member name="M:com.aspose.pdf.TextStamp.getDraw">
       
        <p>This property determines how stamp is drawn on page. If Draw = true stamp is drawn as graphic operators and if draw = false then stamp is drawn as text.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextStamp.setDraw(boolean)">
       
        <p>This property determines how stamp is drawn on page. If Draw = true stamp is drawn as graphic operators and if draw = false then stamp is drawn as text.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextStamp.getTreatYIndentAsBaseLine">
       
        <p>Defines coordinate origin for placing text. If TreatYIndentAsBaseLine = true (default when Draw = true) YIndent value will be treated as text base line. If TreatYIndentAsBaseLine = false (default when Draw = false) YIndent value will be treated as bottom (descent line) of text.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextStamp.setTreatYIndentAsBaseLine(boolean)">
       
        <p>Defines coordinate origin for placing text. If TreatYIndentAsBaseLine = true (default when Draw = true) YIndent value will be treated as text base line. If TreatYIndentAsBaseLine = false (default when Draw = false) YIndent value will be treated as bottom (descent line) of text.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextStamp.isWordWrap">
       
        <p>Defines word wrap. If this property set to true and Width value specified, text will be broken in the several lines to fit into specified width. Default value: false.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextStamp.setWordWrap(boolean)">
       
        <p>Defines word wrap. If this property set to true and Width value specified, text will be broken in the several lines to fit into specified width. Default value: false.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextStamp.isJustify">
       
        <p>Defines text justification. If this property is set to true, both left and right edges of the text are aligned. Default value: false.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextStamp.setJustify(boolean)">
       
        <p>Defines text justification. If this property is set to true, both left and right edges of the text are aligned. Default value: false.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextStamp.isScale">
       
        <p>Defines scaling of the text. If this property is set to true and Width value specified, text will be scaled in order to fit to specified width.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextStamp.setScale(boolean)">
       
        <p>Defines scaling of the text. If this property is set to true and Width value specified, text will be scaled in order to fit to specified width.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextStamp.getDefaultFont">
      Returns default font @return com.aspose.pdf.Font object
    </member>
    <member name="M:com.aspose.pdf.TextStamp.getValue">
       
        <p>Gets string value which is used as stamp on the page.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.TextStamp.setValue(String)">
       
        <p>Sets string value which is used as stamp on the page.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TextStamp.getTextState">
       
        <p>Gets text properties of the stamp. See {@code TextState} for details.</p> @return TextState element
      
    </member>
    <member name="M:com.aspose.pdf.TextStamp.getTextAlignment">
       
        <p>Alignment of the text inside the stamp.</p> @return HorizontalAlignment value @see HorizontalAlignment
      
    </member>
    <member name="M:com.aspose.pdf.TextStamp.setTextAlignment(int)">
       
        <p>Alignment of the text inside the stamp.</p> @param value HorizontalAlignment value @see HorizontalAlignment
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextStamp.put(Page)">
       
        <p>Adds textual stamp on the page.</p> @param page Page for stamping.
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.TextStamp.getWidth">
       
        <p>Desired width of the stamp on the page.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.TextStamp.setWidth(double)">
       
        <p>Desired width of the stamp on the page.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.TextStamp.getHeight">
       
        <p>Desired height of the stamp on the page.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.TextStamp.setHeight(double)">
       
        <p>Desired height of the stamp on the page.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.TextStamp.getMaxRowWidth">
       
        <p>Max row height for WordWrap option.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.TextStamp.setMaxRowWidth(double)">
       
        <p>Max row height for WordWrap option.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.TextStamp.#ctor(String)">
       
        <p>Initializes a new instance of the {@code TextStamp} class.</p> @param value Stamp value.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TextStamp.#ctor(String,com.aspose.pdf.TextState)">
       
        <p>Initializes a new instance of the {@code TextStamp} class.</p> @param value Stamp value. @param textState Stamp text state.
      
      <param name="String"/>
      <param name="com.aspose.pdf.TextState"/>
    </member>
    <member name="M:com.aspose.pdf.TextStamp.#ctor(FormattedText)">
       
        <p>Initializes a new instance of the {@code TextStamp} class with formattedText object</p> @param formattedText FormattedText object which contains text of the stamp.
      
      <param name="FormattedText"/>
    </member>
    <member name="T:com.aspose.pdf.TextState">
       
        <p>Represents a text state of a text</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextState.applyChangesFrom(TextState)">&lt;p&gt; Applies settings from another textState &lt;/p&gt; &lt;hr&gt; &lt;p&gt; Only those properties will be copied that were changed explicitly. &lt;/p&gt; @param textState Text state object. 
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.getCharacterSpacing">
       
        <p>Gets character spacing of the text.</p> @return float value
      
    </member>
    <member name="M:com.aspose.pdf.TextState.setCharacterSpacing(float)">
       
        <p>Sets character spacing of the text.</p> @param value float value
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.getLineSpacing">&lt;p&gt; Gets line spacing of the text. &lt;/p&gt; @return float value &lt;hr&gt; &lt;p&gt; Note that the value is not preserved as a text characteristic within the document. The LineSpacing property getter works for an object in case it was explicitly set previously with LineSpacing setter for those object. The property is used by runtime in context of current generation/modification process. &lt;/p&gt;</member>
    <member name="M:com.aspose.pdf.TextState.setLineSpacing(float)">&lt;p&gt; Sets line spacing of the text. &lt;/p&gt; @param value float value &lt;hr&gt; &lt;p&gt; Note that the value is not preserved as a text characteristic within the document. The LineSpacing property getter works for an object in case it was explicitly set previously with LineSpacing setter for those object. The property is used by runtime in context of current generation/modification process. &lt;/p&gt; 
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.getHorizontalScaling">
       
        <p>Gets horizontal scaling of the text.</p> @return float value
      
    </member>
    <member name="M:com.aspose.pdf.TextState.setHorizontalScaling(float)">
       
        <p>Sets horizontal scaling of the text.</p> @param value float value
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.isSubscript">
       
        <p>Gets or sets subscript of the text.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextState.setSubscript(boolean)">
       
        <p>Gets or sets subscript of the text.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.isSuperscript">
       
        <p>Gets superscript of the text.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextState.setSuperscript(boolean)">
       
        <p>Sets superscript of the text.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.getWordSpacing">
       
        <p>Gets word spacing of the text.</p> @return float value
      
    </member>
    <member name="M:com.aspose.pdf.TextState.setWordSpacing(float)">
       
        <p>Sets word spacing of the text.</p> @param value float value
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.isInvisible">
       
        <p>Gets or sets the invisibility of text. This basically reflects the {@code RenderingMode}({@link #getRenderingMode}/{@link #setRenderingMode(int)}) state, except for some special cases (like clipping).</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextState.setInvisible(boolean)">
       
        <p>Gets or sets the invisibility of text. This basically reflects the {@code RenderingMode}({@link #getRenderingMode}/{@link #setRenderingMode(int)}) state, except for some special cases (like clipping).</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.getRenderingMode">
       
        <p>Gets or sets rendering mode of text.</p> @return TextRenderingMode element @see TextRenderingMode
      
    </member>
    <member name="M:com.aspose.pdf.TextState.setRenderingMode(int)">
       
        <p>Gets or sets rendering mode of text.</p> @param value TextRenderingMode element @see TextRenderingMode
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.getFontSize">
       
        <p>Gets font size of the text.</p> @return float value
      
    </member>
    <member name="M:com.aspose.pdf.TextState.setFontSizeSuppressedUpdate(float)">
       
        <p>Sets font size of the text wish suppressed update.</p> @param value float value
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.setFontSize(float)">
       
        <p>Sets font size of the text.</p> @param value float value
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.getTextHeight">
       
        <p>Gets text height.</p> @return float value
      
    </member>
    <member name="M:com.aspose.pdf.TextState.getFont">
       
        <p>Gets font of the text.</p> @return Font object
      
    </member>
    <member name="M:com.aspose.pdf.TextState.setFontSuppressedUpdate(Font)">
       
        <p>Gets font of the text wish suppressed update.</p> @param value Font object
      
      <param name="Font"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.setFont(Font)">
       
        <p>Gets font of the text.</p> @param value Font object
      
      <param name="Font"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.getForegroundColor">
       
        <p>Gets foreground color of the text.</p> @return Color value
      
    </member>
    <member name="M:com.aspose.pdf.TextState.setForegroundColor(com.aspose.pdf.Color)">
       
        <p>Sets foreground color of the text.</p> @param value Color value
      
      <param name="com.aspose.pdf.Color"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.getStrokingColor">
       
        <p>Gets or sets foreground color of the text.</p> @return Color instance
      
    </member>
    <member name="M:com.aspose.pdf.TextState.setStrokingColor(com.aspose.pdf.Color)">
       
        <p>Gets or sets foreground color of the text.</p> @param value Color instance
      
      <param name="com.aspose.pdf.Color"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.isUnderline">
       
        <p>Gets underline for the text, represented by the {@code TextFragment} object</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextState.setUnderline(boolean)">
       
        <p>Sets underline for the text, represented by the {@code TextFragment} object</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.getStrikeOut">
       
        <p>Gets strikeout for the text, represented by the {@code TextFragment} object</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TextState.setStrikeOut(boolean)">
       
        <p>Sets strikeout for the text, represented by the {@code TextFragment} object</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.getBackgroundColor">&lt;p&gt; Gets background color of the text. &lt;/p&gt; &lt;hr&gt; &lt;p&gt; Note that the value is not preserved as a text characteristic within the document. The BackgroundColor property getter works for an object in case it was explicitly set previously with BackgroundColor setter for those object. The property is used by runtime in context of current generation/modification process. &lt;/p&gt; @return Color value</member>
    <member name="M:com.aspose.pdf.TextState.setBackgroundColor(com.aspose.pdf.Color)">&lt;p&gt; Sets background color of the text. &lt;/p&gt; &lt;hr&gt; &lt;p&gt; Note that the value is not preserved as a text characteristic within the document. The BackgroundColor property getter works for an object in case it was explicitly set previously with BackgroundColor setter for those object. The property is used by runtime in context of current generation/modification process. &lt;/p&gt; @param value Color value 
      <param name="com.aspose.pdf.Color"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.getFontStyle">
       
        <p>Sets font style of the text.</p> @return FontStyles element @see FontStyles
      
    </member>
    <member name="M:com.aspose.pdf.TextState.setFontStyle(int)">
       
        <p>Sets font style of the text.</p> @param value FontStyles value @see FontStyles
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.getHorizontalAlignment">&lt;p&gt; Gets horizontal alignment for the text. &lt;/p&gt; &lt;hr&gt; &lt;p&gt; HorizontalAlignment.None is equal to HorizontalAlignment.Left. Note that TextState.HorizontalAlignment property works in new document generation scenarios only. &lt;/p&gt; @return HorizontalAlignment value @see HorizontalAlignment</member>
    <member name="M:com.aspose.pdf.TextState.setHorizontalAlignment(int)">&lt;p&gt; Sets horizontal alignment for the text. &lt;/p&gt; &lt;hr&gt; &lt;p&gt; HorizontalAlignment.None is equal to HorizontalAlignment.Left. Note that TextState.HorizontalAlignment property works in new document generation scenarios only. &lt;/p&gt; @param value HorizontalAlignment value @see HorizontalAlignment 
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.measureString(String,boolean)">&lt;p&gt; Measures the string. &lt;/p&gt; &lt;hr&gt; &lt;p&gt; insideLine indicate that the string is not ending. in case part of the whole string is measured - the insideLine should be true. in case the whole string is measured the insideLine should be false. in other words: in case insideLine = true only character widths are taken into account. no additional transformations are taken into account in case insideLine = false end of the string is handled properly - italic transformation is taken into account. &lt;/p&gt; @param str String value @param insideLine boolean value @return double value 
      <param name="String"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.measureString(String)">
      Measures the string. @param str The string. @return Width of the string represented with this text state.
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.calculateFontSize(String,Rectangle)">
       
        <p>Calculates the font size for the rectangle.</p> @param str String value @param rect Rectangle object @return double value
      
      <param name="String"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.#ctor">
       
        <p>Creates text state object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextState.#ctor(double)">
       
        <p>Creates text state object with font size specification.</p> @param fontSize Font size.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.#ctor(java.awt.Color)">
       
        <p>Creates text state object with foreground color specification.</p> @param foregroundColor Foreground color.
      
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.#ctor(java.awt.Color,double)">
       
        <p>Creates text state object with foreground color and font size specification.</p> @param foregroundColor Foreground color. @param fontSize Font size.
      
      <param name="java.awt.Color"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.#ctor(String)">
       
        <p>Creates text state object with font family specification.</p> @param fontFamily Font family.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.#ctor(String,boolean,boolean)">
       
        <p>Creates text state object with font family and font style specification.</p> @param fontFamily Font family. @param bold Bold font style. @param italic Italic font style.
      
      <param name="String"/>
      <param name="boolean"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.#ctor(String,double)">
       
        <p>Creates text state object with font family and font size specification.</p> @param fontFamily Font family. @param fontSize Font size.
      
      <param name="String"/>
      <param name="double"/>
    </member>
    <member name="F:com.aspose.pdf.TextState.TabTag">&lt;p&gt; You can place this tag in text to declare tabulation. &lt;/p&gt; &lt;hr&gt; &lt;p&gt; It has effect only in couple with {@code TabStops}. &lt;/p&gt;</member>
    <member name="F:com.aspose.pdf.TextState.TabstopDefaultValue">
       
        <p>Default value of tabulation in widths of space character of default font.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TextStyle">
       
        <p>Class representing checkbox field</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextStyle.getFontName">
       
        <p>Get the Name of the font.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.TextStyle.setFontName(String)">
       
        <p>Set the Name of the font.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TextStyle.getFontSize">
       
        <p>Get the Fonts size.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.TextStyle.setFontSize(double)">
       
        <p>Set the Fonts size.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.TextStyle.getAlignment">
       
        <p>Gets horizontal alignment of the text.</p> @return TextAlignment value @see TextAlignment
      
    </member>
    <member name="M:com.aspose.pdf.TextStyle.setAlignment(int)">
       
        <p>Sets horizontal alignment of the text.</p> @param value TextAlignment value @see TextAlignment
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextStyle.getHorizontalAlignment">
       
        <p>Text alignment. Valid values are: Left, Center, Rigth.</p> @return HorizontalAlignment value @see HorizontalAlignment
      
    </member>
    <member name="M:com.aspose.pdf.TextStyle.setHorizontalAlignment(int)">
       
        <p>Text alignment. Valid values are: Left, Center, Rigth.</p> @param value HorizontalAlignment value @see HorizontalAlignment
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextStyle.getColor">
       
        <p>Get the Color of the text.</p> @return Color object
      
    </member>
    <member name="M:com.aspose.pdf.TextStyle.setColor(java.awt.Color)">
       
        <p>Set the Color of the text.</p> @param value Color object
      
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.TextStyle.toString">
       
        <p>String representation of TextStyle.</p> @return String representation.
      
    </member>
    <member name="T:com.aspose.pdf.TimestampSettings">
       
        <p>Represents the ocsp settings using during signing process.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TimestampSettings.getServerUrl">
       
        <p>Gets the timestamp server url.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.TimestampSettings.setServerUrl(String)">
       
        <p>Sets the timestamp server url.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TimestampSettings.getBasicAuthCredentials">
       
        <p>Gets the basic authentication credentials, Username and password are combined into a string "username:password".</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.TimestampSettings.setBasicAuthCredentials(String)">
       
        <p>Sets the basic authentication credentials, Username and password are combined into a string "username:password".</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TimestampSettings.#ctor(String,String)">
       
        <p>Initializes a new instance of the {@code TimestampSettings} class.</p> @param serverUrl The timestamp server url. @param basicAuthCredentials The basic authentication credentials, username and password are combined into a string "username:password".
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.TocInfo">
       
        <p>Represents table of contents info.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TocInfo.getColumnInfo">
       
        <p>Gets column info.</p> @return ColumnInfo instance
      
    </member>
    <member name="M:com.aspose.pdf.TocInfo.setColumnInfo(ColumnInfo)">
       
        <p>Sets column info.</p> @param value ColumnInfo instance
      
      <param name="ColumnInfo"/>
    </member>
    <member name="M:com.aspose.pdf.TocInfo.getFormatArray">
       
        <p>Gets format array for table of contents.</p> @return LevelFormat array
      
    </member>
    <member name="M:com.aspose.pdf.TocInfo.setFormatArray(LevelFormat[])">
       
        <p>Sets format array for table of contents.</p> @param value LevelFormat array
      
      <param name="LevelFormat[]"/>
    </member>
    <member name="M:com.aspose.pdf.TocInfo.getFormatArrayLength">
       
        <p>Gets format array length</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TocInfo.setFormatArrayLength(int)">
       
        <p>Sets format array length</p> @param value boolean value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TocInfo.getTitle">
       
        <p>Gets table of contents title.</p> @return TextFragment instance
      
    </member>
    <member name="M:com.aspose.pdf.TocInfo.setTitle(TextFragment)">
       
        <p>Sets table of contents title.</p> @param value TextFragment instance
      
      <param name="TextFragment"/>
    </member>
    <member name="M:com.aspose.pdf.TocInfo.isCountTocPages">
       
        <p>Gets is count or passed toc pages.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.TocInfo.setCountTocPages(boolean)">
       
        <p>Sets is count or passed toc pages.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TocInfo.getPageNumbersPrefix">
      Gets is prefix before page number. @return String value
    </member>
    <member name="M:com.aspose.pdf.TocInfo.setPageNumbersPrefix(String)">
      Sets is prefix before page number. @param value String value
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TocInfo.isShowPageNumbers">
      Gets is show page numbers at Toc. @return boolean value
    </member>
    <member name="M:com.aspose.pdf.TocInfo.setShowPageNumbers(boolean)">
      Sets is show page numbers at Toc. @param value boolean value
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TocInfo.getLineDash">
       
        <p>Gets or sets TOC line dash.</p> @return TabLeaderType value
      
    </member>
    <member name="M:com.aspose.pdf.TocInfo.setLineDash(int)">
       
        <p>Gets or sets TOC line dash.</p> @param value TabLeaderType value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TocInfo.setLevelIndentation(int)">
       
        <p>Set Level indentation</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TocInfo.getLevelIndentation">
       
        <p>Get Level indentation</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.TocInfo.#ctor">
       
        <p>Initializes a new instance of the {@code TocInfo} class.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.ToUnicodeProcessingRules">
      / * 
        <p>/ * The {@code 
          <b>PdfAOptionClasses</b>} is a namespace for PDF/A convertsion optins. / *
        </p> /
      
    </member>
    <member name="M:com.aspose.pdf.ToUnicodeProcessingRules.getRemoveSpacesFromCMapNames">
       
        <p>Some fonts have ToUnicode character code maps with spaces in names. These spaces could call errors with unicode text mapping. This flag commands to remove spaces from names of ToUnicode character code maps. By default false.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.ToUnicodeProcessingRules.setRemoveSpacesFromCMapNames(boolean)">
       
        <p>Some fonts have ToUnicode character code maps with spaces in names. These spaces could call errors with unicode text mapping. This flag commands to remove spaces from names of ToUnicode character code maps. By default false.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.ToUnicodeProcessingRules.getMapNonLinkedSymbolsOnSpace">
       
        <p>Some fonts doesn't provide information about unicodes for some text symbols. This lack of information calls an error "Text cannot be mapped to Unicode". Use this flag to map non-linked symbols on unicode "space"(code 32).</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.ToUnicodeProcessingRules.setMapNonLinkedSymbolsOnSpace(boolean)">
       
        <p>Some fonts doesn't provide information about unicodes for some text symbols. This lack of information calls an error "Text cannot be mapped to Unicode". Use this flag to map non-linked symbols on unicode "space"(code 32).</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.ToUnicodeProcessingRules.#ctor">
       
        <p>Constructor</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ToUnicodeProcessingRules.#ctor(boolean)">
       
        <p>Constructor</p> @param removeSpaces sets {@code RemoveSpacesFromCMapNames} flag
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.ToUnicodeProcessingRules.#ctor(boolean,boolean)">
       
        <p>Constructor</p> @param removeSpaces sets {@code RemoveSpacesFromCMapNames} flag @param mapNonLinkedUnicodesOnSpace sets {@code MapNonLinkedSymbolsOnSpace} flag
      
      <param name="boolean"/>
      <param name="boolean"/>
    </member>
    <member name="T:com.aspose.pdf.TxtLoadOptions">
       
        <p>Load options for TXT to PDF conversion.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TxtLoadOptions.#ctor">
       
        <p>Creates load options for converting text into pdf document.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.UnderlineAnnotation">
       
        <p>Represents an underline annotation that appears as an underline in the text of the document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.UnderlineAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor object to process the annotation.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.UnderlineAnnotation.getAnnotationType">
       
        <p>Gets type of annotation.</p> @return AnnotationType element @see AnnotationType
      
    </member>
    <member name="M:com.aspose.pdf.UnderlineAnnotation.#ctor(Page,Rectangle)">
       
        <p>Creates new Underline annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.UnifiedSaveOptions">
       
        <p>This class represents saving options for saving that uses unified conversion way (with unified internal document model)</p> 
      
    </member>
    <member name="M:com.aspose.pdf.UnifiedSaveOptions.isTryMergeAdjacentSameBackgroundImages">
       
        <p>Sometimes PDFs contain background images (of pages or table cells) constructed from several same tiling background images put one near other. In such case renderers of target formats (f.e MsWord for DOCS format) sometimes generates visible boundaries beetween parts of background images, cause their techniques of image edge smoothing (anti-aliasing) is different from Acrobat Reader. If it looks like exported document contains such visible boundaries between parts of same background images, please try use this setting to get rid of that unwanted effect. ATTENTION! This optimization of quality usually essentially slows down conversion, so, please, use this option only when it's really necessary.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.UnifiedSaveOptions.setTryMergeAdjacentSameBackgroundImages(boolean)">
       
        <p>Sometimes PDFs contain background images (of pages or table cells) constructed from several same tiling background images put one near other. In such case renderers of target formats (f.e MsWord for DOCS format) sometimes generates visible boundaries beetween parts of background images, cause their techniques of image edge smoothing (anti-aliasing) is different from Acrobat Reader. If it looks like exported document contains such visible boundaries between parts of same background images, please try use this setting to get rid of that unwanted effect. ATTENTION! This optimization of quality usually essentially slows down conversion, so, please, use this option only when it's really necessary.</p> @param tryMergeAdjacentSameBackgroundImages boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.UnifiedSaveOptions.getProgressEventsRetranslator">
       
        <p>Represents internal progress events processor that works during conversion and translates conversion events of internal conversion stages into external total progress events Also class broadcasts events that allow to free resources that not needed anymore This internal class handles events of PDF to APS and APS to [Other format] progress to calculate total progress and inform customer's code about that total progress events this class uses two types of events : ApsToExternal model conversion and events of conversion Pdf to APS to generate total progress events Export has three stage : 1) Pdf to Aps 2) Aps recognition 3_ Aps export to target format Constructor allows tune how much pages are converted and what is approximmate part of this or that stage in total progress</p> @return ConversionProgressEventsTranslator instance
      
    </member>
    <member name="M:com.aspose.pdf.UnifiedSaveOptions.setProgressEventsRetranslator(ConversionProgressEventsTranslator)">
       
        <p>Represents internal progress events processor that works during conversion and translates conversion events of internal conversion stages into external total progress events Also class broadcasts events that allow to free resources that not needed anymore This internal class handles events of PDF to APS and APS to [Other format] progress to calculate total progress and inform customer's code about that total progress events this class uses two types of events : ApsToExternal model conversion and events of conversion Pdf to APS to generate total progress events Export has three stage : 1) Pdf to Aps 2) Aps recognition 3_ Aps export to target format Constructor allows tune how much pages are converted and what is approximmate part of this or that stage in total progress</p> @param progressEventsRetranslator ConversionProgressEventsTranslator instance
      
      <param name="ConversionProgressEventsTranslator"/>
    </member>
    <member name="M:com.aspose.pdf.UnifiedSaveOptions.isExtractOcrSublayerOnly">
       
        <p>This attribute turned on functionality for extracting image or text for PDF documents with OCR sublayer.</p>Value: {@code true} text will be extracted in result document; otherwise, {@code false}. @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.UnifiedSaveOptions.setExtractOcrSublayerOnly(boolean)">&lt;p&gt; This attribute turned on functionality for extracting image or text for PDF documents with OCR sublayer. &lt;/p&gt;Value: {@code true} text will be extracted in result document; otherwise, {@code false}. &lt;hr&gt; Default value == false @param value boolean value 
      <param name="boolean"/>
    </member>
    <member name="T:com.aspose.pdf.UnifiedSaveOptions.ProgressEventHandlerInfo">
       
        <p>This class represents information about conversion progress that can be used in external application to show conversion progress to end user</p> 
      
    </member>
    <member name="M:com.aspose.pdf.UnifiedSaveOptions.ProgressEventHandlerInfo.getEventType">
       
        <p>Type of progress event that occured</p> @return ProgressEventType element @see ProgressEventType
      
    </member>
    <member name="M:com.aspose.pdf.UnifiedSaveOptions.ProgressEventHandlerInfo.setEventType(int)">
       
        <p>Type of progress event that occured</p> @param eventType ProgressEventType element @see ProgressEventType
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.UnifiedSaveOptions.ProgressEventHandlerInfo.getValue">
       
        <p>current value of progress value</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.UnifiedSaveOptions.ProgressEventHandlerInfo.setValue(int)">
       
        <p>current value of progress value</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.UnifiedSaveOptions.ProgressEventHandlerInfo.getMaxValue">
       
        <p>maximum possible value of progress value</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.UnifiedSaveOptions.ProgressEventHandlerInfo.setMaxValue(int)">
       
        <p>maximum possible value of progress value</p> @param maxValue int value
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.UnifiedSaveOptions.ConversionProgressEventHandler">
       
        <p>Represents class with abstract method that usually supplied by calling side and handles progress events that comes from converter. Usually such supplied customer's handler can be used to show total conversion progress on console or in progress bar.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.UnifiedSaveOptions.ConversionProgressEventHandler.invoke(ProgressEventHandlerInfo)">
       
        <p>Represents class with abstract method that usually supplied by calling side and handles progress events that comes from converter. Usually such supplied customer's handler can be used to show total conversion progress on console or in progress bar.</p> @param eventInfo represents information about occurred progress event
      
      <param name="ProgressEventHandlerInfo"/>
    </member>
    <member name="M:com.aspose.pdf.UnifiedSaveOptions.ConversionProgressEventHandler.beginInvoke(ProgressEventHandlerInfo,AsyncCallback,Object)">
      internal method @param eventInfo internal object @param callback internal object @param state internal object @return internal object
      <param name="ProgressEventHandlerInfo"/>
      <param name="AsyncCallback"/>
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.UnifiedSaveOptions.ConversionProgressEventHandler.endInvoke(IAsyncResult)">
      internal method @param result internal object
      <param name="IAsyncResult"/>
    </member>
    <member name="M:com.aspose.pdf.UnifiedSaveOptions.ConversionProgressEventHandler.isEmpty">
      @return boolean value
    </member>
    <member name="T:com.aspose.pdf.VerticalAlignment">
       
        <p>Enumeration of possible vertical alignment values.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.VerticalAlignment.None">
       
        <p>No alignment (use specified position).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.VerticalAlignment.Top">
       
        <p>Align to top.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.VerticalAlignment.Center">
       
        <p>Center alignment.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.VerticalAlignment.Bottom">
       
        <p>Align to bottom.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.WarningCallback">
       
        <p>Interface for user's callback mechanism support.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.WarningCallback.warning(WarningInfo)">
      The callback method for some program notifications. @param warning the warning information for some happened warning @return the result of further program workflow
      <param name="WarningInfo"/>
    </member>
    <member name="T:com.aspose.pdf.WarningInfo">
       
        <p>Immutable object for encapsulating warning information.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.WarningInfo.getWarningMessage">
       
        <p>Returns string representation of warning message.</p> @return the warning message
      
    </member>
    <member name="M:com.aspose.pdf.WarningInfo.getWarningTypeProperty">
       
        <p>Returns warning type.</p> @return the warning type
      
    </member>
    <member name="M:com.aspose.pdf.WarningInfo.#ctor(int,String)">
       
        <p>Constructs instance for gathering information.</p> @param type the warning type to set @param message the warning message to set
      
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.WarningType">
      / * Enum represented warning type. / * /
    </member>
    <member name="F:com.aspose.pdf.WarningType.SourceFileCorruption">
       
        <p>The file is corrupted.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.WarningType.DataLoss">
       
        <p>Text/chart/image or other data is completely missing from either the document tree following load, or the created document following save.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.WarningType.MajorFormattingLoss">
       
        <p>Major formatting losses compared to the original document. This is for occasions when the formatting loss is substantial but the data is still there.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.WarningType.MinorFormattingLoss">
       
        <p>Minor formatting losses compared to the original document. This is for minor losses of fidelity.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.WarningType.CompatibilityIssue">
       
        <p>Known issue that will prevent the document being opened by certain user agents, or previous versions of user agents.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.WarningType.InvalidInputStreamType">
       
        <p>Invalid input stream type</p> 
      
    </member>
    <member name="F:com.aspose.pdf.WarningType.UnexpectedContent">
       
        <p>The file has unexpected content.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Watermark">
       
        <p>Represents a watermark of the page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Watermark.getImage">
       
        <p>Gets an image of the watermark.</p> @return BufferedImage object
      
    </member>
    <member name="M:com.aspose.pdf.Watermark.getPosition">
       
        <p>Gets a position of the watermark's image on a page.</p> @return Rectangle object
      
    </member>
    <member name="M:com.aspose.pdf.Watermark.getAvailable">
       
        <p>Gets a flag the watermark is present.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.Watermark.#ctor(BufferedImage,Rectangle)">
       
        <p>Initializes a watermark object with an image and it's position on a page.</p> @param nativeImage image Image of the watermark. @param rect Position of the watermark on the page.
      
      <param name="BufferedImage"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Watermark.#ctor(BufferedImage)">
       
        <p>Initializes a watermark structure with an image.</p> @param nativeImage image Image of the watermark.
      
      <param name="BufferedImage"/>
    </member>
    <member name="T:com.aspose.pdf.WatermarkAnnotation">
       
        <p>Class describes Watermark annotation object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.WatermarkAnnotation.setText(FormattedText)">
       
        <p>Set text of the annotation.</p> @param text FormattedText Text value.
      
      <param name="FormattedText"/>
    </member>
    <member name="M:com.aspose.pdf.WatermarkAnnotation.setTextAndState(String[],TextState)">
       
        <p>Set text of the annotation.</p> @param text String array (Text value) @param textState TextState object
      
      <param name="String[]"/>
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.WatermarkAnnotation.getFixedPrint">
       
        <p>Fixed print object of Watermark annotation.</p> @return FixedPrint object
      
    </member>
    <member name="M:com.aspose.pdf.WatermarkAnnotation.getAnnotationType">
       
        <p>Gets annotation type.</p> @return AnnotationType element
      
    </member>
    <member name="M:com.aspose.pdf.WatermarkAnnotation.accept(AnnotationSelector)">
       
        <p>Apply visitor for annotation.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.WatermarkAnnotation.getOpacity">
       
        <p>Gets or sets opacity of the annotation.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.WatermarkAnnotation.setOpacity(double)">
       
        <p>Gets or sets opacity of the annotation.</p> @param value double value
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.WatermarkAnnotation.#ctor(Page,Rectangle)">
       
        <p>Constuctore for Watermark annotation class.</p> @param page Page where annotation should be placed. @param rect Position of the annotation.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.WatermarkArtifact">
      Class describes watermark artifact. This may be used to
    </member>
    <member name="M:com.aspose.pdf.WatermarkArtifact.#ctor">
      Creates instance of Watermark artifact.
    </member>
    <member name="T:com.aspose.pdf.WebHyperlink">
       
        <p>Represents web hyperlink object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.WebHyperlink.getUrl">
      Gets the web url. @return String object
    </member>
    <member name="M:com.aspose.pdf.WebHyperlink.setUrl(String)">
      Sets the web url. @param value String value
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.WebHyperlink.#ctor">
       
        <p>Initializes a new instance of the {@code WebHyperlink} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.WebHyperlink.#ctor(String)">
       
        <p>Initializes a new instance of the {@code WebHyperlink} class.</p> @param url Web url for hyperlink.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.WidgetAnnotation">
       
        <p>Class representing widget annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.WidgetAnnotation.getOnActivated">
       
        <p>Get an action which shall be performed when the annotation is activated.</p> @return PdfAction object
      
    </member>
    <member name="M:com.aspose.pdf.WidgetAnnotation.setOnActivated(PdfAction)">
       
        <p>Set an action which shall be performed when the annotation is activated.</p> @param value PdfAction object
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.WidgetAnnotation.getAnnotationActions">
       
        <p>Gets the annotation actions.</p> @return AnnotationActionCollection object
      
    </member>
    <member name="M:com.aspose.pdf.WidgetAnnotation.getHighlighting">
       
        <p>Annotation highlighting mode.</p> @return HighlightingMode value @see HighlightingMode
      
    </member>
    <member name="M:com.aspose.pdf.WidgetAnnotation.setHighlighting(int)">
       
        <p>Annotation highlighting mode.</p> @param value HighlightingMode value @see HighlightingMode
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.WidgetAnnotation.getParent">
       
        <p>Gets annotation parent.</p> @return Field object
      
    </member>
    <member name="M:com.aspose.pdf.WidgetAnnotation.getDefaultAppearance">
       
        <p>Gets default appearance of the field.</p> @return DefaultAppearance object
      
    </member>
    <member name="M:com.aspose.pdf.WidgetAnnotation.setDefaultAppearance(DefaultAppearance)">
       
        <p>Sets default appearance of the field.</p> @param value DefaultAppearance object
      
      <param name="DefaultAppearance"/>
    </member>
    <member name="M:com.aspose.pdf.WidgetAnnotation.getReadOnly">
       
        <p>Gets read only status of the field.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.WidgetAnnotation.setReadOnly(boolean)">
       
        <p>Sets read only status of the field.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.WidgetAnnotation.getRequired">
       
        <p>Gets required status of the field.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.WidgetAnnotation.setRequired(boolean)">
       
        <p>Sets read only status of the field.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.WidgetAnnotation.getExportable">
       
        <p>Gets exportable flag of the field.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.WidgetAnnotation.setExportable(boolean)">
       
        <p>Sets read only status of the field.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.WidgetAnnotation.getAnnotationType">
       
        <p>Gets type of annotation.</p> @return AnnotationType element @see AnnotationType
      
    </member>
    <member name="M:com.aspose.pdf.WidgetAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor.</p> @param visitor Visitor to be accepted.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.WidgetAnnotation.#ctor(IDocument)">
       
        <p>Create annotation (used for Generator)</p> @param doc Document where annotation will be created.
      
      <param name="IDocument"/>
    </member>
    <member name="T:com.aspose.pdf.XFA">
       
        <p>Represents XML form regarding XML Forms Architecture (XFA).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XFA.getTemplate">
       
        <p>XFA Template component of an XFA form.</p> @return XmlNode object
      
    </member>
    <member name="M:com.aspose.pdf.XFA.tryGetTemplateString(String)">
      Tries to export calculation script from XFA form. Otherwise returns the empty string; @param value The tag name @return String instance
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XFA.getForm">
       
        <p>Gets XFA Form Component of an XFA form.</p> @return XmlNode object
      
    </member>
    <member name="M:com.aspose.pdf.XFA.getDatasets">
       
        <p>XFA Datasets component of an XFA form.</p> @return XmlNode object
      
    </member>
    <member name="M:com.aspose.pdf.XFA.getConfig">
       
        <p>XFA Config component of an XFA form.</p> @return XmlNode object
      
    </member>
    <member name="M:com.aspose.pdf.XFA.getXDP">
       
        <p>XML Data Package (all XFA form components within a surrounding XML container).</p> @return XmlDocument object
      
    </member>
    <member name="M:com.aspose.pdf.XFA.get_Item(String)">
       
        <p>Gets data node value according {@code path}.</p> @param path Data node path, e.g. form1[0].Subform1[0].Subform2[0].Subform3[0].TextField[0]. Be sure to include indices even if data contains only single occurences of each nodes, i.e. write node1[0].node2[0]... instead of node1.node2... @return Data node value.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XFA.set_Item(String,String)">
       
        <p>Gets data node value according {@code path}.</p> @param path String value @param value String value
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XFA.getFieldNames">
       
        <p>List of field names in the form template.</p> @return array of String values
      
    </member>
    <member name="M:com.aspose.pdf.XFA.getFieldTemplate(String)">
       
        <p>Returns XML node of XFA field tempalte.</p> @param fieldName Path of the field which template must be found. @return XL node with field template.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XFA.getFieldTemplates">
       
        <p>Returns list of all field templates on XFA form.</p> @return List of field templates.
      
    </member>
    <member name="M:com.aspose.pdf.XFA.getNamespaceManager">
       
        <p>Returns namespace manager with namespaces used for template and data.</p> @return XmlNamespaceManager object
      
    </member>
    <member name="M:com.aspose.pdf.XFA.getNamespaceManager_">
       
        <p>Gets the namespace for the XFA form. The following namepsaces are defined: "data" for form data and "tpl" for form template.</p> @return XmlNamespaceManager object
      
    </member>
    <member name="M:com.aspose.pdf.XFA.flattenXfaField(XmlNode)">
       
        <p>Flatten field of XFA form.</p> @param field XFA form field node.
      
      <param name="XmlNode"/>
    </member>
    <member name="M:com.aspose.pdf.XFA.beginCachedUpdates">
       
        <p>Start cached updates mode. All changes made to XFA will be cached and saved into document structure at EndCachedUpdates call. This allows to improve preformacne by avoiding redudant operations on saving XML packets into document when a lot of changes to XFA are made.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XFA.endCachedUpdates">
       
        <p>Ends cahced updates and saves all data into document structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XFA.setFieldImage(String,InputStream)">
       
        <p>Sets image for XFA field.</p> @param fieldName Name of the field. @param image Stream which contains image.
      
      <param name="String"/>
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.XFA.setFieldImageInternal(String,Stream)">
      <param name="String"/>
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.XFA.getFieldsWithTextValuesMap">&lt;p&gt; Returns map with short field name and it's string value for all fields. &lt;/p&gt; @return {@code HashMap&lt;String, String&gt;} object</member>
    <member name="M:com.aspose.pdf.XFA.getXfaField(String)">
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.XfaParserOptions">
       
        <p>class to handle related data encapsulation</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XfaParserOptions.getPageSize">
       
        <p>Gets or sets the size of the page.</p> Value: The size of the page. @return Dimension2D object
      
    </member>
    <member name="M:com.aspose.pdf.XfaParserOptions.setPageSize(Dimension2D)">
       
        <p>Gets or sets the size of the page.</p> Value: The size of the page. @param value Dimension2D object
      
      <param name="Dimension2D"/>
    </member>
    <member name="M:com.aspose.pdf.XfaParserOptions.getSigned">
       
        <p>If this property is true then document will be converted with using of xfa form stream (if it exists). If it is false then xfa form stream will be ignored. This property was inrtoduced because it's not clear how to calculate check sum that used for checking sygnature.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.XfaParserOptions.setSigned(boolean)">
       
        <p>If this property is true then document will be converted with using of xfa form stream (if it exists). If it is false then xfa form stream will be ignored. This property was inrtoduced because it's not clear how to calculate check sum that used for checking sygnature.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.XfaParserOptions.getEmulateRequierdGroups">
       
        <p>If this property is true then additional red rectangles will be drawn for required Xfa "excluded groups" This property was introduced because absences of analogies of excluded groups during conversion Xfa representation of forms to standard. It is false by default.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.XfaParserOptions.setEmulateRequierdGroups(boolean)">
       
        <p>If this property is true then additional red rectangles will be drawn for required Xfa "excluded groups" This property was introduced because absences of analogies of excluded groups during conversion Xfa representation of forms to standard. It is false by default.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.XfaParserOptions.getBasePath">
       
        <p>Gets or sets the base path.</p> Value: The base path. @return URI object
      
    </member>
    <member name="M:com.aspose.pdf.XfaParserOptions.setBasePath(URI)">
       
        <p>Gets or sets the base path.</p> Value: The base path. @param value URI object
      
      <param name="URI"/>
    </member>
    <member name="M:com.aspose.pdf.XfaParserOptions.#ctor(Dimension2D)">
       
        <p>Initializes a new instance of the {@code XfaParserOptions} class.</p> @param pageSize Size of the page.
      
      <param name="Dimension2D"/>
    </member>
    <member name="T:com.aspose.pdf.XfdfReader">&lt;p&gt; Class which peroformes reading of XFDF format. &lt;/p&gt; &lt;hr&gt; &lt;p&gt; &lt;code&gt; Document doc = new Document("example.pdf"); InputStream xfdfStream = new FileInputStream("filename"); XfdfReader.readAnnotations(xfdfStream, doc); xfdfStream.close(); doc.save("example_out.pdf"); &lt;/code&gt; &lt;/p&gt;</member>
    <member name="M:com.aspose.pdf.XfdfReader.readAnnotations(InputStream,IDocument)">
       
        <p>Import annotations from XFDF file and put them into document.</p> @param stream Source stream containing XFDF file. @param document Document where annotations will be added.
      
      <param name="InputStream"/>
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.XfdfReader.readFields(InputStream,IDocument)">
       
        <p>Import field values from XFDF file.</p> @param stream Stream containing XFDF data. @param document Document where fields data will be imported.
      
      <param name="InputStream"/>
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.XfdfReader.getElements(XmlReader)">
       
        <p>Parses XFDF file and returns information as hashtable.</p> @param reader XmlReader for the source file. @return Hashtable with information parsed from XFDF file.
      
      <param name="XmlReader"/>
    </member>
    <member name="T:com.aspose.pdf.XfdfWriter">
       
        <p>Aggregates methods of writing annotations and fields to XFDF file format</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XfdfWriter.writeAnnotations(Stream,IDocument)">
       
        <p>Writes annotations from list to XFDF stream.</p> @param stream XFDF stream. @param document The document that holds the annotations.
      
      <param name="Stream"/>
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.XfdfWriter.writeFields(Stream,IDocument)">
      <param name="Stream"/>
      <param name="IDocument"/>
    </member>
    <member name="T:com.aspose.pdf.XForm">
       
        <p>Class represent XForm</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XForm.getEngineObj">
      Internal only @return IPdfObject object
    </member>
    <member name="M:com.aspose.pdf.XForm.getBBox">
       
        <p>Gets form bounding box.</p> @return Rectangle
      
    </member>
    <member name="M:com.aspose.pdf.XForm.setBBox(Rectangle)">
       
        <p>Sets form bounding box.</p> @param value Rectangle
      
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.XForm.getName">
       
        <p>Gets form name. Form name is name which used to reference form in XObejct ductionary in page resources.</p> @return String
      
    </member>
    <member name="M:com.aspose.pdf.XForm.setName(String)">
       
        <p>Sets form name. Form name is name which used to reference form in XObejct dictionary in page resources.</p> @param value String object
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XForm.getContents">
       
        <p>Gets operators of the form.</p> @return OperatorCollection object
      
    </member>
    <member name="M:com.aspose.pdf.XForm.getOpi">
       
        <p>Gets The Open Prepress Interface (OPI).</p> @return Opi instance
      
    </member>
    <member name="M:com.aspose.pdf.XForm.getMatrix">
       
        <p>Gets matrix of the form.</p> @return Matrix
      
    </member>
    <member name="M:com.aspose.pdf.XForm.setMatrix(Matrix)">
       
        <p>Sets matrix of the form.</p> @param value Matrix object
      
      <param name="Matrix"/>
    </member>
    <member name="M:com.aspose.pdf.XForm.getResources(boolean)">
       
        <p>Returns resources of Form X-Object</p> @return Resources instance @param allowCreate If For does not have resources and allowCreate is true, Resources will be automatically created for the form.
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.XForm.getResources">
       
        <p>Returns resources of Form X-Object. If For does not have resources and allowCreate is true, Resources will be automatically created for the form.</p> @return Resources instance
      
    </member>
    <member name="M:com.aspose.pdf.XForm.getResources2">
       
        <p>Gets Form XObject resources.</p> @return Resources instance. If For does not have resources, Resources will be automatically created for the form.
      
    </member>
    <member name="M:com.aspose.pdf.XForm.createNewForm(ITrailerable)">
       
        <p>Creates new XForm in the document.</p> @param trailerable Describes ITrailerable object @return Newly created XForm
      
      <param name="ITrailerable"/>
    </member>
    <member name="M:com.aspose.pdf.XForm.containsOwnResources">
      Returns True if contains Own Resources @return boolean value
    </member>
    <member name="M:com.aspose.pdf.XForm.createNewForm(Page,ITrailerable,Copier)">
      <param name="Page"/>
      <param name="ITrailerable"/>
      <param name="Copier"/>
    </member>
    <member name="M:com.aspose.pdf.XForm.createNewForm(Page,IDocument)">
       
        <p>Creates XForm which duplicates contents of the page.</p> @param source Source page @param document Document where new XForm will be added. @return Newly created XForm.
      
      <param name="Page"/>
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.XForm.getRectangle">
       
        <p>Gets rectangel of the form.</p> @return Rectangle
      
    </member>
    <member name="M:com.aspose.pdf.XForm.freeMemory">
       
        <p>Clears cached data</p> 
      
    </member>
    <member name="T:com.aspose.pdf.XFormCollection">
       
        <p>Class represents collection of XFormCollection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XFormCollection.size">
       
        <p>Gets count of XForms in collection.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.XFormCollection.isSynchronized">
       
        <p>Returns true if object is synchronized.</p> @return boolean
      
    </member>
    <member name="M:com.aspose.pdf.XFormCollection.getSyncRoot">
       
        <p>Synchronization object.</p> @return Object
      
    </member>
    <member name="M:com.aspose.pdf.XFormCollection.isReadOnly">
       
        <p>Gets a value indicating whether the collection is read-only.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.XFormCollection.add(XForm)">
       
        <p>Adds new XForm into collection.</p> @param xform XForm to add into collection
      
      <param name="XForm"/>
    </member>
    <member name="M:com.aspose.pdf.XFormCollection.delete(int)">
       
        <p>Delete XForm from collectin</p> @param index Index of XForm which must be deleted
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.XFormCollection.delete">
       
        <p>Deletes all XForms from collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XFormCollection.copyTo(XForm[],int)">
       
        <p>Copies XFormCollection into collection.</p> @param array Array of XForm to be copied @param index Index where XFormCollection will be copied
      
      <param name="XForm[]"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.XFormCollection.iterator">
       
        <p>Returns collection enumerator.</p> @return Enumerator for collection
      
    </member>
    <member name="M:com.aspose.pdf.XFormCollection.delete(String)">
       
        <p>Deletes XForm from collection by form name.</p> @param name Name of XForm to be deleted.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XFormCollection.get_Item(int)">
       
        <p>Returns XForm by index.</p> @param index Index of XFormCollection. XForms numbering is started from 1 @return Retreived XForm
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.XFormCollection.get_Item(String)">
       
        <p>Returns XForm by its name. Exception is thrown if XForm with specified name is not found.</p> @param name Name of XForm @return XForm object
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XFormCollection.getFormName(XForm)">
       
        <p>Returns name of the form in this form collection</p> @param form Form which name is searhced @return Form name in the collection; Null if form is not contained in the colleciton
      
      <param name="XForm"/>
    </member>
    <member name="M:com.aspose.pdf.XFormCollection.hasForm(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XFormCollection.clear">
       
        <p>Clears all items from the collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XFormCollection.contains(XForm)">
       
        <p>Determines whether the collection contains a specific value.</p> @param item The object to locate in the collection @return true if item is found in the collection; otherwise, false.
      
      <param name="XForm"/>
    </member>
    <member name="M:com.aspose.pdf.XFormCollection.remove(XForm)">
       
        <p>Deletes specified item from collection.</p> @param item The object to delete @return true if item was deleted from collection; otherwise, false.
      
      <param name="XForm"/>
    </member>
    <member name="T:com.aspose.pdf.XImage">
       
        <p>Class representing image X-Object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XImage.containsTransparency">
       
        <p>If the image contains transparancy than return true; otherwise, false.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.XImage.getFilterType">
       
        <p>Gets image filter type.</p> @return ImageFilterType element
      
    </member>
    <member name="M:com.aspose.pdf.XImage.getGrayscaled">
       
        <p>Gets grayscaled version of image.</p> @return BufferedImage
      
    </member>
    <member name="M:com.aspose.pdf.XImage.delete">
       
        <p>Deletes image from the parent collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XImage.replace(InputStream)">
       
        <p>Replaces image onto stream specified in {@code image}.</p> * @param image Stream with image data.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.XImage.getEngineImg">
       
        <p>IPdfImage object which decribes image. Internal only</p> @return IPdfDataStream
      
    </member>
    <member name="M:com.aspose.pdf.XImage.getWidth">
       
        <p>Gets width of the image.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.XImage.getHeight">
       
        <p>Gets height of the image.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.XImage.getName">
       
        <p>Gets image name. Please note that if you change name of the image which has references in page contents, document may became incorrect. Please use XImage.Rename method in this case.</p> @return String
      
    </member>
    <member name="M:com.aspose.pdf.XImage.setName(String)">
       
        <p>Sets image name. Please note that if you change name of the image which has references in page contents, document may became incorrect. Please use XImage.Rename method in this case.</p> @param value String value
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XImage.rename(String)">
       
        <p>Renames image and replaces all references to the image with the new name</p> @param name New image name.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XImage.save(OutputStream)">
       
        <p>Saves image data into stream as JPEG image.</p> @param stream Stream where image data will be saved.
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.XImage.save(OutputStream,float,float)">
       
        <p>Saves image into stream with requested format.</p> @param stream OutputStream where image will be saved @param xDpi Image horizontal resolution @param yDpi Image vertical resolution
      
      <param name="OutputStream"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.XImage.save(OutputStream,ImageType)">
       
        <p>Saves image into stream with requested format.</p> @param stream Stream where image will be saved @param format Format which will be used for image enconding. @see ImageType
      
      <param name="OutputStream"/>
      <param name="ImageType"/>
    </member>
    <member name="M:com.aspose.pdf.XImage.getImage">
      For internal use only @return Image
    </member>
    <member name="M:com.aspose.pdf.XImage.saveInternal(Stream,int)">
       
        <p>Saves image data into stream as JPEG image with specified resolution.</p> @param stream Stream where image data will be saved. @param resolution Image resolution
      
      <param name="Stream"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.XImage.save(OutputStream,int)">
       
        <p>Saves image into stream with requested format with specified resolution.</p> @param stream Stream where image will be saved @param resolution Image resolution
      
      <param name="OutputStream"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.XImage.saveInternal(Stream,ImageType,int)">
      <param name="Stream"/>
      <param name="ImageType"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.XImage.save(OutputStream,ImageType,int)">
       
        <p>Saves image into stream with requested format.</p> @param stream Stream where image will be saved @param format Format which will be used for image enconding. @param resolution Image resolution @see ImageType
      
      <param name="OutputStream"/>
      <param name="ImageType"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.XImage.isImage(IPdfPrimitive)">
       
        <p>Returns true if the primitive is an image.</p> @param primitive IPdfPrimitive @return boolean
      
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.XImage.getColorType">
       
        <p>Returns color type of image.</p> @return The color type value.
      
    </member>
    <member name="M:com.aspose.pdf.XImage.detectColorType(java.awt.image.BufferedImage)">
       
        <p>Returns color type of image.</p> @return Color type. @param bmp Image. @see ColorType
      
      <param name="java.awt.image.BufferedImage"/>
    </member>
    <member name="M:com.aspose.pdf.XImage.isTheSameObject(XImage)">
       
        <p>Returns true if both images references to the same object.</p> @param image Image to be compared with "this" image. @return Boolean value which is true if images references to the same object.
      
      <param name="XImage"/>
    </member>
    <member name="M:com.aspose.pdf.XImage.getNameInCollection">
       
        <p>Returns name of the image in its collection.</p> @return Image key (name).
      
    </member>
    <member name="M:com.aspose.pdf.XImage.getRawParameters">
      Gets raw image parameters @return RawParameters instance
    </member>
    <member name="M:com.aspose.pdf.XImage.toString">
      Returns a string representation XImage object properties. @return String instance
    </member>
    <member name="M:com.aspose.pdf.XImage.getRawBytes">
      Returns raw bytes for the image without decoding. @return byte array
    </member>
    <member name="M:com.aspose.pdf.XImage.toStream">
       
        <p>Returns the original image stream.</p> @return The original image stream.
      
    </member>
    <member name="M:com.aspose.pdf.XImage.getMetadata">
       
        <p>Metadata of the image.</p> @return Metadata instance
      
    </member>
    <member name="M:com.aspose.pdf.XImage.#ctor(IPdfDataStream)">
      for internal usage only @param image internal instance
      <param name="IPdfDataStream"/>
    </member>
    <member name="T:com.aspose.pdf.XImage.RawParameters">
       
        <p>Class representing image raw XImage parameters.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XImage.RawParameters.getType">
      default value "" @return String value
    </member>
    <member name="M:com.aspose.pdf.XImage.RawParameters.setType(String)">
      default value "" @param type String value
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XImage.RawParameters.getSubtype">
      default value "" @return String value
    </member>
    <member name="M:com.aspose.pdf.XImage.RawParameters.setSubtype(String)">
      default value "" @param subtype String value
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XImage.RawParameters.getColorSpace">
      default value "" @return String value
    </member>
    <member name="M:com.aspose.pdf.XImage.RawParameters.setColorSpace(String)">
      default value "" @param colorSpace String value
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XImage.RawParameters.getLength">
      default value -1 @return long value
    </member>
    <member name="M:com.aspose.pdf.XImage.RawParameters.setLength(long)">
      default value -1 @param length long value
      <param name="long"/>
    </member>
    <member name="M:com.aspose.pdf.XImage.RawParameters.getFilter">
      default value "" @return String value
    </member>
    <member name="M:com.aspose.pdf.XImage.RawParameters.setFilter(String)">
      default value "" @param filter String value
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XImage.RawParameters.getName">
      default value "" @return String value
    </member>
    <member name="M:com.aspose.pdf.XImage.RawParameters.setName(String)">
      default value "" @param name String value
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XImage.RawParameters.getBitsPerComponent">
      default value -1 @return long value
    </member>
    <member name="M:com.aspose.pdf.XImage.RawParameters.setBitsPerComponent(long)">
      default value -1 @param bitsPerComponent long value
      <param name="long"/>
    </member>
    <member name="M:com.aspose.pdf.XImage.RawParameters.getWidth"/>
    <member name="M:com.aspose.pdf.XImage.RawParameters.setWidth(long)">
      <param name="long"/>
    </member>
    <member name="M:com.aspose.pdf.XImage.RawParameters.getHeight">
      default value -1 @return long value
    </member>
    <member name="M:com.aspose.pdf.XImage.RawParameters.setHeight(long)">
      default value -1 @param height long value
      <param name="long"/>
    </member>
    <member name="M:com.aspose.pdf.XImage.RawParameters.getDecodeParms">Decode Parameters. default value null @return {@code HashMap&lt;String, String&gt; instance}</member>
    <member name="M:com.aspose.pdf.XImage.RawParameters.setDecodeParms(HashMap&lt;String, String&gt;)">Decode Parameters. default value null @param decodeParms {@code HashMap&lt;String, String&gt; instance} 
      <param name="HashMap&lt;String, String&gt;"/>
    </member>
    <member name="T:com.aspose.pdf.XImageCollection">
       
        <p>Class representing XImage collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.size">
       
        <p>Count of images in collection.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.isSynchronized">
       
        <p>Returns true if object is synchronized.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.getSyncRoot">
       
        <p>Returns synchronization object.</p> @return Object element
      
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.getNames">
       
        <p>Gets array of image names.</p> @return String[] array
      
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.isReadOnly">
       
        <p>Gets a value indicating whether the collection is read-only.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.add(XImage)">
       
        <p>Adds new image to Image list. This method adds image as reference to the same PdfObject (which allows to decrease file size)</p> @param image XImage to be added. @return Name of the added image.
      
      <param name="XImage"/>
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.add(InputStream)">
       
        <p>Adds entity to the end of the collection, so entity can be accessed by the last index.</p> @param image Stream containing image data (in JPEG format). @return Name of the added image.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.add(BufferedImage)">
       
        <p>Adds entity to the end of the collection, so entity can be accessed by the last index.</p> @param image BufferedImage containing image data. @return Name of the added image.
      
      <param name="BufferedImage"/>
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.addWithImageFilterType(InputStream,int)">
       
        <p>Adds entity to the end of the collection, so entity can be accessed by the last index.</p> @param image Stream containing image data. @param filterType The image filter type. @return Name of the added image. @see ImageFilterType
      
      <param name="InputStream"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.add(InputStream,int)">
       
        <p>Adds entity to the end of the collection, so entity can be accessed by the last index.</p> @param image Stream containing image data (in JPEG format). @param quality JPEG quality. @return Name of the added image.
      
      <param name="InputStream"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.delete(int)">
       
        <p>Removes index from collection by index.</p> @param index Image index.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.delete(int,int)">
       
        <p>Removes index from collection by index performing action specified by action parameter.</p> @param index Index of the image to be removed. @param action ImageDeleteAction element. Action performed after image deleting.
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.delete(String)">
       
        <p>Removes item from collection by name.</p> @param name Name of image which must to be deleted.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.delete(String,int)">
       
        <p>Removes item from collection by name.</p> @param name Name of image which must to be deleted. @param action Action to be performed with image object.
      
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.delete">
       
        <p>Deletes images from collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.iterator">
       
        <p>Returns collection enumerator.</p> @return Enumerator of collection
      
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.copyTo(XImage[],int)">
       
        <p>Copies array of images into collection.</p> @param array Array to be copied. @param index Index where images will be copied into collection.
      
      <param name="XImage[]"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.replace(int,InputStream)">
       
        <p>Replace image in collection with another image.</p> @param index Index of collection item which will be replaced. @param stream Stream containing image data (in JPEG format).
      
      <param name="int"/>
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.replace(int,java.io.InputStream,int,boolean)">
       
        <p>Replace image in collection with another image.</p> @param index Index of collection item which will be replaced. @param stream Stream containing image data (in JPEG format). @param quality Quality of JPEG compression, in percent (valid vaues are 0..100). @param isBlackAndWhite If true, image is compressed with CCITT compression method which provides better compression for black nad white image. May be used only for black and white images.
      
      <param name="int"/>
      <param name="java.io.InputStream"/>
      <param name="int"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.replace(int,InputStream,int)">
       
        <p>Replace image in collection with another image.</p> @param index Index of collection item which will be replaced. @param stream Stream containing image data (in JPEG format). @param quality JPEG quality.
      
      <param name="int"/>
      <param name="InputStream"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.get_Item(int)">
       
        <p>Gets image from collection by its index.</p> @param index Image index @return Retrieved image.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.get_Item(String)">
       
        <p>Gets image from collection by its name.</p> @param name Image name. @return Retrieved image.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.hasImage(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.getImageName(XImage)">
       
        <p>Returns name in images list which is key of the given image.</p> @param image Image to search. @return Name (key) of the found image; null if images was not found.
      
      <param name="XImage"/>
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.clear">
       
        <p>Clears all items from the collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.contains(XImage)">
       
        <p>Determines whether the collection contains a specific value.</p> @param item The object to locate in the collection @return true if item is found in the collection; otherwise, false.
      
      <param name="XImage"/>
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.remove(XImage)">
      Not supported yet, throws exception. 
        <p>Always throws NotImplementedException</p> @param item XImage instance Item to remove. @exception NotImplementedException NotImplementedException @return boolean value
      
      <param name="XImage"/>
    </member>
    <member name="T:com.aspose.pdf.XmlLoadOptions">
       
        <p>Represents options for loading/importing XML file into pdf document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmlLoadOptions.getXslStream">
       
        <p>Gets xsl data for converting xml into pdf document.</p> @return InputStream
      
    </member>
    <member name="M:com.aspose.pdf.XmlLoadOptions.close">
      Close instance
    </member>
    <member name="M:com.aspose.pdf.XmlLoadOptions.#ctor">
       
        <p>Creates {@code XmlLoadOptions} object without xsl data.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmlLoadOptions.#ctor(String)">
       
        <p>Creates {@code XmlLoadOptions} object with xsl data.</p> @param xslFile String Xsl file to convert xml document into pdf document.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XmlLoadOptions.#ctor(InputStream)">
       
        <p>Creates {@code XmlLoadOptions} object with xsl data.</p> @param xslStream InputStream Xsl stream to convert xml document into pdf document.
      
      <param name="InputStream"/>
    </member>
    <member name="T:com.aspose.pdf.XmlSaveOptions">
       
        <p>Save options for export to Xml format</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmlSaveOptions.#ctor">
       
        <p>Constructor</p> 
      
    </member>
    <member name="T:com.aspose.pdf.XmpField">
       
        <p>Represents XMP field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmpField.getEmpty">
       
        <p>Gets an Empty xmp field.</p> @return XmpField instance
      
    </member>
    <member name="M:com.aspose.pdf.XmpField.getLang">
       
        <p>This field represents xml:lang qualifier.</p> @return XmpField instance
      
    </member>
    <member name="M:com.aspose.pdf.XmpField.dispose"/>
    <member name="M:com.aspose.pdf.XmpField.getPrefix">
       
        <p>Gets the prefix.</p> @return Value: The prefix.
      
    </member>
    <member name="M:com.aspose.pdf.XmpField.setPrefix_Rename_Namesake(String)">
      For internal usage only @param value For internal usage only
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XmpField.getNamespaceUri">
       
        <p>Gets the namespace URI.</p> @return Value: The namespace URI.
      
    </member>
    <member name="M:com.aspose.pdf.XmpField.setNamespaceUri_Rename_Namesake(String)">
      For internal usage only @param value For internal usage only
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XmpField.getLocalName">
       
        <p>Gets or sets the name of the local.</p> @return String: The name of the local.
      
    </member>
    <member name="M:com.aspose.pdf.XmpField.setLocalName_Rename_Namesake(String)">
      For internal usage only @param value For internal usage only
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XmpField.getName">
       
        <p>Gets the name.</p> @return Value: The name.
      
    </member>
    <member name="M:com.aspose.pdf.XmpField.getValue">
       
        <p>Gets the value.</p> @return XmpValue: The value.
      
    </member>
    <member name="M:com.aspose.pdf.XmpField.getFieldType">
       
        <p>Gets the type of the field.</p> @return int: The type of the field.
      
    </member>
    <member name="M:com.aspose.pdf.XmpField.isEmpty">
       
        <p>Gets a value indicating whether this instance is empty.</p> @return boolean: {@code true} if this instance is empty; otherwise, {@code false}.
      
    </member>
    <member name="M:com.aspose.pdf.XmpField.equals(Object)">
       
        <p>Indicates whether this instance and a specified object are equal.</p> @param obj Another object to compare to. {@code 
        <filterpriority>2</filterpriority>} @return true if obj and this instance are the same type and represent the same value; otherwise, false.
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.XmpField.hashCode">
       
        <p>Returns a hash code for this instance.</p> @return A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
      
    </member>
    <member name="M:com.aspose.pdf.XmpField.op_Equality(XmpField,XmpField)">
       
        <p>Implements the operator ==.</p> @param field1 The field1. @param field2 The field2. @return The result of the operator.
      
      <param name="XmpField"/>
      <param name="XmpField"/>
    </member>
    <member name="M:com.aspose.pdf.XmpField.op_Inequality(XmpField,XmpField)">
       
        <p>Implements the operator !=.</p> @param field1 The field1. @param field2 The field2. @return The result of the operator.
      
      <param name="XmpField"/>
      <param name="XmpField"/>
    </member>
    <member name="M:com.aspose.pdf.XmpField.toStructure">
       
        <p>Gets value as a structure.</p> @return XmpField array (The structure)
      
    </member>
    <member name="M:com.aspose.pdf.XmpField.toArray">
       
        <p>Gets value as an array.</p> @return XmpValue array (The array)
      
    </member>
    <member name="T:com.aspose.pdf.XmpFieldType">
       
        <p>This enum represents types of a XMP field.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.XmpFieldType.Struct">
       
        <p>This type represents a structure.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.XmpFieldType.Array">
       
        <p>This type represents a array.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.XmpFieldType.Property">
       
        <p>This type represents a property.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.XmpFieldType.Packet">
       
        <p>This type represents a packet.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.XmpFieldType.Unknown">
       
        <p>This field represents an unknown type.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.XmpPdfAExtensionCategoryType">
       
        <p>Property category: internal or external.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.XmpPdfAExtensionCategoryType.Internal">
       
        <p>Internal properties are created automatically from document content.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.XmpPdfAExtensionCategoryType.External">
       
        <p>External properties are based on user input.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.XmpPdfAExtensionField">
       
        <p>This schema describes a field in a structured type. It is very similar to the PDF/A Property Value Type schema, but defines a field in a structure instead of a property. Schema namespace URI: http://www.aiim.org/pdfa/ns/field# Required schema namespace prefix: pdfaField.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionField.getName">
       
        <p>Field name. Field names must be valid XML element names.</p> @return String
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionField.getValueType">
       
        <p>Field value type, drawn from XMP Specification 2004, or an embedded PDF/A value type extension schema. Predefined XMP type names or names of custom types.</p> @return String
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionField.getXmlInternal(XmlDocument)">
       
        <p>Returns the list of xml elements that represent field in xml tree.</p> @return The list of fields. @param xmlDocument The source xml document.
      
      <param name="XmlDocument"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionField.getXml_(XmlDocument)">
       
        <p>Returns the list of xml elements that represent field in xml tree.</p> @return The list of fields. @param xmlDocument The source xml document.
      
      <param name="XmlDocument"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionField.#ctor(String,String,String,String)">
       
        <p>Initializes object.</p> @param name The field name. @param value The field value. @param valueType The field value type. @param description The field description.
      
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.XmpPdfAExtensionObject">
       
        <p>Represents the base class for field, property, value type instances.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionObject.getDescription">
       
        <p>Gets the description.</p> @return String
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionObject.getValue">
       
        <p>Gets the value.</p> @return String
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionObject.setValue(String)">
       
        <p>Sets the value.</p> @param value String
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionObject.getXmlInternal(XmlDocument)">
       
        <p>Returns the list of xml elements that represent object in xml tree.</p> @return The list of xml elements. @param xmlDocument The source xml document.
      
      <param name="XmlDocument"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionObject.getXml_(XmlDocument)">
       
        <p>Returns the list of xml elements that represent object in xml tree.</p> @return The list of xml elements. @param xmlDocument The source xml document.
      
      <param name="XmlDocument"/>
    </member>
    <member name="T:com.aspose.pdf.XmpPdfAExtensionProperty">
       
        <p>Describes a single property. Schema namespace URI: http://www.aiim.org/pdfa/ns/property# Required schema namespace prefix: pdfaProperty</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionProperty.getCategory">
       
        <p>Gets the property category.</p> @return int value @see XmpPdfAExtensionCategoryType
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionProperty.getXmlInternal(XmlDocument)">
       
        <p>Returns the list of xml elements that represent property in xml tree.</p> @return The list of xml elements. @param xmlDocument The source xml document.
      
      <param name="XmlDocument"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionProperty.getXml_(XmlDocument)">
       
        <p>Returns the list of xml elements that represent property in xml tree.</p> @return The list of xml elements. @param xmlDocument The source xml document.
      
      <param name="XmlDocument"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionProperty.#ctor(String,String,String,int,String)">
       
        <p>Initializes new object.</p> @param name The property name. @param value The property value. @param valueType The property value type. @param category The property category. @param description The property description. @see XmpPdfAExtensionCategoryType
      
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.XmpPdfAExtensionSchema">
       
        <p>Describes the XMP extension schema which is provided by PDF/A-1.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchema.getDescription">
       
        <p>Gets the schema description.</p> @return XmpPdfAExtensionSchemaDescription
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchema.getObjectsInternal">
       
        <p>Gets the list of objects (properties, value types).</p> @return ArrayList
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchema.getObjects1">
       
        <p>Gets the list of objects (properties, value types).</p> @return ArrayList
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchema.add(XmpPdfAExtensionObject)">
       
        <p>Adds new object into schema.</p> @param obj The new object.
      
      <param name="XmpPdfAExtensionObject"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchema.contains(XmpPdfAExtensionObject)">
       
        <p>Determines whether obj exists in schema.</p> @return True - object exists in schema; otherwise, false. @param obj The obj to find.
      
      <param name="XmpPdfAExtensionObject"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchema.remove(XmpPdfAExtensionObject)">
       
        <p>Removes the object from schema.</p> @param obj The object to remove.
      
      <param name="XmpPdfAExtensionObject"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchema.getSchemaXml(XmlDocument)">
       
        <p>Returns the xml element (tag - li) that represents schema in xml tree.</p> @return The xml element. @param xmlDocument The source xml document.
      
      <param name="XmlDocument"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchema.getValuesXml(XmlDocument,XmlElement)">
       
        <p>Gets the values of properties as xml tree representation.</p> @param xmlDocument The source xml document. @param rootElement The root node of properties values list.
      
      <param name="XmlDocument"/>
      <param name="XmlElement"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchema.getPropertyIndex(String)">
       
        <p>Returns index of property with given name.</p> @return Index of property within Objects List, @param name Property name.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchema.getProperty(String)">
       
        <p>Returns PDF/A property by its name.</p> @return XmpPdfAExtensionProperty instance The property. @param name Property name.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchema.isPdfAExtensionPrefix(String)">
       
        <p>Determines whether prefix value is a part of pdf-a extension.</p> @return True - prefix is a part of pdf-a extension; otherwise, false. @param localName The prefix value to validate.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchema.createSchemasElement(XmlNode)">
       
        <p>Creates the list of schemas elements from xml tree.</p> @return The dictionary of schemas elements in format (key, value): schema_prefix, schema value. @param rootNode The root node for schemas elements.
      
      <param name="XmlNode"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchema.initializeSchemaValue(XmlNode,XmpPdfAExtensionSchema)">
       
        <p>Initializes the value of property.</p> @param node The current node that stores property value. @param schema The schema that contains property definition.
      
      <param name="XmlNode"/>
      <param name="XmpPdfAExtensionSchema"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchema.createDescriptionValueXml(XmlDocument)">
       
        <p>Creates the description xml element for the block of properties values.</p> @return The description xml element. @param xmlDocument The source xml document.
      
      <param name="XmlDocument"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchema.createDescriptionXml(XmlDocument)">
       
        <p>Creates the description xml element for the all schemas.</p> @return The description xml element. @param xmlDocument The source xml document.
      
      <param name="XmlDocument"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchema.#ctor(XmpPdfAExtensionSchemaDescription)">
       
        <p>Initializes new object.</p> @param description The schema description.
      
      <param name="XmpPdfAExtensionSchemaDescription"/>
    </member>
    <member name="F:com.aspose.pdf.XmpPdfAExtensionSchema.DEFAULT_EXTENSION_NAMESPACE_PREFIX">
       
        <p>Default extension namespace prefix.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.XmpPdfAExtensionSchema.DEFAULT_EXTENSION_NAMESPACE_URI">
       
        <p>Default extension namespace uri.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.XmpPdfAExtensionSchema.DEFAULT_SCHEMA_NAMESPACE_PREFIX">
       
        <p>Default schema namespace prefix.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.XmpPdfAExtensionSchema.DEFAULT_SCHEMA_NAMESPACE_URI">
       
        <p>Default schema namespace uri.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.XmpPdfAExtensionSchema.DEFAULT_PROPERTY_NAMESPACE_PREFIX">
       
        <p>Default property namespace prefix.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.XmpPdfAExtensionSchema.DEFAULT_PROPERTY_NAMESPACE_URI">
       
        <p>Default property namespace uri.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.XmpPdfAExtensionSchema.DEFAULT_VALUE_TYPE_NAMESPACE_PREFIX">
       
        <p>Default valie type namespace prefix.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.XmpPdfAExtensionSchema.DEFAULT_VALUE_NAMESPACE_URI">
       
        <p>Default value namespace uri.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.XmpPdfAExtensionSchema.DEFAULT_FIELD_NAMESPACE_PREFIX">
       
        <p>Default field namespace prefix.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.XmpPdfAExtensionSchema.DEFAULT_FIELD_NAMESPACE_URI">
       
        <p>Default extension namespace uri.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.XmpPdfAExtensionSchema.RDF_PREFIX">
       
        <p>Default rdf namespace prefix.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.XmpPdfAExtensionSchema.RDF_NAMESPACE_URI">
       
        <p>Default rdf namespace uri.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.XmpPdfAExtensionSchemaDescription">
       
        <p>Represents the description of XMP extension schema which is provided by PDF/A-1.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchemaDescription.getPrefix">
       
        <p>Gets the prefix.</p> @return String
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchemaDescription.getNamespaceURI">
       
        <p>Gets the namespace URI.</p> @return String
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchemaDescription.getDescription">
       
        <p>Gets the optional description.</p> @return String
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchemaDescription.getXmlInternal(XmlDocument)">
       
        <p>Returns the list of xml elements that represent schema description in xml tree.</p> @return The list of xml elements. @param xmlDocument The source xml document.
      
      <param name="XmlDocument"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchemaDescription.getXml(XmlDocument)">
       
        <p>Returns the list of xml elements that represent schema description in xml tree.</p> @return The list of xml elements. @param xmlDocument The source xml document.
      
      <param name="XmlDocument"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchemaDescription.#ctor(String,String,String)">
       
        <p>Initializes new object.</p> @param prefix The prefix. @param namespaceURI The namespace URI. @param description The optional desciption.
      
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.XmpPdfAExtensionValueType">
       
        <p>The PDF/A ValueType schema is required for all property value types which are not defined in the XMP 2004 specification, i.e. for value types outside of the following list: - Array types (these are container types which may contain one or more fields): Alt, Bag, Seq - Basic value types: Boolean, (open and closed) Choice, Date, Dimensions, Integer, Lang Alt, Locale, MIMEType, ProperName, Real, Text, Thumbnail, URI, URL, XPath - Media Management value types: AgentName, RenditionClass, ResourceEvent, ResourceRef, Version - Basic Job/Workflow value type: Job - EXIF schema value types: Flash, CFAPattern, DeviceSettings, GPSCoordinate, OECF/SFR, Rational Schema namespace URI: http://www.aiim.org/pdfa/ns/type# Required schema namespace prefix: pdfaType</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionValueType.getType">
       
        <p>Gets the value type.</p> @return String
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionValueType.getNamespaceUri">
       
        <p>Gets the namespace URI.</p> @return String
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionValueType.getPrefix">
       
        <p>Gets the prefix.</p> @return String
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionValueType.getFields">
       
        <p>Gets the list of fields.</p> @return IList
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionValueType.add(XmpPdfAExtensionField)">
       
        <p>Add new field.</p> @param field The field to add.
      
      <param name="XmpPdfAExtensionField"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionValueType.addRange(XmpPdfAExtensionField[])">
       
        <p>Adds the range of fields.</p> @param fields The fields to add.
      
      <param name="XmpPdfAExtensionField[]"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionValueType.remove(XmpPdfAExtensionField)">
       
        <p>Removes the field from the list of fields.</p> @param field The field to remove.
      
      <param name="XmpPdfAExtensionField"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionValueType.clear">
       
        <p>Clears all fields.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionValueType.getXmlInternal(XmlDocument)">
       
        <p>Returns the list of xml elements that represent value type in xml tree.</p> @return The list of xml elements. @param xmlDocument The source xml document.
      
      <param name="XmlDocument"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionValueType.getXml_(XmlDocument)">
       
        <p>Returns the list of xml elements that represent field in xml tree.</p> @return The list of fields. @param xmlDocument The source xml document.
      
      <param name="XmlDocument"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionValueType.#ctor(String,String,String,String)">
       
        <p>Initializes new object.</p> @param type The value type. @param namespaceUri The namespace URI. @param prefix The prefix. @param description The description.
      
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.XmpValue">
       
        <p>Represents XMP value</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmpValue.isString">
       
        <p>Returns true if value is string.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.XmpValue.isInteger">
       
        <p>Returns true if value is integer.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.XmpValue.isDouble">
       
        <p>Returns true if value is floating point value.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.XmpValue.isDateTime">
       
        <p>Returns true if value is DateTime.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.XmpValue.isField">
       
        <p>Returns true if XmpValue is field.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.XmpValue.isNamedValue">
       
        <p>Returns true if XmpValue is named value.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.XmpValue.isRaw">
       
        <p>Value is unsupported/unknown and raw XML code is provided.</p> @return True if value returned as raw data.
      
    </member>
    <member name="M:com.aspose.pdf.XmpValue.isNamedValues">
       
        <p>Returns true is XmpValue represents named values.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.XmpValue.isStructure">
       
        <p>Returns true is XmpValue represents structure.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.XmpValue.isArray">
       
        <p>Returns true is XmpValue is array.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.XmpValue.toStringValue">
       
        <p>Converts to string.</p> @return String value
      
    </member>
    <member name="M:com.aspose.pdf.XmpValue.toInteger">
       
        <p>Converts to integer.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.XmpValue.toDouble">
       
        <p>Converts to double.</p> @return double value
      
    </member>
    <member name="M:com.aspose.pdf.XmpValue.toDateTime">
       
        <p>Converts to date time.</p> @return Date instance
      
    </member>
    <member name="M:com.aspose.pdf.XmpValue.toArray">
       
        <p>Returns array.</p> @return XmpValue array
      
    </member>
    <member name="M:com.aspose.pdf.XmpValue.toRaw">
       
        <p>Raw XML code for unknown/unsupported values.</p> @return XML node for this value.
      
    </member>
    <member name="M:com.aspose.pdf.XmpValue.toStructure">
       
        <p>Returns XMP value as structure (set of fields).</p> @return XmpField array
      
    </member>
    <member name="M:com.aspose.pdf.XmpValue.toField">
       
        <p>Returns XMP value as XMP field.</p> @return XmpField instance
      
    </member>
    <member name="M:com.aspose.pdf.XmpValue.toNamedValue">
       
        <p>Returns XMP value as named value.</p> @return (Named value) HashMap instance with String Key and XmpValue value
      
    </member>
    <member name="M:com.aspose.pdf.XmpValue.toNamedValueInternal">
      For Internal usage only @return For Internal usage only
    </member>
    <member name="M:com.aspose.pdf.XmpValue.toNamedValues">
       
        <p>Returns XMP value as named value collection.</p> @return (Named collection value) HashMap instance with String Key and XmpValue value
      
    </member>
    <member name="M:com.aspose.pdf.XmpValue.toNamedValuesInternal"/>
    <member name="M:com.aspose.pdf.XmpValue.toDictionary">
       
        <p>Returns dictionary which contains named values.</p> @return Dictionary
      
    </member>
    <member name="M:com.aspose.pdf.XmpValue.toString">
       
        <p>Returns string representation of XmpValue.</p> @return String representation
      
    </member>
    <member name="M:com.aspose.pdf.XmpValue.toString(IFormatProvider)">
       
        <p>Returns string representation.</p> @param formatProvider IFormatProvider instance (Format provider) @return String representation
      
      <param name="IFormatProvider"/>
    </member>
    <member name="M:com.aspose.pdf.XmpValue.to_XmpValue(String)">
       
        <p>Converts string to XmpValue.</p> @param value String value (Value to convert) @return XmpValue instance
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XmpValue.to_XmpValue(int)">
       
        <p>Converts integer into XmpValue.</p> @param value int value (Value to convert) @return XmpValue instance
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.XmpValue.to_XmpValue(double)">
       
        <p>Converts double into XmpValue.</p> @param value double value (Value to convert) @return XmpValue instance
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.XmpValue.to_XmpValue(Date)">
       
        <p>Converts DateTime into XmpValue.</p> @param value Date instance (Value to convert) @return XmpValue instance
      
      <param name="Date"/>
    </member>
    <member name="M:com.aspose.pdf.XmpValue.to_XmpValue(Object[])">
       
        <p>Converts array to XmpValue.</p> @param value Array of Objects (Value to convert) @return XmpValue instance
      
      <param name="Object[]"/>
    </member>
    <member name="M:com.aspose.pdf.XmpValue.to_Array(XmpValue)">
       
        <p>Converts XmpValue to array.</p> @param value XmpValue instance (Value to convert) @return XmpValue array
      
      <param name="XmpValue"/>
    </member>
    <member name="M:com.aspose.pdf.XmpValue.to_(XmpValue)">
       
        <p>Converts XmpValue into array.</p> @param value XmpValue instance (Value to convert) @return XmpValue array
      
      <param name="XmpValue"/>
    </member>
    <member name="M:com.aspose.pdf.XmpValue.to_String(XmpValue)">
       
        <p>Converts XmpValue into string.</p> @param value XmpValue instance (Value to convert) @return String value
      
      <param name="XmpValue"/>
    </member>
    <member name="M:com.aspose.pdf.XmpValue.to_KeyValuePair(XmpValue)">
       
        <p>Converts XmpValue to named value.</p> @param value XmpValue instance (Value to convert) @return Internal Array
      
      <param name="XmpValue"/>
    </member>
    <member name="M:com.aspose.pdf.XmpValue.to_Generic(XmpValue)">
       
        <p>Get KeyValuePair array</p> @param value XmpValue instance (Value to convert) @return Internal Array
      
      <param name="XmpValue"/>
    </member>
    <member name="M:com.aspose.pdf.XmpValue.#ctor(String)">
       
        <p>Constructor for string value.</p> @param value String value.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XmpValue.#ctor(int)">
       
        <p>Consructor for integer value.</p> @param value Integer value.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.XmpValue.#ctor(double)">
       
        <p>Constructor for floating point Value.</p> @param value Double value.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.XmpValue.#ctor(java.util.Date)">
       
        <p>Constructor for date time value.</p> @param value Date time value.
      
      <param name="java.util.Date"/>
    </member>
    <member name="M:com.aspose.pdf.XmpValue.#ctor(XmpValue[])">
       
        <p>Constructor for array value.</p> @param array Array value.
      
      <param name="XmpValue[]"/>
    </member>
    <member name="M:com.aspose.pdf.XmpValue.#ctor(Object)">
      <param name="Object"/>
    </member>
    <member name="T:com.aspose.pdf.XpsLoadOptions">
       
        <p>Represents options for loading/importing xps file into pdf document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XpsLoadOptions.getBatchSize">
       
        <p>Defines batch size if batched conversion is applicable to source and destination formats pair.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.XpsLoadOptions.setBatchSize(int)">
       
        <p>Defines batch size if batched conversion is applicable to source and destination formats pair.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.XpsLoadOptions.#ctor">
       
        <p>Creates default load options for converting xps file into pdf document.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.XpsSaveOptions">
       
        <p>Save options for export to Xps format</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XpsSaveOptions.getSaveTransparentTexts">
       
        <p>Indicates whether to preserve transparent (OCR'ed) text.</p> @return boolean value
      
    </member>
    <member name="M:com.aspose.pdf.XpsSaveOptions.setSaveTransparentTexts(boolean)">
       
        <p>Indicates whether to preserve transparent (OCR'ed) text.</p> @param value boolean value
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.XpsSaveOptions.getBatchSize">
       
        <p>Defines batch size if batched conversion is applicable to source and destination formats pair.</p> @return int value
      
    </member>
    <member name="M:com.aspose.pdf.XpsSaveOptions.setBatchSize(int)">
       
        <p>Defines batch size if batched conversion is applicable to source and destination formats pair.</p> @param value int value
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.XpsSaveOptions.#ctor">
       
        <p>Constructor</p> 
      
    </member>
    <member name="T:com.aspose.pdf.XslFoLoadOptions">
       
        <p>Represents options for loading/importing XSL-FO file into pdf document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XslFoLoadOptions.getParsingErrorsHandlingType">
       
        <p>Source XSLFO document can contain formatting errors. This enum enumerates possible strategies of handking of that errors</p> @return ParsingErrorsHandlingTypes element @see ParsingErrorsHandlingTypes
      
    </member>
    <member name="M:com.aspose.pdf.XslFoLoadOptions.setParsingErrorsHandlingType(int)">
       
        <p>Source XSLFO document can contain formatting errors. This enum enumerates possible strategies of handking of that errors</p> @param parsingErrorsHandlingType ParsingErrorsHandlingTypes element @see ParsingErrorsHandlingTypes
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.XslFoLoadOptions.getBasePath">
       
        <p>The base path/url from which are searched relative pathes to external resources (if any) referenced in loaded SVG file.</p> @return String
      
    </member>
    <member name="M:com.aspose.pdf.XslFoLoadOptions.setBasePath(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XslFoLoadOptions.#ctor">
       
        <p>Creates {@code XslFoLoadOptions} object without xsl data.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XslFoLoadOptions.#ctor(String)">
       
        <p>Creates {@code XslFoLoadOptions} object with xsl data.</p> @param xslFile Xsl file to convert XSL-FO document into pdf document.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XslFoLoadOptions.#ctor(InputStream)">
       
        <p>Creates {@code XslFoLoadOptions} object with xsl data.</p> @param xslStream Xsl stream to convert XSL-FO document into pdf document.
      
      <param name="InputStream"/>
    </member>
    <member name="T:com.aspose.pdf.XslFoLoadOptions.ParsingErrorsHandlingTypes">
       
        <p>Source XSLFO document can contain formatting errors. This enum enumerates possible strategies of handling of such formatting errors</p> 
      
    </member>
    <member name="F:com.aspose.pdf.XslFoLoadOptions.ParsingErrorsHandlingTypes.TryIgnore">
       
        <p>In this case converter will be instructed to try proceed with conversion and ignore found formatting errors. In this case success not guaranteed, serious problems can occure later in converter, anf in suck case will be thrown exception with list of found formatting errors.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.XslFoLoadOptions.ParsingErrorsHandlingTypes.ThrowExceptionImmediately">
       
        <p>In this case conversion will be stopped immediately and exception will be thrown immediately after detecting of first formatting error</p> 
      
    </member>
    <member name="F:com.aspose.pdf.XslFoLoadOptions.ParsingErrorsHandlingTypes.InvokeCustomHandler">
       
        <p>This is the most agile method - custom code must supply (in WarningCallback property) special handler that will be called when formatting error detected. That handler can f.e. log or count errors etc and will supply decision whether processing can be continued for this or that error.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.XYZExplicitDestination">&lt;p&gt; Represents explicit destination that displays the page with the coordinates (left, top) positioned at the upper-left corner of the window and the contents of the page magnified by the factor zoom. A null value for any of the parameters left, top, or zoom specifies that the current value of that parameter is to be retained unchanged. A zoom value of 0 has the same meaning as a null value. &lt;/p&gt; &lt;hr&gt; &lt;p&gt; Document doc = new Document("example.pdf"); XYZExplicitDestination dest = (XYZExplicitDestination)doc.getOutlines().get_Item(1).getDestination(); String left = dest.getLeft(); String top = dest.getTop(); String zoom = dest.getZoom(); &lt;/p&gt;</member>
    <member name="M:com.aspose.pdf.XYZExplicitDestination.getLeft">
       
        <p>Gets left horizontal coordinate of the upper-left corner of the window.</p> @return double
      
    </member>
    <member name="M:com.aspose.pdf.XYZExplicitDestination.getTop">
       
        <p>Gets top vertical coordinate of the upper-left corner of the window.</p> @return double
      
    </member>
    <member name="M:com.aspose.pdf.XYZExplicitDestination.getZoom">
       
        <p>Gets zoom factor.</p> @return double
      
    </member>
    <member name="M:com.aspose.pdf.XYZExplicitDestination.createDestination(Page,double,double,double,boolean)">
       
        <p>Create destination to specified location of the page considering page rotation if required.</p> @return Destination object. @param page Destination page. @param left Left position on the page. @param top Top position on the page. @param zoom Zoom factor (0 for default). @param considerRotation If true position will be recalculated according to page rotation.
      
      <param name="Page"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.XYZExplicitDestination.createDestinationToUpperLeftCorner(Page,double)">
       
        <p>Create destination to upper left corner of the specified page.</p> @return Destination object. @param page Destination page. @param zoom Zoom factor.
      
      <param name="Page"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.XYZExplicitDestination.createDestinationToUpperLeftCorner(Page)">
       
        <p>Create destination to specified page.</p> @return Destination object. @param page Destination page.
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.XYZExplicitDestination.toString">
       
        <p>Converts the object state into string value. Example: "1 XYZ 100 200 3".</p> @return String value representing object state.
      
    </member>
    <member name="M:com.aspose.pdf.XYZExplicitDestination.#ctor(Page,double,double,double)">
       
        <p>Creates the instance and initializes it by DOM page object and visible parameters.</p> @param page DOM page object. @param left Left horizontal coordinate of the upper-left corner of the window. @param top Top vertical coordinate of the upper-left corner of the window. @param zoom Zoom factor.
      
      <param name="Page"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.XYZExplicitDestination.#ctor(IDocument,int,double,double,double)">
       
        <p>Creates remote explicit destination.</p> @param document The parent document that contains this object. @param pageNumber The destination page number of remote document. @param left Left horizontal coordinate of the upper-left corner of the window. @param top Top vertical coordinate of the upper-left corner of the window. @param zoom Zoom factor.
      
      <param name="IDocument"/>
      <param name="int"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.XYZExplicitDestination.#ctor(int,double,double,double)">
       
        <p>Creates remote explicit destination.</p> @param pageNumber The destination page number of remote document. @param left Left horizontal coordinate of the upper-left corner of the window. @param top Top vertical coordinate of the upper-left corner of the window. @param zoom Zoom factor.
      
      <param name="int"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
  </members>
</doc>
