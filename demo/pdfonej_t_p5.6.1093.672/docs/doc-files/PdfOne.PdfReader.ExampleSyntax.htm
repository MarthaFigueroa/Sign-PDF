<html>
 <head>
  <LINK REL ="stylesheet" TYPE="text/css" HREF="../stylesheet.css" TITLE="Style">
  <LINK REL ="stylesheet" TYPE="text/css" HREF="example.css" TITLE="Style">
 </head>
 <body>
<pre>
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;

import com.gnostice.pdfone.PDFOne;
import com.gnostice.pdfone.PdfDocument;
import com.gnostice.pdfone.PdfException;
import com.gnostice.pdfone.PdfReader;
import com.gnostice.pdfone.PdfWriter;

public class PdfReader_Examples
{
    <span class="cc">// Activates the component PDFOne.jar</span>
    static
    {
        PDFOne.activate("T95VZE:W8HBPVA:74VQ8QV:LO4V8",
            "9B1HRZAP:X5853ERNE:5EREMEGRQ:TX1R10");
    }

    public static void main(String[] args) throws PdfException,
        IOException
    {
        PdfReader_Examples obj = new PdfReader_Examples();

        <span class="cc">// To try other examples, add the obj.&lt;example_method&gt;
        // accordingly. For example, try:
        // obj.fileReader_File_example();</span>
        obj.fileStreamReader_FileInputStream_String_example();
     }
</pre><a name="fileStreamReader_FileInputStream_String"></a><pre>
    <span class="cc">// This code segment demonstrates how to create a
    // PDF reader object by specifying a FileInputStream object
    // for the input file and pathname string for the output file.</span>
    public void fileStreamReader_FileInputStream_String_example()
        throws IOException, PdfException
    {
        <span class="cc">// Creates a file for reading - the input file</span>
        PdfWriter writer = PdfWriter.fileWriter(
            "PdfReader_fileStreamReader_FileInputStream_"
            + "String_Example_INPUT_FILE.pdf");
        PdfDocument document1 = new PdfDocument(writer); 
        document1.writeText(
            "This text is from "
            + "PdfReader_fileStreamReader_FileInputStream_"
            + "String_Example_INPUT_FILE.pdf");       
        document1.write();
        writer.dispose();         
    	
    	<span class="cc">// Creates a FileInputStream object for the above file</span>
        FileInputStream fis = new FileInputStream(
            "PdfReader_fileStreamReader_FileInputStream_"
            + "String_Example_INPUT_FILE.pdf");

        <span class="cc">// Creates a String object for the output file</span>
        String outputPathname = 
            "PdfReader_fileStreamReader_FileInputStream_"
            + "String_Example_OUTPUT_FILE.pdf";

        <span class="cc">// Creates a PdfReader object with the FileInputStream
        // object and the String object</span>
        PdfReader reader = PdfReader.<span class="ck">fileStreamReader(
                                        fis,
                                        outputPathname)</span>;

        <span class="cc">// Creates a PdfDocument object with the PdfReader object</span>
        PdfDocument document = new PdfDocument(reader);

        <span class="cc">// Writes an extra line of text </span>
        document.writeText(
                    "This text goes to - "
                    + "PdfReader_fileStreamReader_FileInputStream_"
                    + "String_Example_OUTPUT_FILE.pdf",
                    200, 100);

        <span class="cc">// Writes the PdfDocument object to the output file</span>
        document.write();

        <span class="cc">// Closes all I/O streams associated with this reader object</span>
        reader.dispose();
    }

</pre><a name="fileStreamReader_FileInputStream_OutputStream"></a><pre>
    <span class="cc">// This code segment reads from an existing file, using a
    // FileInputStream object. It then writes an extra line of text.
    // The file contents along with the changes are saved to an output
    // file using an OutputStream object.</span>
    public void fileStreamReader_FileInputStream_OutputStream_example()
        throws IOException, PdfException
    {
        <span class="cc">// Creates a file for reading - the input file</span>
        PdfWriter writer = PdfWriter.fileWriter(
            "PdfReader_fileStreamReader_FileInputStream_"
            + "OutputStream_Example_INPUT_FILE.pdf");
        PdfDocument document1 = new PdfDocument(writer); 
        document1.writeText(
            "This text is from "
            + "PdfReader_fileStreamReader_FileInputStream_"
            + "OutputStream_Example_INPUT_FILE.pdf");       
        document1.write();
        writer.dispose();        
        
        <span class="cc">// Creates a FileInputStream object for the above file</span>
        FileInputStream fis = new FileInputStream(
            "PdfReader_fileStreamReader_FileInputStream_"
            + "OutputStream_Example_INPUT_FILE.pdf");

        <span class="cc">// Creates an OutputStream object for the output file</span>
        OutputStream os = new FileOutputStream(
            "PdfReader_fileStreamReader_FileInputStream_"
            + "OutputStream_Example_OUTPUT_FILE.pdf");

        <span class="cc">// Creates a PdfReader object with the FileInputStream object
        // and OutputStream object</span>
        PdfReader reader = PdfReader.<span class="ck">fileStreamReader(fis, os)</span>;

        <span class="cc">// Creates a PdfDocument object with the new PdfReader object</span>
        PdfDocument document = new PdfDocument(reader);

        <span class="cc">// Writes a line of text for the output file</span>
        document.writeText(
            "This text goes to - " +
            "PdfReader_fileStreamReader_FileInputStream_"
            + "OutputStream_Example_OUTPUT_FILE.pdf",
            200, 100);

        <span class="cc">// Writes the PdfDocument object to the output file</span>
        document.write();

        <span class="cc">// Closes all I/O streams associated with this reader object</span>
        reader.dispose();
    }

</pre><a name="fileStreamReader_Fi leInputStream"></a><pre>
    <span class="cc">// This code segment reads from an existing file using a
    // FileInputStream object, counts the pages, and outputs the
    // number on the system console.</span>
    public void fileStreamReader_FileInputStream_example()
        throws IOException, PdfException
    {
        <span class="cc">// Creates a file for reading</span>
        PdfWriter writer = PdfWriter.fileWriter(
            "PdfReader_fileStreamReader_FileInputStream_Example.pdf");
        PdfDocument document1 = new PdfDocument(writer); 
        document1.writeText("This is a sample file.");
        document1.write();
        writer.dispose();        
        
        <span class="cc">// Creates a FileInputStream object for the above file </span>
        FileInputStream fis = new FileInputStream(
            "PdfReader_fileStreamReader_FileInputStream_Example.pdf");
        
        <span class="cc">// Creates a new PdfReader object with the FileInputStream
        // object and makes the file contents available for reading</span>
        PdfReader reader = PdfReader.<span class="ck">fileStreamReader(fis)</span>;

        <span class="cc">// Creates a PdfDocument object from the new PdfReader object</span>
        PdfDocument document2 = new PdfDocument(reader);

        <span class="cc">// Prints the number of pages in the document</span>
        System.out.println(document2.getPageCount());

        <span class="cc">// Closes all I/O streams associated with this reader object </span>
        reader.dispose();
    }

</pre><a name="fileReader_String_String"></a><pre>
    <span class="cc">// This code segment reads from an existing file, specified by a
    // String object. It then writes an extra line of text. The file
    // contents along with the changes are saved to an output file
    // represented by another String object.</span>
    public void fileReader_String_String_example()
        throws IOException, PdfException
    {
        <span class="cc">// Creates a String object containing the pathname of the
        // file to be read - the input file</span>
        String inputPathname =
            "PdfReader_fileReader_String_String_"
            + "Example_INPUT_FILE.pdf";

        <span class="cc">// Creates the input file</span>
        PdfWriter writer = PdfWriter.fileWriter(inputPathname);
        PdfDocument document1 = new PdfDocument(writer);
        document1.writeText("This text is from - " + inputPathname);
        document1.write();
        writer.dispose();

        <span class="cc">// Creates a String object for the output file</span>
        String outputPathname =
            "PdfReader_fileReader_String_String_"
            + "Example_OUTPUT_FILE.pdf";

        <span class="cc">// Creates a PdfReader object with the String objects</span>
        PdfReader reader = PdfReader.<span class="ck">fileReader(
                                        inputPathname,
                                        outputPathname)</span>;

        <span class="cc">// Creates a PdfDocument object with the PdfReader object</span>
        PdfDocument document = new PdfDocument(reader);

        <span class="cc">// Writes an extra line of text</span>
        document.writeText("This text goes to - " + outputPathname,
                           200, 100);

        <span class="cc">// Writes the PdfDocument object to the output file</span>
        document.write();

        <span class="cc">// Closes all I/O streams associated with this reader object</span>
        reader.dispose();
    }

</pre><a name="fileReader_String_OutputStream"></a><pre>
    <span class="cc">// This code segment reads from an existing file, specified by a
    // String object. It then writes an extra line of text. The file
    // contents along with the changes are saved to an output file
    // represented by an OutputStream object.</span>
    public void fileReader_String_OutputStream_example()
        throws IOException, PdfException
    {
        <span class="cc">// Creates a String object containing the pathname of the
        // file to be read - the input file</span>
        String inputPathname = "PdfReader_fileReader_String_"
                               + "OutputStream_example_"
                               + "INPUT_FILE.pdf";

        <span class="cc">// Creates the input file</span>
        PdfWriter writer = PdfWriter.fileWriter(inputPathname);
        PdfDocument document1 = new PdfDocument(writer);
        document1.writeText("This text is from - " + inputPathname);
        document1.write();
        writer.dispose();

        <span class="cc">// Creates an OutputStream object with the String object</span>
        OutputStream os = new FileOutputStream(
                              "PdfReader_fileReader_"
                              + "String_OutputStream_example_"
                              + "OUTPUT_FILE.pdf");

        <span class="cc">// Creates a PdfReader object with the String object and the
        // OutputStream object</span>
        PdfReader reader = PdfReader.<span class="ck">fileReader(inputPathname, os)</span>;

        <span class="cc">// Creates a PdfDocument object with the PdfReader object</span>
        PdfDocument document = new PdfDocument(reader);

        <span class="cc">// Writes an extra line of text</span>
        document.writeText("This text goes to - "
                           + "PdfReader_fileReader_"
                           + "String_OutputStream_example_"
                           + "OUTPUT_FILE.pdf",
                           200, 100);

        <span class="cc">// Writes the PdfDocument object to the output file</span>
        document.write();

        <span class="cc">// Closes all I/O streams associated with this reader object</span>
        reader.dispose();
    }

</pre><a name="fileReader_String"></a><pre>
    <span class="cc">// This code segment reads from an existing file using a
    // String object, counts pages, and outputs the number on the
    // system console</span>
    public void fileReader_String_example() throws IOException,
        PdfException
    {
        <span class="cc">// Creates a String object containing the pathname of the
        // file to be read - the input file</span>
        String inputPathname =
                   "PdfReader_fileReader_String_Example.pdf";

        <span class="cc">// Creates the input file</span>
        PdfWriter writer = PdfWriter.fileWriter(inputPathname);
        PdfDocument document1 = new PdfDocument(writer);
        document1.writeText("This text is from - " + inputPathname);
        document1.write();
        writer.dispose();

        <span class="cc">// Creates a PdfReader object with the String object</span>
        PdfReader reader = PdfReader.<span class="ck">fileReader(inputPathname)</span>;

        <span class="cc">// Creates a PdfDocument object with the PdfReader object
        // and make the file contents available for reading</span>
        PdfDocument document = new PdfDocument(reader);

        <span class="cc">// Prints the number of pages in the document</span>
        System.out.println(document.getPageCount());

        <span class="cc">// Closes all I/O streams associated with this reader object</span>
        reader.dispose();
    }

</pre><a name="fileReader_File_String"></a><pre>
    <span class="cc">// This code segment reads from an existing file, specified by a
    // File object. It then writes an extra line of text. The file
    // contents along with the changes are saved to an output file
    // represented by a String object.</span>
    public void fileReader_File_String_example() throws IOException,
        PdfException
    {
        <span class="cc">// Creates a file for reading</span>
        PdfWriter writer = PdfWriter.fileWriter(
            "PdfReader_fileReader_File_String_"
            + "Example_INPUT_FILE.pdf");
        PdfDocument document1 = new PdfDocument(writer);
        document1.writeText(
            "This text is from PdfReader_fileReader_File_"
            + "String_Example_INPUT_FILE.pdf");
        document1.write();
        writer.dispose();

        <span class="cc">// Creates a File object for the input file</span>
        File f = new File("PdfReader_fileReader_File_"
                          + "String_Example_INPUT_FILE.pdf");

        <span class="cc">// Creates a String object for the output file</span>
        String outputPathname = "PdfReader_fileReader_File_"
                                + "String_Example_OUTPUT_FILE.pdf";

        <span class="cc">// Creates a PdfReader object with the File object and the
        // String object</span>
        PdfReader reader = PdfReader.<span class="ck">fileReader(f, outputPathname)</span>;

        <span class="cc">// Creates a PdfDocument object with the PdfReader object</span>
        PdfDocument document2 = new PdfDocument(reader);

        <span class="cc">// Writes an extra line of text</span>
        document2.writeText("This text goes to - "
                            + "PdfReader_fileReader_File_String_"
                            + "Example_OUTPUT_FILE.pdf", 200, 100);

        <span class="cc">// Writes the PdfDocument object to the output file</span>
        document2.write();

        <span class="cc">// Closes all I/O streams associated with this reader object</span>
        reader.dispose();
    }

</pre><a name="fileReader_File_OutputStream"></a><pre>
    <span class="cc">// This code segment reads from an existing file, specified by a
    // File object. It then writes an extra line of text. The file
    // contents along with the changes are saved to an output file
    // represented by an OutputStream object.</span>
    public void fileReader_File_OutputStream_example()
        throws IOException, PdfException
    {
    	<span class="cc">// Creates a file for reading</span>
    	PdfWriter writer = PdfWriter.fileWriter(
    		"PdfReader_fileReader_File_OutputStream_"
    	        + "Example_INPUT_FILE.pdf");
    	PdfDocument document1 = new PdfDocument(writer);
    	document1.writeText(
    		"This text is from PdfReader_fileReader_File_"
    		+ "OutputStream_Example_INPUT_FILE.pdf");
    	document1.write();
    	writer.dispose();

        <span class="cc">// Creates a File object for the above file</span>
        File file = new File(
        		"PdfReader_fileReader_File_OutputStream_"
        	        + "Example_INPUT_FILE.pdf");

        <span class="cc">// Creates OutputStream object for the output file</span>
        OutputStream os = new FileOutputStream(
        		"PdfReader_fileReader_File_OutputStream_"
        	        + "Example_OUTPUT_FILE.pdf");

        <span class="cc">// Creates a PdfReader object with the File object and the
        // OutputStream object</span>
        PdfReader reader = PdfReader.<span class="ck">fileReader(file, os)</span>;

        <span class="cc">// Creates a PdfDocument object with the PdfReader object</span>
        PdfDocument document2 = new PdfDocument(reader);

        <span class="cc">// Writes an extra line of text</span>
        document2.writeText(
                    "This text goes to - "
           	    + "PdfReader_fileReader_File_OutputStream_"
  	    	    + "Example_OUTPUT_FILE.pdf",
        	    200, 100);

        <span class="cc">// Writes the PdfDocument object to the output file</span>
        document2.write();

        <span class="cc">// Closes all I/O streams associated with this reader object</span>
        reader.dispose();
    }


</pre><a name="fileReader_File"></a><pre>
    <span class="cc">// This code segment reads from an existing file using a File
    // object, counts the pages, and outputs the number on the system
    // console.</span>
    public void fileReader_File_example() throws IOException,
        PdfException
    {

    	<span class="cc">// Creates a file for reading</span>
    	PdfWriter writer = PdfWriter.fileWriter(
    		"PdfReader_fileReader_File_Example.pdf");
    	PdfDocument document1 = new PdfDocument(writer); 
    	document1.writeText("This is a sample file.");
    	document1.write();
    	writer.dispose();
    	
        <span class="cc">// Creates a File object for the above file</span>
    	File f = new File("PdfReader_fileReader_File_Example.pdf");
    	
    	<span class="cc">// Creates a PdfReader object with above File object</span>
        PdfReader reader = PdfReader.<span class="ck">fileReader(f)</span>;

        <span class="cc">// Creates a PdfDocument object with the above PdfReader
        // object and makes the file contents available for reading</span>
        PdfDocument document2 = new PdfDocument(reader);

        <span class="cc">// Prints the number of pages in the document</span>
        System.out.println(document2.getPageCount());

        <span class="cc">// Closes all I/O streams associated with this reader object </span>
        reader.dispose();
    }
}
  </pre>
 </body>
</html>