<html>
 <head>
  <LINK REL ="stylesheet" TYPE="text/css" HREF="../stylesheet.css" TITLE="Style">
  <LINK REL ="stylesheet" TYPE="text/css" HREF="example.css" TITLE="Style">
 </head>
 <body>
<pre>
import java.io.File;
import java.io.IOException;

import com.gnostice.pdfone.PDFOne;
import com.gnostice.pdfone.PdfAction;
import com.gnostice.pdfone.PdfBookmark;
import com.gnostice.pdfone.PdfDocument;
import com.gnostice.pdfone.PdfException;
import com.gnostice.pdfone.PdfMeasurement;
import com.gnostice.pdfone.PdfPage;
import com.gnostice.pdfone.PdfPageMode;
import com.gnostice.pdfone.PdfRect;
import com.gnostice.pdfone.PdfWriter;

public class PdfBookmark_Examples
{
    <span class="cc">// Activates the component PDFOne.jar</span>
    static
    {
        PDFOne.activate("T95VZE:W8HBPVA:74VQ8QV:LO4V8",
            "9B1HRZAP:X5853ERNE:5EREMEGRQ:TX1R10");
    }


    public static void main(String[] args) throws IOException,
        PdfException
    {
        PdfBookmark_Examples obj = new PdfBookmark_Examples();

        <span class="cc">// To try other examples, add the obj.&lt;example_method&gt;
        // accordingly. For example, try:
        // obj.addNext_int_String_Example();</span>
        obj.addNext_String_int_double_int_Example();
    }


    <span class="cc">// This code segment demonstrates the use of an overloaded
    // addPrevious() method.
    // This code segment requires pathnames of an application and
    // and an ordinary file.
    // To use pathnames supplied as command-line arguments, use 
    // a statement in main() similar to:
    // obj.addPrevious_String_String_boolean_Example(args[0], args[1]);</span>
    public void addPrevious_String_String_boolean_Example(String appPathname, String filePathname)
        throws IOException,
        PdfException
    {
        PdfWriter writer = PdfWriter.fileWriter(
                              "PdfBookmark_addPrevious_String_"
                              + "String_boolean_example.pdf");
        PdfDocument document = new PdfDocument(writer);
        document.setPageMode(PdfPageMode.USEOUTLINES);
        PdfPage page;

        <span class="cc">// Adds pages and bookmarks to the PdfDocument object
        // created above</span>
        for (int i = 1; i <= 20; i++)
        {
            page = new PdfPage();
            page.writeText("This is page number " + i);
            document.add(page);
            document.addBookmark("Page " + (i), 
                                 document.getBookmarkRoot(), 
                                 i);
        }

        <span class="cc">// Creates a reference to the first bookmark</span>
        PdfBookmark bm = document.getBookmarkRoot().getFirstChild();
<a name="addPrevious_String_String_boolean"></a>
        <span class="cc">// Adds a new bookmark immediately after the above bookmark.
        // When selected, this new bookmark launches the specified
        // application.</span>
        bm = bm.<span class="ck">addPrevious("Launch \"" + appPathname + "\"",
                        appPathname,
                        false)</span>;

        
        <span class="cc">// Adds a new bookmark immediately after the above bookmark.
        // When selected, this new bookmark prints the specified 
        // file.</span>
        bm.<span class="ck">addPrevious("Print \"" + filePathname + "\"",
                        filePathname, 
                        true)</span>;

        document.setOpenAfterSave(true);
        document.write();
        writer.dispose();
    }


    <span class="cc">// This code segment demonstrates the use of an overloaded
    // addPrevious() method.</span>
    public void addPrevious_String_int_PdfRect_Example()
        throws IOException, PdfException
    {
        PdfWriter writer = PdfWriter.fileWriter(
                              "PdfBookmark_addPrevious_String_"
                              + "int_PdfRect_example.pdf");
        PdfDocument document = new PdfDocument(writer);
        document.setPageMode(PdfPageMode.USEOUTLINES);
        PdfPage page;

        <span class="cc">// Adds pages and bookmarks to the PdfDocument object
        // created above</span>
        for (int i = 1; i <= 20; i++)
        {
            page = new PdfPage();
            page.writeText("This is page number " + i);
            document.add(page);
            document.addBookmark("Page " + (i), 
                                 document.getBookmarkRoot(), 
                                 i);
        }

        <span class="cc">// Creates a reference to the first bookmark</span>
        PdfBookmark bm = document.getBookmarkRoot().getFirstChild();

        <span class="cc">// Creates a rectangle </span>
        PdfRect rectangle = new PdfRect(100, 150, 200, 250);
        
        <span class="cc">// Draws the rectangle on page 1</span>
        document.drawRect(rectangle, "1");
<a name="addPrevious_String_int_PdfRect"></a>
        <span class="cc">// Adds a new bookmark immediately before the above bookmark.
        // When selected, it leads to the above rectangle on page 1.</span>
        bm.<span class="ck">addPrevious("Link to rectangle on Page 1",
                       1,
                       rectangle)</span>;

        document.setOpenAfterSave(true);
        document.write();
        writer.dispose();
    }


    <span class="cc">// This code segment demonstrates the use of an overloaded
    // addPrevious() method.</span>
    public void addPrevious_String_int_int_Example() throws IOException,
        PdfException
    {
        PdfWriter writer = PdfWriter.fileWriter(
                              "PdfBookmark_addPrevious_String_"
                              + "int_int_example.pdf");
        PdfDocument document = new PdfDocument(writer);
        document.setPageMode(PdfPageMode.USEOUTLINES);
        PdfPage page;

        <span class="cc">// Adds pages and bookmarks to the PdfDocument object
        // created above</span>
        for (int i = 1; i <= 20; i++)
        {
            page = new PdfPage();
            page.writeText("This is page number " + i);
            document.add(page);
            document.addBookmark("Page " + (i),
                                 document.getBookmarkRoot(),
                                 i);
        }

        <span class="cc">// Creates a reference to the first bookmark</span>
        PdfBookmark bm = document.getBookmarkRoot().getFirstChild();
<a name="addPrevious_String_int_int"></a>
        <span class="cc">// Adds a new bookmark immediately before the first bookmark.
        // When selected, this new bookmark leads to page 15. Page 15
        // is displayed with entire height and width of its bounding
        // box tightly fit inside the window.</span>
        bm.addPrevious("Link to Page 15 with FITB",
                       15,
                       PdfBookmark.FITB);

        document.setOpenAfterSave(true);
        document.write();
        writer.dispose();
    }


    <span class="cc">// This code segment demonstrates the use of an overloaded
    // addPrevious() method. </span>
    public void addPrevious_String_int_double_int_Example()
        throws IOException, PdfException
    {
        PdfWriter writer = PdfWriter.fileWriter(
                               new File(
                                   "pdfbookmark_addPrevious_String_"
                                   + "int_double_int_example.pdf"));
        PdfDocument document = new PdfDocument(writer);
        document.setPageMode(PdfPageMode.USEOUTLINES);
        PdfPage page;

        <span class="cc">// Adds pages and bookmarks to the PdfDocument object
        // created above</span>
        for (int i = 1; i <= 20; i++)
        {
            page = new PdfPage();
            page.setMeasurementUnit(PdfMeasurement.MU_INCHES);
            page.writeText("This is page number " + i, 2, 2);
            document.add(page);
            document.addBookmark("Page " + (i),
                                 document.getBookmarkRoot(),
                                 i);
        }

        <span class="cc">// Creates a reference to the first bookmark</span>
        PdfBookmark bm = document.getBookmarkRoot().getFirstChild();
<a name="addPrevious_String_int_double_int"></a>
        <span class="cc">// Creates a new bookmark immediately before the above
        // bookmark. When selected, this new bookmark will lead to
        // page 14. The page will be zoomed to tightly fit its entire
        // width inside the window. The top right corner of the
        // window will be positioned at 100 points down the top
        // edge of the page.</span>
        bm = bm.<span class="ck">addPrevious("Link to page 14 with FITH top 100",
                        14,
                        100,
                        PdfBookmark.FITH)</span>;

        <span class="cc">// Creates a new bookmark immediately before the above
        // bookmark. When selected, this new bookmark will lead to
        // page 14. The page will be zoomed to tightly fit its
        // entire width of its bounding box inside the window. The
        // top right corner of the window will be positioned at 100
        // points down the top edge of the page.</span>
        bm = bm.<span class="ck">addPrevious("Link to page 14 with FITBH top 100",
                        14,
                        100,
                        PdfBookmark.FITBH)</span>;

        <span class="cc">// Creates a new bookmark immediately before the above
        // bookmark. When selected, this new bookmark will lead to
        // page 14. The page will be zoomed to tightly fit entire
        // height of its bounding box inside the window. The left
        // edge of the window will be positioned 100 points off the
        // left edge of the page.</span>
        bm = bm.<span class="ck">addPrevious("Link to page 14 with FITBV left 100",
                        14,
                        100,
                        PdfBookmark.FITBV)</span>;

        <span class="cc">// Creates a new bookmark immediately before the above
        // bookmark. When selected, this new bookmark will lead to
        // page 14. The page will be zoomed to tightly fit entire
        // height of the page inside the window. The left edge of the
        // window will be positioned 100 points off the left edge of
        // the page.</span>
        bm.<span class="ck">addPrevious("Link to page 14 with FITV left 100",
                    14,
                    100,
                    PdfBookmark.FITV)</span>;

        document.setOpenAfterSave(true);
        document.write();
        writer.dispose();
    }

    <span class="cc">// This code segment demonstrates the use of an overloaded
    // addPrevious() method.</span>
    public void addPrevious_String_int_double_double_double_double_Example()
        throws IOException, PdfException
    {
        PdfWriter writer = PdfWriter.fileWriter(
                               new File(
                                    "pdfbookmark_addPrevious_"
                                    + "String_int_double_double_"
                                    + "double_double_example.pdf"));
        PdfDocument document = new PdfDocument(writer);
        document.setPageMode(PdfPageMode.USEOUTLINES);
        PdfPage page;

        <span class="cc">// Adds pages and bookmarks to the PdfDocument object
        // created above</span>
        for (int i = 1; i <= 20; i++)
        {
            page = new PdfPage();
            page.setMeasurementUnit(PdfMeasurement.MU_INCHES);
            page.writeText("This is page number " + i, 2, 2);
            document.add(page);
            document.addBookmark("Page " + (i),
                                 document.getBookmarkRoot(),
                                 i);
        }

        <span class="cc">// Creates a reference to the first bookmark</span>
        PdfBookmark bm = document.getBookmarkRoot().getFirstChild();
<a name="addPrevious_String_int_double_double_double_double"></a>
        <span class="cc">// Adds a new bookmark immediately before the above bookmark.
        // When selected, this new bookmark leads to a rectangular
        // area on page 13.</span>
        bm.<span class="ck">addPrevious(
                "Jump to rectangular area on page 13",
                13,                     <span class="cc">// pageNo</span>
                100, 100, 400, 400)</span>;    <span class="cc">// left, bottom, right, top</span>

        <span class="cc">// Identifies the rectangular area on page 13</span>
        document.drawRect(100, 100, 400, 400, "13");

        document.setOpenAfterSave(true);
        document.write();
        writer.dispose();
    }


    <span class="cc">// This code segment demonstrates the use of an overloaded
    // addPrevious() method.</span>
    public void addPrevious_String_int_double_double_double_Example()
        throws IOException, PdfException
    {
        PdfWriter writer = PdfWriter.fileWriter(
                               new File(
                                   "pdfbookmark_addPrevious_String_int_"
                                   + "double_double_double_"
                                   + "example.pdf"));
        PdfDocument document = new PdfDocument(writer);
        document.setPageMode(PdfPageMode.USEOUTLINES);
        PdfPage page;

        <span class="cc">// Adds pages and bookmarks to the PdfDocument object
        // created above</span>
        for (int i = 1; i <= 20; i++)
        {
            page = new PdfPage();
            page.setMeasurementUnit(PdfMeasurement.MU_INCHES);
            page.writeText("This is page number " + i, 2, 2);
            document.add(page);
            document.addBookmark("Page " + (i),
                                 document.getBookmarkRoot(),
                                 i);
        }

        <span class="cc">// Creates a reference to the first bookmark</span>
        PdfBookmark bm = document.getBookmarkRoot().getFirstChild();
<a name="addPrevious_String_int_double_double_double"></a>
        <span class="cc">// Adds a bookmark immediately before the above bookmark.
        // When selected, this new bookmark leads to 
        // position (100, 200) on page 12 with the page zoom set  
        // at 125%.</span>
        bm.addPrevious(
            "Jump to position (100, 200) on page 12 with zoom 125%",
            12,             <span class="cc">// pageNo</span>
            100, 200,       <span class="cc">// left, top</span>
            125);           <span class="cc">// zoom</span>

        <span class="cc">// Identifies position (100, 200) on page 12</span>
        document.writeText(". (100, 200)", 100, 200, "12");

        document.setOpenAfterSave(true);
        document.write();
        writer.dispose();
    }


    <span class="cc">// This code segment demonstrates the use of an overloaded
    // addPrevious() method.</span>
    public void addPrevious_String_int_Example() throws IOException,
        PdfException
    {
        PdfWriter writer = PdfWriter.fileWriter(
                               new File(
                                   "pdfbookmark_"
                                   + "addPrevious_String_int_"
                                   + "example.pdf"));
        PdfDocument document = new PdfDocument(writer);
        document.setPageMode(PdfPageMode.USEOUTLINES);
        PdfPage page;

        <span class="cc">// Adds pages and bookmarks to the PdfDocument object
        // created above</span>
        for (int i = 1; i <= 20; i++)
        {
            page = new PdfPage();
            page.setMeasurementUnit(PdfMeasurement.MU_INCHES);
            page.writeText("This is page number " + i, 2, 2);
            document.add(page);
            document.addBookmark("Page " + (i),
                                 document.getBookmarkRoot(),
                                 i);
        }

        <span class="cc">// Creates a reference to the first bookmark</span>
        PdfBookmark bm = document.getBookmarkRoot().getFirstChild();
<a name="addPrevious_String_int"></a>
        <span class="cc">// Adds a new bookmark immediately before the above first
        // bookmark. When selected, this new bookmark leads to 
        // page 15.</span>
        bm.<span class="ck">addPrevious("Link to page 15", 15)</span>;

        document.setOpenAfterSave(true);
        document.write();
        writer.dispose();
    }


    <span class="cc">// This code segment demonstrates the use of an overloaded
    // addPrevious() method.</span>
    public void addPrevious_int_String_Example() throws IOException,
        PdfException
    {
        PdfWriter writer = PdfWriter.fileWriter(
                               new File(
                                   "pdfbookmark_addPrevious_int_"
                                   + "String_example.pdf"));
        PdfDocument document = new PdfDocument(writer);
        document.setPageMode(PdfPageMode.USEOUTLINES);
        PdfPage page;

        <span class="cc">// Adds pages and bookmarks to the PdfDocument object
        // created above</span>
        for (int i = 1; i <= 20; i++)
        {
            page = new PdfPage();
            page.setMeasurementUnit(PdfMeasurement.MU_INCHES);
            page.writeText("This is page number " + i, 2, 2);
            document.add(page);
            document.addBookmark("Page " + (i),
                                 document.getBookmarkRoot(),
                                 i);
        }

        <span class="cc">// Creates a reference to the first bookmark</span>
        PdfBookmark bm = document.getBookmarkRoot().getFirstChild();
<a name="addPrevious_int_String"></a>
        <span class="cc">// Adds a bookmark immediately before the first bookmark. When
        // selected, it performs the named action.</span>
        bm.<span class="ck">addPrevious(PdfAction.NAMED_NEXTPAGE,
                       "Move to the next page")</span>;

        document.setOpenAfterSave(true);
        document.write();
        writer.dispose();
    }

    <span class="cc">// This code segment demonstrates the use of an overloaded
    // addNext() method.
    // This code segment requires pathnames of an application and
    // and an ordinary file.
    // To use pathnames supplied as command-line arguments, use 
    // a statement in main() similar to:
    // obj.addNext_String_String_boolean_Example(args[0], args[1]);</span>
    public void addNext_String_String_boolean_Example(String appPathname, String filePathname)
        throws IOException,
        PdfException
    {
        PdfWriter writer = PdfWriter.fileWriter(
                              "PdfBookmark_addNext_String_"
                              + "String_boolean_example.pdf");
        PdfDocument document = new PdfDocument(writer);
        document.setPageMode(PdfPageMode.USEOUTLINES);
        PdfPage page;

        <span class="cc">// Adds pages and bookmarks to the PdfDocument object
        // created above</span>
        for (int i = 1; i <= 20; i++)
        {
            page = new PdfPage();
            page.writeText("This is page number " + i);
            document.add(page);
            document.addBookmark("Page " + (i), 
                                 document.getBookmarkRoot(), 
                                 i);
        }

        <span class="cc">// Creates a reference to the first bookmark</span>
        PdfBookmark bm = document.getBookmarkRoot().getFirstChild();
<a name="addNext_String_String_boolean"></a>
        <span class="cc">// Adds a new bookmark immediately after the above bookmark.
        // When selected, this new bookmark launches the specified
        // application.</span>
        bm = bm.<span class="cc">addNext("Launch \"" + appPathname + "\"",
                        appPathname,
                        false)</span>;


        <span class="cc">// Adds a new bookmark immediately after the above bookmark.
        // When selected, this new bookmark prints the specified
        // file.</span>
        bm.<span class="cc">addNext("Print \"" + filePathname + "\"",
                   filePathname,
                   true)</span>;

        document.setOpenAfterSave(true);
        document.write();
        writer.dispose();
    }


    <span class="cc">// This code segment demonstrates the use of an overloaded
    // addNext() method.</span>
    public void addNext_String_int_PdfRect_Example()
        throws IOException, PdfException
    {
        PdfWriter writer = PdfWriter.fileWriter(
                              "PdfBookmark_addNext_String_"
                              + "int_PdfRect_example.pdf");
        PdfDocument document = new PdfDocument(writer);
        document.setPageMode(PdfPageMode.USEOUTLINES);
        PdfPage page;

        <span class="cc">// Adds pages and bookmarks to the PdfDocument object
        // created above</span>
        for (int i = 1; i <= 20; i++)
        {
            page = new PdfPage();
            page.writeText("This is page number " + i);
            document.add(page);
            document.addBookmark("Page " + (i),
                                 document.getBookmarkRoot(),
                                 i);
        }

        <span class="cc">// Creates a reference to the first bookmark</span>
        PdfBookmark bm = document.getBookmarkRoot().getFirstChild();

        <span class="cc">// Creates a rectangle </span>
        PdfRect rectangle = new PdfRect(100, 150, 200, 250);

        <span class="cc">// Draws the rectangle on page 1</span>
        document.drawRect(rectangle, "1");
<a name="addNext_String_int_PdfRect"></a>
        <span class="cc">// Adds a new bookmark immediately after the above bookmark.
        // When selected, it leads to the above rectangle on page 1.</span>
        bm.<span class="ck">addNext("Link to rectangle on Page 1",
                   1,
                   rectangle)</span>;

        document.setOpenAfterSave(true);
        document.write();
        writer.dispose();
    }


    <span class="cc">// This code segment demonstrates the use of an overloaded
    // addNext() method.</span>
    public void addNext_String_int_int_Example() throws IOException,
        PdfException
    {
        PdfWriter writer = PdfWriter.fileWriter(
                              "PdfBookmark_addNext_String_"
                              + "int_int_example.pdf");
        PdfDocument document = new PdfDocument(writer);
        document.setPageMode(PdfPageMode.USEOUTLINES);
        PdfPage page;

        <span class="cc">// Adds pages and bookmarks to the PdfDocument object
        // created above</span>
        for (int i = 1; i <= 20; i++)
        {
            page = new PdfPage();
            page.writeText("This is page number " + i);
            document.add(page);
            document.addBookmark("Page " + (i),
                                 document.getBookmarkRoot(),
                                 i);
        }

        <span class="cc">// Creates a reference to the first bookmark</span>
        PdfBookmark bm = document.getBookmarkRoot().getFirstChild();
<a name="addNext_String_int_int"></a>
        <span class="cc">// Adds a new bookmark immediately after the first bookmark.
        // When selected, this new bookmark leads to page 14. Page 14
        // is displayed with entire height and width of its bounding
        // box tightly fit inside the window.</span>
        bm.<span class="ck">addNext("Link to Page 14 with FITB",
                   14,
                   PdfBookmark.FITB)</span>;

        document.setOpenAfterSave(true);
        document.write();
        writer.dispose();
    }


    <span class="cc">// This code segment demonstrates the use of an overloaded
    // addNext() method.</span>
    public void addNext_String_int_double_int_Example()
        throws IOException, PdfException
    {
        PdfWriter writer = PdfWriter.fileWriter(
                               new File(
                                   "pdfbookmark_addNext_String_"
                                   + "int_double_int_example.pdf"));
        PdfDocument document = new PdfDocument(writer);
        document.setPageMode(PdfPageMode.USEOUTLINES);
        PdfPage page;

        <span class="cc">// Adds pages and bookmarks to the PdfDocument object
        // created above</span>
        for (int i = 1; i <= 20; i++)
        {
            page = new PdfPage();
            page.setMeasurementUnit(PdfMeasurement.MU_INCHES);
            page.writeText("This is page number " + i, 2, 2);
            document.add(page);
            document.addBookmark("Page " + (i),
                                 document.getBookmarkRoot(),
                                 i);
        }

        <span class="cc">// Creates a reference to the first bookmark</span>
        PdfBookmark bm = document.getBookmarkRoot().getFirstChild();
<a name="addNext_String_int_double_int"></a>
        <span class="cc">// Creates a new bookmark immediately after the above
        // bookmark. When selected, this new bookmark will lead to 
        // page 14. The page will be zoomed to tightly fit its entire    
        // width inside the window. The top right corner of the  
        // window will be positioned at 100 points down the top 
        // edge of the page.</span>
        bm = bm.<span class="ck">addNext("Link to page 14 with FITH top 100",
                        14,
                        100,
                        PdfBookmark.FITH)</span>;

        <span class="cc">// Creates a new bookmark immediately after the above
        // bookmark. When selected, this new bookmark will lead to
        // page 14. The page will be zoomed to tightly fit its
        // entire width of its bounding box inside the window. The
        // top right corner of the window will be positioned at 100
        // points down the top edge of the page.</span>
        bm = bm.<span class="ck">addNext("Link to page 14 with FITBH top 100",
                        14,
                        100,
                        PdfBookmark.FITBH)</span>;

        <span class="cc">// Creates a new bookmark immediately after the above
        // bookmark. When selected, this new bookmark will lead to
        // page 14. The page will be zoomed to tightly fit entire
        // height of its bounding box inside the window. The left
        // edge of the window will be positioned 100 points off the
        // left edge of the page.</span>
        bm = bm.<span class="ck">addNext("Link to page 14 with FITBV left 100",
                        14,
                        100,
                        PdfBookmark.FITBV)</span>;

        <span class="cc">// Creates a new bookmark immediately after the above
        // bookmark. When selected, this new bookmark will lead to
        // page 14. The page will be zoomed to tightly fit entire
        // height of the page inside the window. The left edge of the
        // window will be positioned 100 points off the left edge of
        // the page.</span>
        bm.<span class="ck">addNext("Link to page 14 with FITV left 100",
                   14,
                   100,
                   PdfBookmark.FITV)</span>;

        document.setOpenAfterSave(true);
        document.write();
        writer.dispose();
    }


    <span class="cc">// This code segment demonstrates the use of an overloaded
    // addNext() method.</span>
    public void addNext_String_int_double_double_double_double_Example()
        throws IOException, PdfException
    {
        PdfWriter writer = PdfWriter.fileWriter(
                               new File(
                                       "pdfbookmark_addNext_String_"
                                       + "int_double_double_double_"
                                       + "double_example.pdf"));
        PdfDocument document = new PdfDocument(writer);
        document.setPageMode(PdfPageMode.USEOUTLINES);
        PdfPage page;

        <span class="cc">// Adds pages and bookmarks to the PdfDocument object
        // created above</span>
        for (int i = 1; i <= 20; i++)
        {
            page = new PdfPage();
            page.setMeasurementUnit(PdfMeasurement.MU_INCHES);
            page.writeText("This is page number " + i, 2, 2);
            document.add(page);
            document.addBookmark("Page " + (i),
                                 document.getBookmarkRoot(),
                                 i);
        }

        <span class="cc">// Creates a reference to the first bookmark</span>
        PdfBookmark bm = document.getBookmarkRoot().getFirstChild();
<a name="addNext_String_int_double_double_double_double"></a>
        <span class="cc">// Creates a new bookmark immediately after the above
        // bookmark. When selected, this new bookmark leads to a  
        // rectangular area on page 13.</span>
        bm.<span class="ck">addNext(
                "Jump to rectangular area on page 13",
                13,                     <span class="cc">// pageNo</span>
                100, 100, 400, 400)</span>;    <span class="cc">// left, bottom, right, top</span>

        <span class="cc">// Identifies the rectangular area on page 13</span>
        document.drawRect(100, 100, 400, 400, "13");

        document.setOpenAfterSave(true);
        document.write();
        writer.dispose();
    }


    <span class="cc">// This code segment demonstrates the use of an overloaded
    // addNext() method.</span>
    public void addNext_String_int_double_double_double_Example()
        throws IOException, PdfException
    {
        PdfWriter writer = PdfWriter.fileWriter(
                               new File(
                                   "pdfbookmark_addNext_String_int_"
                                   + "double_double_double_"
                                   + "example.pdf"));
        PdfDocument document = new PdfDocument(writer);
        document.setPageMode(PdfPageMode.USEOUTLINES);
        PdfPage page;

        <span class="cc">// Adds pages and bookmarks to the PdfDocument object
        // created above</span>
        for (int i = 1; i <= 20; i++)
        {
            page = new PdfPage();
            page.setMeasurementUnit(PdfMeasurement.MU_INCHES);
            page.writeText("This is page number " + i, 2, 2);
            document.add(page);
            document.addBookmark("Page " + (i),
                                 document.getBookmarkRoot(),
                                 i);
        }

        <span class="cc">// Creates a reference to the first bookmark</span>
        PdfBookmark bm = document.getBookmarkRoot().getFirstChild();
<a name="addNext_String_int_double_double_double"></a>
        <span class="cc">// Adds a new bookmark that leads to position (100, 200) on
        // page 12 with page zoom set at 125%</span>
        bm.<span class="ck">addNext(
            "Jump to position (100, 200) on page 12 with zoom 125%",
            12,             <span class="cc">// pageNo</span>
            100, 200,       <span class="cc">// left, top</span>
            125)</span>;           <span class="cc">// zoom</span>

        <span class="cc">// Identifies position (100, 200) on page 12</span>
        document.writeText(". (100, 200)", 100, 200, "12");

        document.setOpenAfterSave(true);
        document.write();
        writer.dispose();
    }


    <span class="cc">// This code segment demonstrates the use of an overloaded
    // addNext() method.</span>
    public void addNext_String_int_Example() throws IOException,
        PdfException
    {
        PdfWriter writer = PdfWriter.fileWriter(
                               new File(
                                   "pdfbookmark_"
                                   + "addNext_String_int_"
                                   + "example.pdf"));
        PdfDocument document = new PdfDocument(writer);
        document.setPageMode(PdfPageMode.USEOUTLINES);
        PdfPage page;

        <span class="cc">// Adds sample pages and bookmarks to the document</span>
        for (int i = 1; i <= 20; i++)
        {
            page = new PdfPage();
            page.setMeasurementUnit(PdfMeasurement.MU_INCHES);
            page.writeText("This is page number " + i, 2, 2);
            document.add(page);
            document.addBookmark("Page " + (i),
                                 document.getBookmarkRoot(),
                                 i);
        }

        <span class="cc">// Creates a reference to the first bookmark</span>
        PdfBookmark bm = document.getBookmarkRoot().getFirstChild();
<a name="addNext_String_int"></a>
        <span class="cc">// Adds a new bookmark after the above bookmark. When
        // selected, it leads to page 15.</span>
        bm.<span class="ck">addNext("Jump to page 15", 15)</span>;

        document.setOpenAfterSave(true);
        document.write();
        writer.dispose();
    }


    <span class="cc">// This code segment demonstrates the use of an overloaded
    // addNext() method.</span>
    public void addNext_int_String_Example() throws IOException,
        PdfException
    {
        PdfWriter writer = PdfWriter.fileWriter(
                               new File(
                                   "pdfbookmark_addNext_int_"
                                   + "String_example.pdf"));
        PdfDocument document = new PdfDocument(writer);
        document.setPageMode(PdfPageMode.USEOUTLINES);
        PdfPage page;

        <span class="cc">// Adds pages and bookmarks to the PdfDocument object
        // created above</span>
        for (int i = 1; i <= 20; i++)
        {
            page = new PdfPage();
            page.setMeasurementUnit(PdfMeasurement.MU_INCHES);
            page.writeText("This is page number " + i, 2, 2);
            document.add(page);
            document.addBookmark("Page " + (i),
                                 document.getBookmarkRoot(),
                                 i);
        }

        <span class="cc">// Creates a reference to the first bookmark</span>
        PdfBookmark bm = document.getBookmarkRoot().getFirstChild();
<a name="addNext_int_String"></a>
        <span class="cc">// Creates a new bookmark immediately after the above
        // bookmark. A named action is added to this new bookmark.</span>
        bm.<span class="ck">addNext(PdfAction.NAMED_LASTPAGE,
                   "Jump to last page")</span>;

        document.setOpenAfterSave(true);
        document.write();
        writer.dispose();
    }


    <span class="cc">// This code segment creates a bookmark and adds a URI
    // action to it.</span>
    public void addActionURI_Example() throws IOException,
        PdfException
    {
        PdfWriter writer = PdfWriter.fileWriter(
                               new File(
                                   "pdfbookmark_addActionURI_"
                                   + "example.pdf"));
        PdfDocument document = new PdfDocument(writer);
        document.setPageMode(PdfPageMode.USEOUTLINES);
        PdfPage page;

        <span class="cc">// Adds pages and bookmarks to the PdfDocument object
        // created above</span>
        for (int i = 1; i <= 20; i++)
        {
            page = new PdfPage();
            page.setMeasurementUnit(PdfMeasurement.MU_INCHES);
            page.writeText("This is page number " + i, 2, 2);
            document.add(page);
            document.addBookmark("Page " + (i),
                                 document.getBookmarkRoot(),
                                 i);
        }

        <span class="cc">// Creates a reference to the first bookmark</span>
        PdfBookmark bm = document.getBookmarkRoot().getFirstChild();
<a name="addActionURI"></a>
        <span class="cc">// Adds a URI action to the first bookmark. Here, the action
        // can make the viewer to resolve the URI of the Gnostice
        // home page.</span>
        bm.<span class="ck">addActionURI("http://www.gnostice.com/")</span>;

        bm.setTitle("Go to page 1 and display Gnostice home "
                    + "page in a browser");

        document.setOpenAfterSave(true);
        document.write();
        writer.dispose();
    }


    <span class="cc">// This code segment adds a remote go-to action to a bookmark.</span>
    public void addActionRemoteGoTo_Example() throws IOException,
        PdfException
    {
        <span class="cc">// Creates a sample PDF file with 20 pages</span>
        CreateSamplePDF("test.pdf", 20);

        PdfWriter writer = PdfWriter.fileWriter(
                               new File(
                                   "pdfbookmark_addActionRemote"
                                   + "GoTo_example.pdf"));
        PdfDocument document = new PdfDocument(writer);
        PdfPage page;

        <span class="cc">Adds pages and bookmarks to the PdfDocument object
        // created above</span>
        for (int i = 1; i <= 20; i++)
        {
            page = new PdfPage();
            page.setMeasurementUnit(PdfMeasurement.MU_INCHES);
            page.writeText("This is page number " + i, 2, 2);
            document.add(page);
            document.addBookmark("Page " + (i),
                                 document.getBookmarkRoot(),
                                 i);
        }

        <span class="cc">// Creates a reference to the first bookmark</span>
        PdfBookmark bm = document.getBookmarkRoot().getFirstChild();
<a name="addActionRemoteGoTo"></a>
        <span class="cc">// Adds a remote go-to action to the first bookmark. Here,
        // the action can make the viewer to open page 8 of the  
        // sample PDF file created above in a new window.</span>
        bm.<span class="ck">addActionRemoteGoTo("test.pdf",
                               PdfBookmark.getRemoteGoToInstance(8),
                               true)</span>;

        bm.setTitle("Open page 8 of test.pdf in a new window");

        document.setOpenAfterSave(true);
        document.write();
        writer.dispose();
    }


    <span class="cc">// This code segment adds a named action to a few bookmarks.</span>
    public void addActionNamed_Example() throws IOException,
        PdfException
    {
        PdfWriter writer = PdfWriter.fileWriter(
                               new File("pdfbookmark_addAction"
                                        + "Named_example.pdf"));
        PdfDocument document = new PdfDocument(writer);<a name="PdfDocument_setPageMode"></a>
        document.<span class="ck">setPageMode(PdfPageMode.USEOUTLINES)</span>;
        PdfPage page;
<a name="PdfDocument_getBookmarkRoot"></a>
        <span class="cc">// Adds pages and bookmarks to the PdfDocument object
        // created above</span>
        for (int i = 1; i <= 20; i++)
        {
            page = new PdfPage();
            page.setMeasurementUnit(PdfMeasurement.MU_INCHES);
            page.writeText("This is page number " + i, 2, 2);
            document.add(page);
            document.addBookmark("Page " + (i),
                                 document.<span class="ck">getBookmarkRoot()</span>,
                                 i);
        }
<a name="PdfDocument_getFirstBookmark"></a>
        <span class="cc">// Creates a reference to the first bookmark</span>
        PdfBookmark bm = document.<span class="ck">getFirstBookmark()</span>;
<a name="addActionNamed"></a>
        <span class="cc">// Adds named actions to the bookmarks</span>
        bm.<span class="ck">addActionNamed(PdfAction.NAMED_LASTPAGE)</span>;
        bm.setTitle("Go to last page");
        bm = bm.getNext();
        bm.<span class="ck">addActionNamed(PdfAction.NAMED_FIRSTPAGE)</span>;
        bm.setTitle("Go to first page");
        bm = bm.getNext();
        bm.<span class="ck">addActionNamed(PdfAction.NAMED_NEXTPAGE)</span>;
        bm.setTitle("Go to next page");
        bm = bm.getNext();
        bm.<span class="ck">addActionNamed(PdfAction.NAMED_PREVPAGE)</span>;
        bm.setTitle("Go to previous page");

        document.setOpenAfterSave(true);
        document.write();
        writer.dispose();
    }


    <span class="cc">// This code segment adds a launch action to a bookmark.</span>
    public void addActionLaunch_Example() throws IOException,
        PdfException
    {
        PdfWriter writer = PdfWriter.fileWriter(
            new File("pdfbookmark_addActionLaunch_example.pdf")
                                                );
        PdfDocument document = new PdfDocument(writer);
        document.setPageMode(PdfPageMode.USEOUTLINES);
        PdfPage page;

        <span class="cc">// Adds pages and bookmarks to the PdfDocument object
        // created above</span>
        for (int i = 1; i <= 20; i++)
        {
            page = new PdfPage();
            page.setMeasurementUnit(PdfMeasurement.MU_INCHES);
            page.writeText("This is page number " + i, 2, 2);
            document.add(page);
            document.addBookmark("Page " + (i),
                                 document.getBookmarkRoot(),
                                 i);
        }

        <span class="cc">// Creates a reference to the first bookmark</span>
        PdfBookmark bm = document.getBookmarkRoot().getFirstChild();
<a name="addActionLaunch"></a>
        <span class="cc">// Adds a launch action to the first bookmark</span>
        bm.<span class="ck">addActionLaunch("Document.txt", false)</span>;

        bm.setTitle("Launch file");

        document.setOpenAfterSave(true);
        document.write();
        writer.dispose();
    }


    <span class="cc">// This code segment adds a Javascript action to a bookmark.</span>
    public void addActionJavaScript_Example() throws IOException,
        PdfException
    {
        PdfWriter writer = PdfWriter.fileWriter(
           new File("pdfbookmark_addactionJavaScript_example.pdf")
                                                );
        PdfDocument document = new PdfDocument(writer);
        document.setPageMode(PdfPageMode.USEOUTLINES);
        PdfPage page;

        <span class="cc">// Adds pages and bookmarks to the PdfDocument object
        // created above</span>
        for (int i = 1; i <= 20; i++)
        {
            page = new PdfPage();
            page.setMeasurementUnit(PdfMeasurement.MU_INCHES);
            page.writeText("This is page number " + i, 2, 2);
            document.add(page);
            document.addBookmark("Page " + (i),
                                  document.getBookmarkRoot(),
                                  i);
        }

        <span class="cc">// Creates a reference to the first bookmark</span>
        PdfBookmark bm = document.getBookmarkRoot().getFirstChild();
<a name="addActionJavaScript"></a>
        <span class="cc">// Adds a Javascript action to this bookmark</span>
        bm.<span class="ck">addActionJavaScript("app.alert(\"Hello, world!\")")</span>;

        bm.setTitle("Get a \"hello world\" message");

        document.setOpenAfterSave(true);
        document.write();
        writer.dispose();
    }


    <span class="cc">// This code segment adds a go-to action to a bookmark using an
    // overloaded addAction() method.</span>
    public void addActionGoTo_int_PdfRect_Example()
        throws IOException, PdfException
    {
        PdfWriter writer = PdfWriter.fileWriter(
                               new File(
                                   "pdfbookmark_addactiongoto_"
                                   + "int_PdfRect_example.pdf"));
        PdfDocument document = new PdfDocument(writer);
        document.setPageMode(PdfPageMode.USEOUTLINES);
        PdfPage page;

        <span class="cc">// Adds pages and bookmarks to the PdfDocument object
        // created above</span>
        for (int i = 1; i <= 20; i++)
        {
            page = new PdfPage();
            page.setMeasurementUnit(PdfMeasurement.MU_INCHES);
            page.writeText("This is page number " + i, 2, 2);
            document.add(page);
            document.addBookmark("Page " + (i),
                                  document.getBookmarkRoot(),
                                  i);
        }

        <span class="cc">// Creates a reference to the first bookmark</span>
        PdfBookmark bm = document.getBookmarkRoot().getFirstChild();

        <span class="cc">// Creates a rectangle </span>
        PdfRect rectangle = new PdfRect(100, 150, 200, 250);
<a name="addActionGoTo_int_PdfRect"></a>
        <span class="cc">// Adds a go-to action to this bookmark. The action can
        // change the current view of the document to the area 
        // occupied by the above rectangle on page 10.</span>
        bm.<span class="ck">addActionGoto(10, rectangle)</span>;

        bm.setTitle(
               "Jump to rectangle (100, 150, 200, 250) on page 10");
        document.drawRect(rectangle, "10");

        document.setOpenAfterSave(true);
        document.write();
        writer.dispose();
    }


    <span class="cc">// This code segment adds a go-to action to a bookmark using an
    // overloaded addAction() method.</span>
    public void addActionGoTo_int_int_Example() throws IOException,
        PdfException
    {
        PdfWriter writer = PdfWriter.fileWriter(
                               new File(
                                   "pdfbookmark_addactiongoto_"
                                   + "int_int_example.pdf"));
        PdfDocument document = new PdfDocument(writer);
        document.setPageMode(PdfPageMode.USEOUTLINES);
        PdfPage page;

        <span class="cc">// Adds pages and bookmarks to the PdfDocument object
        // created above</span>
        for (int i = 1; i <= 20; i++)
        {
            page = new PdfPage();
            page.setMeasurementUnit(PdfMeasurement.MU_INCHES);
            page.writeText("This is page number " + i, 2, 2);
            document.add(page);
            document.addBookmark("Page " + (i),
                                 document.getBookmarkRoot(),
                                 i);
        }

        <span class="cc">// Creates a reference to the first bookmark</span>
        PdfBookmark bm = document.getBookmarkRoot().getFirstChild();
<a name="addActionGoTo_int_int"></a>
        <span class="cc">// Adds a go-to action to this bookmark. The action can
        // change the current view of the document to display entire
        // width and height of page 10's bounding box tightly fit
        // inside the window.</span>
        bm.<span class="ck">addActionGoto(10,PdfBookmark.FITB)</span>;

        bm.setTitle("Jump to page 10, FITB");

        document.setOpenAfterSave(true);
        document.write();
        writer.dispose();
    }


    <span class="cc">// This code segment adds a go-to action to a bookmark using an
    // overloaded addAction() method.</span>
    public void addActionGoTo_int_double_int_Example()
        throws IOException, PdfException
    {
        PdfWriter writer = PdfWriter.fileWriter(
                               new File(
                                   "pdfbookmark_addactiongoto_"
                                   + "int_double_int_example.pdf"));
        PdfDocument document = new PdfDocument(writer);
        document.setPageMode(PdfPageMode.USEOUTLINES);
        PdfPage page;

        <span class="cc">// Adds pages and bookmarks to the PdfDocument object
        // created above</span>
        for (int i = 1; i <= 20; i++)
        {

            page = new PdfPage(600, 300);
            page.setMeasurementUnit(PdfMeasurement.MU_INCHES);
            page.writeText("This is page number " + i, 2, 2);
            document.add(page);
            document.addBookmark("Page " + (i),
                                 document.getBookmarkRoot(),
                                 i);
        }

        <span class="cc">// Creates a reference to the first bookmark</span>
        PdfBookmark bm = document.getBookmarkRoot().getFirstChild();
<a name="addActionGoTo_int_double_int"></a>
        <span class="cc">// Adds a go-to action to the bookmark. The action can change
        // the current view to page 10, which will be zoomed to 
        // tightly fit its entire width inside the window. The top 
        // edge of the window will be positioned 100 points down the 
        // top edge of the page.</span>
        bm.<span class="ck">addActionGoto(10, 100, PdfBookmark.FITH)</span>;

        bm.setTitle("Jump to page 10 with FITH top 100");

        <span class="cc">// Creates a reference to the bookmark next to the current</span>
        bm = bm.getNext();

        <span class="cc">// Adds a go-to action to the bookmark. The action can change
        // the current view to page 10, which will be zoomed to
        // tightly fit the entire width of its bounding box inside
        // the window. The top edge of the window will be positioned
        // 100 points down the top edge of the page.</span>
        bm.<span class="ck">addActionGoto(10, 100, PdfBookmark.FITBH)</span>;

        bm.setTitle("Jump to page 10 with FITBH top 100");
        bm = bm.getNext();

        <span class="cc">// Adds a go-to action to the bookmark. The action can change
        // the current view to page 10, which will be zoomed to
        // tightly fit the entire height of its bounding box inside
        // the window. The left edge of the window will be positioned
        // 100 points off the left edge of the page.</span>
        bm.<span class="ck">addActionGoto(10, 100, PdfBookmark.FITBV)</span>;

        bm.setTitle("Jump to page 10 with FITBV left 100");
        bm = bm.getNext();

        <span class="cc">// Adds a go-to action to the bookmark. The action change
        // the current view to page 10, which will be zoomed to
        // tightly fit its entire height inside the window. The left
        // edge of the window will be positioned 100 points off the
        // left edge of the page.</span>
        bm.<span class="ck">addActionGoto(10, 100, PdfBookmark.FITV)</span>;

        bm.setTitle("Jump to page 10 with FITV left 100");

        <span class="cc">// Identifies the position (100, 100) on page 10</span>
        document.writeText(".(100, 100)", 100, 100, "10");

        document.setOpenAfterSave(true);
        document.write();
        writer.dispose();
    }


    <span class="cc">// This code segment adds a go-to action to a bookmark using an
    // overloaded addAction() method.</span>
    public void addActionGoTo_int_double_double_double_double_Example()
        throws IOException, PdfException
    {
        PdfWriter writer = PdfWriter.fileWriter(
                               new File("pdfbookmark_addactiongoto_"
                                   + "int_double_double_double_"
                                   + "double_example.pdf"));
        PdfDocument document = new PdfDocument(writer);
        document.setPageMode(PdfPageMode.USEOUTLINES);
        PdfPage page;

        <span class="cc">// Adds pages and bookmarks to the PdfDocument object
        // created above</span>
        for (int i = 1; i <= 20; i++)
        {
            page = new PdfPage();
            page.writeText("This is page number " + i);
            document.add(page);
            document.addBookmark("Page " + (i),
                                 document.getBookmarkRoot(),
                                 i);
        }

        document.drawRect(100, 100, 300, 250, "1");

        <span class="cc">// Creates a reference to the first bookmark</span>
        PdfBookmark bm = document.getBookmarkRoot().getFirstChild();
<a name="addActionGoto_int_double_double_double_double"></a>
        <span class="cc">// Adds a go-to action to the first bookmark. The action can
        // change the current view to a rectangular area on page 1.
        // The top-left corner of the rectangular area is at
        // (100, 100). The rectangular area is 300 points wide and
        // 250 points long.</span>
        bm.<span class="ck">addActionGoto(1, 100, 100, 300, 250)</span>;

        bm.setTitle("Go to rectangular area on page 1");

        document.setOpenAfterSave(true);
        document.write();
        writer.dispose();
    }


    <span class="cc">// This code segment adds a go-to action to a bookmark using an
    // overloaded addAction() method.</span>
    public void addActionGoTo_int_double_double_double_Example()
        throws IOException, PdfException
    {
        PdfWriter writer = PdfWriter.fileWriter(
                               new File(
                                   "pdfbookmark_addactiongoto_"
                                   + "int_double_double_double_"
                                   + "example.pdf"));

        PdfDocument document = new PdfDocument(writer);
        document.setPageMode(PdfPageMode.USEOUTLINES);
        PdfPage page;

        <span class="cc">// Adds pages and bookmarks to the PdfDocument object
        // created above</span>
        for (int i = 1; i <= 20; i++)
        {
            page = new PdfPage();
            page.setMeasurementUnit(PdfMeasurement.MU_INCHES);
            page.writeText("This is page number " + i, 2, 2);

            document.add(page);
            document.addBookmark("Page " + (i),
                                 document.getBookmarkRoot(),
                                 i);
        }

        <span class="cc">// Creates a reference to the first bookmark</span>
        PdfBookmark bm = document.getBookmarkRoot().getFirstChild();
<a name="addActionGoTo_int_double_double_double"></a>
        <span class="cc">// Adds a go-to action to the first bookmark. The action can
        // change the current view of the document to position 
        // (200, 100) on page 10 with page zoom set at 215%.</span>
        bm.<span class="ck">addActionGoto(10, 200, 100, 215)</span>;

        bm.setTitle("Jump to page 10 position (200, 100) zoom 215%");

        <span class="cc">// Identifies the position (200, 100)</span>
        document.writeText(". (200, 100)", 200, 100, "10");

        document.setOpenAfterSave(true);
        document.write();
        writer.dispose();
    }


    <span class="cc">// This code segment adds a go-to action to a bookmark using an
    // overloaded addAction() method.</span>
   public void addActionGoTo_int_Example() throws IOException,
        PdfException
    {
        PdfWriter writer = PdfWriter.fileWriter(
                               new File(
                                   "pdfbookmark_addactiongoto_"
                                   + "int_example.pdf"));
        PdfDocument document = new PdfDocument(writer);
        document.setPageMode(PdfPageMode.USEOUTLINES);
        PdfPage page;

        <span class="cc">// Adds pages and bookmarks to the PdfDocument object
        // created above</span>
        for (int i = 1; i <= 20; i++)
        {
            page = new PdfPage();
            page.setMeasurementUnit(PdfMeasurement.MU_INCHES);
            page.writeText("This is page number " + i, 2, 2);
            document.add(page);
            document.addBookmark("Page " + (i),
                                 document.getBookmarkRoot(),
                                 i);
        }

        <span class="cc">// Creates a reference to the first bookmark</span>
        PdfBookmark bm = document.getBookmarkRoot().getFirstChild();
<a name="addActionGoTo_int"></a>
        <span class="cc">// Adds a go-to action to this bookmark. The action can
        // changes the current view to page 10.</span>
        bm.<span class="ck">addActionGoto(10)</span>;
        bm.setTitle("Jump to page 10");

        document.setOpenAfterSave(true);
        document.write();
        writer.dispose();
    }

    <span class="cc">// This code segment creates a sample PDF file.</span>
    public void CreateSamplePDF(String sampleFilePathname,
        int noOfPages) throws IOException, PdfException
    {
        PdfWriter writer = PdfWriter.fileWriter(
                              new File(sampleFilePathname));
        PdfDocument document = new PdfDocument(writer);
        PdfPage page;

        <span class="cc">// Adds pages and bookmarks to the PdfDocument object
        // created above</span>
        for (int i = 1; i <= noOfPages; i++)
        {
            page = new PdfPage();
            page.writeText("This is page number "
                           + i
                           + " of \""
                           + sampleFilePathname
                           + "\"");
            document.add(page);
            document.addBookmark("Page " + (i),
                                 document.getBookmarkRoot(),
                                 i);
        }

        document.setOpenAfterSave(false);
        document.write();
        writer.dispose();
    }
}
</pre>
 </body>
</html>